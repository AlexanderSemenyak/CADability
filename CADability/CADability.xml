<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CADability</name>
    </assembly>
    <members>
        <member name="T:CADability.Actions.ActionException">
            <summary>
            Exception Klasse f√ºr Ausnahmen bei der Aktionsverarbeitung.
            Die Eigenschaft Message von System.Exception ist mit einem sinnvollen Text gesetzt.
            </summary>
        </member>
        <member name="T:CADability.Actions.Action">
            <summary>
            Base class for all "Actions". An Action is an object, that receives various MouseInput events
            once it has been "Set" by a call to <see cref="M:CADability.IFrame.SetAction(CADability.Actions.Action)"/>. After performing the 
            required tasks, the Action is removed from the ActionStack and the previous active action
            is resumed. The action on the bottom of the action stack is the <see cref="T:CADability.Actions.SelectObjectsAction"/>.
            Use the <see cref="T:CADability.Actions.ConstructAction"/> for typical drawing purposes, because it provides a convenient
            set of methods. If an action object is set by a call to <see cref="M:CADability.IFrame.SetAction(CADability.Actions.Action)"/> the following
            sequence of calls to the new and the old action is executed:
            <list type="bullet">
            <item><description>new action: <see cref="M:CADability.Actions.Action.OnSetAction"/> (as a reaction to <see cref="M:CADability.IFrame.SetAction(CADability.Actions.Action)"/>)</description></item>
            <item><description>old action: <see cref="M:CADability.Actions.Action.OnInactivate(CADability.Actions.Action,System.Boolean)"/> (may call <see cref="M:CADability.IFrame.RemoveActiveAction"/> if desired)</description></item>
            <item><description>new action: <see cref="M:CADability.Actions.Action.OnActivate(CADability.Actions.Action,System.Boolean)"/> (from now on the new action may receive mouse events).</description></item>
            <item><description>After the new action calls <see cref="M:CADability.Actions.Action.RemoveThisAction"/> or someone calls <see cref="M:CADability.IFrame.RemoveActiveAction"/>
            the new action will receive <see cref="M:CADability.Actions.Action.OnInactivate(CADability.Actions.Action,System.Boolean)"/>. </description></item>
            <item><description>The old action (if still on the stack)
            will receive a call to <see cref="M:CADability.Actions.Action.OnActivate(CADability.Actions.Action,System.Boolean)"/> and finally </description></item>
            <item><description>the new action will receive a call to
            <see cref="M:CADability.Actions.Action.OnRemoveAction"/> as a last call.</description></item></list>
            </summary>
        </member>
        <member name="F:CADability.Actions.Action.MenuId">
            <summary>
            Contains the menu id of the command that invoked this action. used in <see cref="M:CADability.Actions.Action.OnUpdateCommand(System.String,CADability.UserInterface.CommandState)"/>.
            </summary>
        </member>
        <member name="F:CADability.Actions.Action.IgnoreForSnap">
            <summary>
            a list of objects that are not considered when snapping is resolved. Usually the 
            object currently under construction (if any) is in this list.
            </summary>
        </member>
        <member name="F:CADability.Actions.Action.ViewType">
            <summary>
            If ViewType is not null, only those mouseevents are forwarded which come from a view
            of that type.
            </summary>
        </member>
        <member name="F:CADability.Actions.Action.OnlyThisModel">
            <summary>
            If OnlyThisModel is not null, only those mouseevents are forwarded which come from a view
            that presents this model.
            </summary>
        </member>
        <member name="F:CADability.Actions.Action.OnlyThisView">
            <summary>
            If OnlyThisView is not null, only those mouseevents are forwarded which come from this view.
            </summary>
        </member>
        <member name="P:CADability.Actions.Action.IsActive">
            <summary>
            Checks, whether this action is the currently active action
            </summary>
        </member>
        <member name="P:CADability.Actions.Action.CurrentMouseView">
            <summary>
            The view from which the last OnMouseMove/Up/Down was evoked
            </summary>
        </member>
        <member name="M:CADability.Actions.Action.#ctor">
            <summary>
            Creates a new Action and sets some default.
            </summary>
        </member>
        <member name="M:CADability.Actions.Action.GetID">
            <summary>
            Must be implemented by derived class. Returns an identification string. All CADability actions
            return the unique strings like "Draw.Line.TwoPoints" or "Zoom"
            </summary>
            <returns>the identification of the action</returns>
        </member>
        <member name="F:CADability.Actions.Action.UseFilter">
            <summary>
            Use the active filter objects of the project for adjusting the mouse position (snap etc.)
            </summary>
        </member>
        <member name="P:CADability.Actions.Action.WorksOnLayoutView">
            <summary>
            Determins, wether this action can work on a <see cref="T:CADability.LayoutView"/>. Default implementation
            returns false. Override, if your Action can work on a LayoutView.
            </summary>
        </member>
        <member name="M:CADability.Actions.Action.OnSetAction">
            <summary>
            First event that is called when the action is set via <see cref="M:CADability.IFrame.SetAction(CADability.Actions.Action)"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.Action.OnRemoveAction">
            <summary>
            Last event that is called when the action is removed from the action stack.
            </summary>
        </member>
        <member name="M:CADability.Actions.Action.OnActivate(CADability.Actions.Action,System.Boolean)">
            <summary>
            The action has been activated. From now on it will receive calls of the mouse event methods
            like <see cref="M:CADability.Actions.Action.OnMouseMove(CADability.Substitutes.MouseEventArgs,CADability.IView)"/>.
            </summary>
            <param name="OldActiveAction">the action that was active</param>
            <param name="SettingAction">true: if the action has bee set, false: if the action is resumed</param>
        </member>
        <member name="M:CADability.Actions.Action.OnInactivate(CADability.Actions.Action,System.Boolean)">
            <summary>
            The action has been inactivated. No more calls to the mouse events will appear.
            </summary>
            <param name="NewActiveAction">the action that will become active</param>
            <param name="RemovingAction">true: if called because the action is removed, false: if called when a new action is set on top of this action</param>
        </member>
        <member name="M:CADability.Actions.Action.OnDisplayChanged(CADability.DisplayChangeArg)">
            <summary>
            Zooming or scrolling changed the visible aspect of the current view.
            </summary>
            <param name="d">the reason for the call</param>
        </member>
        <member name="M:CADability.Actions.Action.OnViewsChanged">
            <summary>
            Will be called if new views (<see cref="T:CADability.LayoutView"/> or <see cref="T:CADability.ModelView"/>) are created
            or removed from the project. Default implementation does nothing.
            </summary>
        </member>
        <member name="M:CADability.Actions.Action.OnMouseDown(CADability.Substitutes.MouseEventArgs,CADability.IView)">
            <summary>
            Override this method to react on the MouseDown event.
            </summary>
            <param name="e">MouseEventArgs of the call</param>
            <param name="vw">the IView which contains the mouse</param>
        </member>
        <member name="M:CADability.Actions.Action.OnMouseEnter(System.EventArgs,CADability.IView)">
            <summary>
            Override this method to react on the MouseEnter event.
            </summary>
            <param name="e">MouseEventArgs of the call</param>
            <param name="vw">the IView which contains the mouse</param>
        </member>
        <member name="M:CADability.Actions.Action.OnMouseHover(System.EventArgs,CADability.IView)">
            <summary>
            Override this method to react on the MouseHover event.
            </summary>
            <param name="e">MouseEventArgs of the call</param>
            <param name="vw">the IView which contains the mouse</param>
        </member>
        <member name="M:CADability.Actions.Action.OnMouseLeave(System.EventArgs,CADability.IView)">
            <summary>
            Override this method to react on the MouseLeave event.
            </summary>
            <param name="e">MouseEventArgs of the call</param>
            <param name="vw">the IView which contains the mouse</param>
        </member>
        <member name="M:CADability.Actions.Action.OnMouseMove(CADability.Substitutes.MouseEventArgs,CADability.IView)">
            <summary>
            Override this method to react on the MouseMove event.
            </summary>
            <param name="e">MouseEventArgs of the call</param>
            <param name="vw">the IView which contains the mouse</param>
        </member>
        <member name="M:CADability.Actions.Action.OnMouseUp(CADability.Substitutes.MouseEventArgs,CADability.IView)">
            <summary>
            Override this method to react on the MouseUp event.
            </summary>
            <param name="e">MouseEventArgs of the call</param>
            <param name="vw">the IView which contains the mouse</param>
        </member>
        <member name="M:CADability.Actions.Action.OnMouseWheel(CADability.Substitutes.MouseEventArgs,CADability.IView)">
            <summary>
            Override this method to react on the MouseWheel event.
            </summary>
            <param name="e">MouseEventArgs of the call</param>
            <param name="vw">the IView which contains the mouse</param>
        </member>
        <member name="M:CADability.Actions.Action.OnEnter">
            <summary>
            This method will be called when the user presses the enter key. The default
            implementation does nothing.
            </summary>
        </member>
        <member name="M:CADability.Actions.Action.OnEscape">
            <summary>
            This method will be called when the user presses the escape key. The default
            implementation does nothing.
            </summary>
        </member>
        <member name="M:CADability.Actions.Action.OnDelete">
            <summary>
            This method will be called when the user presses the delete key. The default
            implementation does nothing.
            </summary>
        </member>
        <member name="M:CADability.Actions.Action.OnEnter(System.Object)">
            <summary>
            This method will be called when the user presses the enter key. The default
            implementation does nothing.
            </summary>
        </member>
        <member name="M:CADability.Actions.Action.OnEscape(System.Object)">
            <summary>
            This method will be called when the user presses the escape key. The default
            implementation does nothing.
            </summary>
        </member>
        <member name="M:CADability.Actions.Action.OnDelete(System.Object)">
            <summary>
            This method will be called when the user presses the delete key. The default
            implementation does nothing.
            </summary>
        </member>
        <member name="M:CADability.Actions.Action.OnTab(System.Object)">
            <summary>
            This method will be called when the user presses the tab key. The default
            implementation does nothing.
            </summary>
        </member>
        <member name="M:CADability.Actions.Action.AutoRepeat">
            <summary>
            Defines, whether this Action should be repeated after it was removed. The default 
            implementation returns false, override it if you want a different behaviour.
            </summary>
            <returns>true to repeat, false otherwise</returns>
        </member>
        <member name="M:CADability.Actions.Action.AutoRepeated">
            <summary>
            Called before <see cref="M:CADability.Actions.Action.OnSetAction"/> is called, if the action is created by the "autorepeat" machanism.
            </summary>
        </member>
        <member name="P:CADability.Actions.Action.Frame">
            <summary>
            Returns the frame (<see cref="T:CADability.IFrame"/>) of the context of this action. The frame also gives
            access to the project.
            </summary>
        </member>
        <member name="P:CADability.Actions.Action.FeedBack">
            <summary>
            Provides access to the "feedback" object, which is used to define visual feedback of the action.
            When objects in a model are modified, you will immediately see the feedback (if this model is visible in a <see cref="T:CADability.ModelView"/>).
            But sometimes you need more feedback, like arrows or imtermediate objects that change while the mousinput (or controlcenter input
            or some other conditions) change. Add those objects to the feedback and they will be displayed immediately.
            </summary>
        </member>
        <member name="P:CADability.Actions.Action.AutoCursor">
            <summary>
            true: this class takes responsibility for setting the cursor,
            false: the derived class manages the cursor.
            </summary>
        </member>
        <member name="P:CADability.Actions.Action.ChangeTabInControlCenter">
            <summary>
            true: this class may change the selection in the control center
            false: this class may not change the selection in the control center
            </summary>
        </member>
        <member name="M:CADability.Actions.Action.SetCursor(CADability.GeoObject.SnapPointFinder.DidSnapModes,CADability.IView)">
            <summary>
            Sets the cursor int hte provided view according to the provided snap mode. The cursors may be redefined
            by calling <see cref="M:CADability.Actions.Action.SetCursor(CADability.GeoObject.SnapPointFinder.DidSnapModes,System.String)"/>
            </summary>
            <param name="DidSnap"></param>
            <param name="vw"></param>
        </member>
        <member name="M:CADability.Actions.Action.SetCursor(CADability.GeoObject.SnapPointFinder.DidSnapModes,System.String)">
            <summary>
            Sets the cursor name for different snap situation. The <see cref="T:CADability.UserInterface.CursorTable"/>
            contains the resources of the named cursors.
            </summary>
            <param name="DidSnap">the snap situation</param>
            <param name="CursorName">the name of the cursor</param>
        </member>
        <member name="M:CADability.Actions.Action.WorldPoint(System.Drawing.Point)">
            <summary>
            Returns a <see cref="T:CADability.GeoPoint"/> in the model coordinate system that corresponds
            to the Client point. No snapping is performed. The drawing plane of the projection is used
            </summary>
            <param name="p">Point in the client coordinate system of the active view</param>
            <returns>the model coordinate</returns>
        </member>
        <member name="M:CADability.Actions.Action.WorldPoint(CADability.Substitutes.MouseEventArgs,CADability.IView)">
            <summary>
            Returns a <see cref="T:CADability.GeoPoint"/> in the model coordinate system that corresponds
            to the MouseEventArgs point. No snapping is performed. The drawing plane of the projection is used
            </summary>
            <param name="e">a MouseEventArgs object, that contains the window coordinate</param>
            <param name="vw">the IView of the MouseEventArgs</param>
            <returns>the model coordinate</returns>
        </member>
        <member name="M:CADability.Actions.Action.WorldPoint(CADability.GeoPoint2D)">
            <summary>
            Returns a 3D point in the world coordinate system corresponding to the given 2D point
            in the active drawing plane.
            </summary>
            <param name="p">2D point in the drawing plane</param>
            <returns>3D point in the world coordinate system</returns>
        </member>
        <member name="M:CADability.Actions.Action.SnapPoint(CADability.Substitutes.MouseEventArgs,CADability.IView,CADability.GeoObject.SnapPointFinder.DidSnapModes@)">
            <summary>
            Returns a snap point according to the current snap settings in the given <see cref="T:CADability.IView"/>.
            Sets the cursor if <see cref="P:CADability.Actions.Action.AutoCursor"/> is true.
            </summary>
            <param name="e">point in the view</param>
            <param name="vw">the view</param>
            <param name="DidSnap">kind of snap operation that was used</param>
            <returns>the best snapping point found</returns>
        </member>
        <member name="M:CADability.Actions.Action.SnapPoint(CADability.Substitutes.MouseEventArgs,CADability.GeoPoint,CADability.IView,CADability.GeoObject.SnapPointFinder.DidSnapModes@)">
            <summary>
            Returns a snap point according to the current snap settings in the given <see cref="T:CADability.IView"/> with respect to a basepoint.
            Sets the cursor if <see cref="P:CADability.Actions.Action.AutoCursor"/> is true.
            </summary>
            <param name="e">point in the view</param>
            <param name="BasePoint">the base point</param>
            <param name="vw">the view</param>
            <param name="DidSnap">kind of snap operation that was used</param>
            <returns>the best snapping point found</returns>
        </member>
        <member name="M:CADability.Actions.Action.WorldLength(System.Double)">
            <summary>
            Coverts the given length in pixel (screen) coordinates to w length in the model
            coordinate system of the active view
            </summary>
            <param name="ViewLength"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.Action.WorldDirection(CADability.Angle)">
            <summary>
            Returns a 3D vector in the world coordinate system corresponding to the given angle
            in the active drawing plane.
            </summary>
            <param name="a">Angle of the requested direction</param>
            <returns>Direction vector of the angle a</returns>
        </member>
        <member name="P:CADability.Actions.Action.WorldViewSize">
            <summary>
            Liefert ein Gr√∂√üe im Koordinatensystem des Modells, die in etwa dem aktuell dargestellten
            Ausschnitt entspricht.
            </summary>
        </member>
        <member name="P:CADability.Actions.Action.ActiveDrawingPlane">
            <summary>
            Returns the active drawing plane, that is the drawing plane of the active view.
            </summary>
        </member>
        <member name="M:CADability.Actions.Action.CurveHitTest(CADability.GeoObject.ICurve,System.Drawing.Point)">
            <summary>
            Detects whether a given curve (<see cref="T:CADability.GeoObject.ICurve"/>) is touched by the
            cursor position given in mousePoint in respect to the active view. The setting
            "Select.Pick" gives the maximum pixel distance for the test.
            </summary>
            <param name="curve">the curve to test</param>
            <param name="mousePoint">the mouse position</param>
            <returns>true if the mouse position is close to the curve</returns>
        </member>
        <member name="M:CADability.Actions.Action.GetObjectsUnderCursor(System.Drawing.Point)">
            <summary>
            Returns a list of <see cref="T:CADability.GeoObject.IGeoObject"/>s that are close to the mouse point
            with respect to the current view.
            </summary>
            <param name="mousePoint">the mouse position to test</param>
            <returns>list of touched IGeoObjects</returns>
        </member>
        <member name="P:CADability.Actions.Action.CurrentMousePosition">
            <summary>
            Returns the current mouse position.
            </summary>
        </member>
        <member name="M:CADability.Actions.Action.RemoveThisAction">
            <summary>
            Removes this action from the action stack if this action is on top of the action stack
            </summary>
        </member>
        <member name="M:CADability.Actions.Action.OnCommand(System.String)">
            <summary>
            Override if you want to process menu commands with your action.
            Default implementation always returns false.
            </summary>
            <param name="MenuId">the menu id to process</param>
            <returns>true if processed, false if not</returns>
        </member>
        <member name="M:CADability.Actions.Action.OnUpdateCommand(System.String,CADability.UserInterface.CommandState)">
            <summary>
            Override if you also override <see cref="M:CADability.Actions.Action.OnCommand(System.String)"/> to manipulate the appearance
            of the corresponding menu item or the state of the toolbar button. The default implementation
            checks whether the MenuId from the parameter corresponds to the menuId member variable
            and checks the item if appropriate
            </summary>
            <param name="MenuId">menu id the command state is queried for</param>
            <param name="CommandState">the command state to manipulate</param>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.Action.OnSelected(System.String,System.Boolean)">
            <summary>
            Override if your action needs to handle menu selection changes (very rare)
            </summary>
            <param name="MenuId"></param>
            <param name="selected"></param>
        </member>
        <member name="T:CADability.Actions.ActionFeedBack">
            <summary>
            A container for Feedback objects. These are objects that give visual feedback
            to the user while a <see cref="T:CADability.Actions.Action"/> is in progress. Currently
            you can add <see cref="T:CADability.GeoObject.IGeoObject"/>s or <see cref="T:CADability.Actions.FeedBackPlane"/>s that provide the feedback.
            </summary>
        </member>
        <member name="M:CADability.Actions.ActionFeedBack.Add(CADability.Actions.IFeedBack)">
            <summary>
            Adds an <see cref="T:CADability.Actions.IFeedBack"/> to the list of feedback objects. The object
            shows in the appropriate view and the view reflects all changes of the object.
            Currently there are the GeoObjects and the <see cref="T:CADability.Actions.FeedBackPlane"/> object which support the IFeedBack interface.
            You could also implement your own IFeedBack objects.
            </summary>
            <param name="feedBackObject">the object to show</param>
            <returns>the index in the list, may be used for <see cref="M:CADability.Actions.ActionFeedBack.Remove(System.Int32)"/></returns>
        </member>
        <member name="M:CADability.Actions.ActionFeedBack.Remove(CADability.Actions.IFeedBack)">
            <summary>
            Removes an previously added <see cref="T:CADability.Actions.IFeedBack"/> from the list of feedback objects.
            The object is no longer displayed.
            </summary>
            <param name="feedBackObject">Object to remove</param>
        </member>
        <member name="M:CADability.Actions.ActionFeedBack.Remove(System.Int32)">
            <summary>
            Removes an <see cref="T:CADability.Actions.IFeedBack"/> object by its index from the list of the displayed objects.
            </summary>
            <param name="index">Index of the object to remove</param>
        </member>
        <member name="M:CADability.Actions.ActionFeedBack.AddSelected(CADability.GeoObject.IGeoObject)">
            <summary>
            Adds a GeoObject to the list of displayed objects. In contrary to <see cref="M:CADability.Actions.ActionFeedBack.Add(CADability.Actions.IFeedBack)"/> the object is displayed
            in the select color and the select display mode.
            </summary>
            <param name="feedBackObject">Object to add</param>
            <returns>the index in the list, may be used for <see cref="M:CADability.Actions.ActionFeedBack.RemoveSelected(System.Int32)"/></returns>
        </member>
        <member name="M:CADability.Actions.ActionFeedBack.RemoveSelected(CADability.GeoObject.IGeoObject)">
            <summary>
            Removes the provided and previously added object from the list of "display as selected" objects
            </summary>
            <param name="feedBackObject">Object to remove</param>
        </member>
        <member name="M:CADability.Actions.ActionFeedBack.RemoveSelected(System.Int32)">
            <summary>
            Removes the object (identified by its index) from the list of "display as selected" objects
            </summary>
            <param name="index">index of the object to remove</param>
        </member>
        <member name="M:CADability.Actions.ActionFeedBack.ClearSelected">
            <summary>
            Removes all objects from the list of "display as selected" objects
            </summary>
        </member>
        <member name="M:CADability.Actions.ActionFeedBack.ClearAll">
            <summary>
            Removes all feedback objects.
            </summary>
        </member>
        <member name="M:CADability.Actions.ActionFeedBack.FeedbackPoint(CADability.IFrame)">
            <summary>
            Creates a point which can be used as a feedback object. The point uses the feedback color as specified
            in the project settings.
            </summary>
            <param name="frame">Frame to gat access to the settings</param>
            <returns>A <see cref="T:CADability.GeoObject.Point"/> as a feedback object</returns>
        </member>
        <member name="M:CADability.Actions.ActionFeedBack.FeedbackPoint(CADability.IFrame,CADability.GeoObject.PointSymbol)">
            <summary>
            
            </summary>
            <param name="frame">Frame to gat access to the settings</param>
            <param name="pointSymbol">The icon, in which the point is beiing displayed</param>
            <returns>A <see cref="T:CADability.GeoObject.Point"/> as a feedback object</returns>
        </member>
        <member name="T:CADability.Actions.Constr3DBox">
            <summary>
            Construction of a box. Normally startpoint (left downer corner) width, length and height define the box in x-y-z-orientation.
            Definition of x-, y- or z-direction by defining a vector refering to the startpoint change the axis-parallel orientation of that box-axis
            </summary>
        </member>
        <member name="T:CADability.Actions.Constr3DCone">
            <summary>
            Construction of an cone. the base construction uses startpoint, endpoint and radii. Startpoint and endpoint define the cone middleaxis (direction in space and height).
            You can specify the height before as distance from startpoint.
            If you specify radius instead of endpoint, you get a cone standing upright on active drawing plane.
            </summary>
        </member>
        <member name="T:CADability.Actions.Constr3DCylinder">
            <summary>
            Construction of an cylinder. the base construction uses startpoint, endpoint and radius. Startpoint and endpoint define the cylinder middleaxis (direction in space and height).
            You can specify the height before as distance from startpoint.
            If you specify radius instead of endpoint, you get a cylinder standing on active drawing plane.
            </summary>
        </member>
        <member name="M:CADability.Actions.Constr3DFaceExtrude.OnSetAction">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnSetAction"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.Constr3DFaceExtrude.GetID">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.GetID"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.Constr3DFaceExtrude.OnDone">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnDone"/>
            </summary>
        </member>
        <member name="T:CADability.Actions.Constr3DScrewPath">
            <summary>
            Action to screw a path along an axis.
            Path and axis must reside in a common plane.
            An open path will be screwed with a pitch connectiong the start- and endpoint (a line is added when needed)
            and a solid object is created with this path and a cylindrical kernel.
            A closed path can be screwed with aa arbitrary pitch.
            </summary>
        </member>
        <member name="T:CADability.Actions.Constr3DSphere">
            <summary>
            Construction of an sphere. The construction uses centerpoint and radius. 
            </summary>
        </member>
        <member name="T:CADability.Actions.Constr3DTorus">
            <summary>
            Construction of an torus. The construction uses centerpoint and radii with torus in drawingplane. 
            If optional endpoint is fixed, centerpoint and endpoint define the torus middleaxis (direction in space).
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrArc2PointsRadius">
            <summary>
            
            </summary>
            
        </member>
        <member name="T:CADability.Actions.ConstrArc2TangentsPoint">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrArc2TangentsRadius">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrArc3Points">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrArc3Tangents">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrArcCenterRadius">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrArcCenterStartEnd">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrArcTangentPointRadius">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrBSplinePoints">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrCircle2Points">
            <summary>
            
            </summary>
            
        </member>
        <member name="T:CADability.Actions.ConstrCircleTwoPointsRadius">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrCircle2TangentsPoint">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrCircle2TangentsRadius">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrCircle3Points">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrCircle3Tangents">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrCircleCenterPoint">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrCircleCenterRadius">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrCirclePoint2Tangents">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrCircleTangentPointRadius">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrDefaults">
            <summary>
            All default values of the construct actions are static members of this class. 
            So they can be stored from one construction to the other.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrDefaults.DefaultStartPoint">
            <summary>
            The startpoint of a line. Normally it is set at the end of a line-constrution to the endpoint of that line, so a new line can start at the endpoint of the last line by using the TAB-button within the startpoint-textfield to accept the default point.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrDefaults.DefaultLineLength">
            <summary>
            The default length of a line. Normally it is set at the end of a line-constrution to the length of that line, so a new line can start with the length of the last line by using the TAB-button within the length-textfield to accept the default length.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrDefaults.DefaultLineDirection">
            <summary>
            The default direction of a line. Normally it is set at the end of a line-constrution to the direction of that line, so a new line can start with the direction of the last line by using the TAB-button within the direction-textfield to accept the default direction.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrDefaults.DefaultLineAngle">
            <summary>
            The default angle of a line. Normally it is set at the end of a line-constrution to the angle of that line, so a new line can start with the angle of the last line by using the TAB-button within the angle-textfield to accept the default angle.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrDefaults.DefaultLineDist">
            <summary>
            The default dist of a parallel-line. Normally it is set at the end of a line-constrution to the distance of that line to its parallel source, so a new line can start with the distance of the last line by using the TAB-button within the length-textfield to accept the default angle.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrDefaults.DefaultArcCenter">
            <summary>
            The default center of a circle or arc. Normally it is set at the end of an arc-constrution to the center of that arc/circle, so a new arc/circle can start with the center of the last arc/circle by using the TAB-button within the center-textfield to accept the default center.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrDefaults.DefaultArcRadius">
            <summary>
            The default radius of a circle or arc. Normally it is set at the end of an arc-constrution to the radius of that arc/circle, so a new arc/circle can start with the radius of the last arc/circle by using the TAB-button within the radius-textfield to accept the default radius.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrDefaults.DefaultArcDiameter">
            <summary>
            The default diameter of a circle or arc. Normally it is set at the end of an arc-constrution to the diameter of that arc/circle, so a new arc/circle can start with the radius of the last arc/circle by using the TAB-button within the diameter-textfield to accept the default diameter.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrDefaults.DefaultArcDirection">
            <summary>
            The default direction of an arc. Normally it is set at the end of an arc-constrution to the direction of that arc, so a new arc can start with the direction of the last arc by using the TAB-button within the direction-textfield to accept the default direction.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrDefaults.DefaultEllipseCenter">
            <summary>
            The default center of an ellipse or ellipsenarc. Normally it is set at the end of an ellipse-constrution to the center of that ellipse, so a new ellipse can start with the center of the last ellipse by using the TAB-button within the center-textfield to accept the default center.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrDefaults.DefaultEllipseMajorRadius">
            <summary>
            The default majorradius of an ellipse or ellipsearc. Normally it is set at the end of an ellipse-constrution to the majorradius of that ellipse(arc), so a new ellipse(arc) can start with the majorradius of the last ellipse(arc) by using the TAB-button within the majorradius-textfield to accept the default majorradius.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrDefaults.DefaultEllipseMinorRadius">
            <summary>
            The default minorradius of an ellipse or ellipsearc. Normally it is set at the end of an ellipse-constrution to the minorradius of that ellipse(arc), so a new ellipse(arc) can start with the minorradius of the last ellipse(arc) by using the TAB-button within the minorradius-textfield to accept the default minorradius.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrDefaults.DefaultScaleDistort">
            <summary>
            The default way of the scale-modification of activated objects. If DefaultDistort is true, there can be different factors in the main axis, which will distort the objects 
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrDefaults.DefaultCopyObjects">
            <summary>
            The default way of the modification of activated objects. If DefaultCopyObjects is true, a copy of the activated objects is modified, if it is false, the original objects are modified.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrDefaults.DefaultRoundRadius">
            <summary>
            The default radius of the round-actions in the tools-menue. Normally it is set at the end of a round-action to current radius, so a round action can start with the radius of the last action by using the TAB-button within the roundradius-textfield to accept the default radius.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrDefaults.DefaultRectWidth">
            <summary>
            The default width of a rectangle/parallelogram. Normally it is set at the end of a rectangle-constrution to the width of that rectangle, so a new rectangle/parallelogram can start with the width of the last rectangle/parallelogram by using the TAB-button within the width-textfield to accept the default width.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrDefaults.DefaultRectHeight">
            <summary>
            The default height of a rectangle/parallelogram. Normally it is set at the end of a rectangle-constrution to the height of that rectangle, so a new rectangle/parallelogram can start with the height of the last rectangle/parallelogram by using the TAB-button within the height-textfield to accept the default height.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrDefaults.DefaultBoxHeight">
            <summary>
            The default height of a 3D-box. Normally it is set at the end of a box-constrution to the height of that box, so a new box can start with the height of the last box by using the TAB-button within the height-textfield to accept the default height.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrDefaults.DefaultDirectionPoint">
            <summary>
            The default method for the way to detect the direction from an object. 0=startpoint, 1=start/endpoint, 2=endpoint, 3=midpoint, 4=direction of mouseposition
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrDefaults.DefaultDirectionOffset">
            <summary>
            The default method for the way to detect the direction-offset from an object. 0=original, 1=right, 2=opposite, 3=left 
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrDefaults.DefaultCutOffLength">
            <summary>
            The default length of the cut-off actions in the tools-menue. Normally it is set at the end of a cut off-action to current length, so a cut off action can start with the length of the last action by using the TAB-button within the cut off length-textfield to accept the default length.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrDefaults.DefaultCutOffAngle">
            <summary>
            The default angle of the cut-off actions in the tools-menue. Normally it is set at the end of a cut-off action to current angle, so a cut off action can start with the angle of the last action by using the TAB-button within the cut off angle-textfield to accept the default angle.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrDefaults.DefaultCutOffMethod">
            <summary>
            The default method of the cut-off actions in the tools-menue. Normally it is set at the end of a cut-off action to current method, so a cut off action can start with the method of the last action by using the TAB-button within the cut off angle-textfield to accept the default method.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrDefaults.DefaultDimPoint">
            <summary>
            The locationpoint of a dimension. Normally it is set at the end of a dimension-constrution to the current position of that dimension, so a new dimension can start at the location point of the last dimension (plus an offset) by using the TAB-button within the dimensionpoint-textfield to accept the default point.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrDefaults.DefaultDimensionMethod">
            <summary>
            The default way of collecting and handling points for a dimension ("0" means only 2 Points, "1" means multiple point input, "2" means 2-point-dimension referred to the first point). 
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrDefaults.DefaultDimensionPointMethod">
            <summary>
            The default way of collecting a point for a point or labeling dimension ("true" means snap points, "false" means perpendicular foot points of objects). 
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrDefaults.DefaultTextSize">
            <summary>
            The default size of the text in text constructions. Normally it is set at the end of a text construction to current size, so next text construction can start with the size of the last construction by using the TAB-button within the cut off length-textfield to accept the default length.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrDefaults.DefaultExtrudeDirection">
            <summary>
            The default direction of an extrude-action.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrDefaults.DefaultLinePosition">
            <summary>
            The default position a tangent line with direction (Middle or End). 
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstrDefaults.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstrDefaults.GetID">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.GetID"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:CADability.Actions.ConstrDimensionArc">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrDimensionDirection3Points">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrDimensionDirection4Points">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrDimensionDirectionObjects">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrDimensionDistance">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrDimensionLabelPoint">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrDimensionPoints">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrDrawingPlaneOffset">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrEllipse2PointsDirections">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrEllipseArc2PointsDirections">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrEllipseArcCenterRadius">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrEllipseCenterRadius">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrHatchInside">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrHatchInside.HatchMode">
            <summary>
            A mode used when creating shapes from curves.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrHatchInside.HatchMode.simple">
            <summary>
            A simple shape without holes and in case of an inner point the smallest shape that contains this point
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrHatchInside.HatchMode.excludeHoles">
            <summary>
            All holes which are contained in the shape are also included in the result
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrHatchInside.HatchMode.hull">
            <summary>
            The simple biggest shape without holes defined by the curves and which in case of a provided inner point contains that point
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrHatchInside.HatchMode.allShapes">
            <summary>
            All shapes that cane be created from the provided curves.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstrHatchInside.GetID">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.GetID"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.ConstrHatchInside.OnSetAction">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnSetAction"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstrHatchInside.AutoRepeat">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.AutoRepeat"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.ConstrHatchInside.OnRemoveAction">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnRemoveAction"/>
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrLine2Points">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrLine2Tangents">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrLineBisectAngle">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrLineLengthAngle">
            <summary>
            Construction of a line, specifying a poit, a length and a direction of the 
            line. All construct actions are internal, but the base class "ConstructAction"
            is public.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstrLineLengthAngle.line">
            <summary>
            This is the line. It will be manipulated during the construction and finally
            added to the model
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstrLineLengthAngle.#ctor">
            <summary>
            Constructuor, no need to do anything
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstrLineLengthAngle.OnSetAction">
            <summary>
            Overrides OnSetAction of ConstructAction. Here we create the new line
            and define the input for the construction
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstrLineLengthAngle.OnRemoveAction">
            <summary>
            Overrices OnRemoveAction of ConstructAction, when the action is removed.
            There is actually no need to override it
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstrLineLengthAngle.GetID">
            <summary>
            Overrides GetID of Action. Each action mus have an ID. It is usually the
            MenuID that starts the action. It must be different from any other action ID.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.ConstrLineLengthAngle.OnDone">
            <summary>
            Overrides OnDone of ConstructAction. the defaulStartPoint is updated with
            the value of the endpoint of the line (so the next line will start here.
            There is no need to update the other default values, this is done
            automatically. Make sure to call the bas implementation, because there
            the line will be added to the model.
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrLineMiddlePerp">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrLineParallel">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrLineParallelPoint">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrLinePointPerp">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrLineTangentAngle">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrPicture">
            <summary>
            Sample code for a CADability Action which places a bitmap picture object onto a surface
            of some solid object. To use this Action call Frame.SetAction
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstrPicture.GetID">
            <summary>
            Must be overriden, returns some ID for the action
            </summary>
            <returns>The ID</returns>
        </member>
        <member name="M:CADability.Actions.ConstrPicture.OnSetAction">
            <summary>
            Overrides ConstructAction.OnSetAction. Provides the input fields and some initialsation
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstrPicture.OnSetScalingFactor(System.Double)">
            <summary>
            Will be called when some number is entered into the scaling factor input field
            </summary>
            <param name="val">The new value</param>
            <returns>true, if accepted</returns>
        </member>
        <member name="M:CADability.Actions.ConstrPicture.OnGetScalingFactor">
            <summary>
            Called by the scaling factor input field to determine which number to display
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.ConstrPicture.OnSetPosition(CADability.GeoPoint,CADability.GeoObject.SnapPointFinder.DidSnapModes)">
            <summary>
            Called when the position input is changed
            </summary>
            <param name="p">The new location point</param>
            <param name="didSnap">Information on point snapping</param>
            <returns>true, if point is accepted</returns>
        </member>
        <member name="M:CADability.Actions.ConstrPicture.OnGetPosition">
            <summary>
            Called by the position input field to get the current location
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.ConstrPicture.OnSetFileName(System.String)">
            <summary>
            Called by the filename input field when the filename changes
            </summary>
            <param name="val">The new file name</param>
        </member>
        <member name="M:CADability.Actions.ConstrPicture.OnGetFileName">
            <summary>
            Called by the filename input field when the filename string is required
            </summary>
            <returns>the filename</returns>
        </member>
        <member name="T:CADability.Actions.ConstrPicturePoint2Directions">
            <summary>
            Sample code for a CADability Action which places a bitmap picture object onto a surface
            of some solid object. To use this Action call Frame.SetAction
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstrPicturePoint2Directions.GetID">
            <summary>
            Must be overriden, returns some ID for the action
            </summary>
            <returns>The ID</returns>
        </member>
        <member name="M:CADability.Actions.ConstrPicturePoint2Directions.OnSetAction">
            <summary>
            Overrides ConstructAction.OnSetAction. Provides the input fields and some initialsation
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstrPicturePoint2Directions.OnSetFileName(System.String)">
            <summary>
            Called by the filename input field when the filename changes
            </summary>
            <param name="val">The new file name</param>
        </member>
        <member name="M:CADability.Actions.ConstrPicturePoint2Directions.OnGetFileName">
            <summary>
            Called by the filename input field when the filename string is required
            </summary>
            <returns>the filename</returns>
        </member>
        <member name="M:CADability.Actions.ConstrPicturePoint2Directions.OnSetPosition(CADability.GeoPoint,CADability.GeoObject.SnapPointFinder.DidSnapModes)">
            <summary>
            Called when the position input is changed
            </summary>
            <param name="p">The new location point</param>
            <param name="didSnap">Information on point snapping</param>
            <returns>true, if point is accepted</returns>
        </member>
        <member name="M:CADability.Actions.ConstrPicturePoint2Directions.OnGetPosition">
            <summary>
            Called by the position input field to get the current location
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.ConstrPicturePoint2Directions.OnActivate(CADability.Actions.Action,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnActivate(CADability.Actions.Action,System.Boolean)"/>
            </summary>
            <param name="OldActiveAction"></param>
            <param name="SettingAction"></param>
        </member>
        <member name="T:CADability.Actions.ConstrPicturePointWidthHeight">
            <summary>
            Sample code for a CADability Action which places a bitmap picture object onto a surface
            of some solid object. To use this Action call Frame.SetAction
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstrPicturePointWidthHeight.GetID">
            <summary>
            Must be overriden, returns some ID for the action
            </summary>
            <returns>The ID</returns>
        </member>
        <member name="M:CADability.Actions.ConstrPicturePointWidthHeight.OnSetAction">
            <summary>
            Overrides ConstructAction.OnSetAction. Provides the input fields and some initialsation
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstrPicturePointWidthHeight.OnSetFileName(System.String)">
            <summary>
            Called by the filename input field when the filename changes
            </summary>
            <param name="val">The new file name</param>
        </member>
        <member name="M:CADability.Actions.ConstrPicturePointWidthHeight.OnGetFileName">
            <summary>
            Called by the filename input field when the filename string is required
            </summary>
            <returns>the filename</returns>
        </member>
        <member name="M:CADability.Actions.ConstrPicturePointWidthHeight.OnSetPosition(CADability.GeoPoint,CADability.GeoObject.SnapPointFinder.DidSnapModes)">
            <summary>
            Called when the position input is changed
            </summary>
            <param name="p">The new location point</param>
            <param name="didSnap">Information on point snapping</param>
            <returns>true, if point is accepted</returns>
        </member>
        <member name="M:CADability.Actions.ConstrPicturePointWidthHeight.OnGetPosition">
            <summary>
            Called by the position input field to get the current location
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.ConstrPicturePointWidthHeight.OnActivate(CADability.Actions.Action,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnActivate(CADability.Actions.Action,System.Boolean)"/>
            </summary>
            <param name="OldActiveAction"></param>
            <param name="SettingAction"></param>
        </member>
        <member name="T:CADability.Actions.ConstrPoint">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrPolylinePoints">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrRect2DiagonalPoints">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrRect2PointsHeight">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrRectParallelogram">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrRectPointWidthHeightAngle">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrText1Point">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstrText2Points">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.IIntermediateConstruction">
            <summary>
            This interface is implemented by Actions that only temporary construct some input
            for other actions. It is used by those actions to stay active until the IIntermediateConstruction
            action terminates.
            </summary>
        </member>
        <member name="M:CADability.Actions.IIntermediateConstruction.GetHandledProperty">
            <summary>
            Returns the property handled by this action
            </summary>
            <returns></returns>
        </member>
        <member name="T:CADability.Actions.ConstructActionException">
            <summary>
            Exception thrown by <see cref="T:CADability.Actions.ConstructAction"/>.
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction">
            <summary>
            Base class for construct actions. 
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.DefaultLength">
            <summary>
            A DefaultLength object is usually used in conjunction with a <see cref="T:CADability.Actions.ConstructAction.LengthInput"/>
            object (see <see cref="P:CADability.Actions.ConstructAction.LengthInput.DefaultLength"/>). It specifies a default value
            for the input field as long as the user didn't specify that input via
            keybord or mouse. When the length input is locked, the value is saved in the corresponding DefaultLength
            object. DefaultLength objects are usually static in a ConstructAction to preserve that value
            from one instance of the action to the next instance.
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.DefaultLength.StartValue">
            <summary>
            How should the value be initialized
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.DefaultLength.StartValue.ViewWidth">
            <summary>
            The width of the currently visible view
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.DefaultLength.StartValue.ViewWidth2">
            <summary>
            The width of the currently visible view divided by 2
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.DefaultLength.StartValue.ViewWidth4">
            <summary>
            The width of the currently visible view divided by 2
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.DefaultLength.StartValue.ViewWidth6">
            <summary>
            The width of the currently visible view divided by 4
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.DefaultLength.StartValue.ViewWidth8">
            <summary>
            The width of the currently visible view divided by 6
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.DefaultLength.StartValue.ViewWidth40">
            <summary>
            The width of the currently visible view divided by 8
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.DefaultLength.StartValue.ModelWidth">
            <summary>
            The width of corresponding model
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.DefaultLength.StartValue.Zero">
            <summary>
            The width 0.0
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.DefaultLength.#ctor">
            <summary>
            Creates an uninitialized DefaultLength object.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.DefaultLength.#ctor(CADability.Actions.ConstructAction.DefaultLength.StartValue)">
            <summary>
            Creates an uninitialized DefaultLength object with a definition how to
            initialize upon first usage.
            </summary>
            <param name="sw">how to initilize</param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.DefaultLength.op_Implicit(CADability.Actions.ConstructAction.DefaultLength)~System.Double">
            <summary>
            Converts to a double
            </summary>
            <param name="rl">convert this</param>
            <returns>the double value</returns>
        </member>
        <member name="P:CADability.Actions.ConstructAction.DefaultLength.Length">
            <summary>
            Returns the current value
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.DefaultLength.Locked">
            <summary>
            Locked if true. A locked input is considered fixed (see <see cref="P:CADability.Actions.ConstructAction.InputObject.Fixed"/>)
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.DefaultAngle">
            <summary>
            A DefaultAngle object is usually used in conjunction with a <see cref="T:CADability.Actions.ConstructAction.AngleInput"/>
            object (see <see cref="P:CADability.Actions.ConstructAction.AngleInput.DefaultAngle"/>). It specifies a default value
            for the input field as long as the user didn't specify that input via
            keybord or mouse. When the angle input is locked, the value is saved in the corresponding DefaultAngle
            object. DefaultAngle objects are usually static in a ConstructAction to preserve that value
            from one instance of the action to the next instance.
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.DefaultAngle.StartValue">
            <summary>
            How should the value be initialized
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.DefaultAngle.StartValue.ToRight">
            <summary>
            horizontal to right (0¬∞)
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.DefaultAngle.StartValue.ToTop">
            <summary>
            upward (90¬∞)
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.DefaultAngle.StartValue.ToLeft">
            <summary>
            horizontal to left (180¬∞)
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.DefaultAngle.StartValue.ToBottom">
            <summary>
            downwards (0¬∞)
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.DefaultAngle.StartValue.To45">
            <summary>
            45¬∞
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.DefaultAngle.#ctor">
            <summary>
            Creates an uninitialized DefaultAngle
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.DefaultAngle.#ctor(CADability.Actions.ConstructAction.DefaultAngle.StartValue)">
            <summary>
            Creates an uninitialized DefaultAngle object with a definition how to
            initialize upon first usage.
            </summary>
            <param name="sw">how to initilize</param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.DefaultAngle.op_Implicit(CADability.Actions.ConstructAction.DefaultAngle)~CADability.Angle">
            <summary>
            Converts to an Angle
            </summary>
            <param name="da">convert this</param>
            <returns></returns>
        </member>
        <member name="P:CADability.Actions.ConstructAction.DefaultAngle.Angle">
            <summary>
            returns the Angle
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.DefaultAngle.Locked">
            <summary>
            Locked if true. A locked input is considered fixed (see <see cref="P:CADability.Actions.ConstructAction.InputObject.Fixed"/>)
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.DefaultGeoPoint">
            <summary>
            A DefaultGeoPoint object is usually used in conjunction with a <see cref="T:CADability.Actions.ConstructAction.GeoPointInput"/>
            object (see <see cref="P:CADability.Actions.ConstructAction.GeoPointInput.DefaultGeoPoint"/>). It specifies a default value
            for the input field as long as the user didn't specify that input via
            keybord or mouse. When the point input is locked, the value is saved in the corresponding DefaultGeoPoint
            object. DefaultGeoPoint objects are usually static in a ConstructAction to preserve that value
            from one instance of the action to the next instance.
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.DefaultGeoPoint.StartValue">
            <summary>
            How should the value be initialized
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.DefaultGeoPoint.StartValue.CenterView">
            <summary>
            the center of the current view.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.DefaultGeoPoint.StartValue.CenterModel">
            <summary>
            tzhe center of the model.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.DefaultGeoPoint.#ctor">
            <summary>
            Creates an uninitialized DefaultGeoPoint
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.DefaultGeoPoint.op_Implicit(CADability.Actions.ConstructAction.DefaultGeoPoint)~CADability.GeoPoint">
            <summary>
             Converts to a GeoPoint
            </summary>
            <param name="rg">convert this</param>
            <returns></returns>
        </member>
        <member name="P:CADability.Actions.ConstructAction.DefaultGeoPoint.Point">
            <summary>
            Returns or sets the current value
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.DefaultGeoPoint.Locked">
            <summary>
            Locked if true. A locked input is considered fixed (see <see cref="P:CADability.Actions.ConstructAction.InputObject.Fixed"/>)
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.DefaultGeoVector">
            <summary>
            A DefaultGeoVector object is usually used in conjunction with a <see cref="T:CADability.Actions.ConstructAction.GeoVectorInput"/>
            object (see <see cref="P:CADability.Actions.ConstructAction.GeoVectorInput.DefaultGeoVector"/>). It specifies a default value
            for the input field as long as the user didn't specify that input via
            keybord or mouse. When the point input is locked, the value is saved in the corresponding DefaultGeoVector
            object. DefaultGeoVector objects are usually static in a ConstructAction to preserve that value
            from one instance of the action to the next instance.
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.DefaultGeoVector.StartDirection">
            <summary>
            How should the direction be initialized
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.DefaultGeoVector.StartDirection.XAxis">
            <summary>
            direction of the x axis
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.DefaultGeoVector.StartDirection.YAxis">
            <summary>
            direction of the y axis
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.DefaultGeoVector.StartDirection.ZAxis">
            <summary>
            direction of the z axis
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.DefaultGeoVector.StartLength">
            <summary>
            How should the Length be initialized
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.DefaultGeoVector.StartLength.UnitOne">
            <summary>
            length = 1.0
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.DefaultGeoVector.StartLength.ViewWidth">
            <summary>
            the width of the current view
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.DefaultGeoVector.StartLength.ViewWidth2">
            <summary>
            the width of the current view divided by 2
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.DefaultGeoVector.StartLength.ViewWidth4">
            <summary>
            the width of the current view divided by 4
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.DefaultGeoVector.StartLength.ViewWidth6">
            <summary>
            the width of the current view divided by 6
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.DefaultGeoVector.StartLength.ViewWidth8">
            <summary>
            the width of the current view divided by 8
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.DefaultGeoVector.StartLength.ModelWidth">
            <summary>
            the width of the model
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.DefaultGeoVector.#ctor">
            <summary>
            Creates an uninitialized DefaultGeoVector
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.DefaultGeoVector.#ctor(CADability.Actions.ConstructAction.DefaultGeoVector.StartDirection,CADability.Actions.ConstructAction.DefaultGeoVector.StartLength)">
            <summary>
            Creates an uninitialized DefaultGeoVector with a description how to initialize.
            </summary>
            <param name="startDirection">initial direction</param>
            <param name="startLength">initial length</param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.DefaultGeoVector.op_Implicit(CADability.Actions.ConstructAction.DefaultGeoVector)~CADability.GeoVector">
            <summary>
            converts to a GeoVector
            </summary>
            <param name="dgv">convert this</param>
            <returns></returns>
        </member>
        <member name="P:CADability.Actions.ConstructAction.DefaultGeoVector.Vector">
            <summary>
            Returns or sets the current value
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.DefaultGeoVector.Locked">
            <summary>
            Locked if true. A locked input is considered fixed (see <see cref="P:CADability.Actions.ConstructAction.InputObject.Fixed"/>)
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.DefaultBoolean">
            <summary>
            A DefaultBoolean object is usually used in conjunction with a <see cref="T:CADability.Actions.ConstructAction.BooleanInput"/>
            object (see <see cref="F:CADability.Actions.ConstructAction.BooleanInput.defaultBoolean"/>). It specifies a default value
            for the input field as long as the user didn't specify that input via
            keybord or mouse. When the point input is locked, the value is saved in the corresponding DefaultBoolean
            object. DefaultBoolean objects are usually static in a ConstructAction to preserve that value
            from one instance of the action to the next instance.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.DefaultBoolean.#ctor">
            <summary>
             Creates an undefined DefaultBoolean
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.DefaultBoolean.#ctor(System.Boolean)">
            <summary>
             Creates a defined DefaultBoolean
            </summary>
            <param name="StartValue">start value</param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.DefaultBoolean.op_Implicit(CADability.Actions.ConstructAction.DefaultBoolean)~System.Boolean">
            <summary>
            Converts to a boolean
            </summary>
            <param name="db">convert this</param>
            <returns></returns>
        </member>
        <member name="P:CADability.Actions.ConstructAction.DefaultBoolean.Boolean">
            <summary>
             Gets or sets the current value.
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.DefaultInteger">
            <summary>
            A DefaultInteger object is usually used in conjunction with a <see cref="T:CADability.Actions.ConstructAction.MultipleChoiceInput"/>
            object (see <see cref="F:CADability.Actions.ConstructAction.MultipleChoiceInput.DefaultChoice"/>). It specifies a default value
            for the input field as long as the user didn't specify that input via
            keybord or mouse. When the point input is locked, the value is saved in the corresponding DefaultInteger
            object. DefaultInteger objects are usually static in a ConstructAction to preserve that value
            from one instance of the action to the next instance.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.DefaultInteger.#ctor">
            <summary>
            Creates an undefined DefaultInteger
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.DefaultInteger.#ctor(System.Int32)">
            <summary>
            Creates a defined DefaultInteger
            </summary>
            <param name="StartValue">initial value</param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.DefaultInteger.op_Implicit(CADability.Actions.ConstructAction.DefaultInteger)~System.Int32">
            <summary>
             Converts to an int
            </summary>
            <param name="di">convert this</param>
            <returns></returns>
        </member>
        <member name="P:CADability.Actions.ConstructAction.DefaultInteger.Integer">
            <summary>
            Gets or sets the current value.
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.MouseClickDelegate">
            <summary>
            Delegate for mouse clickt of the Input objects
            </summary>
            <param name="up"></param>
            <param name="MousePosition"></param>
            <param name="View"></param>
        </member>
        <member name="T:CADability.Actions.ConstructAction.MouseState">
            <summary>
            Der Zustand der linken Maustaste
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.IInputObject">
            <summary>
            Dieses Interface dient der inneren Kommunikation dieser Klasse mit den
            Input Objekten. Es ist nicht nach au√üen sichtbar 
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.InputObject">
            <summary>
            Common base class for onput objects for the ConstructAction (see <see cref="M:CADability.Actions.ConstructAction.SetInput(System.Object[])"/>
            </summary>
        </member>
        <member name="P:CADability.Actions.ConstructAction.InputObject.ReadOnly">
            <summary>
            If set to true, the user cannot type in a value for this input.
            Default: false;
            </summary>
        </member>
        <member name="P:CADability.Actions.ConstructAction.InputObject.Optional">
            <summary>
            If set to true, the user cannot modify this intput with the mouse.
            Default: false;
            </summary>
        </member>
        <member name="P:CADability.Actions.ConstructAction.InputObject.Fixed">
            <summary>
            If true, there already was an input either from the keyboard or
            by a mouse click.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.InputObject.ResourceId">
            <summary>
            The string id for several text strings: ResourceId+".Label": the Label left of the
            edit box. ResourceId+".ShortInfo": a short tooltip text ResourceId+"DetailedInfo":
            a longer tooltip text.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.InputObject.#ctor(System.String)">
            <summary>
            Constructor to set the resourceId for that input field
            </summary>
            <param name="resourceId"></param>
        </member>
        <member name="F:CADability.Actions.ConstructAction.InputObject.constructAction">
            <summary>
            Back reference to the ConstructAction this input is used for.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.InputObject.Init(CADability.Actions.ConstructAction)">
            <summary>
            Internal!
            </summary>
            <param name="a">a</param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.InputObject.Refresh">
            <summary>
            Internal!
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.InputObject.BuildShowProperty">
            <summary>
            Internal!
            </summary>
            <returns>Internal!</returns>
        </member>
        <member name="M:CADability.Actions.ConstructAction.InputObject.AcceptInput(System.Boolean)">
            <summary>
            Internal!
            </summary>
            <returns>Internal!</returns>
        </member>
        <member name="M:CADability.Actions.ConstructAction.InputObject.MouseLeft">
            <summary>
            Internal!
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.InputObject.OnActionDone">
            <summary>
            Internal!
            </summary>
        </member>
        <member name="P:CADability.Actions.ConstructAction.InputObject.HasHotspot">
            <summary>
            Internal!
            </summary>
        </member>
        <member name="P:CADability.Actions.ConstructAction.InputObject.HotspotPosition">
            <summary>
            Internal!
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.AngleInput.#ctor(System.String)">
            <summary>
            Constructs an AngleInput.
            </summary>
            <param name="resourceId">resource id for the label</param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.AngleInput.#ctor(System.String,CADability.Angle)">
            <summary>
            Constructs an AngleInput.
            </summary>
            <param name="resourceId">resource id for the label</param>
            <param name="StartValue">start value for the angle</param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.AngleInput.SetAngleFromPlane(CADability.Plane)">
            <summary>
            Sets the given plane as a basis for the calculation of the angle.
            The calculated angle is the angle of the mouseposition relative to the X-axis
            of this plane.
            </summary>
            <param name="p">the plane</param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.AngleInput.SetAngleFromLine(CADability.GeoPoint,CADability.GeoPoint)">
            <summary>
            Sets the line as a basis for the calculation of the angle.
            The calculated angle is the angle of line from the startPoint to the mouseposition 
            with the line from the startPoint to the endPoint.
            </summary>
            <param name="startPoint">startpoint of the line</param>
            <param name="endPoint">endpoint of the line</param>
        </member>
        <member name="P:CADability.Actions.ConstructAction.AngleInput.DefaultAngle">
            <summary>
            Sets a DefaultAngle, which should be a static value, that carries the last
            input value of this length to the next instantiation of the action. 
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.AngleInput.ForceValue(CADability.Angle)">
            <summary>
            Forces the input object to the specified value. The input filed is updated accordingly.
            </summary>
            <param name="val">the value to set</param>
        </member>
        <member name="T:CADability.Actions.ConstructAction.AngleInput.SetAngleDelegate">
            <summary>
            Delegate definition for the <see cref="E:CADability.Actions.ConstructAction.AngleInput.SetAngleEvent"/>.
            </summary>
            <param name="angle">the new value for the angle</param>
            <returns>true: accepted, false: discarded</returns>
        </member>
        <member name="E:CADability.Actions.ConstructAction.AngleInput.SetAngleEvent">
            <summary>
            Provide a method here to get the result of this input (and modify your object)
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.AngleInput.GetAngleDelegate">
            <summary>
            delegate definition for <see cref="E:CADability.Actions.ConstructAction.AngleInput.GetAngleEvent"/>
            </summary>
            <returns>the current angle</returns>
        </member>
        <member name="E:CADability.Actions.ConstructAction.AngleInput.GetAngleEvent">
            <summary>
            Provide a method here, if the angle not only depends from this input, but is also
            modified by other means.
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.AngleInput.CalculateAngleDelegate">
            <summary>
            delegate definition for a custom method for the calculation of an angle.
            </summary>
            <param name="MousePosition">current mouse position in model coordinates</param>
            <returns>the calculated angle</returns>
        </member>
        <member name="E:CADability.Actions.ConstructAction.AngleInput.CalculateAngleEvent">
            <summary>
            Provide a method here, if you want to calculate the angle yourself, i.e. if distance
            from point, line or plane is not appropriate to your needs.
            </summary>
        </member>
        <member name="E:CADability.Actions.ConstructAction.AngleInput.MouseClickEvent">
            <summary>
            Event that is fired when a mousclick happens and this AngleInput has the focus.
            </summary>
        </member>
        <member name="P:CADability.Actions.ConstructAction.AngleInput.ReadOnly">
            <summary>
            true: this input field does not accept user input, 
            false: normal input field that requires user input
            </summary>
        </member>
        <member name="P:CADability.Actions.ConstructAction.AngleInput.ForwardMouseInputTo">
            <summary>
            Mouse input should be forwarded to another input object and only processed
            by this input, when the other input object is fixed.
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.LengthInput">
            <summary>
            Defines an input object for an action derived from ConstructAction.
            This input object extpects the input of a length or distance. The length may be either entered
            on the keyboard or by moving the mouse. The calculation of a length from the mouse position
            depends on various settings.
            Pressing enter or TAB or clicking the mouse proceeds to the next input object. 
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.LengthInput.SetDistanceFromPlane(CADability.Plane)">
            <summary>
            Sets the given plane as a basis for the calculation of the distance or length.
            The calculated length is the distance of the mouseposition from this plane.
            </summary>
            <param name="p">the plane</param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.LengthInput.SetDistanceFromLine(CADability.GeoPoint,CADability.GeoPoint)">
            <summary>
            Sets the line as a basis for the calculation of the distance or length.
            The calculated length is the distance of the mouseposition from this line
            </summary>
            <param name="startPoint">startpoint of the line</param>
            <param name="endPoint">endpoint of the line</param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.LengthInput.SetDistanceFromPoint(CADability.GeoPoint)">
            <summary>
            Sets the point as a basis for the calculation of the distance or length.
            The calculated length is the distance of the mouseposition from this point.
            </summary>
            <param name="basePoint">the point</param>
        </member>
        <member name="P:CADability.Actions.ConstructAction.LengthInput.DefaultLength">
            <summary>
            Sets a DefaultLength, which should be a static value, that carries the last
            input value of this length to the next instantiation of the action. 
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.LengthInput.#ctor(System.String)">
            <summary>
            Constructs a LengthInput object.
            </summary>
            <param name="resourceId">the resource id to specify a string from the StringTable.
            ResourceId+".Label": the Label left of the
            edit box. ResourceId+".ShortInfo": a short tooltip text ResourceId+"DetailedInfo":
            a longer tooltip text.
            </param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.LengthInput.#ctor(System.String,System.Double)">
            <summary>
            Constructs a LengthInput object with a start value
            </summary>
            <param name="resourceId">the resource id to specify a string from the StringTable.
            ResourceId+".Label": the Label left of the
            edit box. ResourceId+".ShortInfo": a short tooltip text ResourceId+"DetailedInfo":
            a longer tooltip text.
            </param>
            <param name="StartValue">the initial value</param>
        </member>
        <member name="T:CADability.Actions.ConstructAction.LengthInput.SetLengthDelegate">
            <summary>
            Delegate definition for <see cref="E:CADability.Actions.ConstructAction.LengthInput.SetLengthEvent"/>
            </summary>
            <param name="Length">the length that has been entered by the user</param>
            <returns></returns>
        </member>
        <member name="E:CADability.Actions.ConstructAction.LengthInput.SetLengthEvent">
            <summary>
            Provide a method here to get the result of this input (and modify your object)
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.LengthInput.GetLengthDelegate">
            <summary>
            Delegate definition for <see cref="E:CADability.Actions.ConstructAction.LengthInput.GetLengthEvent"/>.
            </summary>
            <returns>the current length</returns>
        </member>
        <member name="E:CADability.Actions.ConstructAction.LengthInput.GetLengthEvent">
            <summary>
            Provide a method here, if the length not only depends from this input, but is also
            modified by other means.
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.LengthInput.CalculateLengthDelegate">
            <summary>
            Delegate definition for <see cref="E:CADability.Actions.ConstructAction.LengthInput.CalculateLengthEvent"/>
            </summary>
            <param name="MousePosition">mouse position in model coordinates</param>
            <returns>the calculated length</returns>
        </member>
        <member name="E:CADability.Actions.ConstructAction.LengthInput.CalculateLengthEvent">
            <summary>
            Provide a method here, if you want to calculate the length yourself, i.e. if distance
            from point, line or plane is not appropriate to your needs.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.LengthInput.ForceValue(System.Double)">
            <summary>
            Forces the input object to the specified value. The input filed is updated accordingly.
            </summary>
            <param name="val">the value to set</param>
        </member>
        <member name="E:CADability.Actions.ConstructAction.LengthInput.MouseClickEvent">
            <summary>
            Event that is fired when a mousclick happens and this input has the focus.
            </summary>
        </member>
        <member name="P:CADability.Actions.ConstructAction.LengthInput.ReadOnly">
            <summary>
            true: this input field does not accept user input, 
            false: normal input field that requires user input
            </summary>
        </member>
        <member name="P:CADability.Actions.ConstructAction.LengthInput.ForwardMouseInputTo">
            <summary>
            Mouse input should be forwarded to another input object and only processed
            by this input, when the other input object is fixed.
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.DoubleInput">
            <summary>
            Defines an input object for an action derived from ConstructAction.
            This input object extpects the input of a double value. The value may be either entered
            on the keyboard or by moving the mouse. The calculation of a value from the mouse position
            is performed via a callback (event) method.
            Pressing enter or TAB or clicking the mouse proceeds to the next input object. 
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.DoubleInput.#ctor(System.String)">
            <summary>
            Constructs a DoubleInput object.
            </summary>
            <param name="resourceId">the resource id to specify a string from the StringTable.
            ResourceId+".Label": the Label left of the
            edit box. ResourceId+".ShortInfo": a short tooltip text ResourceId+"DetailedInfo":
            a longer tooltip text.
            </param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.DoubleInput.#ctor(System.String,System.Double)">
            <summary>
            Constructs a DoubleInput object with a initial value.
            </summary>
            <param name="resourceId">the resource id to specify a string from the StringTable.
            ResourceId+".Label": the Label left of the
            edit box. ResourceId+".ShortInfo": a short tooltip text ResourceId+"DetailedInfo":
            a longer tooltip text.
            </param>
            <param name="startValue">the initial value</param>
        </member>
        <member name="T:CADability.Actions.ConstructAction.DoubleInput.SetDoubleDelegate">
            <summary>
            Delegate definition for <see cref="E:CADability.Actions.ConstructAction.DoubleInput.SetDoubleEvent"/>
            </summary>
            <param name="val">the value that has been provided by the user</param>
            <returns>true if accepted, fale otherwise</returns>
        </member>
        <member name="E:CADability.Actions.ConstructAction.DoubleInput.SetDoubleEvent">
            <summary>
            Provide a method here to get the result of this input (and modify your object)
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.DoubleInput.GetDoubleDelegate">
            <summary>
            Delegate definition for <see cref="E:CADability.Actions.ConstructAction.DoubleInput.GetDoubleEvent"/>
            </summary>
            <returns>the double value</returns>
        </member>
        <member name="E:CADability.Actions.ConstructAction.DoubleInput.GetDoubleEvent">
            <summary>
            Provide a method here, if the length not only depends from this input, but is also
            modified by other means.
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.DoubleInput.CalculateDoubleDelegate">
            <summary>
            Delegate definition for <see cref="E:CADability.Actions.ConstructAction.DoubleInput.CalculateDoubleEvent"/>
            </summary>
            <param name="MousePosition">current mous position in model coordinates</param>
            <returns>the calculates double value</returns>
        </member>
        <member name="E:CADability.Actions.ConstructAction.DoubleInput.CalculateDoubleEvent">
            <summary>
            Provide a method here, if you want to calculate the length yourself, i.e. if distance
            from point, line or plane is not appropriate to your needs.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.DoubleInput.ForceValue(System.Double)">
            <summary>
            Forces the input object to the specified value. The input filed is updated accordingly.
            </summary>
            <param name="val">the value to set</param>
        </member>
        <member name="E:CADability.Actions.ConstructAction.DoubleInput.MouseClickEvent">
            <summary>
            Event that is fired when a mousclick happens and this input has the focus.
            </summary>
        </member>
        <member name="P:CADability.Actions.ConstructAction.DoubleInput.ReadOnly">
            <summary>
            true: this input field does not accept user input, 
            false: normal input field that requires user input
            </summary>
        </member>
        <member name="P:CADability.Actions.ConstructAction.DoubleInput.ForwardMouseInputTo">
            <summary>
            Mouse input should be forwarded to another input object and only processed
            by this input, when the other input object is fixed.
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.GeoPointInput">
            <summary>
            Defines an input object for an action derived from ConstructAction.
            This input object extpects the input of a point. This point may be either entered
            on the keyboard or by moving the mouse. Pressing enter or TAB or clicking the mouse
            proceeds to the next input object. 
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.GeoPointInput.DefinesBasePoint">
            <summary>
            If set to true this point is the basepoint for snapping.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.GeoPointInput.DefinesHotSpot">
            <summary>
            true: the point is displayed as hotspot (small sqaure). The user can drag this
            hotspot with the mouse to modify this input.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.GeoPointInput.HotSpotSource">
            <summary>
            The icon for the hotspot, for example "Hotspots.png:3"
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.GeoPointInput.#ctor(System.String)">
            <summary>
            Constructs a GeoPointInput object.
            </summary>
            <param name="resourceId">the resource id to specify a string from the StringTable.
            ResourceId+".Label": the Label left of the
            edit box. ResourceId+".ShortInfo": a short tooltip text ResourceId+"DetailedInfo":
            a longer tooltip text.
            </param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.GeoPointInput.#ctor(System.String,CADability.GeoPoint)">
            <summary>
            Constructs a GeoPointInput object with an inital value.
            </summary>
            <param name="resourceId">the resource id to specify a string from the StringTable.
            ResourceId+".Label": the Label left of the
            edit box. ResourceId+".ShortInfo": a short tooltip text ResourceId+"DetailedInfo":
            a longer tooltip text.
            </param>
            <param name="StartValue">the initial value</param>
        </member>
        <member name="P:CADability.Actions.ConstructAction.GeoPointInput.DefaultGeoPoint">
            <summary>
            Sets a DefaultGeoPoint, which should be a static value, that carries the last
            input value of this point to the next instantiation of the action. 
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.GeoPointInput.SetGeoPointDelegate">
            <summary>
            Delegate definition for <see cref="E:CADability.Actions.ConstructAction.GeoPointInput.SetGeoPointEvent"/>
            </summary>
            <param name="p">the point provided by the user (via mouse or keyboard)</param>
        </member>
        <member name="T:CADability.Actions.ConstructAction.GeoPointInput.SetGeoPointExDelegate">
            <summary>
            Delegate definition for <see cref="E:CADability.Actions.ConstructAction.GeoPointInput.SetGeoPointExEvent"/>
            </summary>
            <param name="p">the point provided by the user</param>
            <param name="didSnap">the snap mode</param>
            <returns>true, if point is accepted</returns>
        </member>
        <member name="T:CADability.Actions.ConstructAction.GeoPointInput.GetGeoPointDelegate">
            <summary>
            Delegate definition for <see cref="E:CADability.Actions.ConstructAction.GeoPointInput.GetGeoPointEvent"/>
            </summary>
            <returns>the current point</returns>
        </member>
        <member name="E:CADability.Actions.ConstructAction.GeoPointInput.SetGeoPointEvent">
            <summary>
            Provide a method for this event to receive the value of the point as it is
            defined by either keyboard or mouse input.
            </summary>
        </member>
        <member name="E:CADability.Actions.ConstructAction.GeoPointInput.SetGeoPointExEvent">
            <summary>
            Provide a method for this event to receive the value of the point as it is
            defined by either keyboard or mouse input.
            </summary>
        </member>
        <member name="E:CADability.Actions.ConstructAction.GeoPointInput.GetGeoPointEvent">
            <summary>
            This event is used by the display to show the current value of the point.
            This is necessary if this point is also modified by other means, not only by this input field.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.GeoPointInput.ForceValue(CADability.GeoPoint)">
            <summary>
            Forces the input object to the specified value. The input filed is updated accordingly.
            </summary>
            <param name="p">the point to set</param>
        </member>
        <member name="E:CADability.Actions.ConstructAction.GeoPointInput.MouseClickEvent">
            <summary>
            Event that is fired when a mousclick happens and this input has the focus.
            </summary>
        </member>
        <member name="P:CADability.Actions.ConstructAction.GeoPointInput.ReadOnly">
            <summary>
            true: this input field does not accept user input, 
            false: normal input field that requires user input
            </summary>
        </member>
        <member name="P:CADability.Actions.ConstructAction.GeoPointInput.ForwardMouseInputTo">
            <summary>
            Mouse input should be forwarded to another input object and only processed
            by this input, when the other input object is fixed.
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.GeoVectorInput">
            <summary>
            Defines an input object for an action derived from ConstructAction.
            This input object extpects the input of a vector. The vector may be either entered
            on the keyboard or by moving the mouse. The calculation of a vector from the mouse position
            depends on various settings.
            Pressing enter or TAB or clicking the mouse proceeds to the next input object. 
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.GeoVectorInput.SetVectorFromPoint(CADability.GeoPoint)">
            <summary>
            Sets the point as a basis for the calculation of the vector.
            The calculated vector is the vector from this point to the mouseposition.
            </summary>
            <param name="basePoint">the point</param>
        </member>
        <member name="P:CADability.Actions.ConstructAction.GeoVectorInput.DefaultGeoVector">
            <summary>
            Sets a DefaultGeoVector, which should be a static value, that carries the last
            input value of this vector to the next instantiation of the action. 
            </summary>
        </member>
        <member name="P:CADability.Actions.ConstructAction.GeoVectorInput.IsAngle">
            <value>
            The vector should be interpreted as an angle (IsAngle==true) or as
            a direction (IsAngle==false). For an angle there is no vector length,
            i.e. the length will always be 1 (unit vector). The PropertyDisplay will
            only display a single value (the angle in the drawing plane), the subentries
            will contain two angles: drawingplane angle and elevation from drawing plane
            </value>
        </member>
        <member name="P:CADability.Actions.ConstructAction.GeoVectorInput.PlaneForAngle">
            <summary>
            Defines the plane in which the angle should be computed. The input point
            will be projected into this plane and the Angle to the x-axis will be used
            as the input
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.GeoVectorInput.#ctor(System.String)">
            <summary>
            Constructs a LengthInput object.
            </summary>
            <param name="resourceId">the resource id to specify a string from the StringTable.
            ResourceId+".Label": the Label left of the
            edit box. ResourceId+".ShortInfo": a short tooltip text ResourceId+"DetailedInfo":
            a longer tooltip text.
            </param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.GeoVectorInput.#ctor(System.String,CADability.GeoVector)">
            <summary>
            Constructs a LengthInput object with an initial value
            </summary>
            <param name="resourceId">the resource id to specify a string from the StringTable.
            ResourceId+".Label": the Label left of the
            edit box. ResourceId+".ShortInfo": a short tooltip text ResourceId+"DetailedInfo":
            a longer tooltip text.
            </param>
            <param name="StartValue">the initial value</param>
        </member>
        <member name="T:CADability.Actions.ConstructAction.GeoVectorInput.SetGeoVectorDelegate">
            <summary>
            Delegate definition for <see cref="E:CADability.Actions.ConstructAction.GeoVectorInput.SetGeoVectorEvent"/>
            </summary>
            <param name="vector">the user provided vector</param>
            <returns>true: accepted, false not accepted</returns>
        </member>
        <member name="E:CADability.Actions.ConstructAction.GeoVectorInput.SetGeoVectorEvent">
            <summary>
            Provide a method here to get the result of this input (and modify your object)
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.GeoVectorInput.GetGeoVectorDelegate">
            <summary>
            Delegate definitionn for <see cref="E:CADability.Actions.ConstructAction.GeoVectorInput.GetGeoVectorEvent"/>.
            </summary>
            <returns>the current value of the vector</returns>
        </member>
        <member name="E:CADability.Actions.ConstructAction.GeoVectorInput.GetGeoVectorEvent">
            <summary>
            Provide a method here, if the vector not only depends from this input, but is also
            modified by other means.
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.GeoVectorInput.CalculateGeoVectorDelegate">
            <summary>
            Delegate definition for the <see cref="E:CADability.Actions.ConstructAction.GeoVectorInput.CalculateGeoVectorEvent"/>.
            </summary>
            <param name="MousePosition">current mouse position in model coordinates</param>
            <returns>the calculated vector</returns>
        </member>
        <member name="E:CADability.Actions.ConstructAction.GeoVectorInput.CalculateGeoVectorEvent">
            <summary>
            Provide a method here, if you want to calculate the vector yourself, i.e. if vector
            from point, line or plane is not appropriate to your needs.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.GeoVectorInput.ForceValue(CADability.GeoVector)">
            <summary>
            Forces the input object to the specified value. The input filed is updated accordingly.
            </summary>
            <param name="val">the value to set</param>
        </member>
        <member name="E:CADability.Actions.ConstructAction.GeoVectorInput.MouseClickEvent">
            <summary>
            Event that is fired when a mousclick happens and this input has the focus.
            </summary>
        </member>
        <member name="P:CADability.Actions.ConstructAction.GeoVectorInput.ReadOnly">
            <summary>
            true: this input field does not accept user input, 
            false: normal input field that requires user input
            </summary>
        </member>
        <member name="P:CADability.Actions.ConstructAction.GeoVectorInput.ForwardMouseInputTo">
            <summary>
            Mouse input should be forwarded to another input object and only processed
            by this input, when the other input object is fixed.
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.PlaneInput">
            <summary>
            Defines an input object for an action derived from ConstructAction.
            This input object expects the input of a plane. The value may be either entered
            on the keyboard or by moving the mouse. There is always a base plane which is by
            default the drawing plane. The mouse input is defines a plane which is parallel
            to the base plane and contains the mouse point (snapping is applied)
            Pressing enter or TAB or clicking the mouse proceeds to the next input object. 
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.PlaneInput.#ctor(System.String)">
            <summary>
            Constructs a PlaneInput object.
            </summary>
            <param name="resourceId">the resource id to specify a string from the StringTable.</param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.PlaneInput.#ctor(System.String,CADability.Plane)">
            <summary>
            Constructs a PlaneInput object with a initial value.
            </summary>
            <param name="resourceId">the resource id to specify a string from the StringTable.</param>
            <param name="basePlane">the base plane</param>
        </member>
        <member name="T:CADability.Actions.ConstructAction.PlaneInput.SetPlaneDelegate">
            <summary>
            Delegate definition for <see cref="E:CADability.Actions.ConstructAction.PlaneInput.SetPlaneEvent"/>
            </summary>
            <param name="val">the value that has been provided by the user</param>
            <returns>true if accepted, fale otherwise</returns>
        </member>
        <member name="E:CADability.Actions.ConstructAction.PlaneInput.SetPlaneEvent">
            <summary>
            Provide a method here to get the result of this input (and modify your object)
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.PlaneInput.GetPlaneDelegate">
            <summary>
            Delegate definition for <see cref="E:CADability.Actions.ConstructAction.PlaneInput.GetPlaneEvent"/>
            </summary>
            <returns>the double value</returns>
        </member>
        <member name="E:CADability.Actions.ConstructAction.PlaneInput.GetPlaneEvent">
            <summary>
            Provide a method here, if the length not only depends from this input, but is also
            modified by other means.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.PlaneInput.ForceValue(CADability.Plane)">
            <summary>
            Forces the input object to the specified value. The input filed is updated accordingly.
            </summary>
            <param name="val">the value to set</param>
        </member>
        <member name="E:CADability.Actions.ConstructAction.PlaneInput.MouseClickEvent">
            <summary>
            Event that is fired when a mousclick happens and this input has the focus.
            </summary>
        </member>
        <member name="P:CADability.Actions.ConstructAction.PlaneInput.ReadOnly">
            <summary>
            true: this input field does not accept user input, 
            false: normal input field that requires user input
            </summary>
        </member>
        <member name="P:CADability.Actions.ConstructAction.PlaneInput.ForwardMouseInputTo">
            <summary>
            Mouse input should be forwarded to another input object and only processed
            by this input, when the other input object is fixed.
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.BooleanInput">
            <summary>
            Defines an input object for an action derived from ConstructAction.
            This input object extpects the input of a boolen value. The boolen value
            is selected from a combobox.
            Pressing enter or TAB or clicking the mouse proceeds to the next input object. 
            </summary>
        </member>
        <member name="P:CADability.Actions.ConstructAction.BooleanInput.DefaultBoolean">
            <summary>
            Sets a DefaultGeoVector, which should be a static value, that carries the last
            input value of this vector to the next instantiation of the action. 
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.BooleanInput.SetBooleanDelegate">
            <summary>
            Delegate definition for <see cref="E:CADability.Actions.ConstructAction.BooleanInput.SetBooleanEvent"/>
            </summary>
            <param name="val">the selection made by the user</param>
        </member>
        <member name="E:CADability.Actions.ConstructAction.BooleanInput.SetBooleanEvent">
            <summary>
            Provide a method here to get the result of this input (and modify your object)
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.BooleanInput.GetBooleanDelegate">
            <summary>
            Delegate definition for <see cref="E:CADability.Actions.ConstructAction.BooleanInput.GetBooleanEvent"/>
            </summary>
            <returns>the current value of this input</returns>
        </member>
        <member name="E:CADability.Actions.ConstructAction.BooleanInput.GetBooleanEvent">
            <summary>
            Provide a method here, if the boolean value not only depends from this input, but is also
            modified by other means.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.BooleanInput.#ctor(System.String,System.String)">
            <summary>
            Constructs a BooleanInput object with no initial value
            </summary>
            <param name="resourceId">the resource id to specify a string from the StringTable.
            ResourceId+".Label": the Label left of the
            edit box. ResourceId+".ShortInfo": a short tooltip text ResourceId+"DetailedInfo":
            a longer tooltip text.
            </param>
            <param name="resourceIdValues">resource id of the strings for the values starting with
            a delimiter and seperated by the same delimiter e.g. "|true|false"</param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.BooleanInput.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructs a BooleanInput object with an initial value
            </summary>
            <param name="resourceId">the resource id to specify a string from the StringTable.
            ResourceId+".Label": the Label left of the
            edit box. ResourceId+".ShortInfo": a short tooltip text ResourceId+"DetailedInfo":
            a longer tooltip text.
            </param>
            <param name="resourceIdValues">resource id of the strings for the values starting with
            a delimiter and seperated by the same delimiter e.g. "|true|false"</param>
            <param name="StartValue">the initial value</param>
        </member>
        <member name="P:CADability.Actions.ConstructAction.BooleanInput.ForwardMouseInputTo">
            <summary>
            Mouse input should be forwarded to another input object and only processed
            by this input, when the other input object is fixed.
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.MultipleChoiceInput">
            <summary>
            Defines an input object for an action derived from ConstructAction.
            This input object extpects the input of a integer value. The integer value
            is entered in a editbox and/or with an up/down control.
            Pressing enter or TAB or clicking the mouse proceeds to the next input object. 
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.MultipleChoiceInput.DefaultChoice">
            <summary>
            Sets a DefaultInteger, which should be a static value, that carries the last
            input value of this vector to the next instantiation of the action. 
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.MultipleChoiceInput.SetChoiceDelegate">
            <summary>
            Delegate definition for <see cref="E:CADability.Actions.ConstructAction.MultipleChoiceInput.SetChoiceEvent"/>
            </summary>
            <param name="val">the user providet value</param>
        </member>
        <member name="E:CADability.Actions.ConstructAction.MultipleChoiceInput.SetChoiceEvent">
            <summary>
            Provide a method here to get the result of this input (and modify your object)
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.MultipleChoiceInput.GetChoiceDelegate">
            <summary>
            delegate definition for the <see cref="E:CADability.Actions.ConstructAction.MultipleChoiceInput.GetChoiceEvent"/>
            </summary>
            <returns>the current value</returns>
        </member>
        <member name="E:CADability.Actions.ConstructAction.MultipleChoiceInput.GetChoiceEvent">
            <summary>
            Provide a method here, if the integer value not only depends from this input, but is also
            modified by other means.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.MultipleChoiceInput.#ctor(System.String,System.String)">
            <summary>
            Constructs a MultipleChoiceInput object with no initial value
            </summary>
            <param name="resourceId">the resource id to specify a string from the StringTable.
            ResourceId+".Label": the Label left of the
            edit box. ResourceId+".ShortInfo": a short tooltip text ResourceId+"DetailedInfo":
            a longer tooltip text.
            </param>
            <param name="resourceIdValues">resource id of the strings for the values starting with
            a delimiter and seperated by the same delimiter e.g. "|first|second|third"</param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.MultipleChoiceInput.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Constructs a MultipleChoiceInput object with no initial value
            </summary>
            <param name="resourceId">the resource id to specify a string from the StringTable.
            ResourceId+".Label": the Label left of the
            edit box. ResourceId+".ShortInfo": a short tooltip text ResourceId+"DetailedInfo":
            a longer tooltip text.
            </param>
            <param name="resourceIdValues">resource id of the strings for the values starting with
            a delimiter and seperated by the same delimiter e.g. "|first|second|third"</param>
            <param name="StartValue">the initial value</param>
        </member>
        <member name="P:CADability.Actions.ConstructAction.MultipleChoiceInput.ForwardMouseInputTo">
            <summary>
            Mouse input should be forwarded to another input object and only processed
            by this input, when the other input object is fixed.
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.MultiPointInput">
            <summary>
            Defines an input object for an action derived from ConstructAction.
            This input object extpects the input of a list of GeoPoints. The user
            can define as many points as he or she wants.
            Pressing enter or TAB or clicking the mouse proceeds to the next input object. 
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.MultiPointInput.#ctor(CADability.UserInterface.IIndexedGeoPoint)">
            <summary>
            Creates a MultiPointInput object that communicates with the provided
            <see cref="T:CADability.UserInterface.IIndexedGeoPoint"/> interface.
            </summary>
            <param name="forwardTo">interface usually implemented by the ConstructAction derived class</param>
        </member>
        <member name="E:CADability.Actions.ConstructAction.MultiPointInput.MouseClickEvent">
            <summary>
            Event that is fired when a mousclick happens and this input has the focus.
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.CurveInput">
            <summary>
            Defines an input object for an action derived from ConstructAction.
            This input object extpects the user to click on a curve (<see cref="T:CADability.GeoObject.IGeoObject"/> that also implements <see cref="T:CADability.GeoObject.ICurve"/>.
            Pressing enter or TAB or clicking the mouse proceeds to the next input object. 
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.CurveInput.#ctor(System.String)">
            <summary>
            Creates a Curveinput object.
            </summary>
            <param name="resourceId">the resource id to specify a string from the StringTable.
            ResourceId+".Label": the Label left of the
            edit box. ResourceId+".ShortInfo": a short tooltip text ResourceId+"DetailedInfo":
            a longer tooltip text.
            </param>
        </member>
        <member name="P:CADability.Actions.ConstructAction.CurveInput.HitCursor">
            <summary>
            Sets the cursor that will be displayed when a curve is hit
            </summary>
        </member>
        <member name="P:CADability.Actions.ConstructAction.CurveInput.FailCursor">
            <summary>
            Sets the cursor that will be displayed when no curve is hit
            </summary>
        </member>
        <member name="P:CADability.Actions.ConstructAction.CurveInput.Decomposed">
            <summary>
            true: only decomposed curves are yielded,
            false: also path objects, that consist of several subcurves are yielded
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.CurveInput.ModifiableOnly">
            <summary>
            true: only curves that may be modified are yielded
            false: any kind of curves curves are yielded
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.CurveInput.SetCurves(CADability.GeoObject.ICurve[],CADability.GeoObject.ICurve)">
            <summary>
            Forces the given curves to be displayed
            </summary>
            <param name="curves">array of curves</param>
            <param name="selectedCurve">currently selected curve</param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.CurveInput.SetSelectedCurve(CADability.GeoObject.ICurve)">
            <summary>
            Set the selected curve
            </summary>
            <param name="curve">this curve should be selected</param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.CurveInput.GetCurves">
            <summary>
             Gets the currently selected curves.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CADability.Actions.ConstructAction.CurveInput.MouseOverCurvesDelegate">
            <summary>
            Delegate definition for <see cref="E:CADability.Actions.ConstructAction.CurveInput.MouseOverCurvesEvent"/>
            </summary>
            <param name="sender">this object</param>
            <param name="TheCurves">curves under the cursor</param>
            <param name="up">mous was clicked</param>
            <returns>true, if you accept (on of the) curves</returns>
        </member>
        <member name="E:CADability.Actions.ConstructAction.CurveInput.MouseOverCurvesEvent">
            <summary>
            Provide a method here to react on the user moving the cursor over curves.
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.CurveInput.CurveSelectionChangedDelegate">
            <summary>
            Delegate definition for <see cref="E:CADability.Actions.ConstructAction.CurveInput.CurveSelectionChangedEvent"/>
            </summary>
            <param name="sender">this object</param>
            <param name="SelectedCurve">the usere selected curve</param>
        </member>
        <member name="E:CADability.Actions.ConstructAction.CurveInput.CurveSelectionChangedEvent">
            <summary>
            Provide a method here to react on the user selecting a different curve
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.CurveInput.SplitAtMousePosition(CADability.GeoObject.ICurve)">
            <summary>
            Returns two curves (Path), that represent the given curve, splitted at the vertex
            which is closest to the mouse position. The endpoint of the first curve is the
            startpoint of the second curve. If the curve is not closed and the startpoint or endpoint
            is closest to the mouse position, en empty array will be returned.
            </summary>
            <param name="composedCurve"></param>
            <returns></returns>
        </member>
        <member name="F:CADability.Actions.ConstructAction.CurveInput.PreferPath">
            <summary>
            Prefer path objects instead of single curves (when available)
            </summary>
        </member>
        <member name="P:CADability.Actions.ConstructAction.CurveInput.ForwardMouseInputTo">
            <summary>
            Mouse input should be forwarded to another input object and only processed
            by this input, when the other input object is fixed.
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.GeoObjectInput">
            <summary>
            Defines an input object for an action derived from ConstructAction.
            This input object extpects the user to click on a curve (<see cref="T:CADability.GeoObject.IGeoObject"/> that also implements <see cref="T:CADability.GeoObject.ICurve"/>.
            Pressing enter or TAB or clicking the mouse proceeds to the next input object. 
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.GeoObjectInput.#ctor(System.String)">
            <summary>
            Creates a GeoObjectInput object.
            </summary>
            <param name="resourceId">the resource id to specify a string from the StringTable.
            ResourceId+".Label": the Label left of the
            edit box. ResourceId+".ShortInfo": a short tooltip text ResourceId+"DetailedInfo":
            a longer tooltip text.
            </param>
        </member>
        <member name="P:CADability.Actions.ConstructAction.GeoObjectInput.HitCursor">
            <summary>
            Sets the cursor that will be displayed when a curve is hit
            </summary>
        </member>
        <member name="P:CADability.Actions.ConstructAction.GeoObjectInput.FailCursor">
            <summary>
            Sets the cursor that will be displayed when no curve is hit
            </summary>
        </member>
        <member name="P:CADability.Actions.ConstructAction.GeoObjectInput.Decomposed">
            <summary>
            true: only decomposed curves are yielded,
            false: also path objects, that consist of several subcurves are yielded
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.GeoObjectInput.ModifiableOnly">
            <summary>
            true: only curves that may be modified are yielded
            false: any kind of curves curves are yielded
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.GeoObjectInput.SetGeoObject(CADability.GeoObject.IGeoObject[],CADability.GeoObject.IGeoObject)">
            <summary>
            Forces the given geoObjects to be displayed
            </summary>
            <param name="GeoObjects">array of GeoObjects</param>
            <param name="selectedGeoObject">currently selected GeoObject</param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.GeoObjectInput.SetSelectedGeoObject(CADability.GeoObject.IGeoObject)">
            <summary>
            Set the selected GeoObject
            </summary>
            <param name="curve">this curve should be selected</param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.GeoObjectInput.GetGeoObjects">
            <summary>
             Gets the currently selected curves.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CADability.Actions.ConstructAction.GeoObjectInput.MouseOverGeoObjectsDelegate">
            <summary>
            Delegate definition for <see cref="!:MouseOverCurvesEvent"/>
            </summary>
            <param name="sender">this object</param>
            <param name="TheGeoObjects">GeoObjects under the cursor</param>
            <param name="up">mous was clicked</param>
            <returns>true, if you accept (one of the) GeoObjects</returns>
        </member>
        <member name="E:CADability.Actions.ConstructAction.GeoObjectInput.MouseOverGeoObjectsEvent">
            <summary>
            Provide a method here to react on the user moving the cursor over curves.
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.GeoObjectInput.GeoObjectSelectionChangedDelegate">
            <summary>
            Delegate definition for <see cref="!:CurveSelectionChangedEvent"/>
            </summary>
            <param name="sender">this object</param>
            <param name="SelectedCurve">the usere selected curve</param>
        </member>
        <member name="E:CADability.Actions.ConstructAction.GeoObjectInput.GeoObjectSelectionChangedEvent">
            <summary>
            Provide a method here to react on the user selecting a different curve
            </summary>
        </member>
        <member name="P:CADability.Actions.ConstructAction.GeoObjectInput.ForwardMouseInputTo">
            <summary>
            Mouse input should be forwarded to another input object and only processed
            by this input, when the other input object is fixed.
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.StringInput">
            <summary>
            Defines an input object for an action derived from ConstructAction.
            This input object extpects the user to enter a string in a edit field.
            Pressing enter or TAB or clicking the mouse proceeds to the next input object. 
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.StringInput.SetStringDelegate">
            <summary>
            Delegate definition for the <see cref="E:CADability.Actions.ConstructAction.StringInput.SetStringEvent"/>
            </summary>
            <param name="val">the entered value</param>
        </member>
        <member name="E:CADability.Actions.ConstructAction.StringInput.SetStringEvent">
            <summary>
            Provide a handler here if you want to be notified about input changes.
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.StringInput.GetStringDelegate">
            <summary>
            Delegate definition for the <see cref="E:CADability.Actions.ConstructAction.StringInput.GetStringEvent"/>
            </summary>
            <returns>the current string</returns>
        </member>
        <member name="E:CADability.Actions.ConstructAction.StringInput.GetStringEvent">
            <summary>
            Provide a method here when the string also changes by other means than user input.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.StringInput.ConnectWithTextObject(CADability.GeoObject.Text,CADability.IView)">
            <summary>
            Connects this input filed with a <see cref="T:CADability.GeoObject.Text"/> object.
            The Text object displays the carret in the view so you can edit the text
            in the view directly
            </summary>
            <param name="text">the text object</param>
            <param name="vw">the view, in which the editing is supposed to happen</param>
        </member>
        <member name="F:CADability.Actions.ConstructAction.StringInput.IsFileNameInput">
            <summary>
            If true, this input can be used as a file open dialog input. In the corresponding context menu
            the file open dialog can be opened.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.StringInput.InitOpenFile">
            <summary>
            If true there will be an file open dialog when this input becomes visible.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.StringInput.FileNameFilter">
            <summary>
            Only used when <see cref="F:CADability.Actions.ConstructAction.StringInput.IsFileNameInput"/> is true. This  is the filter for the
            file open dialog.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.StringInput.#ctor(System.String)">
            <summary>
            Creates a StringInput
            </summary>
            <param name="resourceId">the resource id to specify a string from the StringTable.
            ResourceId+".Label": the Label left of the
            edit box. ResourceId+".ShortInfo": a short tooltip text ResourceId+"DetailedInfo":
            a longer tooltip text.
            </param>
        </member>
        <member name="P:CADability.Actions.ConstructAction.StringInput.ForwardMouseInputTo">
            <summary>
            Mouse input should be forwarded to another input object and only processed
            by this input, when the other input object is fixed.
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.EditInput">
            <summary>
            Defines an input object for an action derived from ConstructAction.
            This input object extpects the user to enter a string in a edit field and
            is connected to a Text object to provide wysiwyg editing.
            Pressing enter or TAB or clicking the mouse proceeds to the next input object. 
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.EditInput.#ctor(CADability.GeoObject.Text)">
            <summary>
            Creates a EditInput object
            </summary>
            <param name="theText">the Text object it is connected with</param>
        </member>
        <member name="P:CADability.Actions.ConstructAction.EditInput.ForwardMouseInputTo">
            <summary>
            Mouse input should be forwarded to another input object and only processed
            by this input, when the other input object is fixed.
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.IntInput">
            <summary>
            Defines an input object for an action derived from ConstructAction.
            This input object extpects the user to enter a integer value in a edit field.
            Pressing enter or TAB or clicking the mouse proceeds to the next input object. 
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.IntInput.SetIntDelegate">
            <summary>
            Delegate definition of the <see cref="E:CADability.Actions.ConstructAction.IntInput.SetIntEvent"/>
            </summary>
            <param name="val">the user entered value</param>
        </member>
        <member name="E:CADability.Actions.ConstructAction.IntInput.SetIntEvent">
            <summary>
            Provide a handler here to be able to react on input changes
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.IntInput.GetIntDelegate">
            <summary>
            Delegate definition for the <see cref="E:CADability.Actions.ConstructAction.IntInput.GetIntEvent"/>
            </summary>
            <returns></returns>
        </member>
        <member name="E:CADability.Actions.ConstructAction.IntInput.GetIntEvent">
            <summary>
            Provide a handler here when the integer value is modified by other means than
            simple user input (e.g. by mouse movement)
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.IntInput.CalculateIntDelegate">
            <summary>
            Delegate definition for the <see cref="E:CADability.Actions.ConstructAction.IntInput.CalculateIntEvent"/>
            </summary>
            <param name="MousePosition">current mouse position in model coordinates</param>
            <returns></returns>
        </member>
        <member name="E:CADability.Actions.ConstructAction.IntInput.CalculateIntEvent">
            <summary>
            Provide a method here, if you want to calculate the int from a mouse position.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.IntInput.SetMinMax(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the limits for the input ad determins whether an up/down control is displayed
            </summary>
            <param name="min">minimum input value</param>
            <param name="max">maximum input value</param>
            <param name="showupdown">true: show up/down control</param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.IntInput.#ctor(System.String)">
            <summary>
            Creates a IntInput field with no initial value
            </summary>
            <param name="resourceId">the resource id to specify a string from the StringTable.
            ResourceId+".Label": the Label left of the
            edit box. ResourceId+".ShortInfo": a short tooltip text ResourceId+"DetailedInfo":
            a longer tooltip text.
            </param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.IntInput.#ctor(System.String,System.Int32)">
            <summary>
            Creates a IntInput field with an initial value
            </summary>
            <param name="resourceId">the resource id to specify a string from the StringTable.
            ResourceId+".Label": the Label left of the
            edit box. ResourceId+".ShortInfo": a short tooltip text ResourceId+"DetailedInfo":
            a longer tooltip text.
            </param>
            <param name="StartValue">initial value</param>
        </member>
        <member name="P:CADability.Actions.ConstructAction.IntInput.ForwardMouseInputTo">
            <summary>
            Mouse input should be forwarded to another input object and only processed
            by this input, when the other input object is fixed.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.TitleId">
            <summary>
            The title id (resource id) for the title of the action in the control center
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.CurrentMousePoint">
            <summary>
            The current mouse position for this action
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.ShowAttributes">
            <summary>
            Display the attributes of the active object. 
            </summary>
        </member>
        <member name="P:CADability.Actions.ConstructAction.FeedBack">
            <summary>
            Gets the container that handles feedback objects (see <see cref="T:CADability.Actions.ActionFeedBack"/>).
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAction.ActionDoneDelegate">
            <summary>
            Delegate for <see cref="E:CADability.Actions.ConstructAction.ActionDoneEvent"/>.
            </summary>
            <param name="ca">this ConstructAction</param>
            <param name="success">true: an object was constructed and added to the model. false: action was aborted or object not fully defined</param>
        </member>
        <member name="E:CADability.Actions.ConstructAction.ActionDoneEvent">
            <summary>
            Event that is fired when this action is done. If your class is derived from ConstructAction you
            better override <see cref="M:CADability.Actions.ConstructAction.OnDone"/>.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.#ctor">
            <summary>
            Initializes some properties. Set the properties you need in your constructor.
            </summary>
        </member>
        <member name="P:CADability.Actions.ConstructAction.ActiveObject">
            <summary>
            Dieses Objekt wird √ºber der Zeichnung dargestellt. Kann auch auf null gesetzt werden
            um kein Objekt (mehr) darzustallen. Mehrere Objekte k√∂nnen nur als Block dargestellt 
            werden.
            </summary>
        </member>
        <member name="P:CADability.Actions.ConstructAction.ShowActiveObject">
            <summary>
            Switches the display of the <see cref="P:CADability.Actions.ConstructAction.ActiveObject"/> on and off.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.FindShape(CADability.GeoPoint,CADability.Plane)">
            <summary>
            Tries to find a <see cref="T:CADability.Shapes.CompoundShape"/> that encloses the point <paramref name="p"/> on the plane <paramref name="plane"/>.
            
            </summary>
            <param name="p">Point in the inside of the requested shape</param>
            <param name="plane">Plane in which the search should happen</param>
            <returns>A shape or null</returns>
        </member>
        <member name="M:CADability.Actions.ConstructAction.KeepAsLastStyle(CADability.GeoObject.IGeoObject)">
            <summary>
            Sets the <see cref="T:CADability.Attribute.Style"/>of the provided GeoObject <paramref name="go"/> as the last style. 
            If new objects are created with construct method and last style is used, this style will be used.
            </summary>
            <param name="go">Object to get the style from</param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.SetInput(System.Object[])">
            <summary>
            Call this method in an override to <see cref="M:CADability.Actions.ConstructAction.OnSetAction"/> to specify the input
            parameters of this action. Objects given as parameters may be any of <see cref="T:CADability.Actions.ConstructAction.AngleInput"/>,
            <see cref="T:CADability.Actions.ConstructAction.LengthInput"/>, <see cref="T:CADability.Actions.ConstructAction.DoubleInput"/>, <see cref="T:CADability.Actions.ConstructAction.GeoPointInput"/>, <see cref="T:CADability.Actions.ConstructAction.GeoVectorInput"/>, <see cref="T:CADability.Actions.ConstructAction.BooleanInput"/>,
            <see cref="T:CADability.Actions.ConstructAction.MultiPointInput"/>, <see cref="T:CADability.Actions.ConstructAction.GeoObjectInput"/>, <see cref="T:CADability.Actions.ConstructAction.PlaneInput"/>.
            </summary>
            <param name="TheInput">Objects specifying the input parameters of this action</param>
        </member>
        <member name="P:CADability.Actions.ConstructAction.BasePoint">
            <summary>
            Sets the BasePoint. This point is needed for some snap modes like the orthogonal snap mode or snap to tangent point. As long as this
            point is not set, these snap modes don't work.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.ClearBasePoint">
            <summary>
            Clears the <see cref="P:CADability.Actions.ConstructAction.BasePoint"/>.
            </summary>
        </member>
        <member name="P:CADability.Actions.ConstructAction.CurrentMousePosition">
            <summary>
            returns the last mouse position in model coordinates.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.SetFocus(System.Object,System.Boolean)">
            <summary>
            Sets the input focus to the given input object. The input object must be one of those
            given in the <see cref="M:CADability.Actions.ConstructAction.SetInput(System.Object[])"/> method.
            </summary>
            <param name="InputObject">Input object which should become active</param>
            <param name="ActivateMouse">Mouse actions also apply to this input object</param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.OnDone">
            <summary>
            Called, when the ConstructAction is done, i.e. all non-optional inputs
            have been fixed. The default implementation adds the active object (if it exists)
            to the active model and removes this action. Override this method if you need
            a different behaviour.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.MultiSolution">
            <summary>
            The ConstructAction may have several solutions. If set to true, the PgUp/PgDown
            key will call OnDifferentSolution and the context menue will have appropriate entries.
            </summary>
        </member>
        <member name="F:CADability.Actions.ConstructAction.MultiSolutionCount">
            <summary>
            TheConstruction may have several solutions. If set to a value !=0 the ContextMenu will have
            that number of entries and OnSolution() will be called if the user selects one of these
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.OnDifferentSolution(System.Boolean)">
            <summary>
            Will be called when MultiSolution is true and the user presses the PgUp/PgDown key
            or selects the appropriate entries of the context menu. Override this
            method to implement a multi-solution construction. Default implementation
            is empty.
            </summary>
            <param name="next">true: forward, false: backward</param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.OnSolution(System.Int32)">
            <summary>
            Will be called when MultiSolution is true and the user presses the PgUp/PgDown key
            or selects the appropriate entries of the context menu. Override this
            method to implement a multi-solution construction. Default implementation
            is empty.
            </summary>
            <param name="solutionNumber">the 0-based number of solution</param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.AutoRepeat">
            <summary>
            Detremins whether this action supports autorepeat. Autorepeat is enabled
            in the <see cref="F:CADability.Settings.GlobalSettings"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.ConstructAction.OnMouseMove(CADability.Substitutes.MouseEventArgs,CADability.IView)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnMouseMove(CADability.Substitutes.MouseEventArgs,CADability.IView)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
            <param name="e"><paramref name="Action.OnMouseMove.e.OnMouseMove.e"/></param>
            <param name="vw"><paramref name="Action.OnMouseMove.vw.OnMouseMove.vw"/></param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.OnMouseUp(CADability.Substitutes.MouseEventArgs,CADability.IView)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnMouseUp(CADability.Substitutes.MouseEventArgs,CADability.IView)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
            <param name="e"><paramref name="Action.OnMouseUp.e.OnMouseUp.e"/></param>
            <param name="vw"><paramref name="Action.OnMouseUp.vw.OnMouseUp.vw"/></param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.OnMouseDown(CADability.Substitutes.MouseEventArgs,CADability.IView)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnMouseDown(CADability.Substitutes.MouseEventArgs,CADability.IView)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
            <param name="e"><paramref name="Action.OnMouseDown.e.OnMouseDown.e"/></param>
            <param name="vw"><paramref name="Action.OnMouseDown.vw.OnMouseDown.vw"/></param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.OnMouseLeave(System.EventArgs,CADability.IView)">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.OnMouseLeave(System.EventArgs,CADability.IView)"/>. Usually you don't override this
            method, but handle the appropriate events of the input objects.
            </summary>
            <param name="e"></param>
            <param name="vw"></param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.OnEscape(System.Object)">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.OnEscape"/>. Usually you don't override this
            method, but handle the appropriate events of the input objects.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.OnEscape">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.OnEscape"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.OnEnter(System.Object)">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.OnEnter"/>. Usually you don't override this
            method, but handle the appropriate events of the input objects.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.OnEnter">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.OnEnter"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.OnTab(System.Object)">
            <summary>
            The tab key was pressed: select the next input field, also accept optional fields
            </summary>
            <param name="sender"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.ConstructAction.OnSetAction">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnSetAction"/>. If you override this method
            don't forget to call the base implementation.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.OnActivate(CADability.Actions.Action,System.Boolean)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnActivate(CADability.Actions.Action,System.Boolean)"/>. If you override this method
            don't forget to call the base implementation.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.OnInactivate(CADability.Actions.Action,System.Boolean)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnInactivate(CADability.Actions.Action,System.Boolean)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
            <param name="NewActiveAction"><paramref name="Action.OnInactivate.NewActiveAction.OnInactivate.NewActiveAction"/></param>
            <param name="RemovingAction"><paramref name="Action.OnInactivate.RemovingAction.OnInactivate.RemovingAction"/></param>
        </member>
        <member name="M:CADability.Actions.ConstructAction.OnRemoveAction">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnRemoveAction"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.OnViewsChanged">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnViewsChanged"/>. This implementation
            aborts the action.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.FindTangentialPoint(CADability.Substitutes.MouseEventArgs,CADability.IView,CADability.GeoPoint@)">
            <summary>
            Additional posibility for the derived action to specify a tangential point
            besides the tangential point from the base point
            </summary>
            <param name="e"></param>
            <param name="vw"></param>
            <param name="found"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.ConstructAction.SnapPoint(CADability.Substitutes.MouseEventArgs,CADability.IView,CADability.GeoObject.SnapPointFinder.DidSnapModes@)">
            <summary>
            Gets a point from the MouseEventArgs and the view. The point will be in the appropriate
            model and will be snapped according to the views snap setting.
            </summary>
            <param name="e">MouseEventArgs with the mouse position</param>
            <param name="vw">the view</param>
            <returns>point in model space</returns>
        </member>
        <member name="P:CADability.Actions.ConstructAction.LastSnapObject">
            <summary>
            Returns the GeoObject which was involved in the last snap operation. May be null;
            </summary>
        </member>
        <member name="P:CADability.Actions.ConstructAction.LastSnapMode">
            <summary>
            Returns the last snap mode, i.e. the reason why the snap took place. E.g. did snap to an endpoint or did snap to 
            the surface of a face.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAction.OnCommand(System.String)">
            <summary>
            Handles a few context menu commands. Don't forget to call the base implementation
            if you override this method. See <see cref="T:CADability.UserInterface.ICommandHandler"/>.
            </summary>
            <param name="MenuId"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.ConstructAction.OnUpdateCommand(System.String,CADability.UserInterface.CommandState)">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.OnUpdateCommand(System.String,CADability.UserInterface.CommandState)"/>
            </summary>
            <param name="MenuId"></param>
            <param name="CommandState"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.ConstructAction.Finish">
            <summary>
            Explicitly finish this action. OnDone will be called.
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAequidist">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructAngleTwoPoints">
            <summary>
            Action that constructs an angle defined by two points. It uses a <see cref="T:CADability.UserInterface.AngleProperty"/>
            to communicate the constructed point to the outside.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAngleTwoPoints.OnSetAction">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnSetAction"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAngleTwoPoints.OnActivate(CADability.Actions.Action,System.Boolean)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnActivate(CADability.Actions.Action,System.Boolean)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructAngleTwoPoints.OnInactivate(CADability.Actions.Action,System.Boolean)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnInactivate(CADability.Actions.Action,System.Boolean)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
            <param name="NewActiveAction"><paramref name="Action.OnInactivate.NewActiveAction.OnInactivate.NewActiveAction"/></param>
            <param name="RemovingAction"><paramref name="Action.OnInactivate.RemovingAction.OnInactivate.RemovingAction"/></param>
        </member>
        <member name="M:CADability.Actions.ConstructAngleTwoPoints.GetID">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.GetID"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.ConstructAngleTwoPoints.OnDone">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnDone"/>
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructDirectionOfCurve">
            <summary>
            Action that constructs a length as a distance between two points. It uses a <see cref="T:CADability.UserInterface.LengthProperty"/>
            to communicate the constructed length to the outside.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructDirectionOfCurve.OnSetAction">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnSetAction"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructDirectionOfCurve.GetID">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.GetID"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.ConstructDirectionOfCurve.OnDone">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnDone"/>
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructDirectionOfSurface">
            <summary>
            Action that constructs a length as a distance between two points. It uses a <see cref="T:CADability.UserInterface.LengthProperty"/>
            to communicate the constructed length to the outside.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructDirectionOfSurface.OnInactivate(CADability.Actions.Action,System.Boolean)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnInactivate(CADability.Actions.Action,System.Boolean)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
            <param name="NewActiveAction"><paramref name="Action.OnInactivate.NewActiveAction.OnInactivate.NewActiveAction"/></param>
            <param name="RemovingAction"><paramref name="Action.OnInactivate.RemovingAction.OnInactivate.RemovingAction"/></param>
        </member>
        <member name="T:CADability.Actions.ConstructDirectionTwoPoints">
            <summary>
            Action that constructs a length as a distance between two points. It uses a <see cref="T:CADability.UserInterface.LengthProperty"/>
            to communicate the constructed length to the outside.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructDirectionTwoPoints.OnSetAction">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnSetAction"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructDirectionTwoPoints.GetID">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.GetID"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.ConstructDirectionTwoPoints.OnDone">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnDone"/>
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructDistanceOfCurve">
            <summary>
            Action that constructs a length as a distance between two points. It uses a <see cref="T:CADability.UserInterface.LengthProperty"/>
            to communicate the constructed length to the outside.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructDistanceOfCurve.OnSetAction">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnSetAction"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructDistanceOfCurve.GetID">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.GetID"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.ConstructDistanceOfCurve.OnDone">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnDone"/>
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructDistancePointCurve">
            <summary>
            Action that constructs a length as a distance between two points. It uses a <see cref="T:CADability.UserInterface.LengthProperty"/>
            to communicate the constructed length to the outside.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructDistancePointCurve.OnSetAction">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnSetAction"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructDistancePointCurve.GetID">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.GetID"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.ConstructDistancePointCurve.OnDone">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnDone"/>
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructDistanceTwoCurves">
            <summary>
            Action that constructs a length as a distance between two points. It uses a <see cref="T:CADability.UserInterface.LengthProperty"/>
            to communicate the constructed length to the outside.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructDistanceTwoCurves.OnSetAction">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnSetAction"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructDistanceTwoCurves.GetID">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.GetID"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.ConstructDistanceTwoCurves.OnDone">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnDone"/>
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructDistanceTwoPoints">
            <summary>
            Action that constructs a length as a distance between two points. It uses a <see cref="T:CADability.UserInterface.LengthProperty"/>
            to communicate the constructed length to the outside.
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructIntersectPoint">
            <summary>
            Action that constructs a midpoint between two points. It uses a <see cref="T:CADability.UserInterface.GeoPointProperty"/>
            to communicate the constructed point to the outside.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructIntersectPoint.OnSetAction">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnSetAction"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructIntersectPoint.GetID">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.GetID"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.ConstructIntersectPoint.OnDone">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnDone"/>
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructMidPoint">
            <summary>
            Action that constructs a midpoint between two points. It uses a <see cref="T:CADability.UserInterface.GeoPointProperty"/>
            to communicate the constructed point to the outside.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructMidPoint.OnSetAction">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnSetAction"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructMidPoint.GetID">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.GetID"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.ConstructMidPoint.OnDone">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnDone"/>
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructObjectPoint">
            <summary>
            Action that constructs a midpoint between two points. It uses a <see cref="T:CADability.UserInterface.GeoPointProperty"/>
            to communicate the constructed point to the outside.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructObjectPoint.OnSetAction">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnSetAction"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructObjectPoint.GetID">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.GetID"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.ConstructObjectPoint.OnDone">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnDone"/>
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructPlane">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructPlane.GetID">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.GetID"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.ConstructPlane.OnSetAction">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnSetAction"/>
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructPlane2PointsDrawingPlane">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructPlane2PointsDrawingPlane.GetID">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.GetID"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.ConstructPlane2PointsDrawingPlane.OnSetAction">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnSetAction"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructPlane2PointsDrawingPlane.AutoRepeat">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.AutoRepeat"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:CADability.Actions.ConstructPlaneOriginNormalPoint">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructPlaneOriginNormalPoint.GetID">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.GetID"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.ConstructPlaneOriginNormalPoint.AutoRepeat">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.AutoRepeat"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.ConstructPlaneOriginNormalPoint.OnSetAction">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnSetAction"/>
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructPolarPoint">
            <summary>
            Action that constructs a length as a distance between two points. It uses a <see cref="T:CADability.UserInterface.LengthProperty"/>
            to communicate the constructed length to the outside.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructPolarPoint.OnSetAction">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnSetAction"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructPolarPoint.GetID">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.GetID"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.ConstructPolarPoint.OnDone">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnDone"/>
            </summary>
        </member>
        <member name="T:CADability.Actions.ConstructVectorPoint">
            <summary>
            Action that constructs a length as a distance between two points. It uses a <see cref="T:CADability.UserInterface.LengthProperty"/>
            to communicate the constructed length to the outside.
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructVectorPoint.OnSetAction">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnSetAction"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.ConstructVectorPoint.GetID">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.GetID"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.ConstructVectorPoint.OnDone">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnDone"/>
            </summary>
        </member>
        <member name="T:CADability.Actions.CopyCircularObjects">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.Actions.CopyCircularObjects.OnSetAction">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnSetAction"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.CopyCircularObjects.GetID">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.GetID"/>.
            </summary>
        </member>
        <member name="M:CADability.Actions.CopyCircularObjects.OnDone">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnDone"/>
            </summary>
        </member>
        <member name="T:CADability.Actions.CopyMatrixObjects">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.Actions.CopyMatrixObjects.OnSetAction">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnSetAction"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.CopyMatrixObjects.GetID">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.GetID"/>.
            </summary>
        </member>
        <member name="M:CADability.Actions.CopyMatrixObjects.OnDone">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnDone"/>
            </summary>
        </member>
        <member name="T:CADability.Actions.EditText">
            <summary>
            Aktion zum editieren von Text in der Zeichenfl√§che
            </summary>
        </member>
        <member name="T:CADability.Actions.EditTextAction">
            <summary>
            Aktion zum editieren von Text in der Zeichenfl√§che
            </summary>
        </member>
        <member name="T:CADability.Actions.FeedBackPlane">
            <summary>
            A translucent section of a plane for the display during an interactive action. Use this object in a call
            to  <see cref="P:CADability.Actions.ConstructAction.FeedBack"/>.
            </summary>
        </member>
        <member name="M:CADability.Actions.FeedBackPlane.#ctor(CADability.Plane,System.Double,System.Double)">
            <summary>
            Constructs a feedback plane. The plane will usually be modified according to the user action 
            (e.g. mouse movement)
            </summary>
            <param name="pln">The plane position (center)</param>
            <param name="width">Width of the section beeing displayed</param>
            <param name="height">Height of the plane</param>
        </member>
        <member name="M:CADability.Actions.FeedBackPlane.Set(CADability.Plane,System.Double,System.Double)">
            <summary>
            Change the position of the plane. If currently displayed, the position will change in the view.
            </summary>
            <param name="pln">The plane position (center)</param>
            <param name="width">Width of the section beeing displayed</param>
            <param name="height">Height of the plane</param>
        </member>
        <member name="T:CADability.Actions.GeneralAngleAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.Actions.GeneralAngleAction.OnSetAction">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnSetAction"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
        </member>
        <member name="M:CADability.Actions.GeneralAngleAction.OnMouseMove(CADability.Substitutes.MouseEventArgs,CADability.IView)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnMouseMove(CADability.Substitutes.MouseEventArgs,CADability.IView)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
            <param name="e"><paramref name="Action.OnMouseMove.e.OnMouseMove.e"/></param>
            <param name="vw"><paramref name="Action.OnMouseMove.vw.OnMouseMove.vw"/></param>
        </member>
        <member name="M:CADability.Actions.GeneralAngleAction.GetID">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.GetID"/>.
            </summary>
        </member>
        <member name="M:CADability.Actions.GeneralAngleAction.OnRemoveAction">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.OnRemoveAction"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.GeneralAngleAction.OnMouseUp(CADability.Substitutes.MouseEventArgs,CADability.IView)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnMouseUp(CADability.Substitutes.MouseEventArgs,CADability.IView)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
            <param name="e"><paramref name="Action.OnMouseUp.e.OnMouseUp.e"/></param>
            <param name="vw"><paramref name="Action.OnMouseUp.vw.OnMouseUp.vw"/></param>
        </member>
        <member name="M:CADability.Actions.GeneralAngleAction.OnActivate(CADability.Actions.Action,System.Boolean)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnActivate(CADability.Actions.Action,System.Boolean)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
        </member>
        <member name="M:CADability.Actions.GeneralAngleAction.OnInactivate(CADability.Actions.Action,System.Boolean)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnInactivate(CADability.Actions.Action,System.Boolean)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
            <param name="NewActiveAction"><paramref name="Action.OnInactivate.NewActiveAction.OnInactivate.NewActiveAction"/></param>
            <param name="RemovingAction"><paramref name="Action.OnInactivate.RemovingAction.OnInactivate.RemovingAction"/></param>
        </member>
        <member name="M:CADability.Actions.GeneralAngleAction.OnEscape">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.OnEscape"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.GeneralAngleAction.OnEnter">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.OnEnter"/>
            </summary>
        </member>
        <member name="T:CADability.Actions.GeneralGeoPointAction">
            <summary>
            Simple Action to modify a GeoPoint by moving the mouse.  The modification will start imediately
            after the action is set and will terminate when the mouse button is released or enter
            or escape is pressed.
            </summary>
        </member>
        <member name="M:CADability.Actions.GeneralGeoPointAction.#ctor(CADability.GeoPoint)">
            <summary>
            Constructs a GeneralGeoPointAction giving the initial Value of the point.
            This value will be used in the <see cref="E:CADability.Actions.GeneralGeoPointAction.SetGeoPointEvent"/> when the user presses ESC
            </summary>
            <param name="initialGeoPointValue">initial value of the GeoPoint</param>
        </member>
        <member name="M:CADability.Actions.GeneralGeoPointAction.OnSetAction">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnSetAction"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
        </member>
        <member name="M:CADability.Actions.GeneralGeoPointAction.OnMouseMove(CADability.Substitutes.MouseEventArgs,CADability.IView)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnMouseMove(CADability.Substitutes.MouseEventArgs,CADability.IView)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
            <param name="e"><paramref name="Action.OnMouseMove.e.OnMouseMove.e"/></param>
            <param name="vw"><paramref name="Action.OnMouseMove.vw.OnMouseMove.vw"/></param>
        </member>
        <member name="M:CADability.Actions.GeneralGeoPointAction.GetID">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.GetID"/>.
            </summary>
        </member>
        <member name="M:CADability.Actions.GeneralGeoPointAction.OnRemoveAction">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.OnRemoveAction"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.GeneralGeoPointAction.OnMouseUp(CADability.Substitutes.MouseEventArgs,CADability.IView)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnMouseUp(CADability.Substitutes.MouseEventArgs,CADability.IView)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
            <param name="e"><paramref name="Action.OnMouseUp.e.OnMouseUp.e"/></param>
            <param name="vw"><paramref name="Action.OnMouseUp.vw.OnMouseUp.vw"/></param>
        </member>
        <member name="M:CADability.Actions.GeneralGeoPointAction.OnMouseDown(CADability.Substitutes.MouseEventArgs,CADability.IView)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnMouseDown(CADability.Substitutes.MouseEventArgs,CADability.IView)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
            <param name="e"><paramref name="Action.OnMouseDown.e.OnMouseDown.e"/></param>
            <param name="vw"><paramref name="Action.OnMouseDown.vw.OnMouseDown.vw"/></param>
        </member>
        <member name="M:CADability.Actions.GeneralGeoPointAction.OnActivate(CADability.Actions.Action,System.Boolean)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnActivate(CADability.Actions.Action,System.Boolean)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
        </member>
        <member name="M:CADability.Actions.GeneralGeoPointAction.OnInactivate(CADability.Actions.Action,System.Boolean)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnInactivate(CADability.Actions.Action,System.Boolean)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
            <param name="NewActiveAction"><paramref name="Action.OnInactivate.NewActiveAction.OnInactivate.NewActiveAction"/></param>
            <param name="RemovingAction"><paramref name="Action.OnInactivate.RemovingAction.OnInactivate.RemovingAction"/></param>
        </member>
        <member name="M:CADability.Actions.GeneralGeoPointAction.OnEscape">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.OnEscape"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.GeneralGeoPointAction.OnEnter">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.OnEnter"/>
            </summary>
        </member>
        <member name="T:CADability.Actions.GeneralGeoVectorAction">
            <summary>
            Simple <see cref="T:CADability.Actions.Action"/> to modify a GeoVector. This action doesn't set up an own
            ControlCenter entry but assumes there is a <see cref="T:CADability.UserInterface.GeoVectorProperty"/> entry active in the ControlCenter.
            </summary>
        </member>
        <member name="F:CADability.Actions.GeneralGeoVectorAction.UserData">
            <summary>
            UserData to differentiate between multiple GeneralGeoVectorActions.
            </summary>
        </member>
        <member name="M:CADability.Actions.GeneralGeoVectorAction.#ctor(CADability.UserInterface.GeoVectorProperty,CADability.GeoPoint)">
            <summary>
            Constructs a GeneralGeoVectorAction to modify the provided <see cref="T:CADability.UserInterface.GeoVectorProperty"/>
            </summary>
            <param name="ToModify">Property to modify</param>
            <param name="basePoint">A basePoint for the modification</param>
        </member>
        <member name="T:CADability.Actions.GeneralGeoVectorAction.SetGeoVectorDelegate">
            <summary>
            Type definition for <see cref="E:CADability.Actions.GeneralGeoVectorAction.SetGeoVectorEvent"/>.
            </summary>
            <param name="sender">Source of notification (this object)</param>
            <param name="NewValue">New value for the GeoPoint</param>
        </member>
        <member name="E:CADability.Actions.GeneralGeoVectorAction.SetGeoVectorEvent">
            <summary>
            Event beeing called when the property changes. You don't need to specify a handler here because
            GeoVectorProperty.SetGeoVector is beeing called.
            </summary>
        </member>
        <member name="M:CADability.Actions.GeneralGeoVectorAction.OnSetAction">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnSetAction"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
        </member>
        <member name="M:CADability.Actions.GeneralGeoVectorAction.OnMouseMove(CADability.Substitutes.MouseEventArgs,CADability.IView)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnMouseMove(CADability.Substitutes.MouseEventArgs,CADability.IView)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
            <param name="e"><paramref name="Action.OnMouseMove.e.OnMouseMove.e"/></param>
            <param name="vw"><paramref name="Action.OnMouseMove.vw.OnMouseMove.vw"/></param>
        </member>
        <member name="M:CADability.Actions.GeneralGeoVectorAction.GetID">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.GetID"/>.
            </summary>
        </member>
        <member name="M:CADability.Actions.GeneralGeoVectorAction.OnMouseUp(CADability.Substitutes.MouseEventArgs,CADability.IView)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnMouseUp(CADability.Substitutes.MouseEventArgs,CADability.IView)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
            <param name="e"><paramref name="Action.OnMouseUp.e.OnMouseUp.e"/></param>
            <param name="vw"><paramref name="Action.OnMouseUp.vw.OnMouseUp.vw"/></param>
        </member>
        <member name="M:CADability.Actions.GeneralGeoVectorAction.OnActivate(CADability.Actions.Action,System.Boolean)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnActivate(CADability.Actions.Action,System.Boolean)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
        </member>
        <member name="M:CADability.Actions.GeneralGeoVectorAction.OnInactivate(CADability.Actions.Action,System.Boolean)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnInactivate(CADability.Actions.Action,System.Boolean)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
            <param name="NewActiveAction"><paramref name="Action.OnInactivate.NewActiveAction.OnInactivate.NewActiveAction"/></param>
            <param name="RemovingAction"><paramref name="Action.OnInactivate.RemovingAction.OnInactivate.RemovingAction"/></param>
        </member>
        <member name="T:CADability.Actions.GeneralLengthAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.Actions.GeneralLengthAction.OnSetAction">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnSetAction"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
        </member>
        <member name="M:CADability.Actions.GeneralLengthAction.OnMouseMove(CADability.Substitutes.MouseEventArgs,CADability.IView)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnMouseMove(CADability.Substitutes.MouseEventArgs,CADability.IView)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
            <param name="e"><paramref name="Action.OnMouseMove.e.OnMouseMove.e"/></param>
            <param name="vw"><paramref name="Action.OnMouseMove.vw.OnMouseMove.vw"/></param>
        </member>
        <member name="M:CADability.Actions.GeneralLengthAction.GetID">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.GetID"/>.
            </summary>
        </member>
        <member name="M:CADability.Actions.GeneralLengthAction.OnRemoveAction">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.OnRemoveAction"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.GeneralLengthAction.OnMouseUp(CADability.Substitutes.MouseEventArgs,CADability.IView)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnMouseUp(CADability.Substitutes.MouseEventArgs,CADability.IView)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
            <param name="e"><paramref name="Action.OnMouseUp.e.OnMouseUp.e"/></param>
            <param name="vw"><paramref name="Action.OnMouseUp.vw.OnMouseUp.vw"/></param>
        </member>
        <member name="M:CADability.Actions.GeneralLengthAction.OnActivate(CADability.Actions.Action,System.Boolean)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnActivate(CADability.Actions.Action,System.Boolean)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CADability.Actions.GeneralLengthAction.OnInactivate(CADability.Actions.Action,System.Boolean)" -->
        <member name="M:CADability.Actions.GeneralLengthAction.OnEscape">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.OnEscape"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.GeneralLengthAction.OnEnter">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.OnEnter"/>
            </summary>
        </member>
        <member name="T:CADability.Actions.FeedBackChangedDelegate">
            <summary>
            Delegate for the event indicating a change of an <see cref="T:CADability.Actions.IFeedBack"/> object.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:CADability.Actions.IFeedBack">
            <summary>
            Interface, which must be implemented by objects that act as eedback objects in Actions.
            See <see cref="T:CADability.Actions.ActionFeedBack"/> and <see cref="P:CADability.Actions.Action.FeedBack"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.IFeedBack.PaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Implements the painting of this object
            </summary>
            <param name="paintTo3D">Where to paint to</param>
        </member>
        <member name="E:CADability.Actions.IFeedBack.FeedBackChangedEvent">
            <summary>
            Event raised by this object to indicate a change.
            </summary>
        </member>
        <member name="T:CADability.Actions.Measure">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.Actions.Measure.OnSetAction">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnSetAction"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
        </member>
        <member name="M:CADability.Actions.Measure.GetID">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.GetID"/>.
            </summary>
        </member>
        <member name="T:CADability.Actions.ModifyLayoutPatch">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.MoveObjects">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.PlaceObjects">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ReflectObjects">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.RotateObjects">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.Actions.RotateObjects.OnUpdateCommand(System.String,CADability.UserInterface.CommandState)">
            <summary>
            Override if you also override <see cref="M:CADability.Actions.RotateObjects.OnCommand(System.String)"/> to manipulate the appearance
            of the corresponding menu item or the state of the toolbar button. The default implementation
            checks whether the MenuId from the parameter corresponds to the menuId member variable
            and checks the item if appropriate
            </summary>
            <param name="MenuId">menu id the command state is queried for</param>
            <param name="CommandState">the command state to manipulate</param>
            <returns></returns>
        </member>
        <member name="T:CADability.Actions.ScaleObjects">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.SelectObjectsSettings">
            <summary>
            Diese Klasse fasst die Settings f√ºr das Markieren zusammen. Im einzelnen sind das:
            Select.HandleSize, 
            Select.FrameColor, 
            Select.HandleColor, 
            Select.UseFrame
            </summary>
        </member>
        <member name="M:CADability.Actions.SelectObjectsSettings.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="T:CADability.Actions.SelectObjectsAction">
            <summary>
            The <see cref="T:CADability.Actions.Action"/> used to select GeoObjects of a (visible) <see cref="T:CADability.Model"/>.
            Mouseclicks in the view are used to determine which objects should be selected. The user
            can select a rectangular area by dragging the mouse while the left button is pushed. Dragging
            from left to right selects all objects completely inside the rectangle, dragging from right to left
            selects all objects which are touched by the ractangle. The <see cref="P:CADability.Actions.SelectObjectsAction.PickMode"/> determins on which
            level the selection is performed, the <see cref="P:CADability.Project.FilterList"/> adds additional filtering
            the the selection process.
            </summary>
        </member>
        <member name="M:CADability.Actions.SelectObjectsAction.#ctor(CADability.IFrame)">
            <summary>
            Constructs a new SelectObjectsAction. This is automatically done when a <see cref="!:SingleDocumentFrame"/>
            is created and the instance of this class can be retrieved from <see cref="!:SingleDocumentFrame.ActiveAction"/>.
            </summary>
            <param name="Frame">The <see cref="T:CADability.IFrame">Frame</see> on which this action operates.</param>
        </member>
        <member name="T:CADability.Actions.SelectObjectsAction.SelectedObjectListChanged">
            <summary>
            Method definition for the <see cref="E:CADability.Actions.SelectObjectsAction.SelectedObjectListChangedEvent"/>.
            </summary>
            <param name="sender">The action that raised the event.</param>
            <param name="selectedObjects">The list of the now selected objects</param>
        </member>
        <member name="E:CADability.Actions.SelectObjectsAction.SelectedObjectListChangedEvent">
            <summary>
            Event raised when the list of selected objects changed. 
            </summary>
        </member>
        <member name="T:CADability.Actions.SelectObjectsAction.ClickOnSelectedObjectDelegate">
            <summary>
            Method definition of the <see cref="E:CADability.Actions.SelectObjectsAction.ClickOnSelectedObjectEvent"/>
            </summary>
            <param name="selected">The object on which the click occurred.</param>
            <param name="vw">The <see cref="T:CADability.IView">view</see> in which the click happend</param>
            <param name="e">The original MouseEventArgs propagated from the mouse event</param>
            <param name="handled">If handled set to true by the handler of the event, no further action will be performed.</param>
        </member>
        <member name="E:CADability.Actions.SelectObjectsAction.ClickOnSelectedObjectEvent">
            <summary>
            Event raised when clicking on a already selected object.
            </summary>
        </member>
        <member name="T:CADability.Actions.SelectObjectsAction.BeforeShowContextMenuDelegate">
            <summary>
            Method definition of the <see cref="E:CADability.Actions.SelectObjectsAction.BeforeShowContextMenuEvent"/>
            </summary>
            <param name="selected">The object on which the click occurred.</param>
            <param name="vw">The <see cref="T:CADability.IView">view</see> in which the click happend</param>
        </member>
        <member name="E:CADability.Actions.SelectObjectsAction.BeforeShowContextMenuEvent">
            <summary>
            Event raised before context menue is displayed, you can modify it here.
            </summary>
        </member>
        <member name="T:CADability.Actions.SelectObjectsAction.MouseAction">
            <summary>
            Enumeration used in <see cref="T:CADability.Actions.SelectObjectsAction.FilterMouseMessagesDelegate"/>.
            </summary>
        </member>
        <member name="F:CADability.Actions.SelectObjectsAction.MouseAction.MouseDown">
            <summary>
            Mouse button pushed
            </summary>
        </member>
        <member name="F:CADability.Actions.SelectObjectsAction.MouseAction.MouseUp">
            <summary>
            Mouse button released
            </summary>
        </member>
        <member name="F:CADability.Actions.SelectObjectsAction.MouseAction.MouseMove">
            <summary>
            Mouse is moving
            </summary>
        </member>
        <member name="T:CADability.Actions.SelectObjectsAction.FilterMouseMessagesDelegate">
            <summary>
            Method declaration for the <see cref="E:CADability.Actions.SelectObjectsAction.FilterMouseMessagesEvent"/>.
            </summary>
            <param name="mouseAction">The mouse action causing the event</param>
            <param name="e">Original MouseEventArgs</param>
            <param name="vw">The <see cref="T:CADability.IView">view</see> in which the mouse action took place.</param>
            <param name="handled">If handled set to true by the handler of the event, no further action will be performed.</param>
        </member>
        <member name="E:CADability.Actions.SelectObjectsAction.FilterMouseMessagesEvent">
            <summary>
            Event raised before the according mouse message is processed by this action. The user may
            prevent the handling of this mouse message by this action and/or do some other work instead.
            </summary>
        </member>
        <member name="T:CADability.Actions.SelectObjectsAction.FilterDragListDelegate">
            <summary>
            Delegate definition for the <see cref="E:CADability.Actions.SelectObjectsAction.FilterDragListEvent"/>.
            </summary>
            <param name="objectsAboutToBeDragged">The objects that are going to be dragged</param>
        </member>
        <member name="E:CADability.Actions.SelectObjectsAction.FilterDragListEvent">
            <summary>
            Event to filter objects that are beeing dragged. This event is called just before the objects are dragged.
            You may modify the list of objects. If you clear the list, no objects will be dragged.
            </summary>
        </member>
        <member name="M:CADability.Actions.SelectObjectsAction.GetFocusedSelectedObject">
            <summary>
            Returns the selected object which currently has the focus. This is only meaningful if several objects
            are selected and the user navigates in the control center
            </summary>
            <returns>The selected object which currently has the focus</returns>
        </member>
        <member name="M:CADability.Actions.SelectObjectsAction.SetFocusedSelectedObject(CADability.GeoObject.IGeoObject)">
            <summary>
            Set the selected object which should get focus. This is only meaningful if several objects
            are selected and the user navigates in the control center
            </summary>
            <param name="geoObject">The GeoObject which should get the focus</param>
        </member>
        <member name="P:CADability.Actions.SelectObjectsAction.PickMode">
            <summary>
            Gets or sets the pickmode or selection mode for this SelectObjectsAction.
            </summary>
        </member>
        <member name="M:CADability.Actions.SelectObjectsAction.AddSelectedObject(CADability.GeoObject.IGeoObject)">
            <summary>
            Adds the provided GeoObject to the list of selected objects.
            The <see cref="E:CADability.Actions.SelectObjectsAction.SelectedObjectListChangedEvent"/> will be raised.
            </summary>
            <param name="selObj">The object to add</param>
        </member>
        <member name="M:CADability.Actions.SelectObjectsAction.AddSelectedObjects(CADability.GeoObject.GeoObjectList)">
            <summary>
            Adds the provided list of geoObjects to the list of selected objects.
            The <see cref="E:CADability.Actions.SelectObjectsAction.SelectedObjectListChangedEvent"/> will be raised.
            </summary>
            <param name="selObj">List of objects to add</param>
        </member>
        <member name="M:CADability.Actions.SelectObjectsAction.SetSelectedObjects(CADability.GeoObject.GeoObjectList)">
            <summary>
            Replaces the contents of the list of selected objects by the contents of the provided list.
            The <see cref="E:CADability.Actions.SelectObjectsAction.SelectedObjectListChangedEvent"/> will be raised.
            </summary>
            <param name="selObj">List of GeoObjects to be selected</param>
        </member>
        <member name="M:CADability.Actions.SelectObjectsAction.SetSelectedObjects(CADability.GeoObject.GeoObjectList,System.Boolean)">
            <summary>
            Replaces the contents of the list of selected objects by those objects of the provided list
            that are accepted by the according <see cref="P:CADability.Project.FilterList"/>.
            The <see cref="E:CADability.Actions.SelectObjectsAction.SelectedObjectListChangedEvent"/> will be raised.
            </summary>
            <param name="selObj">List of objects to select.</param>
            <param name="useFilter">If true, applies all active Filters of the <see cref="P:CADability.Project.FilterList"/>.</param>
        </member>
        <member name="M:CADability.Actions.SelectObjectsAction.RemoveSelectedObject(CADability.GeoObject.IGeoObject)">
            <summary>
            Removes the provided GeoObject from the list of selected objects.
            The <see cref="E:CADability.Actions.SelectObjectsAction.SelectedObjectListChangedEvent"/> will be raised.
            </summary>
            <param name="toDeselect">The object to remove</param>
        </member>
        <member name="M:CADability.Actions.SelectObjectsAction.ClearSelectedObjects">
            <summary>
            Clears the list of selected objects. No more objects are selected after this call.
            The <see cref="E:CADability.Actions.SelectObjectsAction.SelectedObjectListChangedEvent"/> will be raised.
            </summary>
        </member>
        <member name="M:CADability.Actions.SelectObjectsAction.GetSelectedObjects">
            <summary>
            Returns the list of selected GeoObjects.
            </summary>
            <returns>The list of selected GeoObjects</returns>
        </member>
        <member name="M:CADability.Actions.SelectObjectsAction.OnActivate(CADability.Actions.Action,System.Boolean)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnActivate(CADability.Actions.Action,System.Boolean)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
        </member>
        <member name="M:CADability.Actions.SelectObjectsAction.OnInactivate(CADability.Actions.Action,System.Boolean)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnInactivate(CADability.Actions.Action,System.Boolean)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
            <param name="NewActiveAction"><paramref name="Action.OnInactivate.NewActiveAction.OnInactivate.NewActiveAction"/></param>
            <param name="RemovingAction"><paramref name="Action.OnInactivate.RemovingAction.OnInactivate.RemovingAction"/></param>
        </member>
        <member name="M:CADability.Actions.SelectObjectsAction.OnMouseMove(CADability.Substitutes.MouseEventArgs,CADability.IView)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnMouseMove(CADability.Substitutes.MouseEventArgs,CADability.IView)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
            <param name="e"><paramref name="Action.OnMouseMove.e.OnMouseMove.e"/></param>
            <param name="vw"><paramref name="Action.OnMouseMove.vw.OnMouseMove.vw"/></param>
        </member>
        <member name="M:CADability.Actions.SelectObjectsAction.OnMouseUp(CADability.Substitutes.MouseEventArgs,CADability.IView)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnMouseUp(CADability.Substitutes.MouseEventArgs,CADability.IView)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
            <param name="e"><paramref name="Action.OnMouseUp.e.OnMouseUp.e"/></param>
            <param name="vw"><paramref name="Action.OnMouseUp.vw.OnMouseUp.vw"/></param>
        </member>
        <member name="M:CADability.Actions.SelectObjectsAction.OnMouseDown(CADability.Substitutes.MouseEventArgs,CADability.IView)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnMouseDown(CADability.Substitutes.MouseEventArgs,CADability.IView)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
            <param name="e"><paramref name="Action.OnMouseDown.e.OnMouseDown.e"/></param>
            <param name="vw"><paramref name="Action.OnMouseDown.vw.OnMouseDown.vw"/></param>
        </member>
        <member name="M:CADability.Actions.SelectObjectsAction.GetID">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.GetID"/>.
            </summary>
        </member>
        <member name="M:CADability.Actions.SelectObjectsAction.OnSetAction">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnSetAction"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
        </member>
        <member name="M:CADability.Actions.SelectObjectsAction.IsOverHotSpot(CADability.Substitutes.MouseEventArgs,CADability.IView)">
            <summary>
            Returns true if the coordinate in the parameter e is inside a currently visible hotspot
            </summary>
            <param name="e">the parameter provided by the mouse event</param>
            <param name="vw">the view which issued the mouse event</param>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.SelectObjectsAction.OnDisplayChanged(CADability.DisplayChangeArg)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnDisplayChanged(CADability.DisplayChangeArg)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
        </member>
        <member name="M:CADability.Actions.SelectObjectsAction.OnViewsChanged">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnViewsChanged"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
        </member>
        <member name="M:CADability.Actions.SelectObjectsAction.OnDelete">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnDelete"/>. This implementation initiates the menu command "MenuId.Object.Delete".
            </summary>
        </member>
        <member name="M:CADability.Actions.SelectObjectsAction.OnCommand(System.String)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.ICommandHandler.OnCommand(System.String)"/>. See <see cref="M:CADability.UserInterface.ICommandHandler.OnCommand(System.String)"/> for more information.
            </summary>
            <param name="MenuId"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.SelectObjectsAction.OnUpdateCommand(System.String,CADability.UserInterface.CommandState)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.ICommandHandler.OnUpdateCommand(System.String,CADability.UserInterface.CommandState)"/>. See <see cref="M:CADability.UserInterface.ICommandHandler.OnUpdateCommand(System.String,CADability.UserInterface.CommandState)"/> for more information.
            </summary>
            <param name="MenuId"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.SelectObjectsAction.OnHotspotChanged(CADability.IHotSpot,CADability.HotspotChangeMode)">
            <summary>
            Will be called when a hotspot becomes visible/invisible or selected/deselected. Will also be called, when a hotspot has been moved as a result of the 
            change notification of the GeoObject. this is not the place to modify the GeoObject.
            </summary>
            <param name="sender">The hotspot that caused this notification</param>
            <param name="mode">The kind of the change operation</param>
        </member>
        <member name="P:CADability.Actions.SelectObjectsAction.LastCursorHotspot">
            <summary>
            Get the last hotspot under the cursor
            </summary>
        </member>
        <member name="P:CADability.Actions.SelectObjectsAction.LastCursorPosition">
            <summary>
            Get the area the cursor is currently over.
            e.g. EmptySpace or Hotspot
            </summary>
        </member>
        <member name="T:CADability.Actions.SnapObjects">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ToolsConnect">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ToolsCutOff">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ToolsCutOffMultiple">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ToolsExpand">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ToolsRoundIn">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.Actions.ToolsRoundIn.OnSetAction">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnSetAction"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.ToolsRoundIn.OnRemoveAction">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnRemoveAction"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.ToolsRoundIn.GetID">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.GetID"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.ToolsRoundIn.OnDone">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnDone"/>
            </summary>
        </member>
        <member name="T:CADability.Actions.ToolsRoundMultiple">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.Actions.ToolsRoundMultiple.OnSetAction">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnSetAction"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.ToolsRoundMultiple.OnRemoveAction">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnRemoveAction"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.ToolsRoundMultiple.GetID">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.GetID"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.ToolsRoundMultiple.OnDone">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnDone"/>
            </summary>
        </member>
        <member name="T:CADability.Actions.ToolsRoundOff">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.Actions.ToolsRoundOff.pathTestIntersection(CADability.GeoObject.ICurve,CADability.GeoPoint)">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.Actions.ToolsRoundOff.OnSetAction">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnSetAction"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.ToolsRoundOff.OnRemoveAction">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnRemoveAction"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.ToolsRoundOff.GetID">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.GetID"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Actions.ToolsRoundOff.OnDone">
            <summary>
            Overrides <see cref="M:CADability.Actions.ConstructAction.OnDone"/>
            </summary>
        </member>
        <member name="T:CADability.Actions.ToolsTrim">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ToolsTrimSplit">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Actions.ZoomAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.Actions.ZoomAction.GetID">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.GetID"/>.
            </summary>
        </member>
        <member name="M:CADability.Actions.ZoomAction.OnSetAction">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnSetAction"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
        </member>
        <member name="M:CADability.Actions.ZoomAction.OnRemoveAction">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.OnRemoveAction"/>
            </summary>
        </member>
        <member name="M:CADability.Actions.ZoomAction.OnMouseMove(CADability.Substitutes.MouseEventArgs,CADability.IView)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnMouseMove(CADability.Substitutes.MouseEventArgs,CADability.IView)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
            <param name="e"><paramref name="Action.OnMouseMove.e.OnMouseMove.e"/></param>
            <param name="vw"><paramref name="Action.OnMouseMove.vw.OnMouseMove.vw"/></param>
        </member>
        <member name="M:CADability.Actions.ZoomAction.OnMouseUp(CADability.Substitutes.MouseEventArgs,CADability.IView)">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.OnMouseUp(CADability.Substitutes.MouseEventArgs,CADability.IView)"/>
            </summary>
            <param name="e"></param>
            <param name="vw"></param>
        </member>
        <member name="M:CADability.Actions.ZoomAction.OnMouseDown(CADability.Substitutes.MouseEventArgs,CADability.IView)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnMouseDown(CADability.Substitutes.MouseEventArgs,CADability.IView)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
            <param name="e"><paramref name="Action.OnMouseDown.e.OnMouseDown.e"/></param>
            <param name="vw"><paramref name="Action.OnMouseDown.vw.OnMouseDown.vw"/></param>
        </member>
        <member name="M:CADability.Actions.ZoomAction.OnActivate(CADability.Actions.Action,System.Boolean)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnActivate(CADability.Actions.Action,System.Boolean)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
        </member>
        <member name="M:CADability.Actions.ZoomAction.OnInactivate(CADability.Actions.Action,System.Boolean)">
            <summary>
            Implements <see cref="M:CADability.Actions.Action.OnInactivate(CADability.Actions.Action,System.Boolean)"/>. If you override this method
            don't forget to call the bas implementation.
            </summary>
            <param name="NewActiveAction"><paramref name="Action.OnInactivate.NewActiveAction.OnInactivate.NewActiveAction"/></param>
            <param name="RemovingAction"><paramref name="Action.OnInactivate.RemovingAction.OnInactivate.RemovingAction"/></param>
        </member>
        <member name="M:CADability.Actions.ZoomAction.OnEscape">
            <summary>
            Overrides <see cref="M:CADability.Actions.Action.OnEscape"/>
            </summary>
        </member>
        <member name="T:CADability.ActionSettings">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.ActionSettings.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="T:CADability.DisplayChangeArg">
            <summary>
            Parameter declaration for <see cref="E:CADability.ModelView.DisplayChangedEvent"/>.
            </summary>
        </member>
        <member name="T:CADability.DisplayChangeArg.Reasons">
            <summary>
            Reason
            </summary>
        </member>
        <member name="F:CADability.DisplayChangeArg.Reasons.Unknown">
            <summary>
            unknown
            </summary>
        </member>
        <member name="F:CADability.DisplayChangeArg.Reasons.ZoomIn">
            <summary>
            The user is zooming in by using the mouse wheel or the toolbar/menu item.
            </summary>
        </member>
        <member name="F:CADability.DisplayChangeArg.Reasons.ZoomOut">
            <summary>
            The user is zooming out by using the mouse wheel or the toolbar/menu item.
            </summary>
        </member>
        <member name="F:CADability.DisplayChangeArg.Reasons.ScrollUp">
            <summary>
            The user is scrolling up
            </summary>
        </member>
        <member name="F:CADability.DisplayChangeArg.Reasons.ScrollDown">
            <summary>
            The user is scrolling down
            </summary>
        </member>
        <member name="F:CADability.DisplayChangeArg.Reasons.ScrollLeft">
            <summary>
            The user is scrolling left
            </summary>
        </member>
        <member name="F:CADability.DisplayChangeArg.Reasons.ScrollRight">
            <summary>
            The user is scrolling right
            </summary>
        </member>
        <member name="F:CADability.DisplayChangeArg.Reason">
            <summary>
            Reason why the display is changing
            </summary>
        </member>
        <member name="T:CADability.DisplayChangeArg.DraggingModes">
            <summary>
            While dragging the scrollbarbutton Dragging is on
            </summary>
        </member>
        <member name="F:CADability.DisplayChangeArg.DraggingModes.NotDragging">
            <summary>
            The user is not dragging a scrollbar button
            </summary>
        </member>
        <member name="F:CADability.DisplayChangeArg.DraggingModes.StartDragging">
            <summary>
            The user started to drag a scrollbar button
            </summary>
        </member>
        <member name="F:CADability.DisplayChangeArg.DraggingModes.Dragging">
            <summary>
            The user is dragging a scrollbar button
            </summary>
        </member>
        <member name="F:CADability.DisplayChangeArg.DraggingModes.StopDragging">
            <summary>
            The user stopped to drag a scrollbar button
            </summary>
        </member>
        <member name="F:CADability.DisplayChangeArg.DraggingMode">
            <summary>
            See <see cref="T:CADability.DisplayChangeArg.DraggingModes"/>
            </summary>
        </member>
        <member name="T:CADability.ActionStack">
            <summary>
            A stack of actions. The top entry is the active action, the bottom entry usually is the <see cref="T:CADability.Actions.SelectObjectsAction"/>.
            </summary>
        </member>
        <member name="T:CADability.Angle">
            <summary>
            An angle defined in radians. The value of the angle is a double which is greater or equal to 0 
            and less than (and not equal) 2*pi.
            Via cast operators the angle seamlessly operates as a double.
            </summary>
        </member>
        <member name="M:CADability.Angle.#ctor(CADability.GeoVector,CADability.GeoVector)">
            <summary>
            Constructs the angle that is enclosed by the two vectors (between 0 and Math.PI)
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
        </member>
        <member name="M:CADability.Angle.#ctor(CADability.GeoVector2D,CADability.GeoVector2D)">
            <summary>
            Constructs the angle that is needed to rotate the first vector counterclockwise to reach the second vector (between 0 and 2.0*Math.PI)
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
        </member>
        <member name="M:CADability.Angle.#ctor(CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Constructs the angle
            </summary>
            <param name="Target"></param>
            <param name="Center"></param>
        </member>
        <member name="M:CADability.Angle.#ctor(CADability.GeoVector2D)">
            <summary>
            Constructs the angle of the given vector. X-axis is 0, counterclockwise.
            </summary>
            <param name="v">vector to define the angle</param>
        </member>
        <member name="M:CADability.Angle.#ctor(System.Double,System.Double)">
            <summary>
            Constructs an angle of a 2d vector (dx,dy) 
            </summary>
            <param name="dx">x-axis difference</param>
            <param name="dy">y-axis difference</param>
        </member>
        <member name="M:CADability.Angle.#ctor(System.Double)">
            <summary>
            Constructs an angle from the provided parameter
            </summary>
            <param name="d">Angle in radians</param>
        </member>
        <member name="P:CADability.Angle.Radian">
            <value>
            Zugriff auf das Bogenma√ü
            </value>
        </member>
        <member name="P:CADability.Angle.Degree">
            <value>
            Zugriff auf das Gradma√ü
            </value>
        </member>
        <member name="P:CADability.Angle.Quadrant">
            <summary>
            Quadrant of the angle. Yields 0 to 3. 0: right top,
            1: left top, 2: left bottom, 3: right bottom
            </summary>
        </member>
        <member name="P:CADability.Angle.Direction">
            <summary>
            Sets the angle to the angle of the given vector. Gets a unit vector with the angle.
            </summary>
        </member>
        <member name="M:CADability.Angle.ToString">
            <summary>
            Representation of this angle as a string in degrees
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Angle.op_Implicit(System.Double)~CADability.Angle">
            <summary>
            Casts a double to an angle. The result will be between 0 and 2*pi
            <param name="v">double value</param>
            <returns>Angle</returns>
            </summary>
        </member>
        <member name="M:CADability.Angle.op_Implicit(CADability.SweepAngle)~CADability.Angle">
            <summary>
            Casts the sweep angle to an angle with the same value
            </summary>
            <param name="sw"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Angle.op_Implicit(CADability.Angle)~System.Double">
            <summary>
            Casts an angle to a double. The radian of the angle is returned.
            <param name="ang">the angle</param>
            <returns>the radian</returns>
            </summary>
        </member>
        <member name="M:CADability.Angle.FromDegree(System.Double)">
            <summary>
            Returns an angle from the parameter interpreted as degrees
            </summary>
            <param name="d">Degrees of the angle</param>
            <returns>The angle</returns>
        </member>
        <member name="M:CADability.Angle.IsCloseTo(CADability.Angle)">
            <summary>
            Returns true if the radians differ less than 1e-12
            </summary>
            <param name="ang"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Angle.Sweeps(CADability.SweepAngle,CADability.Angle)">
            <summary>
            Liefert true, wenn der im Parameter gegebene TestWinkel von diesem Winkel
            ausgehend mit dem SweepAngle √ºberstrichen wird.
            </summary>
            <param name="sa">√úberstreichnung</param>
            <param name="test">zu Testende Winkelposition</param>
            <returns></returns>
        </member>
        <member name="M:CADability.Angle.op_Subtraction(CADability.Angle,CADability.SweepAngle)">
            <summary>
            Returns the angle minus the provided sweep angle
            </summary>
            <param name="angA">first argument</param>
            <param name="angB">subtract this</param>
            <returns>the difference</returns>
        </member>
        <member name="M:CADability.Angle.op_Subtraction(CADability.Angle,CADability.Angle)">
            <summary>
            Returns the sweep angle that leads from <paramref name="angB"/> to <paramref name="angA"/>
            </summary>
            <param name="angA">Target of the rotation</param>
            <param name="angB">Source of the rotation</param>
            <returns>The difference</returns>
        </member>
        <member name="M:CADability.Angle.op_Addition(CADability.Angle,CADability.SweepAngle)">
            <summary>
            Adds the sweep angle to the angle
            </summary>
            <param name="angA">First operand</param>
            <param name="angB">Sweep angle to add</param>
            <returns>The sum</returns>
        </member>
        <member name="P:CADability.Angle.A0">
            <summary>
            Angle for 0¬∞
            </summary>
        </member>
        <member name="P:CADability.Angle.A30">
            <summary>
            Angle for 30¬∞
            </summary>
        </member>
        <member name="P:CADability.Angle.A45">
            <summary>
            Angle for 45¬∞
            </summary>
        </member>
        <member name="P:CADability.Angle.A60">
            <summary>
            Angle for 60¬∞
            </summary>
        </member>
        <member name="P:CADability.Angle.A90">
            <summary>
            Angle for 90¬∞
            </summary>
        </member>
        <member name="P:CADability.Angle.A180">
            <summary>
            Angle for 180¬∞
            </summary>
        </member>
        <member name="P:CADability.Angle.A270">
            <summary>
            Angle for 270¬∞
            </summary>
        </member>
        <member name="M:CADability.Angle.Deg(System.Double)">
            <summary>
            Creates an angle from the provided parameter (in degrees)
            </summary>
            <param name="deg">Degrees of the angle</param>
            <returns>The resulting angle</returns>
        </member>
        <member name="M:CADability.Angle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Angle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.SweepAngle">
            <summary>
            A sweep angle. Typically the value of this object is between -2*pi and +2*pi.
            Used for rotation operations etc.
            </summary>
        </member>
        <member name="M:CADability.SweepAngle.#ctor(CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Constructs the sweep angle as the angle of the vector from Center to Target
            </summary>
            <param name="Target">Endpoint of the vector</param>
            <param name="Center">Startpoint of the vector</param>
        </member>
        <member name="M:CADability.SweepAngle.#ctor(CADability.GeoVector,CADability.GeoVector)">
            <summary>
            Constructs the sweep angle you need to go from <paramref name="From"/> to <paramref name="To"/>.
            </summary>
            <param name="From">starting vector</param>
            <param name="To">target vector</param>
        </member>
        <member name="M:CADability.SweepAngle.#ctor(CADability.GeoVector2D,CADability.GeoVector2D)">
            <summary>
            Constructs a sweep angle from the vector <paramref name="From"/> to the vector <paramref name="To"/>.
            </summary>
            <param name="From"></param>
            <param name="To"></param>
        </member>
        <member name="M:CADability.SweepAngle.#ctor(CADability.Angle,CADability.Angle,System.Boolean)">
            <summary>
            Constructs the sweep angle you need to go from <paramref name="From"/> to <paramref name="To"/> in the
            direction defined by <paramref name="CounterClockwise"/>
            </summary>
            <param name="From">starting angle</param>
            <param name="To">ending angle</param>
            <param name="CounterClockwise">direction</param>
        </member>
        <member name="M:CADability.SweepAngle.#ctor(System.Double,System.Double)">
            <summary>
            Constructs the sweep angle with tan(sweep angle)==dy/dx
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:CADability.SweepAngle.#ctor(System.Double)">
            <summary>
            Constructs the sweep angle with the provided radian (which must be between -2*pi and +2*pi, which is not checked)
            </summary>
            <param name="d"></param>
        </member>
        <member name="P:CADability.SweepAngle.Radian">
            <value>
            Zugriff auf das Bogenma√ü
            </value>
        </member>
        <member name="P:CADability.SweepAngle.Degree">
            <value>
            Zugriff auf das Gradma√ü
            </value>
        </member>
        <member name="M:CADability.SweepAngle.op_Implicit(System.Double)~CADability.SweepAngle">
            <summary>
            Cast Operator, der ein double in einen Winkel umwandelt. Es wird das
            modulo 2*pi berechnet
            </summary>
            <param name="v">double Wert</param>
            <returns>Winkel</returns>
        </member>
        <member name="M:CADability.SweepAngle.op_Implicit(CADability.Angle)~CADability.SweepAngle">
            <summary>
            Casts an angle to a sweep angle with the same value
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.SweepAngle.op_Implicit(CADability.SweepAngle)~System.Double">
            <summary>
            Cast Operator, der einen Winkel in ein double umwandelt. Ergebnis ist das Bogenma√ü 
            des Winkels.
            Es werden keine Berechnungen vorgenommen
            </summary>
            <param name="ang">der Winkel</param>
            <returns>double als Ergebnis</returns>
        </member>
        <member name="F:CADability.SweepAngle.ToLeft">
            <summary>
            The sweep angle that turns 90¬∞ to the left
            </summary>
        </member>
        <member name="F:CADability.SweepAngle.ToRight">
            <summary>
            The sweep angle that turns 90¬∞ to the right
            </summary>
        </member>
        <member name="F:CADability.SweepAngle.Opposite">
            <summary>
            The sweep angle that turns to the opposite directio
            </summary>
        </member>
        <member name="F:CADability.SweepAngle.Full">
            <summary>
            The sweep angle that turns 360¬∞ counterclockwise
            </summary>
        </member>
        <member name="F:CADability.SweepAngle.FullReverse">
            <summary>
            The sweep angle that turns 360¬∞ clockwise
            </summary>
        </member>
        <member name="M:CADability.SweepAngle.op_UnaryNegation(CADability.SweepAngle)">
            <summary>
            Returns the reverse of the provided sweep angle
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.SweepAngle.op_Multiply(System.Double,CADability.SweepAngle)">
            <summary>
            Returns the multiple of the sweep angle
            </summary>
            <param name="d">factor</param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.SweepAngle.Deg(System.Double)">
            <summary>
            Returns a SweepAngle that rotates by the given degrees
            </summary>
            <param name="d">amount to rotate in degrees (-360&lt;=d&lt;=360)</param>
            <returns>A new SweepAngle</returns>
        </member>
        <member name="M:CADability.SweepAngle.IsCloseTo(CADability.SweepAngle)">
            <summary>
            Returns true, if the sweep angles differ by less than 1e-12 (in radian)
            </summary>
            <param name="ang"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.SweepAngle.ToString">
            <summary>
            Returns a string representation of this sweep angle in degrees
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.SweepAngle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.SweepAngle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.UserInterface.AngleHotSpot">
            <summary>
            Implements a hotspot <see cref="T:CADability.IHotSpot"/> to manipulate an angle via an angle property
            </summary>
        </member>
        <member name="F:CADability.UserInterface.AngleHotSpot.Position">
            <summary>
            The position of the hotspot
            </summary>
        </member>
        <member name="M:CADability.UserInterface.AngleHotSpot.#ctor(CADability.UserInterface.AngleProperty)">
            <summary>
            Constructs a hotspot to manipulate a length property
            </summary>
            <param name="angleProperty">the property to be manipulated</param>
        </member>
        <member name="T:CADability.UserInterface.AnglePropertyException">
            <summary>
            Exception thrown by <see cref="T:CADability.UserInterface.AngleProperty"/>.
            </summary>
        </member>
        <member name="T:CADability.UserInterface.AttributesProperty">
            <summary>
            Verbindet die Eigenschaften Layer, ColorDef, Style f√ºr die Aktionen
            </summary>
        </member>
        <member name="P:CADability.UserInterface.AttributesProperty.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.AttributesProperty.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.AttributesProperty.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="T:CADability.UserInterface.BooleanProperty">
            <summary>
            A boolean property entry, which also can be used as a setting (hence serializable)
            </summary>
        </member>
        <member name="M:CADability.UserInterface.BooleanProperty.#ctor(System.Object,System.String,System.String,System.String)">
            <summary>
            Erzeugt ein BooleanProperty Objekt, welches die boolean Property eines anderen
            Objektes darstellt und manipuliert.
            </summary>
            <param name="ObjectWithProperty">das Objekt, welches die boolean Property enth√§lt</param>
            <param name="PropertyName">der Name der Property (wird f√ºr Reflection verwendet)</param>
            <param name="resourceIdLabel">ResourceId f√ºr den Label und dessen ToolTips. Die
            Texte f√ºr die ToolTips werden unter dieser ResourceId gefolgt von ".ShortInfo" bzw. ".DetailedInfo"
            gesucht. Unter ".Images" findet sich der Name und die Indizes einer ImageList
            in der Resource</param>
            <param name="resourceIdValues">ResourceId f√ºr die Texte f√ºr true bzw. false. Der Text muss
            mit einem Trennzeichen beginnen, gefolgt von dem Text f√ºr true, gefolgt von dem Trennzeichen,
            gefolgt von dem Wert f√ºr false, z.B. "|ja|nein"</param>
        </member>
        <member name="M:CADability.UserInterface.BooleanProperty.#ctor(System.String,System.String,System.String)">
            <summary>
            Erzeugt eine BooleanProperty, welches einen eigenen boolean Wert enth√§lt und
            diesen darstellen und manipulieren kann. Der Wert ist √ºber die Property BooleanValue
            verf√ºgbar.
            </summary>
            <param name="resourceIdLabel">ResourceId f√ºr den Label und dessen ToolTips. Die
            Texte f√ºr die ToolTips werden unter dieser ResourceId gefolgt von ".ShortInfo" bzw. ".DetailedInfo"
            gesucht. Unter ".Images" findet sich der Name und die Indizes einer ImageList
            in der Resource</param>
            <param name="resourceIdValues">ResourceId f√ºr die Texte f√ºr true bzw. false. Der Text muss
            mit einem Trennzeichen beginnen, gefolgt von dem Text f√ºr true, gefolgt von dem Trennzeichen,
            gefolgt von dem Wert f√ºr false, z.B. "|ja|nein"</param>
        </member>
        <member name="M:CADability.UserInterface.BooleanProperty.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.UserInterface.BooleanProperty.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="P:CADability.UserInterface.CheckProperty.Flags">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.Control"/>.
            </summary>
        </member>
        <member name="T:CADability.UserInterface.ColorListProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:CADability.UserInterface.ColorListProperty.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="M:CADability.UserInterface.ColorListProperty.LabelChanged(System.String)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.LabelChanged(System.String)"/>
            </summary>
            <param name="NewText"></param>
        </member>
        <member name="T:CADability.UserInterface.CommandState">
            <summary>
            State of a menu entry or toolbar button. Used in the <see cref="!:IFrame.UpdateCommand"/> event.
            </summary>
        </member>
        <member name="M:CADability.UserInterface.CommandState.#ctor">
            <summary>
            Creates a command state which is enabled, but not checked and no radio
            button set.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.CommandState.Enabled">
            <summary>
            Gets or sets the "enabled" state.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.CommandState.Checked">
            <summary>
            Gets or sets the "checked" state.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.CommandState.Radio">
            <summary>
            Gets or sets the "radio" state.
            </summary>
        </member>
        <member name="T:CADability.UserInterface.ICommandHandler">
            <summary>
            Objects that implement this interface can receive menu command.
            Usually used in calls to <see cref="!:MenuResource.LoadContextMenu"/> to specify
            the target object for that menu.
            </summary>
        </member>
        <member name="M:CADability.UserInterface.ICommandHandler.OnCommand(System.String)">
            <summary>
            Process the command with the given MenuId. Return true if handled, false otherwise.
            </summary>
            <param name="MenuId">Id of the menu command to be processed</param>
            <returns>true, if handled, fals otherwise</returns>
        </member>
        <member name="M:CADability.UserInterface.ICommandHandler.OnUpdateCommand(System.String,CADability.UserInterface.CommandState)">
            <summary>
            Update the command user interface of the given command. Return true if handled, false otherwise.
            </summary>
            <param name="MenuId">Id of the menu command to be processed</param>
            <param name="CommandState">State object to modify if apropriate</param>
            <returns>true, if handled, fals otherwise</returns>
        </member>
        <member name="M:CADability.UserInterface.ICommandHandler.OnSelected(System.String,System.Boolean)">
            <summary>
            Notify that the menu item is beeing selected. No need to react on this notification
            </summary>
            <param name="MenuId">Id of the menu command that was selected</param>
            <param name="selected">true, if selected, false if deselected</param>
            <returns></returns>
        </member>
        <member name="T:CADability.UserInterface.CurveProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.UserInterface.CurveProperty.Selected">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Selected"/>
            </summary>
        </member>
        <member name="T:CADability.UserInterface.CurvesProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:CADability.UserInterface.CurvesProperty.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="P:CADability.UserInterface.CurvesProperty.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.CurvesProperty.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="T:CADability.UserInterface.DimensionStyleSelectionProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.UserInterface.DimensionStyleSelectionProperty.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="M:CADability.UserInterface.DimensionStyleSelectionProperty.Removed(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Removed(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView">the IPropertyTreeView from which it was removed</param>
        </member>
        <member name="T:CADability.UserInterface.DoubleHotSpot">
            <summary>
            Implements a hotspot <see cref="T:CADability.IHotSpot"/> to manipulate a lenth via a length property
            </summary>
        </member>
        <member name="M:CADability.UserInterface.DoubleHotSpot.#ctor(CADability.UserInterface.DoubleProperty)">
            <summary>
            Constructs a hotspot to manipulate a double property
            </summary>
            <param name="doubleProperty">the property to be manipulated</param>
        </member>
        <member name="M:CADability.UserInterface.DoubleHotSpot.GetHotspotPosition">
            <summary>
            Implements <see cref="M:CADability.IHotSpot.GetHotspotPosition"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.UserInterface.DoubleHotSpot.StartDrag(CADability.IFrame)">
            <summary>
            Implements <see cref="!:CADability.IHotSpot.StartDrag ()"/>
            </summary>
        </member>
        <member name="M:CADability.UserInterface.DoubleProperty.#ctor">
            <summary>
            Empty constructor for IJsonSerialize  deserialisation
            </summary>
        </member>
        <member name="T:CADability.UserInterface.DrawingPlaneProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:CADability.UserInterface.DrawingPlaneProperty.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.DrawingPlaneProperty.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.DrawingPlaneProperty.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.UserInterface.DrawingPlaneProperty.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="T:CADability.UserInterface.EditableProperty`1">
            <summary>
            Defines a base clas for editable properties shown on a property page (IPropertyPage) in the controlcenter (properties explorer).
            It is a single entry in the property page which may have subentries.
            Usually a property of type <see cref="!:T"/> of some object is connected with this EditableProperty, e.g. the startpoint of a line 
            or the distance of hatch lines or some setting value. The communication with the object which hold the property is either done via delegates
            or via reflection.
            When the user clicks on the value part of the <see cref="T:CADability.UserInterface.IPropertyEntry"/>, an editbox is activated to edit the value of the property. There must be 
            a <see cref="M:CADability.UserInterface.EditableProperty`1.ValueToText(`0)"/> and <see cref="!:EditableProperty&lt;T&gt;.TextToValue(string)"/> method defined in the derived class, which
            convert the property value in a string and vice versa. The value of the property may be changed by the editbox (typing) or from the outside.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CADability.UserInterface.EditableProperty`1.#ctor(CADability.UserInterface.EditableProperty{`0}.GetValueDelegate,CADability.UserInterface.EditableProperty{`0}.SetValueDelegate,System.String,System.String)">
            <summary>
            Creates an editable property entry (for the control center), which communicates with the object (which holds the property) via delegates.
            </summary>
            <param name="getValueDelegate">Get the value of the property from the object, which holds the property</param>
            <param name="setValueDelegate">Set the value of th eproperty</param>
            <param name="resourceId">A resource id for the text of the label</param>
        </member>
        <member name="M:CADability.UserInterface.EditableProperty`1.#ctor(System.Object,System.String,System.String,System.String)">
            <summary>
            Creates an editable property entry (for the control center), which communicates with the object (which holds the property) via reflection.
            The object must have an accessible property with the provided <paramref name="getSetProperty"/> name.
            </summary>
            <param name="objectWithProperty">The object, which holds the property</param>
            <param name="getSetProperty">The Name of the property</param>
            <param name="resourceId">A resource id for the text of the label</param>
        </member>
        <member name="M:CADability.UserInterface.EditableProperty`1.#ctor(System.String,System.String)">
            <summary>
            Creates an EditableProperty without specifying the communication with the object holding the property.
            This must be specified before using the object by setting <see cref="P:CADability.UserInterface.EditableProperty`1.OnGetValue"/> and <see cref="P:CADability.UserInterface.EditableProperty`1.OnSetValue"/>
            </summary>
            <param name="resourceId"></param>
        </member>
        <member name="P:CADability.UserInterface.EditableProperty`1.PrependContextMenu">
            <summary>
            additional menu items for the context menu
            </summary>
        </member>
        <member name="M:CADability.UserInterface.EditableProperty`1.GetValue">
            <summary>
            Tries to get the value of the property beeing handled from the object 
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.UserInterface.EditableProperty`1.SetValue(`0,System.Boolean)">
            <summary>
            Called, when the editbox or some other mechanism has a new value for the property. Transfers this value to the object holding the property.
            </summary>
            <param name="val"></param>
            <param name="notify"></param>
        </member>
        <member name="M:CADability.UserInterface.EditableProperty`1.ValueToText(`0)">
            <summary>
            Returns the text representation of the value.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.UserInterface.EditableProperty`1.TextToValue(System.String,`0@)">
            <summary>
            Converts the text to a value. Returns true if possible, false otherwise (maybe invalid characters or outside the limit)
            </summary>
            <param name="text"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="P:CADability.UserInterface.EditableProperty`1.Flags">
            <summary>
            Override for more functionality. Only returns PropertyEntryType.ValueEditable and PropertyEntryType.LabelEditable if apropriate
            </summary>
        </member>
        <member name="F:CADability.UserInterface.EditableProperty`1.valueBeforeEdit">
            <summary>
            The value before the first keystroke
            </summary>
        </member>
        <member name="F:CADability.UserInterface.EditableProperty`1.isEditingValue">
            <summary>
            in contrast to is editing label
            </summary>
        </member>
        <member name="M:CADability.UserInterface.EditableProperty`1.StartEdit(System.Boolean)">
            <summary>
            Only handles value editing. If the label may also be edited, override this method and call this base implementation;
            </summary>
            <param name="editValue"></param>
        </member>
        <member name="P:CADability.UserInterface.GeoObjectListProperty.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="P:CADability.UserInterface.GeoObjectListProperty.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.GeoObjectListProperty.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.GeoObjectListProperty.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="T:CADability.UserInterface.GeoObjectProperty">
            <summary>
            Darstellung eines GeoObjectInputs im ControlCenter
            </summary>
        </member>
        <member name="P:CADability.UserInterface.GeoObjectProperty.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="P:CADability.UserInterface.GeoObjectProperty.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.GeoObjectProperty.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="T:CADability.UserInterface.SimpleNameProperty">
            <summary>
            Anzeige einer einfachen stringbasierten Property. Ein Objekt kann damit gekoppelt sein und 
            wird bei dem Event SelectionChangedEvent gemeldet. Ansonsten funktionslos.
            </summary>
        </member>
        <member name="M:CADability.UserInterface.SimpleNameProperty.Selected">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Selected"/>
            </summary>
        </member>
        <member name="M:CADability.UserInterface.GeoPointHotSpot.GetHotspotPosition">
            <summary>
            Implements <see cref="M:CADability.IHotSpot.GetHotspotPosition"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:CADability.UserInterface.GeoPointProperty.SelectionChangedDelegate">
            <summary>
            Delegate definition for the <see cref="E:CADability.UserInterface.GeoPointProperty.SelectionChangedEvent"/>
            </summary>
            <param name="sender">this object</param>
            <param name="isSelected">true if now selected, false otherwise</param>
        </member>
        <member name="E:CADability.UserInterface.GeoPointProperty.SelectionChangedEvent">
            <summary>
            This <see cref="T:CADability.UserInterface.GeoPointProperty.SelectionChangedDelegate"/> event will be raised when this GeoPointProperty
            gets selected (the user clicks on the label or forwards the focus by pressing the tab key) or unselected.
            </summary>
        </member>
        <member name="T:CADability.UserInterface.GeoPointProperty.ModifiedByActionDelegate">
            <summary>
            Delegate definition for <see cref="E:CADability.UserInterface.GeoPointProperty.ModifiedByActionEvent"/>
            </summary>
            <param name="sender">this object</param>
        </member>
        <member name="E:CADability.UserInterface.GeoPointProperty.ModifiedByActionEvent">
            <summary>
            This <see cref="T:CADability.UserInterface.GeoPointProperty.ModifiedByActionDelegate"/> event will be raised when the GeoPoint was modified by
            some <see cref="T:CADability.Actions.Action"/>. ( The <see cref="E:CADability.UserInterface.GeoPointProperty.SetGeoPointEvent"/> will also be raised or the property will be set)
            </summary>
        </member>
        <member name="T:CADability.UserInterface.GeoPointProperty.FilterCommandDelegate">
            <summary>
            Delegate definition for <see cref="E:CADability.UserInterface.GeoPointProperty.FilterCommandEvent"/>
            </summary>
            <param name="sender">this object</param>
            <param name="menuId">menu id of the selected menu entry</param>
            <param name="commandState">when not null, asks for the state of the menu</param>
            <param name="handled">set to true if handled</param>
        </member>
        <member name="E:CADability.UserInterface.GeoPointProperty.FilterCommandEvent">
            <summary>
            When a context menue is selected or about to popup this event is raised to allow a
            consumer to process the command instead of this GeoPointProperty object itself.
            Provide a handler here if you want to process some or all menu commands.
            </summary>
        </member>
        <member name="M:CADability.UserInterface.GeoVectorHotSpot.GetHotspotPosition">
            <summary>
            Implements <see cref="M:CADability.IHotSpot.GetHotspotPosition"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.UserInterface.GeoVectorHotSpot.StartDrag(CADability.IFrame)">
            <summary>
            Implements <see cref="!:CADability.IHotSpot.StartDrag ()"/>
            </summary>
        </member>
        <member name="T:CADability.UserInterface.GeoVectorProperty.SelectionChangedDelegate">
            <summary>
            Delegate definition for the <see cref="E:CADability.UserInterface.GeoVectorProperty.SelectionChangedEvent"/>
            </summary>
            <param name="sender">this object</param>
            <param name="isSelected">true if now selected, false otherwise</param>
        </member>
        <member name="E:CADability.UserInterface.GeoVectorProperty.SelectionChangedEvent">
            <summary>
            This <see cref="T:CADability.UserInterface.GeoVectorProperty.SelectionChangedDelegate"/> event will be raised when this GeoVectorProperty
            gets selected (the user clicks on the label or forwards the focus by pressing the tab key) or unselected.
            </summary>
        </member>
        <member name="T:CADability.UserInterface.GeoVectorProperty.ModifiedByActionDelegate">
            <summary>
            Delegate definition for <see cref="E:CADability.UserInterface.GeoVectorProperty.ModifiedByActionEvent"/>
            </summary>
            <param name="sender">this object</param>
        </member>
        <member name="E:CADability.UserInterface.GeoVectorProperty.ModifiedByActionEvent">
            <summary>
            This <see cref="T:CADability.UserInterface.GeoVectorProperty.ModifiedByActionDelegate"/> event will be raised when the GeoVector was modified by
            some <see cref="T:CADability.Actions.Action"/>. ( The <see cref="E:CADability.UserInterface.GeoVectorProperty.SetGeoVectorEvent"/> will also be raised or the property will be set)
            </summary>
        </member>
        <member name="T:CADability.UserInterface.GeoVectorProperty.FilterCommandDelegate">
            <summary>
            Delegate definition for <see cref="E:CADability.UserInterface.GeoVectorProperty.FilterCommandEvent"/>
            </summary>
            <param name="sender">this object</param>
            <param name="menuId">menu id of the selected menu entry</param>
            <param name="commandState">when not null, asks for the state of the menu</param>
            <param name="handled">set to true if handled</param>
        </member>
        <member name="E:CADability.UserInterface.GeoVectorProperty.FilterCommandEvent">
            <summary>
            When a context menue is selected or about to popup this event is raised to allow a
            consumer to process the command instead of this GeoVectorProperty object itself.
            Provide a handler here if you want to process some or all menu commands.
            </summary>
        </member>
        <member name="T:CADability.UserInterface.GroupProperty">
            <summary>
            A simple entry for the showproperty tree, wich is represented by a GruopTitle
            eintry which contains some subentries. A folder in the treeview of the controlcenter.
            The subentries mus be specified in the constructur.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.GroupProperty.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.GroupProperty.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.GroupProperty.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="T:CADability.UserInterface.HatchStyleSelectionProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.UserInterface.HatchStyleSelectionProperty.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="M:CADability.UserInterface.HatchStyleSelectionProperty.Removed(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Removed(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="T:CADability.UserInterface.IntegerProperty">
            <summary>
            Anzeige einer int Eigenschaft in einem ShowProperty Control. Dieses Objekt
            kann eine int Eigenschaft eines beliebigen anderen Objektes ver√§ndern, vorausgesetzt
            das Objekt selbst und der Name der betreffenden Property werden bekanntgegeben.
            Dieses Objekt kann auch in den Settings verwendet werden. Dann h√§lt es den int
            Wert selbst und kann serialisiert werden.
            </summary>
        </member>
        <member name="M:CADability.UserInterface.IntegerProperty.Refresh">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Refresh"/>
            </summary>
        </member>
        <member name="M:CADability.UserInterface.IntegerProperty.IntChanged">
            <summary>
            Der Besitzer dieses Objektes muss GeoPointChanged aufrufen, um eine neue Anzeige zu erzwingen.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IntegerProperty.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="M:CADability.UserInterface.IntegerProperty.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="M:CADability.UserInterface.IntegerProperty.Removed(CADability.UserInterface.IPropertyTreeView)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Removed(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView">the IPropertyTreeView from which it was removed</param>
        </member>
        <member name="M:CADability.UserInterface.IntegerProperty.SetFocus">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.SetFocus"/>
            </summary>
        </member>
        <member name="M:CADability.UserInterface.IntegerProperty.Selected">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Selected"/>
            </summary>
        </member>
        <member name="M:CADability.UserInterface.IntegerProperty.UnSelected">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.UnSelected"/>
            </summary>
        </member>
        <member name="M:CADability.UserInterface.IntegerProperty.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.UserInterface.IntegerProperty.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.UserInterface.ModifyWithMouseDelegate">
            <summary>
            Wird mit StartModifying==true aufgerufen, wenn der Anwender den MouseButton dr√ºckt.
            sender und propertyInfo k√∂nnen dazu verwendet werden, den Punkt ohne kenntnis des Objektes
            zu ver√§ndern.
            Wird mit StartModifying==false aufgerufen, wenn der Anwender in das Editfeld eintippt.
            Dann soll die MausAktion f√ºr diesen Punkt abgebrochen werden.
            </summary>
        </member>
        <member name="T:CADability.UserInterface.IConstructProperty">
            <summary>
            Interface for IShowProperty objects, which implement MouseButton modification.
            </summary>
        </member>
        <member name="T:CADability.UserInterface.ShowPropertyEntryType">
            <summary>
            The kind of an entry in the property grid.
            </summary>
        </member>
        <member name="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle">
            <summary>
            A simple group title, no control to manipulate that entry
            </summary>
        </member>
        <member name="F:CADability.UserInterface.ShowPropertyEntryType.SimpleEntry">
            <summary>
            A simple entry with a control (e.g. edit box)
            </summary>
        </member>
        <member name="F:CADability.UserInterface.ShowPropertyEntryType.OwnerDrawEntry">
            <summary>
            An owner drawn entry
            </summary>
        </member>
        <member name="F:CADability.UserInterface.ShowPropertyEntryType.Seperator">
            <summary>
            A separator
            </summary>
        </member>
        <member name="F:CADability.UserInterface.ShowPropertyEntryType.Command">
            <summary>
            Do not use
            </summary>
        </member>
        <member name="F:CADability.UserInterface.ShowPropertyEntryType.Control">
            <summary>
            A control that uses the whole space, not the split layout with a label on the left side.
            </summary>
        </member>
        <member name="T:CADability.UserInterface.ShowPropertyLabelFlags">
            <summary>
            Selectable: der Text kann markiert werden, Editable: der Text kann ge√§ndert werden, Bold: fett gedruckt,
            ContextMenu: beim Rechtsklick wird ein ContextMenu ben√∂tigt
            </summary>
        </member>
        <member name="F:CADability.UserInterface.ShowPropertyLabelFlags.Selectable">
            <summary>
            Entry may be selected (almost ever true)
            </summary>
        </member>
        <member name="F:CADability.UserInterface.ShowPropertyLabelFlags.Editable">
            <summary>
            Label may be edited, good for named values
            </summary>
        </member>
        <member name="F:CADability.UserInterface.ShowPropertyLabelFlags.Bold">
            <summary>
            Label in bold letters
            </summary>
        </member>
        <member name="F:CADability.UserInterface.ShowPropertyLabelFlags.Highlight">
            <summary>
            Label in Highlight color (red)
            </summary>
        </member>
        <member name="F:CADability.UserInterface.ShowPropertyLabelFlags.Selected">
            <summary>
            Label is selected
            </summary>
        </member>
        <member name="F:CADability.UserInterface.ShowPropertyLabelFlags.Checked">
            <summary>
            Label is checked
            </summary>
        </member>
        <member name="F:CADability.UserInterface.ShowPropertyLabelFlags.Link">
            <summary>
            Label is a link, currently not supported
            </summary>
        </member>
        <member name="F:CADability.UserInterface.ShowPropertyLabelFlags.ContextMenu">
            <summary>
            There is a context menu for this entry
            </summary>
        </member>
        <member name="F:CADability.UserInterface.ShowPropertyLabelFlags.OKButton">
            <summary>
            A OK Button should be displayed for this entry (usually in the context of an action)
            </summary>
        </member>
        <member name="F:CADability.UserInterface.ShowPropertyLabelFlags.CancelButton">
            <summary>
            A cancel button should be displayed for this entry (usually in the context of an action)
            </summary>
        </member>
        <member name="F:CADability.UserInterface.ShowPropertyLabelFlags.AllowDrag">
            <summary>
            Allows the label to be destination of dradrop operations
            </summary>
        </member>
        <member name="T:CADability.UserInterface.IShowProperty">
            <summary>
            Objects that implement this interface can be displayed
            </summary>
        </member>
        <member name="M:CADability.UserInterface.IShowProperty.Added(CADability.UserInterface.IPropertyTreeView)">
            <summary>
            Called when the entry was added to the control center or to a parent entry. The parameter
            represents the tree view object to which the entry was added. Each Added is later matched by a call to <see cref="M:CADability.UserInterface.IShowProperty.Removed(CADability.UserInterface.IPropertyTreeView)"/>.
            </summary>
            <param name="propertyTreeView">the tree view</param>
        </member>
        <member name="M:CADability.UserInterface.IShowProperty.Selected">
            <summary>
            Called whent the entry was selected.
            </summary>
        </member>
        <member name="M:CADability.UserInterface.IShowProperty.UnSelected">
            <summary>
            Called whent the entry was unselected.
            </summary>
        </member>
        <member name="M:CADability.UserInterface.IShowProperty.ChildSelected(CADability.UserInterface.IShowProperty)">
            <summary>
            Called when a child entry of this entry was selected.
            </summary>
            <param name="theSelectedChild"></param>
        </member>
        <member name="M:CADability.UserInterface.IShowProperty.Opened(System.Boolean)">
            <summary>
            Notifies the item that its subitems will be shown (IsOpen==true) or that
            the treeview collapses the subitems (IsOpen==false). The Item should fire the
            <see cref="E:CADability.UserInterface.IShowProperty.StateChangedEvent"/> event with the appropriate parameters.
            </summary>
            <param name="IsOpen">Treeview was opened or collpsed</param>
        </member>
        <member name="M:CADability.UserInterface.IShowProperty.Removed(CADability.UserInterface.IPropertyTreeView)">
            <summary>
            Matches the calls to <see cref="M:CADability.UserInterface.IShowProperty.Added(CADability.UserInterface.IPropertyTreeView)"/>. A good place to disconnect events and free resources.
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="E:CADability.UserInterface.IShowProperty.StateChangedEvent">
            <summary>
            Event that is fired when the state of this entry changed, e.g. the entry was selected.
            </summary>
        </member>
        <member name="M:CADability.UserInterface.IShowProperty.ShowOpen(System.Boolean)">
            <summary>
            Opens this item to show the subentries of this item in the treeview, that contains this IShowProperty object.
            respectively closes or collapses this item to hide the subentries.
            </summary>
            <param name="open">true: open, false: collapse</param>
        </member>
        <member name="M:CADability.UserInterface.IShowProperty.Select">
            <summary>
            Forces this item to be selected in the treeview. The item must be visible.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IShowProperty.LabelText">
            <summary>
            Returns the label text, which is usually displayed on the left side of the control.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IShowProperty.HelpLink">
            <summary>
            Returns the help link for the help control.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IShowProperty.InfoText">
            <summary>
            Returns the text for the tooltip to display when the mouse cursor rests on the label.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IShowProperty.LabelType">
            <summary>
            Returns the type of the label, see <see cref="T:CADability.UserInterface.ShowPropertyLabelFlags"/>.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IShowProperty.EntryType">
            <summary>
            Returns the type of the entry, see <see cref="T:CADability.UserInterface.ShowPropertyEntryType"/>.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IShowProperty.SubEntriesCount">
            <summary>
            Returns the number of subentries if any or 0 if none.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IShowProperty.SubEntries">
            <summary>
            Returns the array of subentries to this entry.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IShowProperty.OwnerDrawHeight">
            <summary>
            Returns the height of this entry if it is ownerdrawn.
            </summary>
        </member>
        <member name="M:CADability.UserInterface.IShowProperty.SetTabIndex(System.Int32@)">
            <summary>
            Do not use anymore.
            </summary>
            <param name="TabIndex"></param>
        </member>
        <member name="M:CADability.UserInterface.IShowProperty.LabelChanged(System.String)">
            <summary>
            Will be called when the text of a label changed because it was edited by the user.
            Will only be used if <see cref="F:CADability.UserInterface.ShowPropertyLabelFlags.Editable"/>is specified in the <see cref="P:CADability.UserInterface.IShowProperty.LabelType"/> property.
            </summary>
            <param name="NewText">the new text</param>
        </member>
        <member name="M:CADability.UserInterface.IShowProperty.SetFocus">
            <summary>
            Will be called when the entry got the focus.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IShowProperty.Hidden">
            <summary>
            If an IShowProperty object is hidden, it will not appear in the TreeView
            of the control center. Most Properties are not hidden by default.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IShowProperty.ReadOnly">
            <summary>
            If an IShowProperty object is read only, its value should be fixed. The subProperties should also be read only.
            </summary>
        </member>
        <member name="M:CADability.UserInterface.IShowProperty.Refresh">
            <summary>
            Forces the entry to refresh its contents
            </summary>
        </member>
        <member name="M:CADability.UserInterface.IShowProperty.OnEnterPressed">
            <summary>
            Will be called when a windows "drag and drop" operation enters the space of this object.
            You may modify the <paramref name="drgevent"/> parameter, especially the <see cref="!:DragEventArgs.Effect"/>.
            </summary>
            <param name="drgevent">Argument that indicates the state of the drag and drop action</param>
            <summary>
            Alt+Enter was pressed in the controlcenter while this entry was selected
            </summary>
        </member>
        <member name="T:CADability.UserInterface.IShowPropertyImpl">
            <summary>
            Standard implementation of <see cref="T:CADability.UserInterface.IShowProperty"/>. Implements many interface methods in a 
            standard way as a virtual method to give derived classes the possibility to override
            these implementations
            </summary>
        </member>
        <member name="F:CADability.UserInterface.IShowPropertyImpl.labelText">
            <summary>
            Overrides the label text, which is normally retrieved from the <see cref="T:CADability.UserInterface.StringTable"/>
            with the <see cref="F:CADability.UserInterface.IShowPropertyImpl.resourceId"/>
            </summary>
        </member>
        <member name="F:CADability.UserInterface.IShowPropertyImpl.resourceId">
            <summary>
            The resourceId specifies both the label text and the tooltip text. The label text
            is loaded from the <see cref="T:CADability.UserInterface.StringTable"/> with the ID resourceId+".Label" the 
            tooltip text is loaded with the id resourceId+".ShortInfo" or resourceId+".DetailedInfo".
            You may extend the StringTable and ues your own resourceId values according to this scheme. (see
            <see cref="M:CADability.UserInterface.StringTable.AddStrings(System.IO.Stream)"/>)
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IShowPropertyImpl.Frame">
            <summary>
            Returns a IFrame when this IShowProperty has been added to a <see cref="T:CADability.UserInterface.IPropertyTreeView"/>,
            returns null otherwise.
            </summary>
        </member>
        <member name="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)">
            <summary>
            Implementation of <see cref="M:CADability.UserInterface.IShowProperty.Added(CADability.UserInterface.IPropertyTreeView)"/>.
            Momorizes the given <see cref="T:CADability.UserInterface.IPropertyTreeView"/>, raises the <see cref="E:CADability.UserInterface.IShowProperty.StateChangedEvent"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="M:CADability.UserInterface.IShowPropertyImpl.Selected">
            <summary>
            Implementation of <see cref="M:CADability.UserInterface.IShowProperty.Selected"/>, 
            raises the <see cref="E:CADability.UserInterface.IShowProperty.StateChangedEvent"/>
            </summary>
        </member>
        <member name="M:CADability.UserInterface.IShowPropertyImpl.UnSelected">
            <summary>
            Implementation of <see cref="M:CADability.UserInterface.IShowProperty.UnSelected"/>, 
            raises the <see cref="E:CADability.UserInterface.IShowProperty.StateChangedEvent"/>
            </summary>
        </member>
        <member name="M:CADability.UserInterface.IShowPropertyImpl.ChildSelected(CADability.UserInterface.IShowProperty)">
            <summary>
            Implementation of <see cref="M:CADability.UserInterface.IShowProperty.ChildSelected(CADability.UserInterface.IShowProperty)"/>, 
            raises the <see cref="E:CADability.UserInterface.IShowProperty.StateChangedEvent"/>
            </summary>
            <param name="theSelectedChild">the now selected child property</param>
        </member>
        <member name="M:CADability.UserInterface.IShowPropertyImpl.Opened(System.Boolean)">
            <summary>
            Implementation of <see cref="M:CADability.UserInterface.IShowProperty.Opened(System.Boolean)"/>, 
            raises the <see cref="E:CADability.UserInterface.IShowProperty.StateChangedEvent"/>
            </summary>
            <param name="IsOpen">true: now open, false: now closed</param>
        </member>
        <member name="M:CADability.UserInterface.IShowPropertyImpl.Removed(CADability.UserInterface.IPropertyTreeView)">
            <summary>
            Implementation of <see cref="M:CADability.UserInterface.IShowProperty.Removed(CADability.UserInterface.IPropertyTreeView)"/>, 
            raises the <see cref="E:CADability.UserInterface.IShowProperty.StateChangedEvent"/>
            </summary>
            <param name="propertyTreeView">removed from this <see cref="T:CADability.UserInterface.IPropertyTreeView"/></param>
        </member>
        <member name="M:CADability.UserInterface.IShowPropertyImpl.ShowOpen(System.Boolean)">
            <summary>
            Implementation of <see cref="M:CADability.UserInterface.IShowProperty.ShowOpen(System.Boolean)"/>, opens or closes this entry
            if it is currently contained in a <see cref="T:CADability.UserInterface.IPropertyTreeView"/>
            </summary>
            <param name="open">true: open, false: close</param>
        </member>
        <member name="M:CADability.UserInterface.IShowPropertyImpl.Select">
            <summary>
            Implementation of <see cref="M:CADability.UserInterface.IShowProperty.Select"/>, selects this entry
            if it is currently contained in a <see cref="T:CADability.UserInterface.IPropertyTreeView"/>
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IShowPropertyImpl.LabelText">
            <summary>
            Implementation of <see cref="P:CADability.UserInterface.IShowProperty.LabelText"/>, returns either
            <see cref="F:CADability.UserInterface.IShowPropertyImpl.labelText"/> (if not null) or <see cref="M:CADability.UserInterface.StringTable.GetString(System.String,CADability.UserInterface.StringTable.Category)"/>(resourceId+".Label")
            Whe set, <see cref="F:CADability.UserInterface.IShowPropertyImpl.labelText"/> is set.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IShowPropertyImpl.InfoText">
            <summary>
            Implementation of <see cref="P:CADability.UserInterface.IShowProperty.InfoText"/>, returns 
            <see cref="M:CADability.UserInterface.StringTable.GetString(System.String,CADability.UserInterface.StringTable.Category)"/>(resourceId+".DetailedInfo") or 
            <see cref="M:CADability.UserInterface.StringTable.GetString(System.String,CADability.UserInterface.StringTable.Category)"/>(resourceId+".ShortInfo")
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IShowPropertyImpl.HelpLink">
            <summary>
            Implementation of <see cref="P:CADability.UserInterface.IShowProperty.HelpLink"/>, returns 
            <see cref="F:CADability.UserInterface.IShowPropertyImpl.resourceId"/>.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IShowPropertyImpl.LabelType">
            <summary>
            Implementation of <see cref="P:CADability.UserInterface.IShowProperty.LabelType"/>.
            Returns <see cref="F:CADability.UserInterface.ShowPropertyLabelFlags.Selectable"/>
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IShowPropertyImpl.EntryType">
            <summary>
            Implementation of <see cref="P:CADability.UserInterface.IShowProperty.EntryType"/>.
            Returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.SimpleEntry"/>
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount">
            <summary>
            Implementation of <see cref="P:CADability.UserInterface.IShowProperty.SubEntriesCount"/>.
            Returns 0.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IShowPropertyImpl.SubEntries">
            <summary>
            Implementation of <see cref="P:CADability.UserInterface.IShowProperty.SubEntries"/>.
            Returns an empty array.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IShowPropertyImpl.OwnerDrawHeight">
            <summary>
            Implementation of <see cref="P:CADability.UserInterface.IShowProperty.OwnerDrawHeight"/>.
            Returns 0.
            </summary>
        </member>
        <member name="E:CADability.UserInterface.IShowPropertyImpl.StateChangedEvent">
            <summary>
            Implementation of <see cref="E:CADability.UserInterface.IShowProperty.StateChangedEvent"/>.
            </summary>
        </member>
        <member name="M:CADability.UserInterface.IShowPropertyImpl.LabelChanged(System.String)">
            <summary>
            Implementation of <see cref="M:CADability.UserInterface.IShowProperty.LabelChanged(System.String)"/>. Override if <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            is <see cref="F:CADability.UserInterface.ShowPropertyLabelFlags.Editable"/>.
            </summary>
            <param name="NewText">the new text</param>
        </member>
        <member name="M:CADability.UserInterface.IShowPropertyImpl.SetFocus">
            <summary>
            Implementation of <see cref="M:CADability.UserInterface.IShowProperty.SetFocus"/>. 
            Does nothing, override when needed.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IShowPropertyImpl.Hidden">
            <summary>
            Implementation of <see cref="P:CADability.UserInterface.IShowProperty.Hidden"/>. 
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IShowPropertyImpl.ReadOnly">
            <summary>
            Implementation of <see cref="P:CADability.UserInterface.IShowProperty.Hidden"/>. 
            </summary>
        </member>
        <member name="M:CADability.UserInterface.IShowPropertyImpl.Refresh">
            <summary>
            Implementation of <see cref="M:CADability.UserInterface.IShowProperty.Refresh"/>. 
            </summary>
        </member>
        <member name="M:CADability.UserInterface.IShowPropertyImpl.OnEnterPressed">
            <summary>
            Implements <see cref="M:CADability.UserInterface.IShowProperty.OnEnterPressed"/>
            </summary>
        </member>
        <member name="M:CADability.UserInterface.IShowPropertyImpl.Concat(CADability.UserInterface.IShowProperty[],CADability.UserInterface.IShowProperty[])">
            <summary>
            Static helper method to concatenate two arrays of <see cref="T:CADability.UserInterface.IShowProperty"/>.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.UserInterface.IShowPropertyImpl.Update(CADability.UserInterface.IShowProperty)">
            <summary>
            Calls the Refresh method of several standard implementations of <see cref="T:CADability.UserInterface.IShowProperty"/>.
            </summary>
            <param name="sp"></param>
        </member>
        <member name="E:CADability.UserInterface.IShowPropertyImpl.PropertyEntryChangedStateEvent">
            <summary>
            Implementation of <see cref="E:CADability.UserInterface.IPropertyEntry.PropertyEntryChangedStateEvent"/>.
            </summary>
        </member>
        <member name="T:CADability.UserInterface.ShowPropertyGroup">
            <summary>
            Simple group-entry into the treeview of the control center. The resourceId
            specifies the text that is displayed. Use AddSubEntry to add al the subentries
            for this group entry. All subentries must be added before this group entry is displayed.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.ShowPropertyGroup.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.ShowPropertyGroup.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.ShowPropertyGroup.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="T:CADability.UserInterface.IPropertyTreeView">
            <summary>
            Das Interface, das von dem PropertyDisplay Control zu Verf√ºgung gestellt werden muss.
            CADability implementiert mit PropertyDisplay ein Control, welches dieses Interface 
            zu Verf√ºgung stellt. Das PropertyDisplay Control kann aber auch  durch ein Control
            des Anwenders ersetzt werden. Dieses muss lediglich das IPropertyTreeView Interface
            implementieren.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IPropertyTreeView.ActiveView">
            <summary>
            Liefert das aktive View Objekt. Dieses kann auch fehlen, dann wird null geliefert.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IPropertyTreeView.DefaultLineHeight">
            <summary>
            Liefert die Standard Zeilenh√∂he der Anzeige
            </summary>
        </member>
        <member name="M:CADability.UserInterface.IPropertyTreeView.AddShowProperty(CADability.UserInterface.IShowProperty,System.Boolean)">
            <summary>
            F√ºgt das im Parameter gegebene Objekt zur Anzeige hinzu.
            </summary>
            <param name="ToAdd">Dieses Objekt soll angezeigt werden</param>
            <param name="TopMost">true: an oberster Stelle, false: an unterster Stelle.</param>
        </member>
        <member name="M:CADability.UserInterface.IPropertyTreeView.RemoveShowProperty(CADability.UserInterface.IShowProperty)">
            <summary>
            Das im Parameter gegebene Objekt soll nicht mehr angezeigt werden.
            </summary>
            <param name="ToRemove">Die zu entfernende Anzeige.</param>
        </member>
        <member name="M:CADability.UserInterface.IPropertyTreeView.ReplaceShowProperty(CADability.UserInterface.IShowProperty,CADability.UserInterface.IShowProperty)">
            <summary>
            Ersetzt eine Anzeige durch eine andere.
            </summary>
            <param name="ToReplace">Die zu ersetzende Anzeige</param>
            <param name="ToInsert">Die neue Anzeige</param>
        </member>
        <member name="M:CADability.UserInterface.IPropertyTreeView.HasTopLevelShowProperty(CADability.UserInterface.IShowProperty)">
            <summary>
            Determins whether the given IShowProperty LookForThis is one of the root
            ShowProperties.
            </summary>
            <param name="LookForThis">look for this IShowProperty object</param>
            <returns>true, if LookForThis is a root ShowProperty, false otherwise</returns>
        </member>
        <member name="M:CADability.UserInterface.IPropertyTreeView.SelectEntry(CADability.UserInterface.IShowProperty)">
            <summary>
            Das im Parameter gegebene Objekt soll markiert dargestellt werden.
            </summary>
            <param name="NewSelection">Das neu zu markierende objekt.</param>
        </member>
        <member name="M:CADability.UserInterface.IPropertyTreeView.Refresh(CADability.UserInterface.IShowProperty)">
            <summary>
            Das im Parameter gegebene Objekt muss neu dargestellt werden. Z.B wenn sich die 
            Liste der Unterobjekte ge√§ndert hat.
            </summary>
            <param name="ToRefresh">Das neu darzustellende Objekt.</param>
        </member>
        <member name="M:CADability.UserInterface.IPropertyTreeView.MakeVisible(CADability.UserInterface.IShowProperty)">
            <summary>
            Das im Parameter gegebene Objekt soll sichtbar dargestellt werden.
            </summary>
            <param name="ToShow">Das anzuzeigende Objekt.</param>
        </member>
        <member name="M:CADability.UserInterface.IPropertyTreeView.StartEditLabel(CADability.UserInterface.IShowProperty)">
            <summary>
            Der LabelText des im Parameter gegebenen Objektes soll editiert werden.
            </summary>
            <param name="ToEdit">Das zu editiernde Objekt</param>
        </member>
        <member name="M:CADability.UserInterface.IPropertyTreeView.OpenSubEntries(CADability.UserInterface.IShowProperty,System.Boolean)">
            <summary>
            Die Untereintr√§ge des im Parameter gegebenen Objektes sollenn (erzeugt und) sichtbar sein.
            </summary>
            <param name="ToOpen"></param>
        </member>
        <member name="M:CADability.UserInterface.IPropertyTreeView.SelectNext(CADability.UserInterface.IShowProperty,System.Boolean)">
             <summary>
             Die Untereintr√§ge des im Parameter gegebenen Objektes sollenn (erzeugt und) sichtbar sein.
             </summary>
             <param name="HasCurrentFocus">Das aktuell fokussierte Objekt</param>	
            <param name="Forward">=wahr setzt den Fukus auf das n√§chste Objekt der Tab-Reighenfolge, = falsch auf das verhergehende</param>	
        </member>
        <member name="M:CADability.UserInterface.IPropertyTreeView.IsOnTop">
            <summary>
            Determins whether this IPropertyTreeView is on top of all IPropertyTreeView objects.
            Several IPropertyTreeViews reside in the ControlCenter in different tab pages. Determins
            whether this IPropertyTreeView is in the selected tab page.
            </summary>
            <returns>true if on top, false otherwise</returns>
        </member>
        <member name="M:CADability.UserInterface.IPropertyTreeView.FindFromHelpLink(System.String)">
            <summary>
            Finds the <see cref="T:CADability.UserInterface.IShowProperty"/> object with the given help link (<see cref="P:CADability.UserInterface.IShowProperty.HelpLink"/>).
            The help link is used as a kind of unique id. It is usually the the resource id for the label text.
            If the desired entry is not visible it will not be found. You will first have to open
            the sub entries of the parent entry (<see cref="M:CADability.UserInterface.IPropertyTreeView.OpenSubEntries(CADability.UserInterface.IShowProperty,System.Boolean)"/>).
            </summary>
            <param name="HelpLink">The help link for the desired entry</param>
            <returns>The IShowProperty entry</returns>
        </member>
        <member name="M:CADability.UserInterface.IPropertyTreeView.GetFrame">
            <summary>
            Returns the <see cref="T:CADability.IFrame"/> object of the context of this IPropertyTreeView
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.UserInterface.IPropertyTreeView.FocusLeft(CADability.UserInterface.IShowProperty,CADability.UserInterface.IShowProperty,CADability.UserInterface.IShowProperty)">
            <summary>
            Checks, whether a Focus change from oldFocus to newFocus implies a focus change from
            "toTest" or one of its child entries to some entry outside of "toTest". If oldFocus
            is not toTest or one of its children "false" is returned. If the focus changes
            from one child of toTest to another or from a child of toTest to toTest itself or
            from toTest to one of its children, false is returned.
            </summary>
            <param name="toTest">the entry beeing examined</param>
            <param name="oldFocus">the entry that lost the focus</param>
            <param name="newFocus">the entry that got the focus</param>
            <returns>true if toTest lost the focus</returns>
        </member>
        <member name="M:CADability.UserInterface.IPropertyTreeView.FocusEntered(CADability.UserInterface.IShowProperty,CADability.UserInterface.IShowProperty,CADability.UserInterface.IShowProperty)">
            <summary>
            Checks, whether a Focus change from oldFocus to newFocus implies a focus change to
            "toTest" or one of its child entries from some entry outside of "toTest". If newFocus
            is not toTest or one of its children "false" is returned. If the focus changes
            from one child of toTest to another or from a child of toTest to toTest itself or
            from toTest to one of its children, false is returned.
            </summary>
            <param name="toTest">the entry beeing examined</param>
            <param name="oldFocus">the entry that lost the focus</param>
            <param name="newFocus">the entry that got the focus</param>
            <returns>true if toTest lost the focus</returns>
        </member>
        <member name="T:CADability.UserInterface.IInfoProvider">
            <summary>
            Controls, die dieses interface implementieren, k√∂nnen genaueren Einflu√ü auf das
            Erscheinen im InfoPopup nehmen, z.B. dynamisch sich √§ndernde Texte
            oder verschiedene ToolTips, je nach Position
            </summary>
        </member>
        <member name="M:CADability.UserInterface.IInfoProvider.GetPositionIndex(System.Drawing.Point)">
            <summary>
            Liefert die Positionsnummer f√ºr mehrere verschiedene Texte
            </summary>
            <param name="ScreenCursorPosition">Bildschirmposition des Cursors</param>
            <returns>Die Positionsnummer, oder 0, wenn es nur einen Text gibt, 
            oder -1, wenn an dieser Stelle nichts angezeigt werden soll.</returns>
        </member>
        <member name="M:CADability.UserInterface.IInfoProvider.GetInfoText(System.Int32,CADability.UserInterface.InfoLevelMode)">
            <summary>
             Liefert den darzustellenden InfoText, ggf. abh√§ngig von der Positionsnummer
             und dem Level (wie ausf√ºhrlich)
            </summary>
            <param name="Index">Die Positionsnummer aus GetPositionIndex</param>
            <param name="Level">Der Level (0: einfach, 1: ausf√ºhrlich)</param>
            <returns>Der darzustellende Text</returns>
        </member>
        <member name="M:CADability.UserInterface.IInfoProvider.GetVerticalPosition(System.Int32)">
            <summary>
            Retursn a preferred position for the InfoPopup (tooltip) relative to the cursor
            position. If 0 is returned, the InfoPopup will find a default position. A positive
            value is the number of pixels below the cursor position, a negative value above the
            cursor position.
            </summary>
            <param name="Index"></param>
            <returns></returns>
        </member>
        <member name="T:CADability.UserInterface.LengthHotSpot">
            <summary>
            Implements a hotspot <see cref="T:CADability.IHotSpot"/> to manipulate a lenth via a length property
            </summary>
        </member>
        <member name="M:CADability.UserInterface.LengthHotSpot.#ctor(CADability.UserInterface.LengthProperty)">
            <summary>
            Constructs a hotspot to manipulate a length property
            </summary>
            <param name="lengthProperty">the property to be manipulated</param>
        </member>
        <member name="M:CADability.UserInterface.LengthHotSpot.GetHotspotPosition">
            <summary>
            Implements <see cref="M:CADability.IHotSpot.GetHotspotPosition"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.UserInterface.LengthHotSpot.StartDrag(CADability.IFrame)">
            <summary>
            Implements <see cref="!:CADability.IHotSpot.StartDrag ()"/>
            </summary>
        </member>
        <member name="T:CADability.UserInterface.LinePatternSelectionProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.UserInterface.LinePatternSelectionProperty.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="M:CADability.UserInterface.LinePatternSelectionProperty.Removed(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Removed(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView">the IPropertyTreeView from which it was removed</param>
        </member>
        <member name="T:CADability.UserInterface.LineWidthSelectionProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.UserInterface.LineWidthSelectionProperty.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="M:CADability.UserInterface.LineWidthSelectionProperty.Removed(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Removed(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView">the IPropertyTreeView from which it was removed</param>
        </member>
        <member name="T:CADability.UserInterface.MenuWithHandler">
            <summary>
            A simple structure describing a menu or an menu item (without the use of Windows.Forms).
            If <see cref="P:CADability.UserInterface.MenuWithHandler.ID"/> is null, this is a main menu, if <see cref="P:CADability.UserInterface.MenuWithHandler.SubMenus"/> is null, it is a simple menu item.
            If <see cref="P:CADability.UserInterface.MenuWithHandler.SubMenus"/> is not null, this structur contains a list of submenus.
            This structure must be converted to a platform dependant menue and displayed accordingly.
            </summary>
        </member>
        <member name="T:CADability.UserInterface.MenuResource">
            <summary>
            The MenuResource class provides methods to load and manipulate a menu resource that is used by CADability
            and its applications to compose the main menu, popup and context menues.
            </summary>
        </member>
        <member name="M:CADability.UserInterface.MenuResource.SetMenuResource(System.IO.Stream)">
            <summary>
            Replaces the standard menu resource by the provided XML document
            </summary>
            <param name="XmlStream">The document opend as a stream</param>
        </member>
        <member name="M:CADability.UserInterface.MenuResource.SetMenuResource(System.Xml.XmlDocument)">
            <summary>
            Replaces the standard menu resource by the provided XML document
            </summary>
            <param name="XmlStream">The document</param>
        </member>
        <member name="M:CADability.UserInterface.MenuResource.AddMenuResource(System.IO.Stream)">
            <summary>
            Adds all subnodes of "CustomMenus" to the standard menu resource (e.g. additional context menus).
            </summary>
            <param name="XmlStream">Stream containing the XML document</param>
        </member>
        <member name="M:CADability.UserInterface.MenuResource.ReplaceMenus(System.IO.Stream)">
            <summary>
            replaces all popup menus contained in subnodes of "CustomMenus" of the provided document.
            </summary>
            <param name="XmlStream">Stream containing the XML document</param>
        </member>
        <member name="M:CADability.UserInterface.MenuResource.CreateContextMenuWithHandler(System.String[],CADability.UserInterface.ICommandHandler)">
            <summary>
            Loads a MainMenu from the menu resource with the provided name. For the unmodified standard resource
            the menuname will be "SDI Menu"
            </summary>
            <param name="MenuName">Name of the menu to load</param>
            <param name="frame">Frame which handles the menu commands</param>
            <returns></returns>
        </member>
        <member name="M:CADability.UserInterface.MenuResource.IsPopup(System.String)">
            <summary>
            Returns true if the provided name is a popup menu (context menu)
            </summary>
            <param name="MenuName"></param>
            <returns></returns>
        </member>
        <member name="T:CADability.UserInterface.ModelsProperty">
            <summary>
            The <see cref="T:CADability.UserInterface.IShowProperty"/> implementation for the models contained in a <see cref="P:CADability.UserInterface.ModelsProperty.Project"/>.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.ModelsProperty.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="P:CADability.UserInterface.ModelsProperty.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.ModelsProperty.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.ModelsProperty.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="T:CADability.UserInterface.MRUFiles">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.UserInterface.IIndexedGeoPoint">
            <summary>
            Interface for the treatment of a list or array of GeoPoints. This interface is used
            for the communication of user-interface objects (e.g. MultiGeoPointProperty) with
            various containers of GeoPoints.
            </summary>
        </member>
        <member name="M:CADability.UserInterface.IIndexedGeoPoint.SetGeoPoint(System.Int32,CADability.GeoPoint)">
            <summary>
            Sets the GeoPoint with the given index
            </summary>
            <param name="Index">Index of the GeoPoint</param>
            <param name="ThePoint">Value to set</param>
        </member>
        <member name="M:CADability.UserInterface.IIndexedGeoPoint.GetGeoPoint(System.Int32)">
            <summary>
            Yields the value of the GeoPoint with the given index.
            </summary>
            <param name="Index">Index of the GeoPoint</param>
            <returns>Value of the GeoPoint</returns>
        </member>
        <member name="M:CADability.UserInterface.IIndexedGeoPoint.InsertGeoPoint(System.Int32,CADability.GeoPoint)">
            <summary>
            Inserts a new GeoPoint before the given index. Index==-1: Append
            </summary>
            <param name="Index">Where to insert</param>
            <param name="ThePoint">Value to insert</param>
        </member>
        <member name="M:CADability.UserInterface.IIndexedGeoPoint.RemoveGeoPoint(System.Int32)">
            <summary>
            Removes the GeoPoint at the given Index.
            </summary>
            <param name="Index">Index of the point to be removed, -1: LastPoint</param>
        </member>
        <member name="M:CADability.UserInterface.IIndexedGeoPoint.GetGeoPointCount">
            <summary>
            Yields the number of GeoPoints in the list or array.
            </summary>
            <returns>Number of GeoPoints</returns>
        </member>
        <member name="M:CADability.UserInterface.IIndexedGeoPoint.MayInsert(System.Int32)">
            <summary>
            Asks, whether a point may be inserted before the given index.
            </summary>
            <param name="Index">Index where insertion is requested, -1: append</param>
            <returns></returns>
        </member>
        <member name="M:CADability.UserInterface.IIndexedGeoPoint.MayDelete(System.Int32)">
            <summary>
            Asks, whether the point with the given index may be deleted.
            </summary>
            <param name="Index">Index of the point</param>
            <returns></returns>
        </member>
        <member name="T:CADability.UserInterface.MultiGeoPointProperty">
            <summary>
            A <see cref="T:CADability.UserInterface.IShowProperty"/> implementation that displays a list of <see cref="T:CADability.GeoPoint"/>s.
            The communication with the object that owns that list is performed via a <see cref="T:CADability.UserInterface.IIndexedGeoPoint"/>
            interface, which must be provided in the constructor. This show property lets the user add
            and remove GeoPoints to or from the list or modify existing GeoPoints in the list.
            </summary>
        </member>
        <member name="M:CADability.UserInterface.MultiGeoPointProperty.#ctor(CADability.UserInterface.IIndexedGeoPoint,System.String)">
            <summary>
            Creates a MultiGeoPointProperty. The parameter "controlledObject" provides the owner
            of the list.
            </summary>
            <param name="controlledObject">owner of the list</param>
            <param name="resourceId">the resource id to specify a string from the StringTable.
            ResourceId+".Label": the Label left of the
            edit box. ResourceId+".ShortInfo": a short tooltip text ResourceId+"DetailedInfo":
            a longer tooltip text.
            </param>
        </member>
        <member name="M:CADability.UserInterface.MultiGeoPointProperty.Refresh(System.Int32)">
            <summary>
            Refreshes the display of the point with the given index.
            </summary>
            <param name="Index">index of point to refresh</param>
        </member>
        <member name="M:CADability.UserInterface.MultiGeoPointProperty.Append(CADability.GeoPoint)">
            <summary>
            Appends a point to the list of points
            </summary>
            <param name="initialValue">initial value of the new point</param>
        </member>
        <member name="M:CADability.UserInterface.MultiGeoPointProperty.ShowOpen(System.Boolean)">
            <summary>
            Opens the subentries in the treeview.
            </summary>
            <param name="open">true: open, false: close</param>
        </member>
        <member name="P:CADability.UserInterface.MultiGeoPointProperty.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.MultiGeoPointProperty.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.MultiGeoPointProperty.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="T:CADability.UserInterface.MultiGeoPointProperty.ModifyWithMouseIndexDelegate">
            <summary>
            Delegate definition for <see cref="E:CADability.UserInterface.MultiGeoPointProperty.ModifyWithMouseEvent"/>.
            </summary>
            <param name="sender">this object</param>
            <param name="index">index of the point that is modified</param>
            <returns>true: accepted, false: not accepted</returns>
        </member>
        <member name="E:CADability.UserInterface.MultiGeoPointProperty.ModifyWithMouseEvent">
            <summary>
            Provide a method here if you need to notified about modification of any point
            in this list with the mouse
            </summary>
        </member>
        <member name="E:CADability.UserInterface.MultiGeoPointProperty.GeoPointSelectionChangedEvent">
            <summary>
            Provide a method here if you need to be notified about when the selection
            of the points in the subtree changed
            </summary>
        </member>
        <member name="T:CADability.UserInterface.MultiGeoPointProperty.GetInsertionPointDelegate">
            <summary>
            Delegate definition for <see cref="F:CADability.UserInterface.MultiGeoPointProperty.GetInsertionPointEvent"/>
            </summary>
            <param name="sender">This property</param>
            <param name="index">Where to insert</param>
            <param name="after">true: insert after this index, false: insert before this index</param>
            <returns>The new point to be inserted</returns>
        </member>
        <member name="F:CADability.UserInterface.MultiGeoPointProperty.GetInsertionPointEvent">
            <summary>
            When a point is about to be inserted this property needs some initial value.
            The default initial value is the same point as the first/last point, when inserted before the first
            or after the last point, and the middle point of the intervall where the point is to be inserted.
            If you wisch another behaviour add a handler to this event and return the appropriate point.
            </summary>
        </member>
        <member name="F:CADability.UserInterface.MultipleChoiceProperty.user">
            <value>
            Back reference to any user item. Not used by the MultipleChoiceProperty object itself.
            </value>
        </member>
        <member name="M:CADability.UserInterface.MultipleChoiceProperty.#ctor(System.String,System.String[],System.String)">
            <summary>
            Konstruktor mit Initialisierung.
            </summary>
            <param name="LabelText">Der Text der Anzeige auf der linken Seite</param>
            <param name="Choices">Die Auswahlm√∂glichkeiten</param>
        </member>
        <member name="M:CADability.UserInterface.MultipleChoiceProperty.#ctor">
            <summary>
            Leerer Konstruktor (f√ºr die Verwendung von abgeleiteten Klassen).
            wenigstens propertyLabelText und choices m√ºssen gesetzt werden.
            </summary>
        </member>
        <member name="T:CADability.UserInterface.MultiViewProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:CADability.UserInterface.MultiViewProperty.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.MultiViewProperty.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.MultiViewProperty.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="T:CADability.UserInterface.NameProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.UserInterface.NameProperty.UnSelected">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.UnSelected"/>
            </summary>
        </member>
        <member name="T:CADability.UserInterface.PointSymbolSelectionProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:CADability.UserInterface.PropertyEntryType.Selectable">
            <summary>
            Entry may be selected (not selectable: GroupTitles)
            </summary>
        </member>
        <member name="F:CADability.UserInterface.PropertyEntryType.LabelEditable">
            <summary>
            Label may be edited, good for named values
            </summary>
        </member>
        <member name="F:CADability.UserInterface.PropertyEntryType.Bold">
            <summary>
            Label in bold letters
            </summary>
        </member>
        <member name="F:CADability.UserInterface.PropertyEntryType.Highlight">
            <summary>
            Label in Highlight color (red)
            </summary>
        </member>
        <member name="F:CADability.UserInterface.PropertyEntryType.Selected">
            <summary>
            Entry is selected
            </summary>
        </member>
        <member name="F:CADability.UserInterface.PropertyEntryType.Checked">
            <summary>
            Entry is checked
            </summary>
        </member>
        <member name="F:CADability.UserInterface.PropertyEntryType.Link">
            <summary>
            Label is a link, currently not supported
            </summary>
        </member>
        <member name="F:CADability.UserInterface.PropertyEntryType.ContextMenu">
            <summary>
            There is a context menu for this entry
            </summary>
        </member>
        <member name="F:CADability.UserInterface.PropertyEntryType.OKButton">
            <summary>
            A OK Button should be displayed for this entry (usually in the context of an action)
            </summary>
        </member>
        <member name="F:CADability.UserInterface.PropertyEntryType.CancelButton">
            <summary>
            A cancel button should be displayed for this entry (usually in the context of an action)
            </summary>
        </member>
        <member name="F:CADability.UserInterface.PropertyEntryType.AllowDrag">
            <summary>
            Allows the label to be destination of dradrop operations
            </summary>
        </member>
        <member name="F:CADability.UserInterface.PropertyEntryType.GroupTitle">
            <summary>
            A simple group title, no control to manipulate that entry
            </summary>
        </member>
        <member name="F:CADability.UserInterface.PropertyEntryType.Seperator">
            <summary>
            This entry is a separator
            </summary>
        </member>
        <member name="F:CADability.UserInterface.PropertyEntryType.DropDown">
            <summary>
            This entry ha a drop down list for its selection
            </summary>
        </member>
        <member name="F:CADability.UserInterface.PropertyEntryType.ValueEditable">
            <summary>
            The value can be edited
            </summary>
        </member>
        <member name="F:CADability.UserInterface.PropertyEntryType.HasSubEntries">
            <summary>
            This entry has subentries
            </summary>
        </member>
        <member name="F:CADability.UserInterface.PropertyEntryType.HasSpinButton">
            <summary>
            This entry has a spin button (up/down button)
            </summary>
        </member>
        <member name="F:CADability.UserInterface.PropertyEntryType.Checkable">
            <summary>
            A label with a checkbox, Changes reported by ButtonClicked, Value == "0" (not checked), "1" (checked), "2" (indetermined or disabled)
            </summary>
        </member>
        <member name="F:CADability.UserInterface.PropertyEntryType.ValueAsButton">
            <summary>
            Clicking on the (non editable) value calls <see cref="M:CADability.UserInterface.IPropertyEntry.ButtonClicked(CADability.UserInterface.PropertyEntryButton)"/> with the flag <see cref="F:CADability.UserInterface.PropertyEntryButton.value"/>
            </summary>
        </member>
        <member name="T:CADability.UserInterface.IPropertyEntry">
            <summary>
            Describes a single line in a tab page in the control center. Must be implemented by displayable properties like GeoPointProperty.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IPropertyEntry.IsOpen">
            <summary>
            Is the entry currently displayed with its subentries?
            </summary>
        </member>
        <member name="M:CADability.UserInterface.IPropertyEntry.Opened(System.Boolean)">
            <summary>
            Notification for the entry that the open/losed state has changed
            </summary>
            <param name="isOpen">true: is now open (subentries are shown), false: is closed (subentries are hidden)</param>
        </member>
        <member name="P:CADability.UserInterface.IPropertyEntry.Flags">
            <summary>
            Gets the type of this entry
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IPropertyEntry.Label">
            <summary>
            The label text
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IPropertyEntry.Value">
            <summary>
            The values text (may contain drawing hints like "[[ColorBox:0:128:255]]Pink")
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IPropertyEntry.ToolTip">
            <summary>
            A tooltip, or null if no tooltip should be displayed
            </summary>
        </member>
        <member name="M:CADability.UserInterface.IPropertyEntry.OpenOrCloseSubEntries">
            <summary>
            if subentries are show, then hide them, if not, then show them (user clicked on the + or - symbol for opening or closing the subentries)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.UserInterface.IPropertyEntry.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Has been added to the property page, can be used to do some initialisation.
            </summary>
            <param name="pp">property page, it has been added to, keep it to use it for Refresh notification</param>
        </member>
        <member name="M:CADability.UserInterface.IPropertyEntry.Removed(CADability.UserInterface.IPropertyPage)">
            <summary>
            Has been removed from the property page
            </summary>
            <param name="pp"></param>
        </member>
        <member name="P:CADability.UserInterface.IPropertyEntry.Parent">
            <summary>
            Gets or sets the parent. The implementer must simply keep this reference, it is either a IPropertyEntry or a IPropertyPage for the root objects
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IPropertyEntry.Index">
            <summary>
            The line number of this entry in the property page. The implementer must simply keep this value
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IPropertyEntry.IndentLevel">
            <summary>
            The indentaion of this entry (according to it's position int the property tree). The implementer must simply keep this value
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IPropertyEntry.SubItems">
            <summary>
            Returns the Sbitems, will only be called when <see cref="!:EntryType.HasSubEntries"/> is set.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IPropertyEntry.ContextMenu">
            <summary>
            Gets a ContextMenue for this entry
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.UserInterface.IPropertyEntry.GetDropDownList">
            <summary>
            Gets the list of choices (may contain drawing hints, like background color)
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CADability.UserInterface.IPropertyEntry.StartEdit(System.Boolean)" -->
        <member name="M:CADability.UserInterface.IPropertyEntry.EndEdit(System.Boolean,System.Boolean,System.String)">
            <summary>
            Notification when the editing process is beeing terminated. 
            </summary>
            <param name="aborted">true: the edit has been aborted, false: normal end of edit process</param>
        </member>
        <member name="M:CADability.UserInterface.IPropertyEntry.EditTextChanged(System.String)">
            <summary>
            The text beeing edited has changed
            </summary>
            <param name="newValue">The new text</param>
            <returns>true, when the property would accept this value</returns>
        </member>
        <member name="M:CADability.UserInterface.IPropertyEntry.Selected(CADability.UserInterface.IPropertyEntry)">
            <summary>
            This item is now selected in the property page. The item <paramref name="previousSelected"/> was selected before (may be null).
            </summary>
            <param name="selectedIndex"></param>
        </member>
        <member name="M:CADability.UserInterface.IPropertyEntry.UnSelected(CADability.UserInterface.IPropertyEntry)">
            <summary>
            This item was selected in the property page but is no more selected. The item <paramref name="nowSelected"/> will be selected instead (may be null).
            </summary>
            <param name="selectedIndex"></param>
        </member>
        <member name="M:CADability.UserInterface.IPropertyEntry.Select">
            <summary>
            Select this entry
            </summary>
        </member>
        <member name="M:CADability.UserInterface.IPropertyEntry.ListBoxSelected(System.Int32)">
            <summary>
            The indicated <paramref name="selectedIndex"/> has been selected in the listbox
            </summary>
            <param name="selectedIndex"></param>
        </member>
        <member name="P:CADability.UserInterface.IPropertyEntry.DeferUpdate">
            <summary>
            Only meaningful when <see cref="F:CADability.UserInterface.PropertyEntryType.ValueEditable"/> is set. 
            In this case the changes by typing do not notify the system until the textbox is closed (e.g. enter or tab was pressed)
            </summary>
        </member>
        <member name="P:CADability.UserInterface.IPropertyEntry.ReadOnly">
            <summary>
            Only meaningful when <see cref="F:CADability.UserInterface.PropertyEntryType.ValueEditable"/> is set. 
            If readonly is true, the value cannot be edited.
            </summary>
        </member>
        <member name="M:CADability.UserInterface.IUIService.ShowOpenFileDlg(System.String,System.String,System.String,System.Int32@,System.String@)">
            <summary>
            Shows an open file dialog. The <paramref name="id"/> is used to cache the last directory, so with different ids you get different
            start directories. The <paramref name="filter"/> is a windows OpenFileDialog filter, <paramref name="filterIndex"/> specifies, 
            which of the filters should be used as default, <paramref name="fileName"/> returns the name of the selected file.
            </summary>
            <param name="id">to keep default directories of different usages apart</param>
            <param name="title">title of the dialog, or simply open file, when title is null</param>
            <param name="filter"></param>
            <param name="filterIndex"></param>
            <param name="fileName">the filename</param>
            <returns></returns>
        </member>
        <member name="M:CADability.UserInterface.IUIService.GetBitmap(System.String)">
            <summary>
            Returns a bitmap from a bitmap strip, name has the format filename:index(, where filename should be part of the resources?)
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.UserInterface.IUIService.ShowProgressBar(System.Boolean,System.Double,System.String)">
            <summary>
            Shows or hides a progress bar. 
            </summary>
            <param name="show">true: show, false: hide</param>
            <param name="percent">progress percentage (0..100)</param>
            <param name="Title">title of the progress bar, null: don't change the current title</param>
        </member>
        <member name="M:CADability.UserInterface.PropertyEntryImpl.#ctor(System.String)">
            <summary>
            Provides the resource id for the label text
            </summary>
            <param name="resourceId"></param>
        </member>
        <member name="P:CADability.UserInterface.PropertyEntryImpl.Value">
            <summary>
            Must be overridden, when Flags contains PropertyEntryType.ValueEditable
            </summary>
        </member>
        <member name="P:CADability.UserInterface.PropertyEntryImpl.SubItems">
            <summary>
            Must be overridden, when Flags contains PropertyEntryType.HasSubEntries. See <see cref="P:CADability.UserInterface.IPropertyEntry.SubItems"/>
            </summary>
        </member>
        <member name="P:CADability.UserInterface.PropertyEntryImpl.ContextMenu">
            <summary>
            Must be overridden, when Flags contains PropertyEntryType.ContextMenu. See <see cref="P:CADability.UserInterface.IPropertyEntry.ContextMenu"/>
            </summary>
        </member>
        <member name="M:CADability.UserInterface.PropertyEntryImpl.ButtonClicked(CADability.UserInterface.PropertyEntryButton)">
            <summary>
            Must be overridden, when Flags contains PropertyEntryType.HasSpinButton or CancelButton or OKButton
            </summary>
            <param name="button"></param>
        </member>
        <member name="M:CADability.UserInterface.PropertyEntryImpl.EditTextChanged(System.String)">
            <summary>
            Must be overridden when Flags contains PropertyEntryType.ValueEditable. See <see cref="M:CADability.UserInterface.IPropertyEntry.EditTextChanged(System.String)"/>,
            </summary>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.UserInterface.PropertyEntryImpl.EndEdit(System.Boolean,System.Boolean,System.String)">
            <summary>
            Must be overridden when Flags contains PropertyEntryType.ValueEditable. See <see cref="M:CADability.UserInterface.IPropertyEntry.EndEdit(System.Boolean,System.Boolean,System.String)"/>
            </summary>
            <param name="aborted"></param>
            <param name="modified"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:CADability.UserInterface.PropertyEntryImpl.GetDropDownList">
            <summary>
            Must be overridden when Flags contains PropertyEntryType.DropDown, See <see cref="M:CADability.UserInterface.IPropertyEntry.GetDropDownList"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.UserInterface.PropertyEntryImpl.ListBoxSelected(System.Int32)">
            <summary>
            Must be overridden when Flags contains PropertyEntryType.DropDown
            </summary>
            <param name="selectedIndex"></param>
        </member>
        <member name="M:CADability.UserInterface.PropertyEntryImpl.StartEdit(System.Boolean)">
            <summary>
            Must be overridden, when Flags contains PropertyEntryType.ValueEditable. See <see cref="M:CADability.UserInterface.IPropertyEntry.StartEdit(System.Boolean)"/>
            </summary>
            <param name="editValue"></param>
        </member>
        <member name="T:CADability.UserInterface.SelectedObjectsProperty">
            <summary>
            Eigenschaftsanzeige f√ºr die Markierten Objekte. Diese Anzeige wird bei √Ñnderung
            der Markierung neu generiert. Die Anzeige erm√∂glicht f√ºr jedes markierte Objekt
            √Ñnderungen der Eigenschaften.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.SelectedObjectsProperty.SubItems">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.UserInterface.SelectedObjectsProperty.OnShowPropertyStateChanged(CADability.UserInterface.IShowProperty,CADability.UserInterface.StateChangedArgs)">
            <summary>
            Will be called when the state of an entry in the ControlCenter changes. this implementation must be called by a class overriding this method.
            </summary>
            <param name="sender">The ShowProperty that changed its state</param>
            <param name="args">The new state</param>
        </member>
        <member name="M:CADability.UserInterface.SelectedObjectsProperty.ShowOpen(CADability.UserInterface.IShowProperty)">
            <summary>
            Overrides <see cref="!:CADability.UserInterface.IShowPropertyImpl.OnSpecialKey (IShowProperty, KeyEventArgs)"/>
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:CADability.UserInterface.SelectedObjectsProperty.ReloadProperties">
            <summary>
            Implements <see cref="M:CADability.IDisplayHotSpots.ReloadProperties"/>
            </summary>
        </member>
        <member name="M:CADability.UserInterface.SelectedObjectsProperty.OnCreateSubContextMenue(CADability.GeoObject.IGeoObjectShowProperty,System.Collections.Generic.List{CADability.UserInterface.MenuWithHandler})">
            <summary>
            Will be called when a context menu of a sub entry has been generated. This implementation adds the standard menu entries for selected objects.
            </summary>
            <param name="sender">The ControlCenter entry that has its context menu created</param>
            <param name="toManipulate">The context menu, which may be manipulated</param>
        </member>
        <member name="T:CADability.UserInterface.SeperatorProperty">
            <summary>
            Seperator-Eintrag f√ºr TreeView
            </summary>
        </member>
        <member name="P:CADability.UserInterface.SeperatorProperty.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.Seperator"/>.
            </summary>
        </member>
        <member name="T:CADability.UserInterface.ShowPropertyBlock">
            <summary>
            
            </summary>
        </member>
        <member name="P:CADability.UserInterface.ShowPropertyBlock.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="T:CADability.UserInterface.ShowPropertyBSpline">
            <summary>
            Shows the properties of the BSpline.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.ShowPropertyBSpline.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="T:CADability.UserInterface.ShowPropertyCircle">
            <summary>
            Shows the properties of a circle.
            </summary>
        </member>
        <member name="M:CADability.UserInterface.ShowPropertyCircle.Removed(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Removed(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView">the IPropertyTreeView from which it was removed</param>
        </member>
        <member name="P:CADability.UserInterface.ShowPropertyCircle.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="T:CADability.UserInterface.ShowPropertyDimension">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.UserInterface.ShowPropertyDimension.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="T:CADability.UserInterface.ShowPropertyEllipse">
            <summary>
            Shows the properties of an ellipse
            </summary>
        </member>
        <member name="M:CADability.UserInterface.ShowPropertyEllipse.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="T:CADability.UserInterface.ShowPropertyHatch">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.UserInterface.ShowPropertyHotSpot">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.UserInterface.ShowPropertyHotSpot.GetHotspotPosition">
            <summary>
            Implements <see cref="M:CADability.IHotSpot.GetHotspotPosition"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.UserInterface.ShowPropertyHotSpot.StartDrag(CADability.IFrame)">
            <summary>
            Implements <see cref="!:CADability.IHotSpot.StartDrag ()"/>
            </summary>
        </member>
        <member name="T:CADability.UserInterface.ShowPropertyLine">
            <summary>
            Shows the properties of a line.
            </summary>
        </member>
        <member name="T:CADability.UserInterface.ShowPropertyPath">
            <summary>
            Shows the properties of a path.
            </summary>
        </member>
        <member name="T:CADability.UserInterface.ShowPropertyPoint">
            <summary>
            Shows the properties of a point.
            </summary>
        </member>
        <member name="T:CADability.UserInterface.ShowPropertyPolyline">
            <summary>
            Shows the properties of a polyline.
            </summary>
        </member>
        <member name="T:CADability.UserInterface.SimplePropertyGroup">
            <summary>
            A simple container for several <see cref="T:CADability.UserInterface.IShowProperty"/> entries in the
            treeview of the controlcenter. Add subentries to this group before the group
            ist displayed in the treeview. If you add or remove subentries while the
            group is displayed you will have to call <see cref="M:CADability.UserInterface.IPropertyTreeView.Refresh(CADability.UserInterface.IShowProperty)"/>.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.SimplePropertyGroup.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.SimplePropertyGroup.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.SimplePropertyGroup.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="T:CADability.UserInterface.StringTable">
            <summary>
            StringTable is a class that returns language dependant strings from (hardcoded)
            string IDs. All language dependant user interface texts are processed here.
            CADability contains an xml file as a primary string resource, containing all user 
            interface texts in german and enlish language.
            You can Add more strings and more languages by calling <see cref="M:CADability.UserInterface.StringTable.AddStrings(System.IO.Stream)"/>,
            or by simply providing an xml file named "CADability.StringTable.xxx.xml" (where xxx
            stands for any language or application specific abbreviation) in the directory where
            CADability.dll is located.
            </summary>
        </member>
        <member name="P:CADability.UserInterface.StringTable.ActiveLanguage">
            <summary>
            Gets or sets the active language
            </summary>
        </member>
        <member name="T:CADability.UserInterface.StringTable.ActiveLanguageChangedDelegate">
            <summary>
            Delegate definition for the <see cref="E:CADability.UserInterface.StringTable.ActiveLanguageChangedEvent"/>.
            </summary>
            <param name="newActiveLanguage">the name of the new active language</param>
        </member>
        <member name="E:CADability.UserInterface.StringTable.ActiveLanguageChangedEvent">
            <summary>
            Event which is fired when the active languae of the user interface is changed
            </summary>
        </member>
        <member name="M:CADability.UserInterface.StringTable.AddString(System.String,System.String,CADability.UserInterface.StringTable.Category,System.String)">
            <summary>
            Adds the strings of the given xml document to the string table.
            </summary>
            <param name="doc">xml document to parse</param>
            <remarks>
            See file "StringTable.xml" for the required xml schema.
            </remarks>
            <summary>
            Adds a single string to the Stringtable. This can be used for adding new strings or
            overriding existing strings.
            </summary>
            <param name="language">the language of the string</param>
            <param name="resourceID">the ID of the string</param>
            <param name="text">the string</param>
        </member>
        <member name="T:CADability.UserInterface.StringTable.Category">
            <summary>
            Catogory of resource strings
            </summary>
        </member>
        <member name="F:CADability.UserInterface.StringTable.Category.label">
            <summary>
            The main item like it appears int a label of the control center or in en menu entry
            </summary>
        </member>
        <member name="F:CADability.UserInterface.StringTable.Category.info">
            <summary>
            Detailed help information if detailed tooltips are selected
            </summary>
        </member>
        <member name="F:CADability.UserInterface.StringTable.Category.tip">
            <summary>
            Short tooltip information
            </summary>
        </member>
        <member name="M:CADability.UserInterface.StringTable.GetString(System.String,CADability.UserInterface.StringTable.Category)">
            <summary>
            Returns the string with the given ID and the given <see cref="T:CADability.UserInterface.StringTable.Category"/>in the <see cref="P:CADability.UserInterface.StringTable.ActiveLanguage"/>. If the there is no 
            appropriate entry in the ActiveLanguage then the default language is searched. If there is still no 
            entry
            "missing string: "+Name is returned. 
            </summary>
            <param name="Name">Name or ID of the string</param>
            <param name="cat">the Category of the required string</param>
            <returns>the value of the string entry</returns>
        </member>
        <member name="M:CADability.UserInterface.StringTable.GetString(System.String)">
            <summary>
            --- Depricated --- use GetString(string, Category) instead.
            Returns the string with the given ID in the <see cref="P:CADability.UserInterface.StringTable.ActiveLanguage"/>. If the there is no 
            appropriate entry in the ActiveLanguage then the default language is searched. If there is still no 
            entry
            "missing string: "+Name is returned. 
            </summary>
            <param name="Name">Name or ID of the string</param>
            <returns>the value of the string entry</returns>
        </member>
        <member name="M:CADability.UserInterface.StringTable.GetFormattedString(System.String,System.Object[])">
            <summary>
            Returns a formatted string. The string with the ID "Name" from the string resource
            is formatted by substituting the {0}, {1} ... substring with the string values
            of the args objects.
            If there is a formatting error, the unformatted string will be returned.
            </summary>
            <param name="Name">Name or ID of the string</param>
            <param name="args">Variable number of arguments for formatting</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:CADability.UserInterface.StringTable.GetSplittedStrings(System.String)">
            <summary>
            Returns an array of strings from the string table. The array is created from a single
            entry in the string table. The first character of this entry is the separator and
            the remaining string is splitted by this separator. 
            </summary>
            <param name="Name">Name or ID of the string</param>
            <returns>The exploded string</returns>
        </member>
        <member name="T:CADability.AnimatedView">
            <summary>
            A view in which mechanical dependencies of objects can be defined and animated.
            </summary>
        </member>
        <member name="M:CADability.AnimatedView.#ctor(CADability.Project,CADability.Model,CADability.IFrame)">
            <summary>
            Creates a new AnimatedView object. In oder to display this view on the screen you need to add this view to a
            <see cref="!:SingleDocumentFrame"/> and set it as the <see cref="!:SingleDocumentFrame.ActiveView"/>.
            </summary>
            <param name="project">The project that contains the lists of all schedules (if needed)</param>
            <param name="model">The model that is displayed and contains the list of all drives</param>
            <param name="frame">The frame which is the context of this view</param>
        </member>
        <member name="P:CADability.AnimatedView.Name">
            <summary>
            Name of this AnimatedView as shown in the controlcenter
            </summary>
        </member>
        <member name="P:CADability.AnimatedView.BackgroundColor">
            <summary>
            Backgroundcolor to override the default background color as defined in the global settings
            </summary>
        </member>
        <member name="M:CADability.AnimatedView.AddHighlightedObject(CADability.GeoObject.IGeoObject)">
            <summary>
            Adds the provided object to the highlighted objects of this view. This is typically called during
            simulation/animation to draw the user attention to this object
            </summary>
            <param name="toHighlight">highlighted object to add</param>
        </member>
        <member name="M:CADability.AnimatedView.RemoveHighlightedObject(CADability.GeoObject.IGeoObject)">
            <summary>
            Remove the highlighted object that was previously added
            </summary>
            <param name="toRemove">highlighted object to remove</param>
        </member>
        <member name="P:CADability.AnimatedView.HighlightColor">
            <summary>
            Color of the highlighted objects
            </summary>
        </member>
        <member name="P:CADability.AnimatedView.VisibleLayers">
            <summary>
            List of visible layers. Modify visible layers using <see cref="M:CADability.Attribute.CheckedLayerList.Set(CADability.Attribute.Layer,System.Boolean)"/>
            </summary>
        </member>
        <member name="P:CADability.AnimatedView.IsRunning">
            <summary>
            True while the animation/simulation is running.
            </summary>
        </member>
        <member name="P:CADability.AnimatedView.IsPaused">
            <summary>
            True while the anumation is paused
            </summary>
        </member>
        <member name="T:CADability.AnimatedView.NextStepDelegate">
            <summary>
            Delegate for the <see cref="E:CADability.AnimatedView.NextStepEvent"/>
            </summary>
            <param name="sender">The calling AnimtedView</param>
            <param name="time">The current time in the sense of the simulation</param>
        </member>
        <member name="E:CADability.AnimatedView.NextStepEvent">
            <summary>
            Event beeing raised on each frame update of the animation
            </summary>
        </member>
        <member name="T:CADability.AnimatedView.GetTimeDelegate">
            <summary>
            Delegate for the <see cref="E:CADability.AnimatedView.GetTimeEvent"/>. If not handeled the time is 
            determined by the internal clock.
            </summary>
            <param name="sender">The calling AnimtedView</param>
            <returns>The current time in seconds</returns>
        </member>
        <member name="E:CADability.AnimatedView.GetTimeEvent">
            <summary>
            Event beeing raised on each frame update of the animation
            </summary>
        </member>
        <member name="M:CADability.AnimatedView.StartAnimation(CADability.ISchedule,System.Double,System.Double,System.Double)">
            <summary>
            Starts the realtime animation. <paramref name="speed"/> provides a time factor, 
            1.0 is real time. The method returns immediately. There may bee zooming and scrolling 
            during the animation. The animation may be stopped at any time and stops automatically 
            when endTime is reached. Each discrete frame that is displayed fires the 
            <see cref="E:CADability.AnimatedView.NextStepEvent"/> to enable the user of this class to provide some
            additional display changes or other tasks.
            </summary>
            <param name="startTime">Start time for the animation</param>
            <param name="endTime">Stop time for the animation</param>
            <param name="speed">Speed factor</param>
        </member>
        <member name="M:CADability.AnimatedView.PauseAnimation">
            <summary>
            Pauses the animation. All drive positions remain unchanged, the time stops.
            </summary>
        </member>
        <member name="M:CADability.AnimatedView.ResumeAnimation">
            <summary>
            Resume a previously paused animation
            </summary>
        </member>
        <member name="M:CADability.AnimatedView.StopAnimation">
            <summary>
            Stop the animation. All objects return to the starting position
            </summary>
        </member>
        <member name="M:CADability.AnimatedView.Collision(CADability.GeoObject.Solid,CADability.GeoObject.Solid,System.Double,CADability.GeoPoint@)">
            <summary>
            Tests the collision of two solids. The current position of the drives is applied to both objects 
            (typically one of the objects is static). If there is a collision, true is returned 
            and the <paramref name="collisionPoint"/> is filled with an arbitrary point where collision
            takes place.
            </summary>
            <param name="firstObject">First Solid of the test</param>
            <param name="secondObject">Sirst Solid of the test</param>
            <param name="collisionPoint">Collision point</param>
            <returns>True if there is a collision, false otherwise</returns>
        </member>
        <member name="P:CADability.AnimatedView.DriveList">
            <summary>
            List of all drives defined in this context.
            </summary>
        </member>
        <member name="P:CADability.AnimatedView.Speed">
            <summary>
            Set or get the current speed factor (1.0 is normal)
            </summary>
        </member>
        <member name="M:CADability.AnimatedView.ZoomToModelExtent(System.Double)">
            <summary>
            Zooms to the extend of the model. The projection direction is not changed.
            </summary>
            <param name="factor"></param>
        </member>
        <member name="P:CADability.AnimatedView.FixPoint">
            <summary>
            Sets or gets the fixpoint for interactive view direction changes
            </summary>
        </member>
        <member name="E:CADability.AnimatedView.MouseMove">
            <summary>
            Provide an event handler for the mouse move message here if you want to manipulate the mouse input to this ModelView
            </summary>
        </member>
        <member name="E:CADability.AnimatedView.MouseDown">
            <summary>
            Provide an event handler for the mouse down message here if you want to manipulate the mouse input to this ModelView
            </summary>
        </member>
        <member name="E:CADability.AnimatedView.MouseUp">
            <summary>
            Provide an event handler for the mouse up message here if you want to manipulate the mouse input to this ModelView
            </summary>
        </member>
        <member name="E:CADability.AnimatedView.MouseWheel">
            <summary>
            Provide an event handler for the mouse wheel message here if you want to manipulate the mouse input to this ModelView
            </summary>
        </member>
        <member name="E:CADability.AnimatedView.MouseDoubleClick">
            <summary>
            Provide an event handler for the mouse double click message here if you want to manipulate the mouse input to this ModelView
            </summary>
        </member>
        <member name="P:CADability.AnimatedView.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="P:CADability.AnimatedView.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.AnimatedView.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.AnimatedView.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.AnimatedView.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="M:CADability.AnimatedView.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.Curve2D.Arc2D">
            <summary>
            Describes a circular Arc in 2D. Implements the ICurve2D interface.
            </summary>
        </member>
        <member name="M:CADability.Curve2D.Arc2D.#ctor(CADability.GeoPoint2D,System.Double,CADability.Angle,CADability.SweepAngle)">
            <summary>
            Constructs a circular arc in 2D. 
            </summary>
            <param name="center">Center of the arc</param>
            <param name="radius">Radius of the Arc</param>
            <param name="start">Startangle of the arc (x-axis is 0)</param>
            <param name="sweep">Sweepangle of the arc -2*pi&lt;=s&lt;=2*pi</param>
        </member>
        <member name="M:CADability.Curve2D.Arc2D.Parallel(System.Double,System.Boolean,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Parallel(System.Double,System.Boolean,System.Double,System.Double)"/>
            </summary>
            <param name="Dist"></param>
            <param name="approxSpline"></param>
            <param name="precision"></param>
            <param name="roundAngle"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Arc2D.PositionOf(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.PositionOf(CADability.GeoPoint2D)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Arc2D.PointAt(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.PointAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Arc2D.DirectionAt(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.DirectionAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Arc2D.GetExtent">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.GetExtent"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Arc2D.HitTest(CADability.BoundingRect@,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.HitTest(CADability.BoundingRect@,System.Boolean)"/>
            </summary>
            <param name="Rect"></param>
            <param name="IncludeControlPoints"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Arc2D.Clone">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Arc2D.CloneReverse(System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.CloneReverse(System.Boolean)"/>
            </summary>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Arc2D.Copy(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Copy(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="toCopyFrom"></param>
        </member>
        <member name="M:CADability.Curve2D.Arc2D.Reverse">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Reverse"/>
            </summary>
        </member>
        <member name="M:CADability.Curve2D.Arc2D.Trim(System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Trim(System.Double,System.Double)"/>
            </summary>
            <param name="StartPos"></param>
            <param name="EndPos"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Arc2D.MakeGeoObject(CADability.Plane)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.MakeGeoObject(CADability.Plane)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Arc2D.Project(CADability.Plane,CADability.Plane)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Project(CADability.Plane,CADability.Plane)"/>
            </summary>
            <param name="fromPlane"></param>
            <param name="toPlane"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Arc2D.MinDistance(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.MinDistance(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="Other"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Arc2D.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)"/>
            </summary>
            <param name="path"></param>
            <param name="forward"></param>
        </member>
        <member name="M:CADability.Curve2D.Arc2D.GetExtendedHitTest">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.GetExtendedHitTest"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Arc2D.ReinterpretParameter(System.Double@)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.ReinterpretParameter(System.Double@)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Arc2D.Approximate(System.Boolean,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Approximate(System.Boolean,System.Double)"/>
            </summary>
            <param name="linesOnly"></param>
            <param name="maxError"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Arc2D.GetArea">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.GetArea"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Arc2D.Intersect(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Intersect(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="IntersectWith"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Arc2D.Intersect(CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Intersect(CADability.GeoPoint2D,CADability.GeoPoint2D)"/>
            </summary>
            <param name="StartPoint"></param>
            <param name="EndPoint"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Arc2D.GetModified(CADability.ModOp2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.GetModified(CADability.ModOp2D)"/>
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Arc2D.GetFused(CADability.Curve2D.ICurve2D,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.GetFused(CADability.Curve2D.ICurve2D,System.Double)"/>
            </summary>
            <param name="toFuseWith"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Arc2D.TangentPointsToAngle(CADability.GeoVector2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.TangentPointsToAngle(CADability.GeoVector2D)"/>
            </summary>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Arc2D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Curve2D.Arc2D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.Curve2D.BSpline2D">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.#ctor(CADability.GeoPoint2D[],System.Double[],System.Double[],System.Int32[],System.Int32,System.Boolean,System.Double,System.Double)">
            <summary>
            Constructs a BSpline2D (NURBS) from its main data
            </summary>
            <param name="poles">the poles</param>
            <param name="weights">the weigts or null if not rational</param>
            <param name="knots">the knot vector</param>
            <param name="multiplicities">the multiplicities vector for the knot vector (same size)</param>
            <param name="degree">the degree</param>
            <param name="periodic">true for periodic (closed) false otherwise</param>
            <param name="startParam">startparameter</param>
            <param name="endParam">endparameter</param>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.MakeHyperbola(CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Creates a (segment of a) hyperbola defined by its endpoints (startPoint, endPoint), the intersectionpoint of the tangents at the endpoints and a point
            located on the hyperbola where the hyperbola intersects with the line [midpoint(startPoint, endPoint), tangentIntersectionPoint]
            </summary>
            <param name="startPoint"></param>
            <param name="endPoint"></param>
            <param name="midPoint"></param>
            <param name="tangentIntersectionPoint"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.#ctor(CADability.GeoPoint2D[],System.Int32,System.Boolean)">
            <summary>
            Constructs a BSpline2D (NURBS) by a set of points, that will be interpolated.
            </summary>
            <param name="throughpoints">the points to be interpolated</param>
            <param name="degree">the degree of the BSpline2D</param>
            <param name="periodic">true for periodic (closed) false otherwise</param>
        </member>
        <member name="P:CADability.Curve2D.BSpline2D.Knots">
            <summary>
            Gets a copy of the knots defining the BSpline (NURBS)
            </summary>
        </member>
        <member name="P:CADability.Curve2D.BSpline2D.Weights">
            <summary>
            Gets a copy of the weights defining the BSpline (NURBS)
            </summary>
        </member>
        <member name="P:CADability.Curve2D.BSpline2D.Multiplicities">
            <summary>
            Gets a copy of the multiplicities defining the BSpline (NURBS)
            </summary>
        </member>
        <member name="P:CADability.Curve2D.BSpline2D.Degree">
            <summary>
            Gets the degree of the BSpline (NURBS)
            </summary>
        </member>
        <member name="P:CADability.Curve2D.BSpline2D.Poles">
            <summary>
            Gets a copy of the poles defining the BSpline (NURBS)
            </summary>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.Clone">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.Copy(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Copy(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="toCopyFrom"></param>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.Reverse">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Reverse"/>
            </summary>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.Move(System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Move(System.Double,System.Double)"/>
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.CloneReverse(System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.CloneReverse(System.Boolean)"/>
            </summary>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)"/>
            </summary>
            <param name="path"></param>
            <param name="forward"></param>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.Project(CADability.Plane,CADability.Plane)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Project(CADability.Plane,CADability.Plane)"/>
            </summary>
            <param name="fromPlane"></param>
            <param name="toPlane"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.GetModified(CADability.ModOp2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.GetModified(CADability.ModOp2D)"/>
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.Trim(System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Trim(System.Double,System.Double)"/>
            </summary>
            <param name="StartPos"></param>
            <param name="EndPos"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.Split(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Split(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.PointAt(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.PointAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.DirectionAt(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.DirectionAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.Parallel(System.Double,System.Boolean,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Parallel(System.Double,System.Boolean,System.Double,System.Double)"/>
            </summary>
            <param name="Dist"></param>
            <param name="approxSpline"></param>
            <param name="precision"></param>
            <param name="roundAngle"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.GetFused(CADability.Curve2D.ICurve2D,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.GetFused(CADability.Curve2D.ICurve2D,System.Double)"/>
            </summary>
            <param name="toFuseWith"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.DerivationAt(System.Double)">
            <summary>
            wie DirectionAt, jedoch Ergebnis nicht normiert
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.PositionOf(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.PositionOf(CADability.GeoPoint2D)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.Intersect(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Intersect(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="IntersectWith"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.PointDerAt(System.Double,CADability.GeoPoint2D@,CADability.GeoVector2D@)">
            <summary>
            Wie PointDirAt, jedoch Vector nicht normiert
            </summary>
            <param name="param"></param>
            <param name="point"></param>
            <param name="dir"></param>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.TangentPoints(CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.TangentPoints(CADability.GeoPoint2D,CADability.GeoPoint2D)"/>
            </summary>
            <param name="FromHere"></param>
            <param name="CloseTo"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.TangentPointsToAngle(CADability.Angle,CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.TangentPointsToAngle(CADability.Angle,CADability.GeoPoint2D)"/>
            </summary>
            <param name="ang"></param>
            <param name="CloseTo"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.TangentPointsToAngle(CADability.GeoVector2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.TangentPointsToAngle(CADability.GeoVector2D)"/>
            </summary>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.GetSelfIntersections">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.GetSelfIntersections"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.PerpendicularFoot(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.PerpendicularFoot(CADability.GeoPoint2D)"/>
            </summary>
            <param name="FromHere"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.Intersect(CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Intersect(CADability.GeoPoint2D,CADability.GeoPoint2D)"/>
            </summary>
            <param name="StartPoint"></param>
            <param name="EndPoint"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.IsValidParameter(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.IsValidParameter(System.Double)"/>
            </summary>
            <param name="par"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.PointDirAt2(System.Double,CADability.GeoPoint2D@,CADability.GeoVector2D@,CADability.GeoVector2D@)">
            <summary>
            Punkt und 1. und 2. Ableitung. ACHTUNG: param ist echter Parameter nicht 0..1!
            dir1 und dir2 sind nicht normiert (dir2 kann 0 sein)
            </summary>
            <param name="param"></param>
            <param name="point"></param>
            <param name="dir1"></param>
            <param name="dir2"></param>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.MakeGeoObject(CADability.Plane)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.MakeGeoObject(CADability.Plane)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.TryPointDeriv2At(System.Double,CADability.GeoPoint2D@,CADability.GeoVector2D@,CADability.GeoVector2D@)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.TryPointDeriv2At(System.Double,CADability.GeoPoint2D@,CADability.GeoVector2D@,CADability.GeoVector2D@)"/>
            </summary>
            <param name="position"></param>
            <param name="point"></param>
            <param name="deriv1"></param>
            <param name="deriv2"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.GetExtent">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.GetExtent"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.HitTest(CADability.BoundingRect@,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.HitTest(CADability.BoundingRect@,System.Boolean)"/>
            </summary>
            <param name="Rect"></param>
            <param name="IncludeControlPoints"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Curve2D.BSpline2D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.Curve2D.Circle2D">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.Curve2D.Circle2D.Intersect(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Intersect(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="IntersectWith"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Circle2D.Intersect(CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Intersect(CADability.GeoPoint2D,CADability.GeoPoint2D)"/>
            </summary>
            <param name="StartPoint"></param>
            <param name="EndPoint"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Circle2D.PositionOf(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.PositionOf(CADability.GeoPoint2D)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Circle2D.PointAt(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.PointAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Circle2D.DirectionAt(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.DirectionAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Circle2D.Reverse">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Reverse"/>
            </summary>
        </member>
        <member name="M:CADability.Curve2D.Circle2D.Move(System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Move(System.Double,System.Double)"/>
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:CADability.Curve2D.Circle2D.TangentPoints(CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.TangentPoints(CADability.GeoPoint2D,CADability.GeoPoint2D)"/>
            </summary>
            <param name="FromHere"></param>
            <param name="CloseTo"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Circle2D.Parallel(System.Double,System.Boolean,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Parallel(System.Double,System.Boolean,System.Double,System.Double)"/>
            </summary>
            <param name="Dist"></param>
            <param name="approxSpline"></param>
            <param name="precision"></param>
            <param name="roundAngle"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Circle2D.Distance(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Distance(CADability.GeoPoint2D)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Circle2D.GetExtent">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.GetExtent"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Circle2D.HitTest(CADability.BoundingRect@,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.HitTest(CADability.BoundingRect@,System.Boolean)"/>
            </summary>
            <param name="Rect"></param>
            <param name="IncludeControlPoints"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Circle2D.Clone">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Circle2D.CloneReverse(System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.CloneReverse(System.Boolean)"/>
            </summary>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Circle2D.Copy(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Copy(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="toCopyFrom"></param>
        </member>
        <member name="M:CADability.Curve2D.Circle2D.Trim(System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Trim(System.Double,System.Double)"/>
            </summary>
            <param name="StartPos"></param>
            <param name="EndPos"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Circle2D.Split(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Split(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Circle2D.PerpendicularFoot(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.PerpendicularFoot(CADability.GeoPoint2D)"/>
            </summary>
            <param name="FromHere"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Circle2D.MinDistance(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.MinDistance(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="Other"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Circle2D.MakeGeoObject(CADability.Plane)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.MakeGeoObject(CADability.Plane)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Circle2D.Project(CADability.Plane,CADability.Plane)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Project(CADability.Plane,CADability.Plane)"/>
            </summary>
            <param name="fromPlane"></param>
            <param name="toPlane"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Circle2D.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)"/>
            </summary>
            <param name="path"></param>
            <param name="forward"></param>
        </member>
        <member name="M:CADability.Curve2D.Circle2D.Approximate(System.Boolean,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Approximate(System.Boolean,System.Double)"/>
            </summary>
            <param name="linesOnly"></param>
            <param name="maxError"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Circle2D.GetArea">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.GetArea"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Circle2D.GetAreaFromPoint(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.GetAreaFromPoint(CADability.GeoPoint2D)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Circle2D.GetFused(CADability.Curve2D.ICurve2D,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.GetFused(CADability.Curve2D.ICurve2D,System.Double)"/>
            </summary>
            <param name="toFuseWith"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Circle2D.TangentPointsToAngle(CADability.GeoVector2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.TangentPointsToAngle(CADability.GeoVector2D)"/>
            </summary>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Circle2D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Curve2D.Circle2D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.Curve2D.Curves2D">
            <summary>
            This class provides some static Methods concerning the interaction of two ICurve2D
            objects.
            </summary>
        </member>
        <member name="M:CADability.Curve2D.Curves2D.TangentLines(CADability.Curve2D.ICurve2D,CADability.Curve2D.ICurve2D)">
            <summary>
            Calculates lines that are tangential to both the first and the second curve. Returns
            an array of 2D points, where each pair of points represent a line. The number of
            points is always even. Implemented for circles or arcs only.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Curves2D.TangentLines(CADability.Curve2D.ICurve2D,CADability.Curve2D.ICurve2D,CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Calculates the start- and endpoints of lines that are tangential to the given
            curves. There may be any number of solutions, including
            no solution. Each solution consists of two points: 1.: the startpoint, 2.: the endpoint
            of the Line. the startpoint lies on the first curve, the endpoint on the second. The length of
            the returned array is a multiple of 2 (or 0).
            If both curves are circles or arcs, all possible solutions are returned. If a curve is
            mor complex than a circle (e.g. bspline, ellipse) only the solution closest to the
            points p1 and p2 is returned.
            </summary>
            <param name="first">first curve</param>
            <param name="second">second curve</param>
            <param name="p1">point near first curve</param>
            <param name="p2">point near second curve</param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Curves2D.TangentCircle(CADability.Curve2D.ICurve2D,CADability.Curve2D.ICurve2D,System.Double)">
            <summary>
            Calculates the center points and the tangential points of the circles that are tangential to the given
            curves and have the given radius. There may be any number of solutions, including
            no solution. Each solution consists of three points: 1.: the center, 2.: the tangential
            point to the first curve, 3.: the tangential point to the second curve. The length of
            the returned array is a multiple of 3 (or 0)
            </summary>
            <param name="first">first curve</param>
            <param name="second">second curve</param>
            <param name="radius">radius of the requsted circle</param>
            <returns>the requested center points</returns>
        </member>
        <member name="M:CADability.Curve2D.Curves2D.TangentCircle(CADability.Curve2D.ICurve2D,CADability.GeoPoint2D,System.Double)">
            <summary>
            Calculates the center points and the tangential point of the circles that are tangential to a given
            curve with a given circlepoint and have the given radius. There may be any number of solutions, including
            no solution. Each solution consists of two points: 1.: the center, 2.: the tangential
            point to the  curve. The length of
            the returned array is a multiple of 2 (or 0)
            </summary>
            <param name="curve">curve</param>
            <param name="point">point on the circle</param>
            <param name="radius">radius of the requsted circle</param>
            <returns>the requested center points</returns>
        </member>
        <member name="M:CADability.Curve2D.Curves2D.TangentCircle(CADability.Curve2D.ICurve2D,CADability.Curve2D.ICurve2D,CADability.Curve2D.ICurve2D,CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Calculates the center points and the tangential points of the circles that are tangential to the given
            curves. If the curves are lines or circles all possible solutions are revealed. If the curves
            are more complex, only the solution that is closest to the given points is revealed.
            Each solution consists of 4 points: 1.: the center, 2.: the tangential point to c1, 
            3.: the tangential point to c2, 4.: the tangential point to c3. The radius mus be calculated 
            by the distance of the center to one of the tangential points. The length of
            the returned array is a multiple of 4 (or 0)
            </summary>
            <param name="c1">first tangential curve</param>
            <param name="c2">second tangential curve</param>
            <param name="c3">third tangential curve</param>
            <param name="p1">startpoint on c1</param>
            <param name="p2">startpoint on c2</param>
            <param name="p3">startpoint on c3</param>
            <returns>Quadruples of GeoPoint2D defining 0 or more circles</returns>
        </member>
        <member name="M:CADability.Curve2D.Curves2D.Connect(CADability.Curve2D.ICurve2D,CADability.Curve2D.ICurve2D)">
            <summary>
            Connect two curves: the endpoint of the first curve with the startpoint of the second curve.
            </summary>
            <param name="first">First curve</param>
            <param name="second">Second curve</param>
            <returns>true if succeede, false otherwise</returns>
        </member>
        <member name="M:CADability.Curve2D.Curves2D.SimpleMinimumDistance(CADability.Curve2D.ICurve2D,CADability.Curve2D.ICurve2D,CADability.GeoPoint2D@,CADability.GeoPoint2D@)">
            <summary>
            Returns the minimum distance of the two given curves. 
            </summary>
            <param name="first">first curve</param>
            <param name="second">second curve</param>
            <param name="p1">returns the point on the first curve</param>
            <param name="p2">returns the point on the second curve</param>
            <returns>The value of the minimum distance</returns>
        </member>
        <member name="M:CADability.Curve2D.Curves2D.SimpleMinimumDistance(CADability.Curve2D.ICurve2D,CADability.Curve2D.ICurve2D,CADability.GeoPoint2D,CADability.GeoPoint2D@,CADability.GeoPoint2D@)">
            <summary>
            Returns the minimum distance of the two given curves. If the curves are parallel,
            the connection of p1 and p2 will go through preferredPosition.
            </summary>
            <param name="first">first curve</param>
            <param name="second">second curve</param>
            <param name="preferredPosition">Position for parallel curves</param>
            <param name="p1">returns the point on the first curve</param>
            <param name="p2">returns the point on the second curve</param>
            <returns>The value of the minimum distance</returns>
        </member>
        <member name="M:CADability.Curve2D.Curves2D.ConnectByTwoArcs(CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoVector2D,CADability.GeoVector2D)">
            <summary>
            Constructs two arcs that connect <paramref name="p1"/> and <paramref name="p2"/> and are tangential to
            <paramref name="dir1"/> and <paramref name="dir2"/> respectively.
            </summary>
            <param name="p1">Startpoint</param>
            <param name="p2">Endpoint</param>
            <param name="dir1">Starting direction</param>
            <param name="dir2">ending direction</param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Curves2D.DistanceAtDirection(CADability.Curve2D.ICurve2D,CADability.Curve2D.ICurve2D,CADability.GeoVector2D)">
            <summary>
            Calculates the distance of the two curves in the provided direction. In other words this means how far con you
            move the <paramref name="first"/> curve in the direction <paramref name="dir"/> so that it touches the <paramref name="second"/> curve?
            The result may be double.MaxValue if the curves will never touch eac other, or it might be negative if you would have to
            move first in the opposite direction of dir to touch second.
            <note>Currently only implemented for <see cref="T:CADability.Curve2D.Line2D"/> and <see cref="T:CADability.Curve2D.Arc2D"/></note>.
            </summary>
            <param name="first">Fisrt curve</param>
            <param name="second">Second curve</param>
            <param name="dir">Direction of movement or distance</param>
            <returns>Distance</returns>
        </member>
        <member name="M:CADability.Curve2D.Curves2D.LineCoefficients(CADability.GeoPoint2D,CADability.GeoPoint2D,System.Double@,System.Double@,System.Double@)">
            <summary>
            Get the normalised equation of a line between two points in the form: Ax + By + C = 0
            </summary>
            <param name="pt1">First point</param>
            <param name="pt2">Second point</param>
            <param name="A">X factor</param>
            <param name="B">Y factor</param>
            <param name="C">Constant</param>
            <returns>true on success</returns>
        </member>
        <member name="M:CADability.Curve2D.Curves2D.Circle3L(CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoPoint2D[]@,System.Double[]@)">
            <summary>
            Find circles tangent to three lines
            </summary>
            <param name="pt11">First point on first line</param>
            <param name="pt12">Second point on first line</param>
            <param name="pt21">First point on second line</param>
            <param name="pt22">Second point on second line</param>
            <param name="pt31">First point on third line</param>
            <param name="pt32">Second point on third line</param>
            <param name="Centres">Array to receive list of centre points</param>
            <param name="Radii">Array to receive list of radii</param>
        </member>
        <member name="M:CADability.Curve2D.Curves2D.Circle2LC(CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoPoint2D,System.Double,CADability.GeoPoint2D[]@,System.Double[]@)">
            <summary>
            Find circles tangent to two lines and a circle
            </summary>
            <param name="pt11">First point on first line</param>
            <param name="pt12">Second point on first line</param>
            <param name="pt21">First point on second line</param>
            <param name="pt22">Second point on second line</param>
            <param name="ptCentre">Centre of circle</param>
            <param name="nRadius">Radius of circle</param>
            <param name="Centres">Array to receive list of centre points</param>
            <param name="Radii">Array to receive list of radii</param>
            <returns>Number of solutions</returns>
        </member>
        <member name="M:CADability.Curve2D.Curves2D.CircleL2C(CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoPoint2D,System.Double,CADability.GeoPoint2D,System.Double,CADability.GeoPoint2D[]@,System.Double[]@)">
            <summary>
            Find circles tangent to a line and two circles
            </summary>
            <param name="pt1">First point on line</param>
            <param name="pt2">Second point on line</param>
            <param name="ptCentre1">Centre of first circle</param>
            <param name="nRad2">Radius of first circle</param>
            <param name="ptCentre2">Centre of second circle</param>
            <param name="nRad3">Radius of second circle</param>
            <param name="Centres">Array to receive list of centre points</param>
            <param name="Radii">Array to receive list of radii</param>
            <returns>Number of solutions</returns>
        </member>
        <member name="M:CADability.Curve2D.Curves2D.Circle3C(CADability.GeoPoint2D,System.Double,CADability.GeoPoint2D,System.Double,CADability.GeoPoint2D,System.Double,CADability.GeoPoint2D[]@,System.Double[]@)">
            <summary>
            Find circles tangent to three other circles
            </summary>
            <param name="ptCentre1">Centre of first circle</param>
            <param name="nRadius1">Radius of first circle</param>
            <param name="ptCentre2">Centre of second circle</param>
            <param name="nRadius2">Radius of second circle</param>
            <param name="ptCentre3">Centre of third circle</param>
            <param name="nRadius3">Radius of third circle</param>
            <param name="Centres">Array to receive list of centre points</param>
            <param name="Radii">Array to receive list of radii</param>
            <returns>Number of solutions</returns>
        </member>
        <member name="T:CADability.Curve2D.Ellipse2D">
            <summary>
            Describes an ellipse in 2D. Implements the ICurve2D interface.
            </summary>
        </member>
        <member name="M:CADability.Curve2D.Ellipse2D.#ctor(CADability.GeoPoint2D,CADability.GeoVector2D,CADability.GeoVector2D)">
            <summary>
            Constructs an ellipse in 2D. The two axis may not be orthogonal but must not be colinear.
            </summary>
            <param name="center">Center of the ellipse</param>
            <param name="axis1">First axis of the ellipse</param>
            <param name="axis2">Second axis of the ellipse</param>
        </member>
        <member name="M:CADability.Curve2D.Ellipse2D.#ctor(CADability.GeoPoint2D,CADability.GeoVector2D,CADability.GeoVector2D,System.Boolean,CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Constructs an ellipse in 2D. The major and minor axis must be orthogonal.
            </summary>
            <param name="center">Center of the ellipse</param>
            <param name="majorAxis">Major axis of the ellipse</param>
            <param name="minorAxis">Minor axis of the ellipse</param>
            <param name="left">left extremum of the ellipse</param>
            <param name="right">right extremum of the ellipse</param>
            <param name="bottom">bottom extremum of the ellipse</param>
            <param name="top">top extremum of the ellipse</param>
        </member>
        <member name="M:CADability.Curve2D.Ellipse2D.TangentPoints(CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.TangentPoints(CADability.GeoPoint2D,CADability.GeoPoint2D)"/>
            </summary>
            <param name="FromHere"></param>
            <param name="CloseTo"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Ellipse2D.MakeGeoObject(CADability.Plane)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.MakeGeoObject(CADability.Plane)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Ellipse2D.Project(CADability.Plane,CADability.Plane)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Project(CADability.Plane,CADability.Plane)"/>
            </summary>
            <param name="fromPlane"></param>
            <param name="toPlane"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Ellipse2D.GetExtent">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.GetExtent"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Ellipse2D.HitTest(CADability.BoundingRect@,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.HitTest(CADability.BoundingRect@,System.Boolean)"/>
            </summary>
            <param name="Rect"></param>
            <param name="IncludeControlPoints"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Ellipse2D.Intersect(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Intersect(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="IntersectWith"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Ellipse2D.Intersect(CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Intersect(CADability.GeoPoint2D,CADability.GeoPoint2D)"/>
            </summary>
            <param name="StartPoint"></param>
            <param name="EndPoint"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Ellipse2D.GetModified(CADability.ModOp2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.GetModified(CADability.ModOp2D)"/>
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Ellipse2D.PositionOf(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.PositionOf(CADability.GeoPoint2D)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Ellipse2D.PerpendicularFoot(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.PerpendicularFoot(CADability.GeoPoint2D)"/>
            </summary>
            <param name="FromHere"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Ellipse2D.Distance(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Distance(CADability.GeoPoint2D)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Ellipse2D.MinDistance(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.MinDistance(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="Other"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Ellipse2D.MinDistance(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.MinDistance(CADability.GeoPoint2D)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Ellipse2D.PointAt(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.PointAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Ellipse2D.DirectionAt(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.DirectionAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Ellipse2D.Trim(System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Trim(System.Double,System.Double)"/>
            </summary>
            <param name="StartPos"></param>
            <param name="EndPos"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Ellipse2D.Split(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Split(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Ellipse2D.Reverse">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Reverse"/>
            </summary>
        </member>
        <member name="M:CADability.Curve2D.Ellipse2D.Move(System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Move(System.Double,System.Double)"/>
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:CADability.Curve2D.Ellipse2D.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)"/>
            </summary>
            <param name="path"></param>
            <param name="forward"></param>
        </member>
        <member name="M:CADability.Curve2D.Ellipse2D.Clone">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Ellipse2D.CloneReverse(System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.CloneReverse(System.Boolean)"/>
            </summary>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Ellipse2D.Copy(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Copy(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="toCopyFrom"></param>
        </member>
        <member name="M:CADability.Curve2D.Ellipse2D.GetArea">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.GetArea"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Ellipse2D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Curve2D.Ellipse2D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.Curve2D.EllipseArc2D">
            <summary>
            Describes an arc of an ellipse in 2D. Implements the ICurve2D interface
            </summary>
        </member>
        <member name="M:CADability.Curve2D.EllipseArc2D.MakeGeoObject(CADability.Plane)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.MakeGeoObject(CADability.Plane)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.EllipseArc2D.Project(CADability.Plane,CADability.Plane)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Project(CADability.Plane,CADability.Plane)"/>
            </summary>
            <param name="fromPlane"></param>
            <param name="toPlane"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.EllipseArc2D.HitTest(CADability.BoundingRect@,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.HitTest(CADability.BoundingRect@,System.Boolean)"/>
            </summary>
            <param name="Rect"></param>
            <param name="IncludeControlPoints"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.EllipseArc2D.GetExtent">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.GetExtent"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.EllipseArc2D.Clone">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.EllipseArc2D.CloneReverse(System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.CloneReverse(System.Boolean)"/>
            </summary>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.EllipseArc2D.Copy(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Copy(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="toCopyFrom"></param>
        </member>
        <member name="M:CADability.Curve2D.EllipseArc2D.Trim(System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Trim(System.Double,System.Double)"/>
            </summary>
            <param name="StartPos"></param>
            <param name="EndPos"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.EllipseArc2D.Reverse">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Reverse"/>
            </summary>
        </member>
        <member name="M:CADability.Curve2D.EllipseArc2D.IsParameterOnCurve(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.IsParameterOnCurve(System.Double)"/>
            </summary>
            <param name="par"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.EllipseArc2D.PositionOf(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.PositionOf(CADability.GeoPoint2D)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.EllipseArc2D.PointAt(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.PointAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.EllipseArc2D.DirectionAt(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.DirectionAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.EllipseArc2D.MinDistance(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.MinDistance(CADability.GeoPoint2D)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.EllipseArc2D.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)"/>
            </summary>
            <param name="path"></param>
            <param name="forward"></param>
        </member>
        <member name="M:CADability.Curve2D.EllipseArc2D.GetExtendedHitTest">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.GetExtendedHitTest"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.EllipseArc2D.ReinterpretParameter(System.Double@)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.ReinterpretParameter(System.Double@)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.EllipseArc2D.Intersect(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Intersect(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="IntersectWith"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.EllipseArc2D.Intersect(CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Intersect(CADability.GeoPoint2D,CADability.GeoPoint2D)"/>
            </summary>
            <param name="StartPoint"></param>
            <param name="EndPoint"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.EllipseArc2D.GetModified(CADability.ModOp2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.GetModified(CADability.ModOp2D)"/>
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.EllipseArc2D.GetFused(CADability.Curve2D.ICurve2D,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.GetFused(CADability.Curve2D.ICurve2D,System.Double)"/>
            </summary>
            <param name="toFuseWith"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.EllipseArc2D.GetArea">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.GetArea"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.EllipseArc2D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Curve2D.EllipseArc2D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.Curve2D.I2DIntersectable">
            <summary>
            Zum verschneiden von unendlichen Linien, Parabeln, Hyperbeln(, Sinuskurven?), die nicht l√§ngenbeschr√§nkt sind,
            und nicht unbedingt im Parameter von 0 bis 1 laufen
            </summary>
        </member>
        <member name="T:CADability.Curve2D.ICurve2D">
            <summary>
            Interface for a 2-dimensional curve.
            2-dimensional curves occur e.g. in the parametric system of surfaces to build the outline of faces or
            as projections of 3-dimensional curves on a plane.
            There is a normalized parametric system for the curve that starts at 0.0 and ends at 1.0
            </summary>
        </member>
        <member name="P:CADability.Curve2D.ICurve2D.StartPoint">
            <summary>
            Sets or gets the startpoint. The endpoint remains unchanged when setting the startpoint.
            </summary>
        </member>
        <member name="P:CADability.Curve2D.ICurve2D.EndPoint">
            <summary>
            Sets or gets the endpoint of the curve. When the endpoint is set, the startpoint remains unchanged.
            </summary>
        </member>
        <member name="P:CADability.Curve2D.ICurve2D.StartDirection">
            <summary>
            Returns the direction of the curve at the startpoint.
            </summary>
        </member>
        <member name="P:CADability.Curve2D.ICurve2D.EndDirection">
            <summary>
            Returns the direction of the curve at the endpoint.
            </summary>
        </member>
        <member name="P:CADability.Curve2D.ICurve2D.MiddleDirection">
            <summary>
            Returns the direction of the curve at its middle point.
            </summary>
        </member>
        <member name="M:CADability.Curve2D.ICurve2D.DirectionAt(System.Double)">
            <summary>
            Returns the direction of the curve at the provided normalized position.
            </summary>
            <param name="Position">Where to get the direction</param>
            <returns>The direction</returns>
        </member>
        <member name="M:CADability.Curve2D.ICurve2D.PointAt(System.Double)">
            <summary>
            Returns the point of the curve at the provided normalized position
            </summary>
            <param name="Position">Where to get the direction</param>
            <returns>The point</returns>
        </member>
        <member name="M:CADability.Curve2D.ICurve2D.PositionOf(CADability.GeoPoint2D)">
            <summary>
            Returns the position of point p on the curve: 0.0 corresponds to the StartPoint
            1.0 to the EndPoint
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="P:CADability.Curve2D.ICurve2D.Length">
            <summary>
            Returns the length of the curve
            </summary>
        </member>
        <member name="M:CADability.Curve2D.ICurve2D.Distance(CADability.GeoPoint2D)">
            <summary>
            Returns the distance of the specified point to this curve. If this curve
            can be extended (e.g. a line or an arc) this method will return the distance to
            the extended curve. If you need the distance to the unextended curve use <see cref="M:CADability.Curve2D.ICurve2D.MinDistance(CADability.Curve2D.ICurve2D)"/>.
            </summary>
            <param name="p">Point to compute the distance to</param>
            <returns>the distance</returns>
        </member>
        <member name="M:CADability.Curve2D.ICurve2D.MinDistance(CADability.Curve2D.ICurve2D)">
            <summary>
            Returns the minimal distance between this curve and the other curve given in the parameter.
            If the two curves intersect, the minimal distance ist 0.
            </summary>
            <param name="Other">curve to compute the distance to</param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.ICurve2D.MinDistance(CADability.GeoPoint2D)">
            <summary>
            Returns the distance of the point to the curve. In opposite to <see cref="M:CADability.Curve2D.ICurve2D.Distance(CADability.GeoPoint2D)"/>
            this method will return the distance to the unextended curve
            </summary>
            <param name="p">Point to compute the distance to</param>
            <returns>the distance</returns>
        </member>
        <member name="M:CADability.Curve2D.ICurve2D.PerpendicularFoot(CADability.GeoPoint2D)">
            <summary>
            Calculates the foot points of the perpendicular projection of the given point
            on the curve. Perpendicular foot points are points, where the direction of the 
            curve ist perpendicular to the line that connects foot-point to the given point.
            </summary>
            <param name="FromHere">from this point</param>
            <returns>array of foot points</returns>
        </member>
        <member name="M:CADability.Curve2D.ICurve2D.TangentPoints(CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Calculates the points where the direction of the curve is parallel to the direction
            from the given point to the calculated point. For circles and ellipses it reveals all
            possible solutions, for other curves (e.g. BSpline) it reveals only the closest 
            solution to the point "CloseTo".
            </summary>
            <param name="FromHere">From this point</param>
            <param name="CloseTo">Find the solution close to this point</param>
            <returns>array of tangential points</returns>
        </member>
        <member name="M:CADability.Curve2D.ICurve2D.TangentPointsToAngle(CADability.Angle,CADability.GeoPoint2D)">
            <summary>
            Calculates the points where the direction of the curve is parallel to the direction
            of the given angle. For circles and ellipses it reveals all
            possible solutions, for other curves (e.g. BSpline) it reveals only the closest 
            solution to the point "CloseTo".
            </summary>
            <param name="ang">the angle of the tangent</param>
            <param name="CloseTo">Find the solution close to this point</param>
            <returns>array of tangential points</returns>
        </member>
        <member name="M:CADability.Curve2D.ICurve2D.TangentPointsToAngle(CADability.GeoVector2D)">
            <summary>
            Calculates the points where the direction of the curve is parallel to the given direction.
            Returns all possible position within the curve (not the extended curve)
            </summary>
            <param name="direction">the direction</param>
            <returns>positions found</returns>
        </member>
        <member name="M:CADability.Curve2D.ICurve2D.GetInflectionPoints">
            <summary>
            Returns a list of onflection points of this curve. Teh list might be empty
            </summary>
            <returns>List of inflection points</returns>
        </member>
        <member name="M:CADability.Curve2D.ICurve2D.Reverse">
            <summary>
            Reverses the direction of this curve
            </summary>
        </member>
        <member name="M:CADability.Curve2D.ICurve2D.Copy(CADability.Curve2D.ICurve2D)">
            <summary>
            Copies the data of the given object to this object. Both objects must be of the same type.
            </summary>
            <param name="toCopyFrom">Copies the data of this object</param>
        </member>
        <member name="M:CADability.Curve2D.ICurve2D.Project(CADability.Plane,CADability.Plane)">
            <summary>
            The 2d-curve is assumed to reside in plane "fromPlane". It will be projected
            perpendicular onto the plane "toPlane".
            </summary>
            <param name="fromPlane">the containing plane</param>
            <param name="toPlane">the projection plane</param>
            <returns>the projected curve</returns>
        </member>
        <member name="M:CADability.Curve2D.ICurve2D.IsParameterOnCurve(System.Double)">
            <summary>
            Determines, whether the given parameter denotes a point inside the bounds of the curve.
            i.e. the parameter must be greater or equal to 0.0 and less than or equal 1.0.
            The actual interval is a little bit extended according to the <see cref="F:CADability.Precision.eps"/> value.
            </summary>
            <param name="par">the parameter to test</param>
            <returns>true if on curve</returns>
        </member>
        <member name="M:CADability.Curve2D.ICurve2D.IsValidParameter(System.Double)">
            <summary>
            Determines, whether the given parameter is valid for this curve. Some curves are restricted to a 
            parameterrange by their nature.
            </summary>
            <param name="par">the parameter to test</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:CADability.Curve2D.ICurve2D.GetExtendedHitTest">
            <summary>
            Returns an IQuadTreeInsertable interface. The HitTest Method of this interface
            returns true if the rectangle coincides with the infinite extension of this curve
            (unbounded curve). Most curves are not extendable and therefore simply return "this".
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.ICurve2D.GetSelfIntersections">
            <summary>
            Returns pairs of double values. Each pair defines the two parameters of the curve
            of a self intersection. The result is either empty or has an even number of double values.
            </summary>
            <returns>self intersection parameters</returns>
        </member>
        <member name="M:CADability.Curve2D.ICurve2D.ReinterpretParameter(System.Double@)">
            <summary>
            Some curves especially Arc and EllipseArc have two possibilities to define
            a parameter of a point outside the curve: either as a parameter less than 0
            which means ahead of the startpoint or as a parameter greater than 1 behind 
            the endpoint. This method brings the given parameter into the other system,
            that means a parameter less than 0 will become greater than 1 and vice versa.
            Parameters between 0 and 1 will remain unchanged as well as most curves
            will return false, because the double interpretation isnt meaningfull.
            </summary>
            <param name="p">parameter to change</param>
            <returns>true if possible, false otherwise</returns>
        </member>
        <member name="M:CADability.Curve2D.ICurve2D.Approximate(System.Boolean,System.Double)">
            <summary>
            Approximate this curve and return the approximation. maxError specifies the maximal
            allowed error, i.e. the maximal deviation of the returned curve from this curve.
            Is linesOnly ist true, only lines are returned, if linesOnly is false, lines
            and circular arcs are returned. The result is usually a path consiting of lines and 
            arcs or lines only.
            </summary>
            <param name="linesOnly"></param>
            <param name="maxError"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.ICurve2D.Move(System.Double,System.Double)">
            <summary>
            Move the curve by the given offset
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="P:CADability.Curve2D.ICurve2D.IsClosed">
            <summary>
            Determins wether this curve is a closed curve (e.g. a circle)
            </summary>
        </member>
        <member name="M:CADability.Curve2D.ICurve2D.GetModified(CADability.ModOp2D)">
            <summary>
            Returns a ICurve which is this curve modified by m. The curve can be of different type, e.g. a 
            Circle may return an Ellpse
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.ICurve2D.GetFused(CADability.Curve2D.ICurve2D,System.Double)">
            <summary>
            Returnes a new curve of the same type which is the fusion of this curve with the provided curve, e.g. two
            overlapping lines build a longer line. Returnes null if the fusion is not possible (e.g. a line and an arc 
            or two lines with different direction)
            </summary>
            <param name="toFuseWith">Curve to fuse with</param>
            <param name="precision">the fused curve or null</param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.ICurve2D.TryPointDeriv2At(System.Double,CADability.GeoPoint2D@,CADability.GeoVector2D@,CADability.GeoVector2D@)">
            <summary>
            Tries to get the point and the first and second derivative of the curve at the specified position. (0..1)
            Some curves do not implement the second derivative and hence will return false.
            </summary>
            <param name="position">Position where to calculate point and derivatives</param>
            <param name="point">The point at the required position</param>
            <param name="deriv">The first derivative at the provided parameter</param>
            <param name="deriv2">The second derivative at the provided parameter</param>
            <returns></returns>
        </member>
        <member name="T:CADability.Curve2D.GeneralCurve2D">
            <summary>
            This class serves as an implementation helper for the ICurve2D interface.
            It cannot be instantiated and there are no methods for public use.
            </summary>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.PositionAtLength(System.Double)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.PositionAtLength(System.Double)"/>
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.GetAreaFromPoint(CADability.GeoPoint2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.GetAreaFromPoint(CADability.GeoPoint2D)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.GetArea">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.GetArea"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.Split(System.Double)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Split(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.Distance(CADability.GeoPoint2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Distance(CADability.GeoPoint2D)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.Trim(System.Double,System.Double)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Trim(System.Double,System.Double)"/>
            </summary>
            <param name="StartPos"></param>
            <param name="EndPos"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.MinDistance(CADability.Curve2D.ICurve2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.MinDistance(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="Other"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.MinDistance(CADability.GeoPoint2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.MinDistance(CADability.GeoPoint2D)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.Parallel(System.Double,System.Boolean,System.Double,System.Double)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Parallel(System.Double,System.Boolean,System.Double,System.Double)"/>
            </summary>
            <param name="Dist"></param>
            <param name="approxSpline"></param>
            <param name="precision"></param>
            <param name="roundAngle"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.Intersect(CADability.Curve2D.ICurve2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Intersect(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="IntersectWith"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.Intersect(CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Intersect(CADability.GeoPoint2D,CADability.GeoPoint2D)"/>
            </summary>
            <param name="StartPoint"></param>
            <param name="EndPoint"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.PerpendicularFoot(CADability.GeoPoint2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.PerpendicularFoot(CADability.GeoPoint2D)"/>
            </summary>
            <param name="FromHere"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.TangentPoints(CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.TangentPoints(CADability.GeoPoint2D,CADability.GeoPoint2D)"/>
            </summary>
            <param name="FromHere"></param>
            <param name="CloseTo"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.TangentPointsToAngle(CADability.Angle,CADability.GeoPoint2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.TangentPointsToAngle(CADability.Angle,CADability.GeoPoint2D)"/>
            </summary>
            <param name="ang"></param>
            <param name="CloseTo"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.TangentPointsToAngle(CADability.GeoVector2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.TangentPointsToAngle(CADability.GeoVector2D)"/>
            </summary>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.Reverse">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Reverse"/>
            </summary>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.Clone">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.CloneReverse(System.Boolean)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.CloneReverse(System.Boolean)"/>
            </summary>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.MakeGeoObject(CADability.Plane)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.MakeGeoObject(CADability.Plane)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.Project(CADability.Plane,CADability.Plane)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Project(CADability.Plane,CADability.Plane)"/>
            </summary>
            <param name="fromPlane"></param>
            <param name="toPlane"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)"/>
            </summary>
            <param name="path"></param>
            <param name="forward"></param>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.IsParameterOnCurve(System.Double)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.IsParameterOnCurve(System.Double)"/>
            </summary>
            <param name="par"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.IsValidParameter(System.Double)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.IsValidParameter(System.Double)"/>
            </summary>
            <param name="par"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.GetExtendedHitTest">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.GetExtendedHitTest"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.GetSelfIntersections">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.GetSelfIntersections"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.ReinterpretParameter(System.Double@)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.ReinterpretParameter(System.Double@)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.GetInflectionPoints">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.GetInflectionPoints"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.Approximate(System.Boolean,System.Double)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Approximate(System.Boolean,System.Double)"/>
            </summary>
            <param name="linesOnly"></param>
            <param name="maxError"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.Move(System.Double,System.Double)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Move(System.Double,System.Double)"/>
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.GetModified(CADability.ModOp2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.GetModified(CADability.ModOp2D)"/>
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.Copy(CADability.Curve2D.ICurve2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Copy(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="toCopyFrom"></param>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.GetFused(CADability.Curve2D.ICurve2D,System.Double)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.GetFused(CADability.Curve2D.ICurve2D,System.Double)"/>
            </summary>
            <param name="toFuseWith"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.GeneralCurve2D.TryPointDeriv2At(System.Double,CADability.GeoPoint2D@,CADability.GeoVector2D@,CADability.GeoVector2D@)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.TryPointDeriv2At(System.Double,CADability.GeoPoint2D@,CADability.GeoVector2D@,CADability.GeoVector2D@)"/>
            </summary>
            <param name="position"></param>
            <param name="point"></param>
            <param name="deriv"></param>
            <param name="deriv2"></param>
            <returns></returns>
        </member>
        <member name="T:CADability.Curve2D.TempTriangulatedCurve2D">
            <summary>
            Nur tempor√§r, sp√§ter soll alles von TriangulatedCurve2D abgeleitet sein
            </summary>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.DirectionAt(System.Double)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.DirectionAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.PointAt(System.Double)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.PointAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.PositionOf(CADability.GeoPoint2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.PositionOf(CADability.GeoPoint2D)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.PositionAtLength(System.Double)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.PositionAtLength(System.Double)"/>
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.GetAreaFromPoint(CADability.GeoPoint2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.GetAreaFromPoint(CADability.GeoPoint2D)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.GetArea">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.GetArea"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.Split(System.Double)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Split(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.Distance(CADability.GeoPoint2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Distance(CADability.GeoPoint2D)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.MinDistance(CADability.Curve2D.ICurve2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.MinDistance(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="Other"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.MinDistance(CADability.GeoPoint2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.MinDistance(CADability.GeoPoint2D)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.Trim(System.Double,System.Double)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Trim(System.Double,System.Double)"/>
            </summary>
            <param name="StartPos"></param>
            <param name="EndPos"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.Parallel(System.Double,System.Boolean,System.Double,System.Double)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Parallel(System.Double,System.Boolean,System.Double,System.Double)"/>
            </summary>
            <param name="Dist"></param>
            <param name="approxSpline"></param>
            <param name="precision"></param>
            <param name="roundAngle"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.Intersect(CADability.Curve2D.ICurve2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Intersect(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="IntersectWith"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.Intersect(CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Intersect(CADability.GeoPoint2D,CADability.GeoPoint2D)"/>
            </summary>
            <param name="StartPoint"></param>
            <param name="EndPoint"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.PerpendicularFoot(CADability.GeoPoint2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.PerpendicularFoot(CADability.GeoPoint2D)"/>
            </summary>
            <param name="FromHere"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.TangentPoints(CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.TangentPoints(CADability.GeoPoint2D,CADability.GeoPoint2D)"/>
            </summary>
            <param name="FromHere"></param>
            <param name="CloseTo"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.TangentPointsToAngle(CADability.Angle,CADability.GeoPoint2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.TangentPointsToAngle(CADability.Angle,CADability.GeoPoint2D)"/>
            </summary>
            <param name="ang"></param>
            <param name="CloseTo"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.TangentPointsToAngle(CADability.GeoVector2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.TangentPointsToAngle(CADability.GeoVector2D)"/>
            </summary>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.GetInflectionPoints">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.GetInflectionPoints"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.Reverse">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Reverse"/>
            </summary>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.Clone">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.CloneReverse(System.Boolean)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.CloneReverse(System.Boolean)"/>
            </summary>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.Copy(CADability.Curve2D.ICurve2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Copy(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="toCopyFrom"></param>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.MakeGeoObject(CADability.Plane)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.MakeGeoObject(CADability.Plane)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.Project(CADability.Plane,CADability.Plane)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Project(CADability.Plane,CADability.Plane)"/>
            </summary>
            <param name="fromPlane"></param>
            <param name="toPlane"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)"/>
            </summary>
            <param name="path"></param>
            <param name="forward"></param>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.IsParameterOnCurve(System.Double)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.IsParameterOnCurve(System.Double)"/>
            </summary>
            <param name="par"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.IsValidParameter(System.Double)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.IsValidParameter(System.Double)"/>
            </summary>
            <param name="par"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.GetExtendedHitTest">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.GetExtendedHitTest"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.GetSelfIntersections">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.GetSelfIntersections"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.ReinterpretParameter(System.Double@)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.ReinterpretParameter(System.Double@)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.Approximate(System.Boolean,System.Double)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Approximate(System.Boolean,System.Double)"/>
            </summary>
            <param name="linesOnly"></param>
            <param name="maxError"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.Move(System.Double,System.Double)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Move(System.Double,System.Double)"/>
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.GetModified(CADability.ModOp2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.GetModified(CADability.ModOp2D)"/>
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.GetFused(CADability.Curve2D.ICurve2D,System.Double)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.GetFused(CADability.Curve2D.ICurve2D,System.Double)"/>
            </summary>
            <param name="toFuseWith"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.TryPointDeriv2At(System.Double,CADability.GeoPoint2D@,CADability.GeoVector2D@,CADability.GeoVector2D@)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.TryPointDeriv2At(System.Double,CADability.GeoPoint2D@,CADability.GeoVector2D@,CADability.GeoVector2D@)"/>
            </summary>
            <param name="position"></param>
            <param name="point"></param>
            <param name="deriv"></param>
            <param name="deriv2"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.TriangulatedCurve2D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.Curve2D.ICurveTransformation2D">
            <summary>
            Interface for non affine parameterspace transformation for 2d curves
            </summary>
        </member>
        <member name="T:CADability.Curve2D.TransformedCurve2D">
            <summary>
            A general 2D Curve which results from a non-affine transformation of the 2D space
            </summary>
        </member>
        <member name="T:CADability.Curve2D.IImplicitCurve2D">
            <summary>
            K√∂nnte man verwenden f√ºr nicht parametrierte 2d Kurven, mal sehen
            </summary>
        </member>
        <member name="T:CADability.Curve2D.Line2D">
            <summary>
            Implements a line in 2D space. By implementing the ICurve2D interface this line
            can be handled as any 2D curve.
            </summary>
        </member>
        <member name="M:CADability.Curve2D.Line2D.#ctor(CADability.GeoPoint2D,CADability.GeoVector2D,CADability.BoundingRect)">
            <summary>
            Constructs a line passing through <paramref name="location"/> with the provided <paramref name="direction"/> clipped by the 
            rectangle <paramref name="clippedBy"/>
            </summary>
            <param name="location">Point on the (extension of the) line </param>
            <param name="direction">Direction of the line</param>
            <param name="clippedBy">Clipping rectangle</param>
        </member>
        <member name="M:CADability.Curve2D.Line2D.DirectionAt(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.DirectionAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Line2D.PointAt(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.PointAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Line2D.PositionOf(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.PositionOf(CADability.GeoPoint2D)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Line2D.GetAreaFromPoint(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.GetAreaFromPoint(CADability.GeoPoint2D)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Line2D.Split(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Split(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Line2D.GetExtent">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.GetExtent"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Line2D.HitTest(CADability.BoundingRect@,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.HitTest(CADability.BoundingRect@,System.Boolean)"/>
            </summary>
            <param name="Rect"></param>
            <param name="IncludeControlPoints"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Line2D.Distance(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Distance(CADability.GeoPoint2D)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Line2D.MinDistance(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.MinDistance(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="Other"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Line2D.Trim(System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Trim(System.Double,System.Double)"/>
            </summary>
            <param name="StartPos"></param>
            <param name="EndPos"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Line2D.Parallel(System.Double,System.Boolean,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Parallel(System.Double,System.Boolean,System.Double,System.Double)"/>
            </summary>
            <param name="Dist"></param>
            <param name="approxSpline"></param>
            <param name="precision"></param>
            <param name="roundAngle"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Line2D.Intersect(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Intersect(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="IntersectWith"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Line2D.PerpendicularFoot(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.PerpendicularFoot(CADability.GeoPoint2D)"/>
            </summary>
            <param name="FromHere"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Line2D.TangentPoints(CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.TangentPoints(CADability.GeoPoint2D,CADability.GeoPoint2D)"/>
            </summary>
            <param name="FromHere"></param>
            <param name="CloseTo"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Line2D.TangentPointsToAngle(CADability.Angle,CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.TangentPointsToAngle(CADability.Angle,CADability.GeoPoint2D)"/>
            </summary>
            <param name="ang"></param>
            <param name="CloseTo"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Line2D.Intersect(CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Intersect(CADability.GeoPoint2D,CADability.GeoPoint2D)"/>
            </summary>
            <param name="StartPoint"></param>
            <param name="EndPoint"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Line2D.Reverse">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Reverse"/>
            </summary>
        </member>
        <member name="M:CADability.Curve2D.Line2D.Move(System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Move(System.Double,System.Double)"/>
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:CADability.Curve2D.Line2D.GetModified(CADability.ModOp2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.GetModified(CADability.ModOp2D)"/>
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Line2D.Clone">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Line2D.CloneReverse(System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.CloneReverse(System.Boolean)"/>
            </summary>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Line2D.Copy(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Copy(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="toCopyFrom"></param>
        </member>
        <member name="M:CADability.Curve2D.Line2D.MakeGeoObject(CADability.Plane)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.MakeGeoObject(CADability.Plane)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Line2D.Project(CADability.Plane,CADability.Plane)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Project(CADability.Plane,CADability.Plane)"/>
            </summary>
            <param name="fromPlane"></param>
            <param name="toPlane"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Line2D.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)"/>
            </summary>
            <param name="path"></param>
            <param name="forward"></param>
        </member>
        <member name="M:CADability.Curve2D.Line2D.GetExtendedHitTest">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.GetExtendedHitTest"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Line2D.Approximate(System.Boolean,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Approximate(System.Boolean,System.Double)"/>
            </summary>
            <param name="linesOnly"></param>
            <param name="maxError"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Line2D.GetArea">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.GetArea"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Line2D.GetFused(CADability.Curve2D.ICurve2D,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.GetFused(CADability.Curve2D.ICurve2D,System.Double)"/>
            </summary>
            <param name="toFuseWith"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Line2D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Curve2D.Line2D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="M:CADability.Curve2D.InfiniteLine2D.GetExtent">
            <summary>
            Implements <see cref="M:CADability.IQuadTreeInsertable.GetExtent"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.InfiniteLine2D.HitTest(CADability.BoundingRect@,System.Boolean)">
            <summary>
            Implements <see cref="M:CADability.IQuadTreeInsertable.HitTest(CADability.BoundingRect@,System.Boolean)"/>
            </summary>
            <param name="Rect"></param>
            <param name="IncludeControlPoints"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.SemiInfiniteAxis2D.GetExtent">
            <summary>
            Implements <see cref="M:CADability.IQuadTreeInsertable.GetExtent"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.SemiInfiniteAxis2D.HitTest(CADability.BoundingRect@,System.Boolean)">
            <summary>
            Implements <see cref="M:CADability.IQuadTreeInsertable.HitTest(CADability.BoundingRect@,System.Boolean)"/>
            </summary>
            <param name="Rect"></param>
            <param name="IncludeControlPoints"></param>
            <returns></returns>
        </member>
        <member name="T:CADability.Curve2D.Path2D">
            <summary>
            Composition of one or more ICurve2D objects. The contained ICurve2D objects are connected
            and stored in the right order, i.e. SubCurve[i].EndPoint is identical or close to 
            SubCurve[i+1].StartPoint. Path2D may be open or closed. It also may be self-intersecting.
            </summary>
        </member>
        <member name="M:CADability.Curve2D.Path2D.DirectionAt(System.Double)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.DirectionAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Path2D.PointAt(System.Double)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.PointAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Path2D.PositionOf(CADability.GeoPoint2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.PositionOf(CADability.GeoPoint2D)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Path2D.PositionAtLength(System.Double)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.PositionAtLength(System.Double)"/>
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Path2D.GetAreaFromPoint(CADability.GeoPoint2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.GetAreaFromPoint(CADability.GeoPoint2D)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Path2D.Split(System.Double)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Split(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Path2D.Distance(CADability.GeoPoint2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Distance(CADability.GeoPoint2D)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Path2D.MinDistance(CADability.Curve2D.ICurve2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.MinDistance(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="Other"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Path2D.MinDistance(CADability.GeoPoint2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.MinDistance(CADability.GeoPoint2D)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Path2D.Trim(System.Double,System.Double)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Trim(System.Double,System.Double)"/>
            </summary>
            <param name="StartPos"></param>
            <param name="EndPos"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Path2D.Parallel(System.Double,System.Boolean,System.Double,System.Double)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Parallel(System.Double,System.Boolean,System.Double,System.Double)"/>
            </summary>
            <param name="Dist"></param>
            <param name="approxSpline"></param>
            <param name="precision"></param>
            <param name="roundAngle"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Path2D.Intersect(CADability.Curve2D.ICurve2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Intersect(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="IntersectWith"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Path2D.PerpendicularFoot(CADability.GeoPoint2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.PerpendicularFoot(CADability.GeoPoint2D)"/>
            </summary>
            <param name="FromHere"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Path2D.TangentPoints(CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.TangentPoints(CADability.GeoPoint2D,CADability.GeoPoint2D)"/>
            </summary>
            <param name="FromHere"></param>
            <param name="CloseTo"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Path2D.TangentPointsToAngle(CADability.Angle,CADability.GeoPoint2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.TangentPointsToAngle(CADability.Angle,CADability.GeoPoint2D)"/>
            </summary>
            <param name="ang"></param>
            <param name="CloseTo"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Path2D.TangentPointsToAngle(CADability.GeoVector2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.TangentPointsToAngle(CADability.GeoVector2D)"/>
            </summary>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Path2D.GetInflectionPoints">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.GetInflectionPoints"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Path2D.Reverse">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Reverse"/>
            </summary>
        </member>
        <member name="M:CADability.Curve2D.Path2D.Move(System.Double,System.Double)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Move(System.Double,System.Double)"/>
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:CADability.Curve2D.Path2D.Clone">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Path2D.CloneReverse(System.Boolean)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.CloneReverse(System.Boolean)"/>
            </summary>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Path2D.Copy(CADability.Curve2D.ICurve2D)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Copy(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="toCopyFrom"></param>
        </member>
        <member name="M:CADability.Curve2D.Path2D.MakeGeoObject(CADability.Plane)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.MakeGeoObject(CADability.Plane)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Path2D.Project(CADability.Plane,CADability.Plane)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Project(CADability.Plane,CADability.Plane)"/>
            </summary>
            <param name="fromPlane"></param>
            <param name="toPlane"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Path2D.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)"/>
            </summary>
            <param name="path"></param>
            <param name="forward"></param>
        </member>
        <member name="M:CADability.Curve2D.Path2D.IsParameterOnCurve(System.Double)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.IsParameterOnCurve(System.Double)"/>
            </summary>
            <param name="par"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Path2D.GetExtendedHitTest">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.GetExtendedHitTest"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Path2D.GetSelfIntersections">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.GetSelfIntersections"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Path2D.ReinterpretParameter(System.Double@)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.ReinterpretParameter(System.Double@)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Path2D.Approximate(System.Boolean,System.Double)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.Approximate(System.Boolean,System.Double)"/>
            </summary>
            <param name="linesOnly"></param>
            <param name="maxError"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Path2D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Curve2D.Path2D.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements ISerializable:GetObjectData
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="T:CADability.Curve2D.InfinitePath2D">
            <summary>
            Interne Klasse f√ºr den HitTest f√ºr verl√§ngerte Pfade oder PolyLines.
            Wird lediglich f√ºr das Suchen im QuadTree verwendet, muss deshalb nicht
            so genau sein. Insbesondere werden von der ersten und letzten Kurve die
            Verl√§ngerunden verwendet, was nicht exakt ist, denn man m√ºsste nur die
            Verl√§ngerung in eine Richtung verwenden. Sollte aber keine Probleme machen.
            Wird nur f√ºr offene PolyLinien bzw. Pfade verwendet.
            </summary>
        </member>
        <member name="M:CADability.Curve2D.InfinitePath2D.GetExtent">
            <summary>
            Implements <see cref="M:CADability.IQuadTreeInsertable.GetExtent"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.InfinitePath2D.HitTest(CADability.BoundingRect@,System.Boolean)">
            <summary>
            Implements <see cref="M:CADability.IQuadTreeInsertable.HitTest(CADability.BoundingRect@,System.Boolean)"/>
            </summary>
            <param name="Rect"></param>
            <param name="IncludeControlPoints"></param>
            <returns></returns>
        </member>
        <member name="T:CADability.Curve2D.Polyline2D">
            <summary>
            Implements a polyline in 2D space. By implementing the ICurve2D interface this polyline
            can be handled as any 2D curve.
            </summary>
        </member>
        <member name="M:CADability.Curve2D.Polyline2D.Clone">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Polyline2D.CloneReverse(System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.CloneReverse(System.Boolean)"/>
            </summary>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Polyline2D.Copy(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Copy(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="toCopyFrom"></param>
        </member>
        <member name="M:CADability.Curve2D.Polyline2D.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)"/>
            </summary>
            <param name="path"></param>
            <param name="forward"></param>
        </member>
        <member name="M:CADability.Curve2D.Polyline2D.DirectionAt(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.DirectionAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Polyline2D.Distance(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Distance(CADability.GeoPoint2D)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Polyline2D.GetAreaFromPoint(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.GetAreaFromPoint(CADability.GeoPoint2D)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Polyline2D.GetExtendedHitTest">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.GetExtendedHitTest"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Polyline2D.GetExtent">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.GetExtent"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Polyline2D.HitTest(CADability.BoundingRect@,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.HitTest(CADability.BoundingRect@,System.Boolean)"/>
            </summary>
            <param name="Rect"></param>
            <param name="IncludeControlPoints"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Polyline2D.Intersect(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Intersect(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="IntersectWith"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Polyline2D.Intersect(CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Intersect(CADability.GeoPoint2D,CADability.GeoPoint2D)"/>
            </summary>
            <param name="StartPoint"></param>
            <param name="EndPoint"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Polyline2D.IsParameterOnCurve(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.IsParameterOnCurve(System.Double)"/>
            </summary>
            <param name="par"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Polyline2D.MakeGeoObject(CADability.Plane)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.MakeGeoObject(CADability.Plane)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Polyline2D.MinDistance(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.MinDistance(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="Other"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Polyline2D.Parallel(System.Double,System.Boolean,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Parallel(System.Double,System.Boolean,System.Double,System.Double)"/>
            </summary>
            <param name="Dist"></param>
            <param name="approxSpline"></param>
            <param name="precision"></param>
            <param name="roundAngle"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Polyline2D.PerpendicularFoot(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.PerpendicularFoot(CADability.GeoPoint2D)"/>
            </summary>
            <param name="FromHere"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Polyline2D.PointAt(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.PointAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Polyline2D.PositionOf(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.PositionOf(CADability.GeoPoint2D)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Polyline2D.Project(CADability.Plane,CADability.Plane)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Project(CADability.Plane,CADability.Plane)"/>
            </summary>
            <param name="fromPlane"></param>
            <param name="toPlane"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Polyline2D.Reverse">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Reverse"/>
            </summary>
        </member>
        <member name="M:CADability.Curve2D.Polyline2D.Move(System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Move(System.Double,System.Double)"/>
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:CADability.Curve2D.Polyline2D.Split(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Split(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Polyline2D.TangentPoints(CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.TangentPoints(CADability.GeoPoint2D,CADability.GeoPoint2D)"/>
            </summary>
            <param name="FromHere"></param>
            <param name="CloseTo"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Polyline2D.TangentPointsToAngle(CADability.Angle,CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.TangentPointsToAngle(CADability.Angle,CADability.GeoPoint2D)"/>
            </summary>
            <param name="ang"></param>
            <param name="CloseTo"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Polyline2D.Trim(System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Trim(System.Double,System.Double)"/>
            </summary>
            <param name="StartPos"></param>
            <param name="EndPos"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Polyline2D.Approximate(System.Boolean,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Approximate(System.Boolean,System.Double)"/>
            </summary>
            <param name="linesOnly"></param>
            <param name="maxError"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Polyline2D.GetArea">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.GetArea"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2D.Polyline2D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Curve2D.Polyline2D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.Curve2D.Reduce2D">
            <summary>
            Helper class to reduce duplicated or 2d connected curves. To use this class create an empty instance,
            <see cref="M:CADability.Curve2D.Reduce2D.Add(CADability.Curve2D.ICurve2D)">Add</see>/> curves to it and access the <see cref="P:CADability.Curve2D.Reduce2D.Reduced">Reduced</see>/>
            property. Some flags add additional control on how the reduction is performed
            </summary>
        </member>
        <member name="M:CADability.Curve2D.Reduce2D.#ctor">
            <summary>
            Empty constructor. Use <see cref="M:CADability.Curve2D.Reduce2D.Add(CADability.Curve2D.ICurve2D)"/> to add curves.
            </summary>
        </member>
        <member name="M:CADability.Curve2D.Reduce2D.Add(CADability.Curve2D.ICurve2D)">
            <summary>
            Adds a curve to the reduction.
            </summary>
            <param name="curve"></param>
        </member>
        <member name="M:CADability.Curve2D.Reduce2D.Add(CADability.Curve2D.ICurve2D[])">
            <summary>
            Adds an array of curves to the reduction
            </summary>
            <param name="curves"></param>
        </member>
        <member name="M:CADability.Curve2D.Reduce2D.Add(CADability.GeoObject.GeoObjectList,CADability.Plane)">
            <summary>
            Add all objects from l, which are or contain curves. The curves are projected onto the provided plane.
            If l contains composite objects (e.g. Block, Path) the objects are decomposed.
            </summary>
            <param name="l"></param>
            <param name="pln"></param>
        </member>
        <member name="T:CADability.Curve2D.Reduce2D.Mode">
            <summary>
            Mode definition.
            </summary>
        </member>
        <member name="F:CADability.Curve2D.Reduce2D.Mode.Simple">
            <summary>
            Return only simple objects, do not collect objects to polylines or paths.
            </summary>
        </member>
        <member name="F:CADability.Curve2D.Reduce2D.Mode.Polylines">
            <summary>
            Collect conected lines to polylines
            </summary>
        </member>
        <member name="F:CADability.Curve2D.Reduce2D.Mode.Paths">
            <summary>
            Collect connected curves to paths <see cref="T:CADability.Curve2D.Path2D"/>
            </summary>
        </member>
        <member name="F:CADability.Curve2D.Reduce2D.OutputMode">
            <summary>
            Desired output mode.
            </summary>
        </member>
        <member name="F:CADability.Curve2D.Reduce2D.Precision">
            <summary>
            Precision: two curves are combined if the resulting curve differs less than this value from the orginal curves.
            </summary>
        </member>
        <member name="F:CADability.Curve2D.Reduce2D.BreakPolylines">
            <summary>
            Break up polylines added to this object. Depending on <see cref="F:CADability.Curve2D.Reduce2D.OutputMode"/> the result may again be combined
            to polylines or paths.
            </summary>
        </member>
        <member name="F:CADability.Curve2D.Reduce2D.FlattenPolylines">
            <summary>
            Precision to remove inner points of polylines. If set to 0, polylines remain unchanged
            </summary>
        </member>
        <member name="P:CADability.Curve2D.Reduce2D.Reduced">
            <summary>
            Access this property for the result of the reduction.
            </summary>
        </member>
        <member name="F:CADability.Curve2D.Reduce2D.UsedOriginals">
            <summary>
            When adding GeoObjects with the method Add(GeoObjectList l, Plane pln), a list of used GeoObjects
            is maintained when the result "Reduced" is calculated. "UsedOriginals" provides a list of those objects, that are
            represented in the result. The objects might also be children of the provided objects.
            </summary>
        </member>
        <member name="M:CADability.Curve2D.SineCurve2D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Curve2D.SineCurve2D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="M:CADability.ArcLineFitting2D.Quadgl(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Summary of quadgl.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CADability.ArcLineFitting3D.Quadgl(System.Double,System.Double,System.Double,System.Double@,System.Double@)" -->
        <member name="T:CADability.IArray`1">
            <summary>
            Interface to access a collections as an array. Mainly used for twodimensional array to access rows or columns as simple array
            without copying the contents. Or access a twodimensional array as a one dimensional array.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:CADability.IArrayImpl`1">
            <summary>
            General implementation of <see cref="T:CADability.IArray`1"/> providing enumerators and first and last properties.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:CADability.ArrayRow`1">
            <summary>
            Convert a row of a 2 dimensional array to a one dimensional array (without copying the data)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:CADability.ArrayColumn`1">
            <summary>
            Convert a column of a 2 dimensional array to a one dimensional array (without copying the data)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:CADability.ArrayLinear`1">
            <summary>
            Convert a 2 dimensional array to a one dimensional array (without copying the data)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:CADability.ToIArray`1">
            <summary>
            Convert a simple one dimensional array to an IArray
            Use someArray.ToIArray() 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:CADability.Attribute.NamedAttributeComparer">
            <summary>
            Comparer to sort lists of INamedAttributes<see cref="!:Layerlist"/>.
            </summary>
        </member>
        <member name="M:CADability.Attribute.NamedAttributeComparer.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="T:CADability.Attribute.INameChange">
            <summary>
            Interface used by named objects, like attributs (e.g. FilterList)
            </summary>
        </member>
        <member name="M:CADability.Attribute.INameChange.MayChangeName(System.Object,System.String)">
            <summary>
            Check whether name may be changed
            </summary>
            <param name="namedObject"></param>
            <param name="newName"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Attribute.INameChange.NameChanged(System.Object,System.String)">
            <summary>
            Notify that name has changed
            </summary>
            <param name="namedObject"></param>
            <param name="oldName"></param>
        </member>
        <member name="T:CADability.Attribute.IAttributeList">
            <summary>
            Interface implemented by lists of attributes, e.g. <see cref="T:CADability.Attribute.LayerList"/>.
            </summary>
        </member>
        <member name="P:CADability.Attribute.IAttributeList.Count">
            <summary>
            Gets the count of items in the list.
            </summary>
        </member>
        <member name="M:CADability.Attribute.IAttributeList.Item(System.Int32)">
            <summary>
            Returns the item with the given index.
            </summary>
            <param name="Index">Index of the item</param>
            <returns>The item</returns>
        </member>
        <member name="M:CADability.Attribute.IAttributeList.Find(System.String)">
            <summary>
            Returns an item with the given name or null.
            </summary>
            <param name="name">name of the requested item</param>
            <returns>the item or null if not found</returns>
        </member>
        <member name="P:CADability.Attribute.IAttributeList.Current">
            <summary>
            Returns the current item of that list. May also be null.
            </summary>
        </member>
        <member name="M:CADability.Attribute.IAttributeList.Add(CADability.INamedAttribute)">
            <summary>
            Adds a named attribute to that list
            </summary>
            <param name="toAdd">the attribute to add</param>
        </member>
        <member name="P:CADability.Attribute.IAttributeList.Owner">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:CADability.Attribute.IAttributeList.AttributeChanged(CADability.INamedAttribute,CADability.ReversibleChange)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:CADability.Attribute.IAttributeList.Initialize">
            <summary>
            Initializes this list with default items.
            </summary>
        </member>
        <member name="M:CADability.Attribute.IAttributeList.Clone">
            <summary>
            Creates a clone of both the list and the items. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Attribute.IAttributeList.Update(System.Boolean)">
            <summary>
            When attributes refer to other attributes these should be in the same
            <see cref="T:CADability.Attribute.AttributeListContainer"/>. This method checks this consitency,
            changes the references where needed and adds new attributes to the corresponding
            lists when necessery.
            </summary>
            <param name="AddMissingToList">true: add referenced attributes when not found in a list</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CADability.Attribute.IAttributeList.Update(CADability.GeoObject.IGeoObject)" -->
        <member name="M:CADability.Attribute.IAttributeList.MayChangeName(CADability.INamedAttribute,System.String)">
            <summary>
            Determins, whether a named attribute may change its name. It may not change
            its name if there is already an attribut with that desired name.
            </summary>
            <param name="attribute">the attribute that wants to change its name</param>
            <param name="newName">the new name</param>
            <returns>true, if name change is possible, false otherwise</returns>
        </member>
        <member name="M:CADability.Attribute.IAttributeList.NameChanged(CADability.INamedAttribute,System.String)">
            <summary>
            Notifies the list, that an attribut changed ist name.
            </summary>
            <param name="attribute">the attribute</param>
            <param name="oldName">the old name (the new name can be accessed from the attribute)</param>
        </member>
        <member name="T:CADability.Attribute.AttributeException">
            <summary>
            ApplicationException class raised by various operations with attributes.
            </summary>
        </member>
        <member name="T:CADability.Attribute.AttributeException.AttributeExceptionType">
            <summary>
            Type of exception
            </summary>
        </member>
        <member name="F:CADability.Attribute.AttributeException.AttributeExceptionType.General">
            <summary>
            Unspecific
            </summary>
        </member>
        <member name="F:CADability.Attribute.AttributeException.AttributeExceptionType.InvalidArg">
            <summary>
            Invalid Argument
            </summary>
        </member>
        <member name="F:CADability.Attribute.AttributeException.ExceptionType">
            <summary>
            Type of exception
            </summary>
        </member>
        <member name="T:CADability.Attribute.IAttributeListContainer">
            <summary>
            Interface implemented by <see cref="T:CADability.Project"/> and <see cref="T:CADability.Settings"/>.
            Helps to get all kind of attribute lists, e.g. <see cref="P:CADability.Attribute.IAttributeListContainer.ColorList"/>, <see cref="P:CADability.Attribute.IAttributeListContainer.LayerList"/>
            </summary>
        </member>
        <member name="T:CADability.Attribute.AttributeListContainer">
            <summary>
            static Funktions to manage IAttributeListContainer and IAttributeList objects
            </summary>
        </member>
        <member name="T:CADability.Attribute.ColorDef">
            <summary>
            Summary description for ColorDef.
            </summary>
        </member>
        <member name="M:CADability.Attribute.ColorDef.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Attribute.ColorDef.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.Attribute.IColorDef">
            <summary>
            Interface to handle the colors of IGeoObject objects
            </summary>
        </member>
        <member name="P:CADability.Attribute.IColorDef.ColorDef">
            <summary>
            Sets and gets the color of the object
            </summary>
        </member>
        <member name="M:CADability.Attribute.IColorDef.SetTopLevel(CADability.Attribute.ColorDef)">
            <summary>
            Sets the color of only the top level object (in case of the object contains children)
            No changing events are issued. Not intended for public use.
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="M:CADability.Attribute.IColorDef.SetTopLevel(CADability.Attribute.ColorDef,System.Boolean)">
            <summary>
            Same as <see cref="M:CADability.Attribute.IColorDef.SetTopLevel(CADability.Attribute.ColorDef)"/>, but also overwrites the color of child objects if it is null. Child objects that already have colors remain unchanged.
            </summary>
            <param name="newValue"></param>
            <param name="overwriteChildNullColor"></param>
        </member>
        <member name="T:CADability.Attribute.ColorList">
            <summary>
            Eine Tabelle von benannten Farben. Die Tabelle ist serialisierbar und wird gew√∂hnlich
            in einem "Settings" Objekt gespeichert. Die Tabelle kann in der EigenschaftenAnzeige
            interaktiv manipuliert werden.
            </summary>
        </member>
        <member name="M:CADability.Attribute.ColorList.#ctor">
            <summary>
            Erzeugt eine leere ColorList.
            </summary>
        </member>
        <member name="M:CADability.Attribute.ColorList.AddColor(System.String,System.Drawing.Color)">
            <summary>
            Liefert den Index zu dem gegebenen Namen.
            </summary>
            <param name="Name">Der Name der gesuchten Farbe.</param>
            <returns>Index der gesuchten Farbe oder -1, wenn keine Farbe mit diesem Namen in der Tabelle existiert.</returns>
            <summary>
            F√ºgt eine Farbe hinzu, oder √ºberschreibt eine bestehende, wenn der Name bereits existiert.
            </summary>
            <param name="Name">Bezeichnung der Farbe.</param>
            <param name="Color">RGB (oder auch ARGB) Wert der Farbe.</param>
            <returns>Index des neuen oder ver√§nderten Eintrags.</returns>
        </member>
        <member name="M:CADability.Attribute.ColorList.RemoveAt(System.Int32)">
            <summary>
            Entfernt die Farbe mit dem gegebenen Index.
            </summary>
            <param name="Index">Der Index.</param>
        </member>
        <member name="M:CADability.Attribute.ColorList.IndexOf(System.String)">
            <summary>
            Liefert den Namen zu dem gegebenen Index.
            </summary>
            <param name="Index">Der Index.</param>
            <returns>Der Name.</returns>
        </member>
        <member name="M:CADability.Attribute.ColorList.GetColor(System.Int32)">
            <summary>
            Liefert die Farbe zu dem gegebenen Index.
            </summary>
            <param name="Index">Der Index.</param>
            <returns>Die Farbe.</returns>
        </member>
        <member name="P:CADability.Attribute.ColorList.Item(System.Int32)">
            <summary>
            Liefert das ColorDef Objekt zu dem gegebenen Index. Den Index zu einem Namen 
            bekommt man mit der Methode <seealso cref="M:CADability.Attribute.ColorList.IndexOf(System.String)"/>.
            </summary>
            <param name="Index">Der Index des gesuchten Objektes</param>
            <returns></returns>
        </member>
        <member name="M:CADability.Attribute.ColorList.Find(System.String)">
            <summary>
            Implements <see cref="M:CADability.Attribute.IAttributeList.Find(System.String)"/>
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Attribute.ColorList.SetName(System.Int32,System.String)">
            <summary>
            Ver√§ndert den Namen bei gegebenem Index. 
            </summary>
            <param name="Index">Index des zu ver√§ndernden Wertes.</param>
            <param name="Name">Neuer Name.</param>
        </member>
        <member name="M:CADability.Attribute.ColorList.SetColor(System.Int32,System.Drawing.Color)">
            <summary>
            Ver√§ndert die Farbe bei gegebenem Index. 
            </summary>
            <param name="Index">Index des zu ver√§ndernden Wertes.</param>
            <param name="Color">Neuer Farbwert.</param>
        </member>
        <member name="P:CADability.Attribute.ColorList.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="P:CADability.Attribute.ColorList.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.Attribute.ColorList.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.Attribute.ColorList.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.Attribute.ColorList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Attribute.ColorList.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.Attribute.DimensionStyle">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.Attribute.DimensionStyle.SameData(CADability.Attribute.DimensionStyle)">
            <summary>
            Checks whether this dimensionstyle has the same properties as the other dimension style.
            Name equality is not checked.
            </summary>
            <param name="other">The other dimension style</param>
            <returns>true if equal</returns>
        </member>
        <member name="P:CADability.Attribute.DimensionStyle.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="P:CADability.Attribute.DimensionStyle.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.Attribute.DimensionStyle.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.Attribute.DimensionStyle.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.Attribute.DimensionStyle.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="M:CADability.Attribute.DimensionStyle.Removed(CADability.UserInterface.IPropertyTreeView)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Removed(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView">the IPropertyTreeView from which it was removed</param>
        </member>
        <member name="M:CADability.Attribute.DimensionStyle.LabelChanged(System.String)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.LabelChanged(System.String)"/>
            </summary>
            <param name="NewText"></param>
        </member>
        <member name="M:CADability.Attribute.DimensionStyle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Attribute.DimensionStyle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.Attribute.DimensionStyleList">
            <summary>
            The DimensionStyleList contains the list of available dimension styles (<see cref="T:CADability.Attribute.DimensionStyle"/>). It is
            owned by the project or the global settings. It implements IShowProperty to
            make it available in the tree voew of the control center.
            </summary>
        </member>
        <member name="M:CADability.Attribute.DimensionStyleList.Add(CADability.Attribute.DimensionStyle)">
            <summary>
            Add a dimensionstyle to the list. If there is already a dimension styl with the same name
            in the list, the <see cref="T:CADability.NameAlreadyExistsException"/> will be thrown.
            </summary>
            <param name="ToAdd">dimension style to add</param>
        </member>
        <member name="M:CADability.Attribute.DimensionStyleList.Find(System.String)">
            <summary>
            Implements <see cref="M:CADability.Attribute.IAttributeList.Find(System.String)"/>
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Attribute.DimensionStyleList.Remove(CADability.Attribute.DimensionStyle)">
            <summary>
            The dimensionstyle ToRemove will be removed from the list. If there is no such dimension
            style, nothing will be changed.
            </summary>
            <param name="ToRemove"></param>
        </member>
        <member name="M:CADability.Attribute.DimensionStyleList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Attribute.DimensionStyleList.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="M:CADability.Attribute.DimensionStyleList.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="P:CADability.Attribute.DimensionStyleList.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.Attribute.DimensionStyleList.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.Attribute.DimensionStyleList.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="T:CADability.Attribute.CheckedAttributes">
            <summary>
            Shows a list of Attributes as checkboxes.
            </summary>
        </member>
        <member name="P:CADability.Attribute.CheckedAttributes.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.Attribute.CheckedAttributes.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="P:CADability.Attribute.CheckedAttributes.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.Attribute.CheckedAttributes.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.Attribute.CheckedList.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.Attribute.CheckedList.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="P:CADability.Attribute.CheckedList.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.Attribute.CheckedList.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="T:CADability.Attribute.Filter">
            <summary>
            This class filters <see cref="T:CADability.GeoObject.IGeoObject"/>s according to their attributes or other properties.
            A <see cref="T:CADability.Project"/> contains a <see cref="T:CADability.Attribute.FilterList"/> which contains Filters. The task of a filter
            is to decide, whether a IGeoObject is accepted by this filter or not. The <see cref="T:CADability.Attribute.FilterList"/> is
            used by the <see cref="!:SelectObjectsAction"/> to decide, whether an object may be selected or not.
            Filters may also be used for other purposes. In this standard implementation the attributes of a IGeoObject
            and the type of the object are used to accept or reject an object. 
            You may derive a class from this Filter class and handle the static <see cref="F:CADability.Attribute.Filter.Constructor"/> delegate
            by constructing your own filter. In your derived class you can use any criteria of a IGeoObject
            for filtering, e.g. the contents of <see cref="P:CADability.GeoObject.IGeoObject.UserData"/>.
            </summary>
        </member>
        <member name="T:CADability.Attribute.Filter.ConstructionDelegate">
            <summary>
            Delegate definition for overridable constructor. Used only for custom filters.
            </summary>
            <returns>The new constructed Filter-derived class</returns>
        </member>
        <member name="F:CADability.Attribute.Filter.Constructor">
            <summary>
            Set this static delegate to your own method which creates your Filter-derived class.
            </summary>
        </member>
        <member name="M:CADability.Attribute.Filter.Construct">
            <summary>
            Constructs a ne Filter or Filter-derived object
            </summary>
            <returns>The newly constructed Filter</returns>
        </member>
        <member name="M:CADability.Attribute.Filter.#ctor">
            <summary>
            Constructs an empty filter which accepts everything
            </summary>
        </member>
        <member name="P:CADability.Attribute.Filter.Name">
            <summary>
            Name of the Filter
            </summary>
        </member>
        <member name="P:CADability.Attribute.Filter.IsActive">
            <summary>
            Gets or sets the active flag. Only active filters in a <see cref="T:CADability.Attribute.FilterList"/> are used for filtering.
            </summary>
        </member>
        <member name="M:CADability.Attribute.Filter.Accept(CADability.GeoObject.IGeoObject)">
            <summary>
            Checks whether an <see cref="T:CADability.GeoObject.IGeoObject"/> is accepted by this filter.
            To realize custom filters, override this method.
            </summary>
            <param name="go">The object beeing tested</param>
            <returns>true if accepted, fale otherwise</returns>
        </member>
        <member name="M:CADability.Attribute.Filter.Add(CADability.INamedAttribute)">
            <summary>
            Adds the provided attribute to the list of accepted attributes.
            CADability knows the following attributes: <see cref="T:CADability.Attribute.Layer"/>, <see cref="T:CADability.Attribute.Layer"/>, <see cref="T:CADability.Attribute.ColorDef"/>, <see cref="T:CADability.Attribute.LineWidth"/>, <see cref="T:CADability.Attribute.LinePattern"/>,
            <see cref="T:CADability.Attribute.DimensionStyle"/>, <see cref="T:CADability.Attribute.HatchStyle"/>.
            If you have your own attributes which are unknown to CADability, you need to override this method to handle those
            attributes.
            </summary>
            <param name="atr">Attribute to be accepted</param>
            <returns>true, if attribute was known, false otherwise</returns>
        </member>
        <member name="M:CADability.Attribute.Filter.Remove(CADability.INamedAttribute)">
            <summary>
            Removes this attribute from the list of accepted attributes. For custom attributes see <see cref="M:CADability.Attribute.Filter.Accept(CADability.GeoObject.IGeoObject)"/>
            </summary>
            <param name="atr">Attribute to be removed</param>
            <returns>true, if attribute was known, false otherwise</returns>
        </member>
        <member name="M:CADability.Attribute.Filter.Contains(CADability.INamedAttribute)">
            <summary>
            Checks whether the provided attribute would be accepted
            </summary>
            <param name="atr">The attribute to check</param>
            <returns>true, if objects with this attribute would be accepted by this filter, false otherwise</returns>
        </member>
        <member name="M:CADability.Attribute.Filter.AcceptType(System.Type,System.Boolean)">
            <summary>
            Adds or removes the provided type to or from the list of accepted types. The type
            must be derived from IGeoObject.
            </summary>
            <param name="type">the type to add or remove</param>
            <param name="doAccept">true: accept this type, false: reject this type.</param>
        </member>
        <member name="P:CADability.Attribute.Filter.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.Attribute.Filter.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="P:CADability.Attribute.Filter.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.Attribute.Filter.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.Attribute.Filter.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="M:CADability.Attribute.Filter.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Attribute.Filter.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.Attribute.FilterList">
            <summary>
            A FilterList is a list of <see cref="T:CADability.Attribute.Filter"/>s. The <see cref="T:CADability.Project"/> owns a FilterList which is used
            by the <see cref="!:CADAbility.Actions.SelectObjectsAction"/> to decide which <see cref="T:CADability.GeoObject.IGeoObject"/>s may be selected or must be rejected.
            You may add a handler to the <see cref="E:CADability.Attribute.FilterList.PreFilterEvent"/> event to do your own filtering or use the
            default filtering machanism (or both). The FilterList of the project is displayed in the ControlCenter
            and may be interactively manipulated.
            </summary>
        </member>
        <member name="M:CADability.Attribute.FilterList.#ctor">
            <summary>
            Constructs a empty FilterList
            </summary>
        </member>
        <member name="M:CADability.Attribute.FilterList.Remove(CADability.Attribute.Filter)">
            <summary>
            Remove the provided <see cref="T:CADability.Attribute.Filter"/> from the list
            </summary>
            <param name="f">Filter to remove</param>
        </member>
        <member name="M:CADability.Attribute.FilterList.Add(CADability.Attribute.Filter)">
            <summary>
            Add the provided <see cref="T:CADability.Attribute.Filter"/> to the list
            </summary>
            <param name="f">Filter to add</param>
        </member>
        <member name="M:CADability.Attribute.FilterList.Accept(CADability.GeoObject.IGeoObject)">
            <summary>
            Use all active filters in this list to check whether an object is accepted or not.
            If there is a <see cref="E:CADability.Attribute.FilterList.PreFilterEvent"/> the this event will be called.
            </summary>
            <param name="go">Object to check</param>
            <returns>true: accepted, false: rejected</returns>
        </member>
        <member name="P:CADability.Attribute.FilterList.Item(System.Int32)">
            <summary>
            Indexer to access individual <see cref="T:CADability.Attribute.Filter"/>s by index
            </summary>
            <param name="index">index of the required Filter</param>
            <returns>The Filter</returns>
        </member>
        <member name="P:CADability.Attribute.FilterList.Count">
            <summary>
            Returns the number of <see cref="T:CADability.Attribute.Filter"/>s in this list.
            </summary>
        </member>
        <member name="T:CADability.Attribute.FilterList.PreFilterDelegate">
            <summary>
            Delegate definition for an FilterList event to allow pre-filtering of acceptance of IGeoObject objects.
            </summary>
            <param name="filterList">Filterlist, which issues the event</param>
            <param name="go">the object to check</param>
            <param name="accepted">Set true to accept, false to reject</param>
            <param name="doInternalFiltering">Set true to continue with filters from the list</param>
        </member>
        <member name="E:CADability.Attribute.FilterList.PreFilterEvent">
            <summary>
            Event to add custom filter.
            </summary>
        </member>
        <member name="P:CADability.Attribute.FilterList.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.Attribute.FilterList.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="P:CADability.Attribute.FilterList.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.Attribute.FilterList.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.Attribute.FilterList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Attribute.FilterList.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.Attribute.HatchStyle">
            <summary>
            Abstract base class for all hatchstyles. A hatchstyle is used to define the
            interior of a <see cref="T:CADability.GeoObject.Hatch"/> object.
            </summary>
        </member>
        <member name="P:CADability.Attribute.HatchStyle.Name">
            <summary>
            Gets or sets the name of the HatchStyle
            </summary>
        </member>
        <member name="M:CADability.Attribute.HatchStyle.GenerateContent(CADability.Shapes.CompoundShape,CADability.Plane)">
            <summary>
            Generates the lines or other GeoObjects that fill out the given shape 
            in the given plane. If a HatchStyle returns null, it must implement the
            <see cref="!:Paint"/> and the <see cref="!:HitTest"/> methods.
            Default implementation returns null.
            </summary>
            <param name="shape">The shape to be filled</param>
            <param name="plane">The plane of the shape</param>
            <returns>The resulting GeoObjects or null</returns>
        </member>
        <member name="M:CADability.Attribute.HatchStyle.GetShowProperty">
            <summary>
            Returns an object to display the properties of the HatchStyle
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Attribute.HatchStyle.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="P:CADability.Attribute.HatchStyle.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="M:CADability.Attribute.HatchStyle.LabelChanged(System.String)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.LabelChanged(System.String)"/>
            </summary>
            <param name="NewText"></param>
        </member>
        <member name="M:CADability.Attribute.HatchStyle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Attribute.HatchStyle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.Attribute.HatchStyleContour">
            <summary>
            An implementation of a <see cref="T:CADability.Attribute.HatchStyle"/>, that defines a style consisting of
            contours inside the shape.
            </summary>
        </member>
        <member name="T:CADability.Attribute.HatchStyleContour.EHoleMode">
            <summary>
            How to proceed with holes in the area to be filled.
            </summary>
        </member>
        <member name="F:CADability.Attribute.HatchStyleContour.EHoleMode.circumscribe">
            <summary>
            Create curves that go around the holes.
            </summary>
        </member>
        <member name="F:CADability.Attribute.HatchStyleContour.EHoleMode.skip">
            <summary>
            Simply break the curves that fill the area
            </summary>
        </member>
        <member name="F:CADability.Attribute.HatchStyleContour.EHoleMode.both">
            <summary>
            circumscribe the first curve and skip all following curves
            </summary>
        </member>
        <member name="T:CADability.Attribute.HatchStyleContour.ESpiralMode">
            <summary>
            Parallel or continous filling modes
            </summary>
        </member>
        <member name="F:CADability.Attribute.HatchStyleContour.ESpiralMode.Parallel">
            <summary>
            Creates parallel contours to the inside of the enclosing contours or the outside of the holes
            </summary>
        </member>
        <member name="F:CADability.Attribute.HatchStyleContour.ESpiralMode.ContourSpiral">
            <summary>
            Connects the parallel contours to one ore more paths to build a continuous contour theat goes 
            as a kind of spiral from the outside to the inside
            </summary>
        </member>
        <member name="F:CADability.Attribute.HatchStyleContour.ESpiralMode.RoundSpiral">
            <summary>
            Ctreates a round spiral that couvers the whole form and is clipped by the definig CompoundShape
            </summary>
        </member>
        <member name="F:CADability.Attribute.HatchStyleContour.ESpiralMode.ContourSpiralClosed">
            <summary>
            Same as ContourSpiral, but the outermost contour is always closed
            </summary>
        </member>
        <member name="P:CADability.Attribute.HatchStyleContour.LineDistance">
            <summary>
            Gets or stes the line distance. This is the distance between adjacent contours.
            </summary>
        </member>
        <member name="P:CADability.Attribute.HatchStyleContour.FirstDistance">
            <summary>
            Gets or sets the distance to the out bounds of the area to be filled.
            </summary>
        </member>
        <member name="P:CADability.Attribute.HatchStyleContour.HoleMode">
            <summary>
            Gets or sets the mode how to proceed with holes inside the area to be filled
            </summary>
        </member>
        <member name="P:CADability.Attribute.HatchStyleContour.CounterClock">
            <summary>
            Gets or sets the direction of the curves
            </summary>
        </member>
        <member name="P:CADability.Attribute.HatchStyleContour.Inbound">
            <summary>
            Gets or sets the order of the curves: true from the outside to the inside, false from inside to outside
            </summary>
        </member>
        <member name="P:CADability.Attribute.HatchStyleContour.ColorDef">
            <summary>
            Gets or sets the color of the lines of this hatch style
            </summary>
        </member>
        <member name="M:CADability.Attribute.HatchStyleContour.GenerateContent(CADability.Shapes.CompoundShape,CADability.Plane)">
            <summary>
            This method is used by a <see cref="T:CADability.GeoObject.Hatch"/> object to calculate its contents. It generates a
            set of parallel lines according to <see cref="P:CADability.Attribute.HatchStyleContour.LineDistance"/> and <see cref="!:LineAngle"/> 
            and clips them with the given shape. The lines are projected into the 3D world
            by the given plane. <seealso cref="M:CADability.Shapes.CompoundShape.Clip(CADability.Curve2D.ICurve2D,System.Boolean)"/>
            </summary>
            <param name="shape">shape of the hatch object</param>
            <param name="plane">local plane of the hatch object</param>
            <returns></returns>
        </member>
        <member name="P:CADability.Attribute.HatchStyleContour.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.Attribute.HatchStyleContour.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.Attribute.HatchStyleContour.Removed(CADability.UserInterface.IPropertyTreeView)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Removed(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView">the IPropertyTreeView from which it was removed</param>
        </member>
        <member name="M:CADability.Attribute.HatchStyleContour.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="T:CADability.Attribute.HatchStyleLines">
            <summary>
            An implementation of a <see cref="T:CADability.Attribute.HatchStyle"/>, that defines a style consisting of
            parallel lines.
            </summary>
        </member>
        <member name="M:CADability.Attribute.HatchStyleLines.GenerateContent(CADability.Shapes.CompoundShape,CADability.Plane)">
            <summary>
            This method is used by a <see cref="T:CADability.GeoObject.Hatch"/> object to calculate its contents. It generates a
            set of parallel lines according to <see cref="P:CADability.Attribute.HatchStyleLines.LineDistance"/> and <see cref="P:CADability.Attribute.HatchStyleLines.LineAngle"/> 
            and clips them with the given shape. The lines are projected into the 3D world
            by the given plane. <seealso cref="M:CADability.Shapes.CompoundShape.Clip(CADability.Curve2D.ICurve2D,System.Boolean)"/>
            </summary>
            <param name="shape">shape of the hatch object</param>
            <param name="plane">local plane of the hatch object</param>
            <returns></returns>
        </member>
        <member name="P:CADability.Attribute.HatchStyleLines.LineDistance">
            <summary>
            Sets or gets the line distance for this hatchstyle.
            </summary>
        </member>
        <member name="P:CADability.Attribute.HatchStyleLines.LineAngle">
            <summary>
            Sets or gets the lina angle for this hatch style.
            </summary>
        </member>
        <member name="P:CADability.Attribute.HatchStyleLines.MarginOffset">
            <summary>
            Sets or gets the distance from the shapes border
            </summary>
        </member>
        <member name="P:CADability.Attribute.HatchStyleLines.LineWidth">
            <summary>
            Gets or sets the line width for the lines of this hatch style
            </summary>
        </member>
        <member name="P:CADability.Attribute.HatchStyleLines.LinePattern">
            <summary>
            Gets or sets the line pattern for the lines of this hatch style
            </summary>
        </member>
        <member name="P:CADability.Attribute.HatchStyleLines.ColorDef">
            <summary>
            Gets or sets the color of the lines of this hatch style
            </summary>
        </member>
        <member name="P:CADability.Attribute.HatchStyleLines.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.Attribute.HatchStyleLines.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.Attribute.HatchStyleLines.Removed(CADability.UserInterface.IPropertyTreeView)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Removed(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView">the IPropertyTreeView from which it was removed</param>
        </member>
        <member name="M:CADability.Attribute.HatchStyleLines.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Attribute.HatchStyleLines.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.Attribute.HatchStyleList">
            <summary>
            List of <see cref="T:CADability.Attribute.HatchStyle"/> derived objects. Typically a <see cref="T:CADability.Project"/>
            or the <see cref="T:CADability.Settings"/> maintain such a list.
            The list is serializable and can be shown and modified in the <see cref="!:ControlCenter"/>.
            There can not be two hatchstyles with the same name.
            </summary>
        </member>
        <member name="M:CADability.Attribute.HatchStyleList.GetDefault(CADability.Attribute.IAttributeListContainer)">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Attribute.HatchStyleList.Add(CADability.Attribute.HatchStyle)">
            <summary>
            Adds an <see cref="T:CADability.Attribute.HatchStyle"/> to the list. If there is already an hatchstyle
            with that name, an <see cref="T:CADability.NameAlreadyExistsException"/> exception will be thrown.
            </summary>
            <param name="ToAdd">The hatchstyle to add</param>
        </member>
        <member name="M:CADability.Attribute.HatchStyleList.Find(System.String)">
            <summary>
            Returns the hatchstyle with the given name from the list.
            If there is no such hatchstyle null will be returned.
            </summary>
            <param name="Name">Name of the hatchstyle</param>
            <returns>The hatchstyle found or null</returns>
        </member>
        <member name="P:CADability.Attribute.HatchStyleList.Count">
            <summary>
            Gets the number of hatchstyles in the list.
            </summary>
        </member>
        <member name="M:CADability.Attribute.HatchStyleList.Remove(CADability.Attribute.HatchStyle)">
            <summary>
            Removes the given <see cref="T:CADability.Attribute.HatchStyle"/> from the list. No action is taken
            if the hatchstyle is not in the list.
            </summary>
            <param name="ToRemove">The hatchstyle to remove</param>
        </member>
        <member name="P:CADability.Attribute.HatchStyleList.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.Attribute.HatchStyleList.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.Attribute.HatchStyleList.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.Attribute.HatchStyleList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="T:CADability.Attribute.HatchStyleSolid">
            <summary>
            A HatchStyle which fills the shape with a solid color.
            May be used as a base class for different kinds of solid fillings.
            </summary>
        </member>
        <member name="M:CADability.Attribute.HatchStyleSolid.#ctor">
            <summary>
            Empty construction
            </summary>
        </member>
        <member name="P:CADability.Attribute.HatchStyleSolid.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.Attribute.HatchStyleSolid.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.Attribute.HatchStyleSolid.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="T:CADability.Attribute.ILayer">
            <summary>
            Interface supported by all objects that have a Layer proerty
            </summary>
        </member>
        <member name="P:CADability.Attribute.ILayer.Layer">
            <summary>
            Gets or sets the layer.
            </summary>
        </member>
        <member name="T:CADability.Attribute.Layer">
            <summary>
            A Layer is an attribute to <see cref="T:CADability.GeoObject.IGeoObject"/> objects. 
            With several layers you can group the GeoObjects in a <see cref="T:CADability.Model"/>.
            In a <see cref="T:CADability.ModelView"/> you can select which layers are visible.
            In a <see cref="T:CADability.Attribute.Filter"/> you can select which layers are be pickable
            The property <see cref="P:CADability.Attribute.Layer.DisplayOrder"/> affects the order of display or printing
            if the according feature is enabled in a <see cref="T:CADability.ModelView"/> or <see cref="T:CADability.Layout"/>.
            Layer implements the <see cref="T:CADability.UserInterface.IShowProperty"/> interface to present ist properties.
            </summary>
        </member>
        <member name="F:CADability.Attribute.Layer.parent">
            <summary>
            Nach l√§ngerem hin und her scheint es am sinnvollsten, dass ein Layer
            seine Liste kennt, in der er sich befindet. Alle M√∂glichkeiten mit events
            sind auch nicht sparsamer, im Gegenteil. Und es darf immer nur eine Liste geben,
            denn sonst ist auch z.B. die ColorList nicht dingfest zu machen.
            </summary>
        </member>
        <member name="P:CADability.Attribute.Layer.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="P:CADability.Attribute.Layer.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.SimpleEntry"/>.
            </summary>
        </member>
        <member name="P:CADability.Attribute.Layer.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.Attribute.Layer.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.Attribute.Layer.LabelChanged(System.String)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.LabelChanged(System.String)"/>
            </summary>
            <param name="NewText"></param>
        </member>
        <member name="M:CADability.Attribute.Layer.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="M:CADability.Attribute.Layer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Attribute.Layer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="P:CADability.Attribute.Layer.Transparency">
            <summary>
            Gets or sets the transparency of this layer: 0 is not transparent, 255 is totally transparent
            </summary>
        </member>
        <member name="M:CADability.Attribute.LayerSelectionProperty.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="M:CADability.Attribute.LayerSelectionProperty.Removed(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Removed(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView">the IPropertyTreeView from which it was removed</param>
        </member>
        <member name="T:CADability.Attribute.LayerList">
            <summary>
            Eine Liste von Layern, immer alphabetisch nach Namen sortiert.
            Die Namen m√ºssen eindeutig sein. Das Zuf√ºgen bzw. Umbenennen eines Layers, so
            dass Mehrdeutigkeiten entstehen w√ºrden, f√ºhrt zu einer Exception.
            </summary>
        </member>
        <member name="M:CADability.Attribute.LayerList.Add(CADability.Attribute.Layer)">
            <summary>
            F√ºgt einen neuen Layer der Liste zu.
            </summary>
            <param name="LayerToAdd">Der neue Layer</param>
        </member>
        <member name="M:CADability.Attribute.LayerList.Remove(CADability.Attribute.Layer)">
            <summary>
            Entfernt einen Layer aus der Liste. Kein Propblem, wenn der Layer nicht in der Liste ist.
            </summary>
            <param name="LayerToRemove"></param>
        </member>
        <member name="M:CADability.Attribute.LayerList.Find(System.String)">
            <summary>
            Liefert den Layer mit dem im Parameter gegebenen Namen. 
            Liefert null, wenn kein solcher Layer in der Liste existiert.
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Attribute.LayerList.clone">
            <summary>
            Alle Layer sollen sich mit ihrer ColorDef Property auf ColorDef Objekte
            aus der im Parameter gegebenen Liste beziehen. Die Liste wird ggf. erweitert.
            </summary>
            <param name="ct">Die Liste der benannten Farben</param>
        </member>
        <member name="M:CADability.Attribute.LayerList.GetDefault">
            <summary>
            Liefert eine LayerList aus der StringResource. Wird ben√∂tigt, wenn keine
            globale LayerListe gegeben ist.
            </summary>
            <returns>Die Default LayerList</returns>
        </member>
        <member name="M:CADability.Attribute.LayerList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Attribute.LayerList.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="P:CADability.Attribute.LayerList.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.Attribute.LayerList.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.Attribute.LayerList.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="T:CADability.Attribute.CheckedLayerList">
            <summary>
            A collapsable treeview entry for the ControlCenter that presents to the user all layers of the
            provided list with a checkbox next to each layer. The titel of the entry is specified by
            the provided resourceId. 
            </summary>
        </member>
        <member name="M:CADability.Attribute.CheckedLayerList.#ctor(CADability.Attribute.LayerList,CADability.Attribute.Layer[],System.String)">
            <summary>
            Creates a new <see cref="!:CheckedLayerlist"/> with the provided layer list and a set of
            initially checked layers
            </summary>
            <param name="layerList">List of all layers to display</param>
            <param name="checkedLayers">Subset of the layerlist that is to be checked initially</param>
            <param name="resourceId">Resource id for the title of the Controlcenter entry</param>
        </member>
        <member name="P:CADability.Attribute.CheckedLayerList.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.Attribute.CheckedLayerList.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="P:CADability.Attribute.CheckedLayerList.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.Attribute.CheckedLayerList.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.Attribute.CheckedLayerList.OnCommand(System.String)">
            <summary>
            Implements <see cref="M:CADability.UserInterface.ICommandHandler.OnCommand(System.String)"/>
            </summary>
            <param name="MenuId"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Attribute.CheckedLayerList.OnUpdateCommand(System.String,CADability.UserInterface.CommandState)">
            <summary>
            Implements <see cref="M:CADability.UserInterface.ICommandHandler.OnUpdateCommand(System.String,CADability.UserInterface.CommandState)"/>
            </summary>
            <param name="MenuId"></param>
            <param name="CommandState"></param>
            <returns></returns>
        </member>
        <member name="P:CADability.Attribute.CheckedLayerList.Checked">
            <summary>
            Returns all checked Layers
            </summary>
        </member>
        <member name="T:CADability.Attribute.CheckedLayerList.CheckStateChangedDelegate">
            <summary>
            Delegate definition for the <see cref="E:CADability.Attribute.CheckedLayerList.CheckStateChangedEvent"/>, which is called when the user 
            changes the checkbox next to a layer
            </summary>
            <param name="layer">Layer which is changed</param>
            <param name="isChecked">New value of the checked attribute</param>
        </member>
        <member name="E:CADability.Attribute.CheckedLayerList.CheckStateChangedEvent">
            <summary>
            Event that gets called when the user changes the checbox next to a layer.
            </summary>
        </member>
        <member name="T:CADability.Attribute.LinePattern">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Attribute.LinePattern.Scaling">
            <summary>
            Scaling system of the line pattern. 
            <list type="bullet">
            <item><term>Device</term>
            <description>Pattern specifies the number of pixel, zoom independant</description>
            </item>
            <item><term>World</term>
            <description>Pattern specifies the pattern of the line in the world coordinate system</description>
            </item>
            <item><term>Layout</term>
            <description>Pattern specifies the pattern of the line in the layout system (mm on the paper when printed)</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:CADability.Attribute.LinePattern.#ctor">
            <summary>
            Creates an empty and unnamed LinePattern
            </summary>
        </member>
        <member name="M:CADability.Attribute.LinePattern.Clone">
            <summary>
            Returns a clone of this LinePattern
            </summary>
            <returns></returns>
        </member>
        <member name="P:CADability.Attribute.LinePattern.Scale">
            <summary>
            Gets or sets the <see cref="T:CADability.Attribute.LinePattern.Scaling"/> of this LinePattern.
            </summary>
        </member>
        <member name="P:CADability.Attribute.LinePattern.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.SimpleEntry"/>.
            </summary>
        </member>
        <member name="P:CADability.Attribute.LinePattern.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="M:CADability.Attribute.LinePattern.LabelChanged(System.String)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.LabelChanged(System.String)"/>
            </summary>
            <param name="NewText"></param>
        </member>
        <member name="P:CADability.Attribute.LinePattern.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.Attribute.LinePattern.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.Attribute.LinePattern.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Attribute.LinePattern.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.Attribute.LinePatternList">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.Attribute.LinePatternList.#ctor">
            <summary>
            Constructs an empty LinePatternList. Usually you dont have to construct a LinePatternList
            since on construction of a new <see cref="T:CADability.Project"/> the global LinePatternList is
            cloned and set as the projects LinePatternList.
            </summary>
        </member>
        <member name="M:CADability.Attribute.LinePatternList.Add(CADability.Attribute.LinePattern)">
            <summary>
            Adds an LinePattern object to the list. Throws a <see cref="T:CADability.NameAlreadyExistsException"/>
            if there is a LinePattern with the given name in the list. This also prevents the same
            object added twice to the list.
            </summary>
            <param name="linePatternToAdd">LinePattern to Add</param>
        </member>
        <member name="M:CADability.Attribute.LinePatternList.Remove(CADability.Attribute.LinePattern)">
            <summary>
            Removes an entry from the LinePattern list. Depending on the context and global settings
            there might be a warning if the LinePattern is beeing used by an IGeoObject belonging to the 
            Project. If the LinePattern is not in the list, nothing happens.
            </summary>
            <param name="linePatternToRemove">LinePattern to remove</param>
        </member>
        <member name="P:CADability.Attribute.LinePatternList.Current">
            <summary>
            Gets or sets the current LinePattern. The current LinePattern is used when a new
            GeoObject is constructed interactively.
            </summary>
        </member>
        <member name="M:CADability.Attribute.LinePatternList.Find(System.String)">
            <summary>
            Returns the <see cref="T:CADability.Attribute.LinePattern"/> with the given name or null if not found.
            </summary>
            <param name="name">Name of the requsetd LinePattern</param>
            <returns></returns>
        </member>
        <member name="M:CADability.Attribute.LinePatternList.FindIndex(CADability.Attribute.LinePattern)">
            <summary>
            Returns the index of the given line pattern or -1 if not in the list
            </summary>
            <param name="lp">line pattern whos index is required</param>
            <returns>the index found or -1 if not found</returns>
        </member>
        <member name="P:CADability.Attribute.LinePatternList.Item(System.Int32)">
            <summary>
            Returns the line pattern with the given index.
            </summary>
            <param name="Index">index of required laine pattern</param>
            <returns>line pattern</returns>
        </member>
        <member name="M:CADability.Attribute.LinePatternList.GetDefault">
            <summary>
            Creates a default LinePatternList.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Attribute.LinePatternList.Clone">
            <summary>
            Returns a copy of this LinePatternList. The entries are cloned so the copy is independant.
            </summary>
            <returns></returns>
        </member>
        <member name="E:CADability.Attribute.LinePatternList.RemovingFromListEvent">
            <summary>
            Provide a handler here to be notified when when a line pattern is beeing removed from this list.
            </summary>
        </member>
        <member name="P:CADability.Attribute.LinePatternList.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.Attribute.LinePatternList.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="P:CADability.Attribute.LinePatternList.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.Attribute.LinePatternList.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.Attribute.LinePatternList.Count">
            <summary>
            Gets the number of entities in this list.
            </summary>
        </member>
        <member name="M:CADability.Attribute.LinePatternList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="T:CADability.Attribute.LineWidth">
            <summary>
            Describes a line width. The "onedimensional" GeoObjects (e.g. <see cref="T:CADability.GeoObject.Line"/>, <see cref="T:CADability.GeoObject.Ellipse"/>,
            <see cref="T:CADability.GeoObject.BSpline"/>) have a line with as an attribute. The main propertie of the line width
            are the width and the scaling system (<see cref="T:CADability.Attribute.LineWidth.Scaling"/>), which defines how to interpret the width.
            
            </summary>
        </member>
        <member name="T:CADability.Attribute.LineWidth.Scaling">
            <summary>
            Scaling system of the line width. 
            <list type="bullet">
            <item><term>Device</term>
            <description>Width specifies the number of pixel, zoom independant</description>
            </item>
            <item><term>World</term>
            <description>Width specifies the width of the line in the world coordinate system</description>
            </item>
            <item><term>Layout</term>
            <description>Width specifies the width of the line in the layout system (mm on the paper when printed)</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:CADability.Attribute.LineWidth.#ctor">
            <summary>
            Creates an empty and unnamed LineWidth
            </summary>
        </member>
        <member name="M:CADability.Attribute.LineWidth.Clone">
            <summary>
            Returns a clone of this LineWidth
            </summary>
            <returns></returns>
        </member>
        <member name="P:CADability.Attribute.LineWidth.Width">
            <summary>
            Gets or sets the line width of  this object.
            </summary>
        </member>
        <member name="P:CADability.Attribute.LineWidth.Scale">
            <summary>
            Gets or sets the <see cref="T:CADability.Attribute.LineWidth.Scaling"/> of this LineWidth.
            </summary>
        </member>
        <member name="P:CADability.Attribute.LineWidth.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.SimpleEntry"/>.
            </summary>
        </member>
        <member name="P:CADability.Attribute.LineWidth.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="M:CADability.Attribute.LineWidth.LabelChanged(System.String)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.LabelChanged(System.String)"/>
            </summary>
            <param name="NewText"></param>
        </member>
        <member name="P:CADability.Attribute.LineWidth.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.Attribute.LineWidth.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Attribute.LineWidth.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.Attribute.LineWidthList">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.Attribute.LineWidthList.#ctor">
            <summary>
            Constructs an empty LineWidthList. Usually you dont have to construct a LineWidthList
            since on construction of a new <see cref="T:CADability.Project"/> the global LineWidthList is
            cloned and set as the projects LineWidthList.
            </summary>
        </member>
        <member name="M:CADability.Attribute.LineWidthList.Add(CADability.Attribute.LineWidth)">
            <summary>
            Adds an LineWidth object to the list. Throws a <see cref="T:CADability.NameAlreadyExistsException"/>
            if there is a LineWidth with the given name in the list. This also prevents the same
            object added twice to the list.
            </summary>
            <param name="lineWidthToAdd">LineWidth to Add</param>
        </member>
        <member name="M:CADability.Attribute.LineWidthList.Remove(CADability.Attribute.LineWidth)">
            <summary>
            Removes an entry from the LineWidth list. Depending on the context and global settings
            there might be a warning if the LineWidth is beeing used by an IGeoObject belonging to the 
            Project. If the LineWidth is not in the list, nothing happens.
            </summary>
            <param name="lineWidthToRemove">LineWidth to remove</param>
        </member>
        <member name="P:CADability.Attribute.LineWidthList.Current">
            <summary>
            Gets or sets the current LineWidth. The current LineWidth is used when a new
            GeoObject is constructed interactively.
            </summary>
        </member>
        <member name="M:CADability.Attribute.LineWidthList.Find(System.String)">
            <summary>
            Returns the <see cref="T:CADability.Attribute.LineWidth"/> with the given name or null if not found.
            </summary>
            <param name="name">Name of the requsetd LineWidth</param>
            <returns></returns>
        </member>
        <member name="M:CADability.Attribute.LineWidthList.FindIndex(CADability.Attribute.LineWidth)">
            <summary>
            Returns the index of the given linewidth in this list
            </summary>
            <param name="lw">linewidth for which the index is requested</param>
            <returns>the index found or -1 if this list does not contain lw</returns>
        </member>
        <member name="P:CADability.Attribute.LineWidthList.Item(System.Int32)">
            <summary>
            Gets the LineWidth with the given index.
            </summary>
        </member>
        <member name="M:CADability.Attribute.LineWidthList.GetDefault">
            <summary>
            Creates a default LineWidthList.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Attribute.LineWidthList.Clone">
            <summary>
            Returns a copy of this LineWidthList. The entries are cloned so the copy is independant.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CADability.Attribute.LineWidthList.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.Attribute.LineWidthList.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="M:CADability.Attribute.LineWidthList.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="P:CADability.Attribute.LineWidthList.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.Attribute.LineWidthList.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.Attribute.LineWidthList.Count">
            <summary>
            Gets the number of entities in this list.
            </summary>
        </member>
        <member name="M:CADability.Attribute.LineWidthList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Attribute.LineWidthList.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.Attribute.IStyle">
            <summary>
            Interface to be implemented by objects that have a (changable) Style property
            </summary>
        </member>
        <member name="P:CADability.Attribute.IStyle.Style">
            <summary>
            The Style property
            </summary>
        </member>
        <member name="T:CADability.Attribute.Style">
            <summary>
            A Style is a collection of several attributes like <see cref="P:CADability.Attribute.Style.Layer"/>, <see cref="P:CADability.Attribute.Style.LineWidth"/>
            that can be collectively set to an GeoObject.
            </summary>
        </member>
        <member name="T:CADability.Attribute.Style.EDefaultFor">
            <summary>
            Category of objects to provide different default styles
            </summary>
        </member>
        <member name="M:CADability.Attribute.Style.GetDefault">
            <summary>
            Returns a default (empty) Style. Use this function if you need a Style
            and dont have access to a <see cref="T:CADability.Attribute.StyleList"/>.
            </summary>
            <returns>The default Stalye</returns>
        </member>
        <member name="M:CADability.Attribute.Style.Apply(CADability.GeoObject.IGeoObject)">
            <summary>
            Applies this style to the given GeoObject. Since the style knows better about the different
            kinds of interfaces and attributes, this is implemented in the Style class not in IGeoObjectImpl.
            </summary>
            <param name="go">the GeoObject which is to be modified</param>
        </member>
        <member name="M:CADability.Attribute.Style.Check(CADability.GeoObject.IGeoObject)">
            <summary>
            Checks whether the given GeoObject accords to this style
            </summary>
            <param name="go">the GeoObject to check</param>
            <returns>true, if all attributes are the same as given in the style</returns>
        </member>
        <member name="P:CADability.Attribute.Style.Name">
            <summary>
            The name of the Style. Different Styles in the same list must have different names.
            </summary>
        </member>
        <member name="P:CADability.Attribute.Style.Parent">
            <summary>
            The <see cref="T:CADability.Attribute.StyleList"/> that contains this Style. May be null.
            </summary>
        </member>
        <member name="P:CADability.Attribute.Style.LabelText">
            <summary>
            Implements <see cref="P:CADability.UserInterface.IShowProperty.LabelText"/>.
            </summary>
        </member>
        <member name="P:CADability.Attribute.Style.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="P:CADability.Attribute.Style.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.Attribute.Style.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.Attribute.Style.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.Attribute.Style.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="M:CADability.Attribute.Style.Removed(CADability.UserInterface.IPropertyTreeView)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Removed(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView">the IPropertyTreeView from which it was removed</param>
        </member>
        <member name="M:CADability.Attribute.Style.LabelChanged(System.String)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.LabelChanged(System.String)"/>
            </summary>
            <param name="NewText"></param>
        </member>
        <member name="M:CADability.Attribute.Style.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Attribute.Style.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="M:CADability.Attribute.StyleSelectionProperty.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="M:CADability.Attribute.StyleSelectionProperty.Removed(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Removed(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView">the IPropertyTreeView from which it was removed</param>
        </member>
        <member name="M:CADability.Attribute.StyleList.Find(System.String)">
            <summary>
            Implements <see cref="M:CADability.Attribute.IAttributeList.Find(System.String)"/>
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Attribute.StyleList.Clone">
            <summary>
            Implements <see cref="M:CADability.Attribute.IAttributeList.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:CADability.Attribute.StyleList.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.Attribute.StyleList.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.Attribute.StyleList.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.Attribute.StyleList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Attribute.StyleList.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.LinearAlgebra.BandedRow">
            <summary>
            This Class stores rows of a band matrix. The data are save 
            in an array. But according to the size, upper and lower band 
            the first and last indexes are calculated and return if need. 
            </summary>
        </member>
        <member name="T:CADability.LinearAlgebra.CholeskyDecomposition">
            <summary>Cholesky Decomposition.</summary>
            <remarks>
            For a symmetric, positive definite matrix A, the Cholesky decomposition
            is an lower triangular matrix L so that A = L*L'.
            If the matrix is not symmetric or positive definite, the constructor
            returns a partial decomposition and sets an internal flag that may
            be queried by the <see cref="P:CADability.LinearAlgebra.CholeskyDecomposition.IsSPD"/> property.
            </remarks>
        </member>
        <member name="F:CADability.LinearAlgebra.CholeskyDecomposition.L">
            <summary>Array for internal storage of decomposition.</summary>
        </member>
        <member name="P:CADability.LinearAlgebra.CholeskyDecomposition.n">
            <summary>Row and column dimension (square matrix).</summary>
        </member>
        <member name="F:CADability.LinearAlgebra.CholeskyDecomposition.isspd">
            <summary>Symmetric and positive definite flag.</summary>
        </member>
        <member name="M:CADability.LinearAlgebra.CholeskyDecomposition.#ctor(CADability.LinearAlgebra.Matrix)">
            <summary>Cholesky algorithm for symmetric and positive definite matrix.</summary>
            <param name="Arg">Square, symmetric matrix.</param>
            <returns>Structure to access L and isspd flag.</returns>
        </member>
        <member name="P:CADability.LinearAlgebra.CholeskyDecomposition.IsSPD">
            <summary>Is the matrix symmetric and positive definite?</summary>
            <returns><c>true</c> if A is symmetric and positive definite.</returns>
        </member>
        <member name="M:CADability.LinearAlgebra.CholeskyDecomposition.GetL">
            <summary>Return triangular factor.</summary>
            <returns>L</returns>
        </member>
        <member name="M:CADability.LinearAlgebra.CholeskyDecomposition.Solve(CADability.LinearAlgebra.Matrix)">
            <summary>Solve A*X = B</summary>
            <param name="B">  A Matrix with as many rows as A and any number of columns.</param>
            <returns>X so that L*L'*X = B</returns>
            <exception cref="T:System.ArgumentException">Matrix row dimensions must agree.</exception>
            <exception cref="T:System.ApplicationException">Matrix is not symmetric positive definite.</exception>
        </member>
        <member name="T:CADability.LinearAlgebra.EigenvalueDecomposition">
            <summary>Eigenvalues and eigenvectors of a real matrix.</summary>
            <remarks>
            If A is symmetric, then A = V*D*V' where the eigenvalue matrix D is
            diagonal and the eigenvector matrix V is orthogonal.
            I.e. A = V.Multiply(D.Multiply(V.Transpose())) and 
            V.Multiply(V.Transpose()) equals the identity matrix.
            If A is not symmetric, then the eigenvalue matrix D is block diagonal
            with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
            lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The
            columns of V represent the eigenvectors in the sense that A*V = V*D,
            i.e. A.Multiply(V) equals V.Multiply(D).  The matrix V may be badly
            conditioned, or even singular, so the validity of the equation
            A = V*D*Inverse(V) depends upon V.cond().
            </remarks>
        </member>
        <member name="F:CADability.LinearAlgebra.EigenvalueDecomposition.n">
            <summary>Row and column dimension (square matrix).</summary>
        </member>
        <member name="F:CADability.LinearAlgebra.EigenvalueDecomposition.issymmetric">
            <summary>Symmetry flag.</summary>
        </member>
        <member name="F:CADability.LinearAlgebra.EigenvalueDecomposition.d">
            <summary>Arrays for internal storage of eigenvalues.</summary>
        </member>
        <member name="F:CADability.LinearAlgebra.EigenvalueDecomposition.e">
            <summary>Arrays for internal storage of eigenvalues.</summary>
        </member>
        <member name="F:CADability.LinearAlgebra.EigenvalueDecomposition.V">
            <summary>Array for internal storage of eigenvectors.</summary>
        </member>
        <member name="F:CADability.LinearAlgebra.EigenvalueDecomposition.H">
            <summary>Array for internal storage of nonsymmetric Hessenberg form.</summary>
        </member>
        <member name="F:CADability.LinearAlgebra.EigenvalueDecomposition.ort">
            <summary>Working storage for nonsymmetric algorithm.</summary>
        </member>
        <member name="M:CADability.LinearAlgebra.EigenvalueDecomposition.#ctor(CADability.LinearAlgebra.Matrix)">
            <summary>Check for symmetry, then construct the eigenvalue decomposition</summary>
            <remarks>Provides access to D and V</remarks>
            <param name="Arg">Square matrix</param>
        </member>
        <member name="M:CADability.LinearAlgebra.EigenvalueDecomposition.#ctor(System.Double[],System.Double[])">
            <summary>Constructs the eigenvalue decomposition from a symmetrical, 
            tridiagonal matrix.</summary>
        </member>
        <member name="P:CADability.LinearAlgebra.EigenvalueDecomposition.EigenValues">
            <summary>Gets the eigenvalues.</summary>
            <returns>diag(D)</returns>
        </member>
        <member name="P:CADability.LinearAlgebra.EigenvalueDecomposition.RealEigenvalues">
            <summary>Gets the real part of the eigenvalues.</summary>
            <returns>real(diag(D))</returns>
        </member>
        <member name="P:CADability.LinearAlgebra.EigenvalueDecomposition.ImagEigenvalues">
            <summary>Gets the imaginary part of the eigenvalues</summary>
            <returns>imag(diag(D))</returns>
        </member>
        <member name="P:CADability.LinearAlgebra.EigenvalueDecomposition.BlockDiagonal">
            <summary>Gets the block diagonal eigenvalue matrix</summary>
        </member>
        <member name="P:CADability.LinearAlgebra.EigenvalueDecomposition.EigenVectors">
            <summary>Returns the eigenvector matrix</summary>
        </member>
        <member name="T:CADability.LinearAlgebra.LUDecomposition">
            <summary>LU Decomposition.</summary>
            <remarks>
            For an m-by-n matrix A with m >= n, the LU decomposition is an m-by-n
            unit lower triangular matrix L, an n-by-n upper triangular matrix U,
            and a permutation vector piv of length m so that A(piv,:) = L*U.
            <c> If m &lt; n, then L is m-by-m and U is m-by-n. </c>
            The LU decompostion with pivoting always exists, even if the matrix is
            singular, so the constructor will never fail.  The primary use of the
            LU decomposition is in the solution of square systems of simultaneous
            linear equations.  This will fail if IsNonSingular() returns false.
            </remarks>
        </member>
        <member name="F:CADability.LinearAlgebra.LUDecomposition.LU">
            <summary>Array for internal storage of decomposition.</summary>
        </member>
        <member name="P:CADability.LinearAlgebra.LUDecomposition.m">
            <summary>Row dimensions.</summary>
        </member>
        <member name="P:CADability.LinearAlgebra.LUDecomposition.n">
            <summary>Column dimensions.</summary>
        </member>
        <member name="F:CADability.LinearAlgebra.LUDecomposition.pivsign">
            <summary>Pivot sign.</summary>
        </member>
        <member name="F:CADability.LinearAlgebra.LUDecomposition.piv">
            <summary>Internal storage of pivot vector.</summary>
        </member>
        <member name="M:CADability.LinearAlgebra.LUDecomposition.#ctor(CADability.LinearAlgebra.Matrix)">
            <summary>LU Decomposition</summary>
            <param name="A">  Rectangular matrix
            </param>
            <returns>     Structure to access L, U and piv.
            </returns>
        </member>
        <member name="P:CADability.LinearAlgebra.LUDecomposition.IsNonSingular">
            <summary>Indicates whether the matrix is nonsingular.</summary>
            <returns><c>true</c> if U, and hence A, is nonsingular.</returns>
        </member>
        <member name="P:CADability.LinearAlgebra.LUDecomposition.L">
            <summary>Gets lower triangular factor.</summary>
        </member>
        <member name="P:CADability.LinearAlgebra.LUDecomposition.U">
            <summary>Gets upper triangular factor.</summary>
        </member>
        <member name="P:CADability.LinearAlgebra.LUDecomposition.Pivot">
            <summary>Gets pivot permutation vector</summary>
        </member>
        <member name="P:CADability.LinearAlgebra.LUDecomposition.DoublePivot">
            <summary>Returns pivot permutation vector as a one-dimensional double array.</summary>
        </member>
        <member name="M:CADability.LinearAlgebra.LUDecomposition.Determinant">
            <summary>Determinant</summary>
            <returns>det(A)</returns>
            <exception cref="T:System.ArgumentException">Matrix must be square</exception>
        </member>
        <member name="M:CADability.LinearAlgebra.LUDecomposition.Solve(CADability.LinearAlgebra.Matrix)">
            <summary>Solve A*X = B</summary>
            <param name="B">A Matrix with as many rows as A and any number of columns.</param>
            <returns>X so that L*U*X = B(piv,:)</returns>
            <exception cref="T:System.ArgumentException">Matrix row dimensions must agree.</exception>
            <exception cref="T:System.ApplicationException">Matrix is singular.</exception>
        </member>
        <member name="M:CADability.LinearAlgebra.Maths.Hypot(System.Double,System.Double)">
            <summary>sqrt(a^2 + b^2) without under/overflow.</summary>
        </member>
        <member name="T:CADability.LinearAlgebra.Matrix">
            <summary>Real matrix. Adapted from "MathNet Numerics", (c) Joannes Vermorel, http://www.vermorel.com</summary>
            <remarks>
            The class <c>Matrix</c> provides the elementary operations
            on matrices (addition, multiplication, inversion, transposition, ...).
            Helpers to handle sub-matrices are also provided.
            </remarks>
        </member>
        <member name="F:CADability.LinearAlgebra.Matrix.A">
            <summary>Array for internal storage of elements.</summary>
        </member>
        <member name="P:CADability.LinearAlgebra.Matrix.rowCount">
            <summary>Row dimension.</summary>
            <seealso cref="P:CADability.LinearAlgebra.Matrix.RowCount"/>
        </member>
        <member name="P:CADability.LinearAlgebra.Matrix.columnCount">
            <summary>Column dimension.</summary>
            <seealso cref="P:CADability.LinearAlgebra.Matrix.ColumnCount"/>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>Construct an m-by-n matrix of zeros. </summary>
            <param name="m">Number of rows.</param>
            <param name="n">Number of colums.</param>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>Construct an m-by-n constant matrix.</summary>
            <param name="m">Number of rows.</param>
            <param name="n">Number of colums.</param>
            <param name="s">Fill the matrix with this scalar value.</param>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.#ctor(System.Double[0:,0:])">
            <summary>Constructs a matrix from a 2-D array.</summary>
            <param name="A">Two-dimensional array of doubles.</param>
            <exception cref="T:System.ArgumentException">All rows must have the same length.</exception>
            <seealso cref="M:CADability.LinearAlgebra.Matrix.Create(System.Double[0:,0:])"/>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.#ctor(System.Double[],System.Int32)">
            <summary>Construct a matrix from a one-dimensional packed array</summary>
            <param name="vals">One-dimensional array of doubles, packed by columns (ala Fortran).</param>
            <param name="m">Number of rows.</param>
            <exception cref="T:System.ArgumentException">Array length must be a multiple of m.</exception>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.Create(System.Double[0:,0:])">
            <summary>Constructs a matrix from a copy of a 2-D array.</summary>
            <param name="A">Two-dimensional array of doubles.</param>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.Identity(System.Int32,System.Int32)">
            <summary>Generates identity matrix</summary>
            <param name="m">Number of rows.</param>
            <param name="n">Number of colums.</param>
            <returns>An m-by-n matrix with ones on the diagonal and zeros elsewhere.</returns>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.Random(System.Int32,System.Int32)">
            <summary>Generates matrix with random elements</summary>
            <param name="m">Number of rows.</param>
            <param name="n">Number of colums.</param>
            <returns>An m-by-n matrix with uniformly distributed
            random elements in <c>[0, 1)</c> interval.</returns>
        </member>
        <member name="P:CADability.LinearAlgebra.Matrix.RowCount">
            <summary>Gets the number of rows.</summary>
        </member>
        <member name="P:CADability.LinearAlgebra.Matrix.ColumnCount">
            <summary>Gets the number of columns.</summary>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.GetMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Gets a submatrix.</summary>
            <param name="i0">Initial row index.</param>
            <param name="i1">Final row index.</param>
            <param name="j0">Initial column index.</param>
            <param name="j1">Final column index.</param>
            <returns>A(i0:i1,j0:j1)</returns>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices</exception>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.GetMatrix(System.Int32[],System.Int32[])">
            <summary>Gets a submatrix.</summary>
            <param name="r">Array of row indices.</param>
            <param name="c">Array of column indices.</param>
            <returns>A(r(:),c(:))</returns>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.GetMatrix(System.Int32,System.Int32,System.Int32[])">
            <summary>Get a submatrix.</summary>
            <param name="i0">Initial row index.</param>
            <param name="i1">Final row index.</param>
            <param name="c">Array of column indices.</param>
            <returns>A(i0:i1,c(:))</returns>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.GetMatrix(System.Int32[],System.Int32,System.Int32)">
            <summary>Get a submatrix.</summary>
            <param name="r">Array of row indices.</param>
            <param name="j0">Initial column index.</param>
            <param name="j1">Final column index.</param>
            <returns>A(r(:),j0:j1)</returns>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.SetMatrix(System.Int32,System.Int32,System.Int32,System.Int32,CADability.LinearAlgebra.Matrix)">
            <summary>Set a submatrix.</summary>
            <param name="i0">Initial row index.</param>
            <param name="i1">Final row index.</param>
            <param name="j0">Initial column index.</param>
            <param name="j1">Final column index.</param>
            <param name="X">A(i0:i1,j0:j1)</param>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.SetMatrix(System.Int32[],System.Int32[],CADability.LinearAlgebra.Matrix)">
            <summary>Sets a submatrix.</summary>
            <param name="r">Array of row indices.</param>
            <param name="c">Array of column indices.</param>
            <param name="X">A(r(:),c(:))</param>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices</exception>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.SetMatrix(System.Int32[],System.Int32,System.Int32,CADability.LinearAlgebra.Matrix)">
            <summary>Sets a submatrix.</summary>
            <param name="r">Array of row indices.</param>
            <param name="j0">Initial column index.</param>
            <param name="j1">Final column index.</param>
            <param name="X">A(r(:),j0:j1)</param>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices</exception>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.SetMatrix(System.Int32,System.Int32,System.Int32[],CADability.LinearAlgebra.Matrix)">
            <summary>Set a submatrix.</summary>
            <param name="i0">Initial row index.</param>
            <param name="i1">Final row index.</param>
            <param name="c">Array of column indices.</param>
            <param name="X">A(i0:i1,c(:))</param>
            <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.Norm1">
            <summary>One norm</summary>
            <returns>Maximum column sum.</returns>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.Norm2">
            <summary>Two norm</summary>
            <returns>Maximum singular value.</returns>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.NormInf">
            <summary>Infinity norm</summary>
            <returns>Maximum row sum.</returns>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.NormF">
            <summary>Frobenius norm</summary>
            <returns>Sqrt of sum of squares of all elements.</returns>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.Add(CADability.LinearAlgebra.Matrix)">
            <summary>In place addition of <c>m</c> to this <c>Matrix</c>.</summary>
            <seealso cref="M:CADability.LinearAlgebra.Matrix.op_Addition(CADability.LinearAlgebra.Matrix,CADability.LinearAlgebra.Matrix)"/>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.Multiply(System.Double)">
            <summary>Multiplies in place this <c>Matrix</c> by a scalar.</summary>
            <seealso cref="M:CADability.LinearAlgebra.Matrix.op_Multiply(System.Double,CADability.LinearAlgebra.Matrix)"/>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.Subtract(CADability.LinearAlgebra.Matrix)">
            <summary>In place substraction of <c>m</c> to this <c>Matrix</c>.</summary>
            <seealso cref="M:CADability.LinearAlgebra.Matrix.op_Subtraction(CADability.LinearAlgebra.Matrix,CADability.LinearAlgebra.Matrix)"/>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.Transpose">
            <summary>In place transposition of this <c>Matrix</c>.</summary>
            <seealso cref="M:CADability.LinearAlgebra.Matrix.Transpose(CADability.LinearAlgebra.Matrix)"/>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.Transpose(CADability.LinearAlgebra.Matrix)">
            <summary>Gets the transposition of the provided <c>Matrix</c>.</summary>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.UnaryMinus">
            <summary>In place unary minus of the <c>Matrix</c>.</summary>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.ArrayMultiply(CADability.LinearAlgebra.Matrix)">
            <summary>In place element-by-element multiplication.</summary>
            <remarks>This instance and <c>m</c> must have the same dimensions.</remarks>
            <seealso cref="M:CADability.LinearAlgebra.Matrix.ArrayMultiply(CADability.LinearAlgebra.Matrix,CADability.LinearAlgebra.Matrix)"/>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.ArrayMultiply(CADability.LinearAlgebra.Matrix,CADability.LinearAlgebra.Matrix)">
            <summary>Element-by-element multiplication.</summary>
            <remarks><c>m1</c> and <c>m2</c> must have the same dimensions.</remarks>
            <seealso cref="M:CADability.LinearAlgebra.Matrix.ArrayMultiply(CADability.LinearAlgebra.Matrix)"/>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.ArrayDivide(CADability.LinearAlgebra.Matrix)">
            <summary>In place element-by-element right division, <c>A ./= B</c>.</summary>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.ArrayDivide(CADability.LinearAlgebra.Matrix,CADability.LinearAlgebra.Matrix)">
            <summary>Element-by-element right division, <c>C = A./B</c>.</summary>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.LUD">
            <summary>LU Decomposition</summary>
            <seealso cref="T:CADability.LinearAlgebra.LUDecomposition"/>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.QRD">
            <summary>QR Decomposition</summary>
            <returns>QRDecomposition</returns>
            <seealso cref="T:CADability.LinearAlgebra.QRDecomposition"/>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.chol">
            <summary>Cholesky Decomposition</summary>
            <seealso cref="T:CADability.LinearAlgebra.CholeskyDecomposition"/>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.SVD">
            <summary>Singular Value Decomposition</summary>
            <seealso cref="T:CADability.LinearAlgebra.SingularValueDecomposition"/>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.Eigen">
            <summary>Eigenvalue Decomposition</summary>
            <seealso cref="T:CADability.LinearAlgebra.EigenvalueDecomposition"/>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.Solve(CADability.LinearAlgebra.Matrix)">
            <summary>Solve A*X = B</summary>
            <param name="B">right hand side</param>
            <returns>solution if A is square, least squares solution otherwise.</returns>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.SolveTranspose(CADability.LinearAlgebra.Matrix)">
            <summary>Solve X*A = B, which is also A'*X' = B'</summary>
            <param name="B">right hand side</param>
            <returns>solution if A is square, least squares solution otherwise.</returns>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.Inverse">
            <summary>Matrix inverse or pseudoinverse.</summary>
            <returns> inverse(A) if A is square, pseudoinverse otherwise.</returns>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.Determinant">
            <summary>Matrix determinant</summary>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.Rank">
            <summary>Matrix rank</summary>
            <returns>effective numerical rank, obtained from SVD.</returns>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.Condition">
            <summary>Matrix condition (2 norm)</summary>
            <returns>ratio of largest to smallest singular value.</returns>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.Trace">
            <summary>Matrix trace.</summary>
            <returns>sum of the diagonal elements.</returns>
        </member>
        <member name="P:CADability.LinearAlgebra.Matrix.Item(System.Int32,System.Int32)">
            <summary>Gets or set the element indexed by <c>(i, j)</c>
            in the <c>Matrix</c>.</summary>
            <param name="i">Row index.</param>
            <param name="j">Column index.</param>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.op_Addition(CADability.LinearAlgebra.Matrix,CADability.LinearAlgebra.Matrix)">
            <summary>Addition of matrices</summary>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.op_Subtraction(CADability.LinearAlgebra.Matrix,CADability.LinearAlgebra.Matrix)">
            <summary>Subtraction of matrices</summary>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.op_Multiply(CADability.LinearAlgebra.Matrix,CADability.LinearAlgebra.Matrix)">
            <summary>Linear algebraic matrix multiplication.</summary>
            <exception cref="T:System.ArgumentException">Matrix inner dimensions must agree.</exception>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.op_Multiply(System.Double,CADability.LinearAlgebra.Matrix)">
            <summary>Multiplication of a matrix by a scalar, C = s*A</summary>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.op_Implicit(CADability.LinearAlgebra.Matrix)~System.Double[0:,0:]">
            <summary>Implicit convertion to a <c>double[,]</c> array.</summary>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.op_Explicit(CADability.LinearAlgebra.Matrix)~System.Double[]">
            <summary>
            Explicit convertion to a <c>double[]</c> array of a single column matrix.
            </summary>
            <param name="m">Exactly one column expected.</param>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.CheckMatrixDimensions(CADability.LinearAlgebra.Matrix)">
            <summary>Check if size(A) == size(B) *</summary>
        </member>
        <member name="M:CADability.LinearAlgebra.Matrix.Clone">
            <summary>Returns a deep copy of this instance.</summary>
        </member>
        <member name="T:CADability.LinearAlgebra.QRDecomposition">
            <summary>QR Decomposition.</summary>
            <remarks>
            For an m-by-n matrix A with m >= n, the QR decomposition is an m-by-n
            orthogonal matrix Q and an n-by-n upper triangular matrix R so that
            A = Q*R.<br/>
            
            The QR decompostion always exists, even if the matrix does not have
            full rank, so the constructor will never fail.  The primary use of the
            QR decomposition is in the least squares solution of nonsquare systems
            of simultaneous linear equations.  This will fail if <c>IsFullRank()</c>
            returns false.
            </remarks>
        </member>
        <member name="F:CADability.LinearAlgebra.QRDecomposition.QR">
            <summary>Array for internal storage of decomposition.</summary>
        </member>
        <member name="P:CADability.LinearAlgebra.QRDecomposition.m">
            <summary>Row dimensions.</summary>
        </member>
        <member name="P:CADability.LinearAlgebra.QRDecomposition.n">
            <summary>Column dimensions.</summary>
        </member>
        <member name="F:CADability.LinearAlgebra.QRDecomposition.Rdiag">
            <summary>Array for internal storage of diagonal of R.</summary>
        </member>
        <member name="M:CADability.LinearAlgebra.QRDecomposition.#ctor(CADability.LinearAlgebra.Matrix)">
            <summary>QR Decomposition, computed by Householder reflections.</summary>
            <remarks>Provides access to R, the Householder vectors and computes Q.</remarks>
            <param name="A">Rectangular matrix</param>
        </member>
        <member name="P:CADability.LinearAlgebra.QRDecomposition.FullRank">
            <summary>Indicates whether the matrix is full rank.</summary>
            <returns><c>true</c> if R, and hence A, has full rank.</returns>
        </member>
        <member name="P:CADability.LinearAlgebra.QRDecomposition.H">
            <summary>Gets the Householder vectors.</summary>
            <returns>Lower trapezoidal matrix whose columns define the reflections.</returns>
        </member>
        <member name="P:CADability.LinearAlgebra.QRDecomposition.R">
            <summary>Gets the upper triangular factor</summary>
        </member>
        <member name="P:CADability.LinearAlgebra.QRDecomposition.Q">
            <summary>Gets the (economy-sized) orthogonal factor.</summary>
        </member>
        <member name="M:CADability.LinearAlgebra.QRDecomposition.Solve(CADability.LinearAlgebra.Matrix)">
            <summary>Least squares solution of A*X = B</summary>
            <param name="B">A Matrix with as many rows as A and any number of columns.</param>
            <returns>X that minimizes the two norm of Q*R*X-B.</returns>
            <exception cref="T:System.ArgumentException">Matrix row dimensions must agree.</exception>
            <exception cref="T:System.ApplicationException"> Matrix is rank deficient.</exception>
        </member>
        <member name="T:CADability.LinearAlgebra.SingularValueDecomposition">
             <summary>Singular Value Decomposition.</summary>
             <remarks>
             <p>For an m-by-n matrix A with m >= n, the singular value decomposition 
             is an m-by-n orthogonal matrix U, an n-by-n diagonal matrix S, and
             an n-by-n orthogonal matrix V so that A = U*S*V'.</p>
            
             <p>The singular values, sigma[k] = S[k, k], are ordered so that
             sigma[0] >= sigma[1] >= ... >= sigma[n-1].</p>
             
             <p>The singular value decompostion always exists, so the constructor will
             never fail.  The matrix condition number and the effective numerical
             rank can be computed from this decomposition.</p>
             </remarks>
        </member>
        <member name="F:CADability.LinearAlgebra.SingularValueDecomposition.U">
            <summary>Matrices for internal storage of U and V.</summary>
        </member>
        <member name="F:CADability.LinearAlgebra.SingularValueDecomposition.V">
            <summary>Matrices for internal storage of U and V.</summary>
        </member>
        <member name="F:CADability.LinearAlgebra.SingularValueDecomposition.s">
            <summary>Array for internal storage of singular values.</summary>
        </member>
        <member name="F:CADability.LinearAlgebra.SingularValueDecomposition.m">
            <summary>Row dimensions.</summary>
        </member>
        <member name="F:CADability.LinearAlgebra.SingularValueDecomposition.n">
            <summary>Column dimensions.</summary>
        </member>
        <member name="F:CADability.LinearAlgebra.SingularValueDecomposition.transpose">
            <summary>Indicates whether all the results provided by the
            method or properties should be transposed.</summary>
            <remarks>
            (vermorel) The initial implementation was assuming that
            m &gt;= n, but in fact, it is easy to handle the case m &lt; n
            by transposing all the results.
            </remarks>
        </member>
        <member name="M:CADability.LinearAlgebra.SingularValueDecomposition.#ctor(CADability.LinearAlgebra.Matrix)">
            <summary>Construct the singular value decomposition.</summary>
            <remarks>Provides access to U, S and V.</remarks>
            <param name="Arg">Rectangular matrix</param>
        </member>
        <member name="P:CADability.LinearAlgebra.SingularValueDecomposition.SingularValues">
            <summary>Gets the one-dimensional array of singular values.</summary>
            <returns>diagonal of S.</returns>
        </member>
        <member name="P:CADability.LinearAlgebra.SingularValueDecomposition.S">
            <summary>Get the diagonal matrix of singular values.</summary>
        </member>
        <member name="P:CADability.LinearAlgebra.SingularValueDecomposition.LeftSingularVectors">
            <summary>Gets the left singular vectors (U matrix).</summary>
        </member>
        <member name="P:CADability.LinearAlgebra.SingularValueDecomposition.RightSingularVectors">
            <summary>Gets the right singular vectors (V matrix).</summary>
        </member>
        <member name="M:CADability.LinearAlgebra.SingularValueDecomposition.Norm2">
            <summary>Two norm.</summary>
            <returns>max(S)</returns>
        </member>
        <member name="M:CADability.LinearAlgebra.SingularValueDecomposition.Condition">
            <summary>Two norm condition number.</summary>
            <returns>max(S)/min(S)</returns>
        </member>
        <member name="M:CADability.LinearAlgebra.SingularValueDecomposition.Rank">
            <summary>Effective numerical matrix rank.</summary>
            <returns>Number of nonnegligible singular values.</returns>
        </member>
        <member name="T:CADability.GeoObject.Picture">
            <summary>
            A bitmap as a rectangular or rhombiod face in 3D space. This object is mainly used for illustration or 
            as a background in a model. It is a GeoObject and may be part of a model. It is defined by the bitmap 
            bits and the location in space.
            </summary>
        </member>
        <member name="T:CADability.GeoObject.Picture.ConstructionDelegate">
            <summary>
            Delegate for the construction of a Picture.
            </summary>
            <returns>A Picture or Picture derived class</returns>
        </member>
        <member name="F:CADability.GeoObject.Picture.Constructor">
            <summary>
            Provide a delegate here if you want you Picture derived class to be 
            created each time CADability creates a Picture.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Picture.Construct">
            <summary>
            The only way to create a Picture. There are no public constructors for the Picture to assure
            that this is the only way to construct a Picture.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CADability.GeoObject.Picture.ConstructedDelegate">
            <summary>
            Definition of the <see cref="E:CADability.GeoObject.Picture.Constructed"/> event
            </summary>
            <param name="justConstructed">The Picture that was just constructed</param>
        </member>
        <member name="E:CADability.GeoObject.Picture.Constructed">
            <summary>
            Event beeing raised when a Picture object has been created.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Picture.Set(System.Drawing.Bitmap,CADability.GeoPoint,CADability.GeoVector,CADability.GeoVector)">
            <summary>
            Sets the Data of the Bitmap.
            </summary>
            <param name="bitmap">The bitmap to be displayed</param>
            <param name="location">Position where the lower left point of the bitmap will be displayed</param>
            <param name="directionWidth">Vector specifying the baseline of the bitmap</param>
            <param name="directionHeight">Vector specifying the left side of the bitmap</param>
        </member>
        <member name="P:CADability.GeoObject.Picture.Bitmap">
            <summary>
            The bitmap, the contents of the Picture
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Picture.Location">
            <summary>
            Position of the lower left point of the bitmap
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Picture.DirectionWidth">
            <summary>
            The location of the lower baseline of the bitmap
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Picture.DirectionHeight">
            <summary>
            The location of the left side of the bitmap
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Picture.Path">
            <summary>
            The path where the Bitmap is located. This value is not used by the Picture object and may have any content.
            Usually it is the path and filename, especially when the object is beeing generated interactively 
            by CADability's user interface. Setting the value does NOT load the specified bitmap. This must be done
            seperately by setting the <see cref="P:CADability.GeoObject.Picture.Bitmap"/> property
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Picture.Clip(CADability.Plane,CADability.Shapes.CompoundShape)">
            <summary>
            Clips the bitmap according to the provided shape and plane. The BitmapBits are replaced by
            transparent pixels, the original bits are lost. Setting another clip area doesn't restore already clipped
            pixels. (Ofcourse undo restores the original bitmap bits)
            </summary>
            <param name="plane">The plane as a reference system for the shape</param>
            <param name="shape">The shape for the clip operation</param>
        </member>
        <member name="M:CADability.GeoObject.Picture.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Modify(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.GeoObject.Picture.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Picture.CopyGeometry(CADability.GeoObject.IGeoObject)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.CopyGeometry(CADability.GeoObject.IGeoObject)"/>
            </summary>
            <param name="ToCopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.Picture.GetExtent(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Picture.GetBoundingCube">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetBoundingCube"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Picture.PaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3D(CADability.IPaintTo3D)"/>
            </summary>
            <param name="paintTo3D"></param>
        </member>
        <member name="M:CADability.GeoObject.Picture.PrePaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PrePaintTo3D(CADability.IPaintTo3D)"/>
            </summary>
            <param name="paintTo3D"></param>
        </member>
        <member name="M:CADability.GeoObject.Picture.PrepareDisplayList(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PrepareDisplayList(System.Double)"/>
            </summary>
            <param name="precision"></param>
        </member>
        <member name="M:CADability.GeoObject.Picture.PaintTo3DList(CADability.IPaintTo3D,CADability.GeoObject.ICategorizedDislayLists)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3DList(CADability.IPaintTo3D,CADability.GeoObject.ICategorizedDislayLists)"/>
            </summary>
            <param name="paintTo3D"></param>
            <param name="lists"></param>
        </member>
        <member name="M:CADability.GeoObject.Picture.GetShowProperties(CADability.IFrame)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetShowProperties(CADability.IFrame)"/>
            </summary>
            <param name="Frame"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Picture.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Picture.GetExtent(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(System.Double)"/>
            </summary>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Picture.HitTest(CADability.BoundingCube@,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.BoundingCube@,System.Double)"/>
            </summary>
            <param name="cube"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Picture.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)"/>
            </summary>
            <param name="projection"></param>
            <param name="rect"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Picture.HitTest(CADability.Projection.PickArea,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection.PickArea,System.Boolean)"/>
            </summary>
            <param name="area"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Picture.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)"/>
            </summary>
            <param name="fromHere"></param>
            <param name="direction"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ShowPropertyPicture.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="M:CADability.GeoObject.ShowPropertyPicture.Removed(CADability.UserInterface.IPropertyTreeView)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Removed(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="M:CADability.GeoObject.ShowPropertyPicture.Opened(System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Opened(System.Boolean)"/>
            </summary>
            <param name="IsOpen"></param>
        </member>
        <member name="P:CADability.GeoObject.ShowPropertyPicture.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="M:CADability.GeoObject.ShowPropertyPicture.ReloadProperties">
            <summary>
            Implements <see cref="M:CADability.IDisplayHotSpots.ReloadProperties"/>
            </summary>
        </member>
        <member name="T:CADability.GeoObject.Block">
            <summary>
            Ein Block als geometrisches Objekt. Der Block besitzt seine Kinder. Beim Clonen
            werden Kopien der Kinder erzeugt.
            A collection of several <see cref="T:CADability.GeoObject.IGeoObject"/>s 
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Block.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Modify(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.GeoObject.Block.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Clone"/>. Returns a new Block, that contains clones of the
            children of this Block. An <see cref="T:CADability.GeoObject.IGeoObject"/> cannot be contained by two different block 
            objects, because there may be only one owner (see also <see cref="P:CADability.GeoObject.IGeoObject.Owner"/>).
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Block.Child(System.Int32)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Child(System.Int32)"/>
            </summary>
            <param name="Index"></param>
            <returns></returns>
        </member>
        <member name="P:CADability.GeoObject.Block.Children">
            <summary>
            Yields a copy of the list of contained geoobjects. Removing objects from that list
            doesn't remove the objects from the Block.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Block.CopyGeometry(CADability.GeoObject.IGeoObject)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.CopyGeometry(CADability.GeoObject.IGeoObject)"/>
            </summary>
            <param name="ToCopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.Block.GetBoundingCube">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetBoundingCube"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Block.Decompose">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Decompose"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Block.FindSnapPoint(CADability.GeoObject.SnapPointFinder)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.FindSnapPoint(CADability.GeoObject.SnapPointFinder)"/>
            </summary>
            <param name="spf"></param>
        </member>
        <member name="M:CADability.GeoObject.Block.HasChildren">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HasChildren"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:CADability.GeoObject.Block.Count">
            <summary>
            Gets the number of GeoObjects in the Block
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Block.PaintTo3DList(CADability.IPaintTo3D,CADability.GeoObject.ICategorizedDislayLists)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3DList(CADability.IPaintTo3D,CADability.GeoObject.ICategorizedDislayLists)"/>
            </summary>
            <param name="paintTo3D"></param>
            <param name="lists"></param>
        </member>
        <member name="M:CADability.GeoObject.Block.PrePaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PrePaintTo3D(CADability.IPaintTo3D)"/>
            </summary>
            <param name="paintTo3D"></param>
        </member>
        <member name="M:CADability.GeoObject.Block.PaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3D(CADability.IPaintTo3D)"/>
            </summary>
            <param name="paintTo3D"></param>
        </member>
        <member name="M:CADability.GeoObject.Block.PrepareDisplayList(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PrepareDisplayList(System.Double)"/>
            </summary>
            <param name="precision"></param>
        </member>
        <member name="M:CADability.GeoObject.Block.GetExtent(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Block.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Block.Clear">
            <summary>
            Removes all objects from that block and returns those objects in a new list. The returned objects
            have no <see cref="P:CADability.GeoObject.IGeoObject.Owner"/>.
            </summary>
            <returns>a list with all the objects of this block</returns>
        </member>
        <member name="M:CADability.GeoObject.Block.ReplaceContent(CADability.GeoObject.GeoObjectList)">
            <summary>
            Replace the list of child objects without fireing a chang event. This is used
            by derived classes (e.g. <see cref="T:CADability.GeoObject.Hatch"/> or <see cref="T:CADability.GeoObject.Dimension"/> or user derived classes
            to recalculate their contents. The derived classes already have fired the change
            event.
            </summary>
            <param name="NewContent">List of child objects to replace the existing list</param>
        </member>
        <member name="M:CADability.GeoObject.Block.GetShowProperties(CADability.IFrame)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetShowProperties(CADability.IFrame)"/>
            </summary>
            <param name="Frame"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Block.GetExtent(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(System.Double)"/>
            </summary>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Block.HitTest(CADability.BoundingCube@,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.BoundingCube@,System.Double)"/>
            </summary>
            <param name="cube"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Block.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)"/>
            </summary>
            <param name="projection"></param>
            <param name="rect"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Block.HitTest(CADability.Projection.PickArea,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection.PickArea,System.Boolean)"/>
            </summary>
            <param name="area"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Block.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)"/>
            </summary>
            <param name="fromHere"></param>
            <param name="direction"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Block.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.GeoObject.Block.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="M:CADability.GeoObject.ShowPropertyBlockRef.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="M:CADability.GeoObject.ShowPropertyBlockRef.Removed(CADability.UserInterface.IPropertyTreeView)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Removed(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="P:CADability.GeoObject.ShowPropertyBlockRef.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="M:CADability.GeoObject.ShowPropertyBlockRef.OnCommand(System.String)">
            <summary>
            Implements <see cref="M:CADability.UserInterface.ICommandHandler.OnCommand(System.String)"/>
            </summary>
            <param name="MenuId"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ShowPropertyBlockRef.OnUpdateCommand(System.String,CADability.UserInterface.CommandState)">
            <summary>
            Implements <see cref="M:CADability.UserInterface.ICommandHandler.OnUpdateCommand(System.String,CADability.UserInterface.CommandState)"/>
            </summary>
            <param name="MenuId"></param>
            <param name="CommandState"></param>
            <returns></returns>
        </member>
        <member name="T:CADability.GeoObject.BlockRef">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.GeoObject.BlockRef.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Modify(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.GeoObject.BlockRef.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.BlockRef.GetBoundingCube">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetBoundingCube"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.BlockRef.Decompose">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Decompose"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.BlockRef.CopyGeometry(CADability.GeoObject.IGeoObject)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.CopyGeometry(CADability.GeoObject.IGeoObject)"/>
            </summary>
            <param name="ToCopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.BlockRef.GetShowProperties(CADability.IFrame)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetShowProperties(CADability.IFrame)"/>
            </summary>
            <param name="Frame"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.BlockRef.PaintTo3DList(CADability.IPaintTo3D,CADability.GeoObject.ICategorizedDislayLists)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3DList(CADability.IPaintTo3D,CADability.GeoObject.ICategorizedDislayLists)"/>
            </summary>
            <param name="paintTo3D"></param>
            <param name="lists"></param>
        </member>
        <member name="M:CADability.GeoObject.BlockRef.PrePaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PrePaintTo3D(CADability.IPaintTo3D)"/>
            </summary>
            <param name="paintTo3D"></param>
        </member>
        <member name="M:CADability.GeoObject.BlockRef.PaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3D(CADability.IPaintTo3D)"/>
            </summary>
            <param name="paintTo3D"></param>
        </member>
        <member name="M:CADability.GeoObject.BlockRef.PrepareDisplayList(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PrepareDisplayList(System.Double)"/>
            </summary>
            <param name="precision"></param>
        </member>
        <member name="M:CADability.GeoObject.BlockRef.FindSnapPoint(CADability.GeoObject.SnapPointFinder)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.FindSnapPoint(CADability.GeoObject.SnapPointFinder)"/>
            </summary>
            <param name="spf"></param>
        </member>
        <member name="M:CADability.GeoObject.BlockRef.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.BlockRef.GetExtent(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.BlockRef.GetExtent(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(System.Double)"/>
            </summary>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.BlockRef.HitTest(CADability.BoundingCube@,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.BoundingCube@,System.Double)"/>
            </summary>
            <param name="cube"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.BlockRef.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)"/>
            </summary>
            <param name="projection"></param>
            <param name="rect"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.BlockRef.HitTest(CADability.Projection.PickArea,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection.PickArea,System.Boolean)"/>
            </summary>
            <param name="area"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.BlockRef.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)"/>
            </summary>
            <param name="fromHere"></param>
            <param name="direction"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="P:CADability.GeoObject.BlockRef.Flattened">
            <summary>
            Returns a new Block with the Insertion applied and also the ByBlock colors and layers applied
            Usually the result is only used temporaryly.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.BlockRef.AttributeChanged(CADability.INamedAttribute)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.AttributeChanged(CADability.INamedAttribute)"/>
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.BlockRef.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.GeoObject.BlockRef.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.GeoObject.BSpline">
            <summary>
            A BSpline is a smooth curve defined by a set of control points. It is implemented as a NURBS - non uniform rational b-spline.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.BSpline.ThroughPoints(CADability.GeoPoint[],System.Int32,System.Boolean)">
            <summary>
            Makes this BSpline go through the given points. Previous data of this BSpline
            (if any) is discarded. The BSpline remembers both this points and the calculated
            poles, multiplicities, knots and weights values. If all points lie in a single plane
            it is better to use the appropriate ThroughPoints method.
            </summary>
            <param name="points">List of points to pass through</param>
            <param name="maxDegree">maximum degree for the BSpline. Must be between 3 an 25</param>
            <param name="closed">true if the resulting BSpline should be closed</param>
            <returns>success</returns>
        </member>
        <member name="M:CADability.GeoObject.BSpline.SetPole(System.Int32,CADability.GeoPoint)">
            <summary>
            Modifies the value of a pole. The Index must be between 0 and PoleCount.
            </summary>
            <param name="Index">Index of the pole</param>
            <param name="ThePoint">The new value</param>
        </member>
        <member name="M:CADability.GeoObject.BSpline.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Modify(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.GeoObject.BSpline.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.BSpline.CopyGeometry(CADability.GeoObject.IGeoObject)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.CopyGeometry(CADability.GeoObject.IGeoObject)"/>
            </summary>
            <param name="ToCopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.BSpline.GetShowProperties(CADability.IFrame)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetShowProperties(CADability.IFrame)"/>
            </summary>
            <param name="Frame"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.BSpline.CopyAttributes(CADability.GeoObject.IGeoObject)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.CopyAttributes(CADability.GeoObject.IGeoObject)"/>
            </summary>
            <param name="ToCopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.BSpline.FindSnapPoint(CADability.GeoObject.SnapPointFinder)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.FindSnapPoint(CADability.GeoObject.SnapPointFinder)"/>
            </summary>
            <param name="spf"></param>
        </member>
        <member name="M:CADability.GeoObject.BSpline.GetBoundingCube">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetBoundingCube"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.BSpline.PaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3D(CADability.IPaintTo3D)"/>
            </summary>
            <param name="paintTo3D"></param>
        </member>
        <member name="M:CADability.GeoObject.BSpline.PrepareDisplayList(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PrepareDisplayList(System.Double)"/>
            </summary>
            <param name="precision"></param>
        </member>
        <member name="M:CADability.GeoObject.BSpline.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.BSpline.GetExtent(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(System.Double)"/>
            </summary>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.BSpline.HitTest(CADability.BoundingCube@,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.BoundingCube@,System.Double)"/>
            </summary>
            <param name="cube"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.BSpline.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)"/>
            </summary>
            <param name="projection"></param>
            <param name="rect"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.BSpline.HitTest(CADability.Projection.PickArea,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection.PickArea,System.Boolean)"/>
            </summary>
            <param name="area"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.BSpline.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)"/>
            </summary>
            <param name="fromHere"></param>
            <param name="direction"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.BSpline.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.GeoObject.BSpline.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="M:CADability.GeoObject.BSpline.PointAtParam(System.Double)">
            <summary>
            Returns the point at the provided parameter. Unlike the <see cref="T:CADability.GeoObject.ICurve"/> method <see cref="M:CADability.GeoObject.ICurve.PointAt(System.Double)"/>
            this Method takes a parameter in the natural space of the BSpline.
            </summary>
            <param name="param">Parameter to get the point for</param>
            <returns>The resulting point</returns>
        </member>
        <member name="T:CADability.GeoObject.ConicalSurface">
            <summary>
            A conical surface which implements <see cref="T:CADability.GeoObject.ISurface"/>. The surface represents a circular or elliptical
            cone. The u parameter always describes a circle or ellipse, the v parameter a Line.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.ConicalSurface.FromTwoCircles(CADability.GeoObject.Ellipse,CADability.GeoObject.Ellipse)">
            <summary>
            The two provided circles must share a common axis and must have different radii. The resulting cone passes through the provided circles.
            If the conditions are not met, null will be returned.
            </summary>
            <param name="c1"></param>
            <param name="c2"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ConicalSurface.GetModified(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetModified(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ConicalSurface.PointAt(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.PointAt(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ConicalSurface.PositionOf(CADability.GeoPoint)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.PositionOf(CADability.GeoPoint)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ConicalSurface.PerpendicularFoot(CADability.GeoPoint)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.PerpendicularFoot(CADability.GeoPoint)"/>
            </summary>
            <param name="fromHere"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ConicalSurface.GetZMinMax(CADability.Projection,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetZMinMax(CADability.Projection,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)"/>
            </summary>
            <param name="p"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="zMin"></param>
            <param name="zMax"></param>
        </member>
        <member name="M:CADability.GeoObject.ConicalSurface.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ConicalSurface.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Modify(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.GeoObject.ConicalSurface.GetTangentCurves(CADability.GeoVector,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetTangentCurves(CADability.GeoVector,System.Double,System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="direction"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ConicalSurface.UDirection(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.UDirection(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ConicalSurface.VDirection(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.VDirection(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ConicalSurface.GetNormal(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetNormal(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ConicalSurface.MakeCanonicalForm">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.MakeCanonicalForm"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ConicalSurface.Make3dCurve(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Make3dCurve(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="curve2d"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ConicalSurface.GetVSingularities">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.GetVSingularities"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ConicalSurface.GetLineIntersection(CADability.GeoPoint,CADability.GeoVector)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetLineIntersection(CADability.GeoPoint,CADability.GeoVector)"/>
            </summary>
            <param name="startPoint"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ConicalSurface.GetPlaneIntersection(CADability.GeoObject.PlaneSurface,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetPlaneIntersection(CADability.GeoObject.PlaneSurface,System.Double,System.Double,System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="pl"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ConicalSurface.CopyData(CADability.GeoObject.ISurface)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.CopyData(CADability.GeoObject.ISurface)"/>
            </summary>
            <param name="CopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.ConicalSurface.Orientation(CADability.GeoPoint)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Orientation(CADability.GeoPoint)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ConicalSurface.HitTest(CADability.BoundingCube,CADability.GeoPoint2D@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.HitTest(CADability.BoundingCube,CADability.GeoPoint2D@)"/>
            </summary>
            <param name="bc"></param>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ConicalSurface.GetExtrema">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetExtrema"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ConicalSurface.GetPolynomialParameters">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetPolynomialParameters"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ConicalSurface.ReverseOrientation">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.ReverseOrientation"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ConicalSurface.FixedU(System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.FixedU(System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="u"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ConicalSurface.FixedV(System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.FixedV(System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="v"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ConicalSurface.SameGeometry(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect,System.Double,CADability.ModOp2D@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.SameGeometry(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect,System.Double,CADability.ModOp2D@)"/>
            </summary>
            <param name="thisBounds"></param>
            <param name="other"></param>
            <param name="otherBounds"></param>
            <param name="precision"></param>
            <param name="firstToSecond"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ConicalSurface.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="M:CADability.GeoObject.ConicalSurface.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="T:CADability.GeoObject.CurveException">
            <summary>
            Exception thrown by object implementing <see cref="T:CADability.GeoObject.ICurve"/>.
            </summary>
        </member>
        <member name="T:CADability.GeoObject.CurveException.Mode">
            <summary>
            Enumeration of different causes for this exception
            </summary>
        </member>
        <member name="F:CADability.GeoObject.CurveException.Mode.Internal">
            <summary>
            Internal error
            </summary>
        </member>
        <member name="F:CADability.GeoObject.CurveException.Mode.General">
            <summary>
            General error
            </summary>
        </member>
        <member name="F:CADability.GeoObject.CurveException.Mode.NoPlane">
            <summary>
            No plane defined
            </summary>
        </member>
        <member name="F:CADability.GeoObject.CurveException.ExeptionMode">
            <summary>
            Cause of this exception
            </summary>
        </member>
        <member name="T:CADability.GeoObject.PlanarState">
            <summary>
            Enumeration for the classification of the planar state of a curve
            </summary>
        </member>
        <member name="F:CADability.GeoObject.PlanarState.Planar">
            <summary>
            The curve resides in a certain plane
            </summary>
        </member>
        <member name="F:CADability.GeoObject.PlanarState.UnderDetermined">
            <summary>
            There are several planes for this curve, i.e. the curve is a line
            </summary>
        </member>
        <member name="F:CADability.GeoObject.PlanarState.NonPlanar">
            <summary>
            The curve is not planar
            </summary>
        </member>
        <member name="F:CADability.GeoObject.PlanarState.Unknown">
            <summary>
            The state is unknown or not yet calculated
            </summary>
        </member>
        <member name="T:CADability.GeoObject.IOrientation">
            <summary>
            ---Yet to be used---
            Imagine a coordinate system moving along a 3d curve. Th z-axis always showing in direction of the curve. The x- and y-axis are still arbitrary. This orientation interface
            defines the direction of the x-axis at some point
            </summary>
        </member>
        <member name="T:CADability.GeoObject.ICurve">
            <summary>
            Interface implemented by one-dimensional geometric objects (eg. line, circle, bspline etc.).
            The curve may be open or closed.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.ICurve.StartPoint">
            <summary>
            The start-point of the curve. If the curve is closed, this is the point where 
            the parameter is 0.0. 
            </summary>
        </member>
        <member name="P:CADability.GeoObject.ICurve.EndPoint">
            <summary>
            The endpoint of the curve. If the curve is closed, this is the point where 
            the parameter is 1.0. 
            </summary>
        </member>
        <member name="P:CADability.GeoObject.ICurve.StartDirection">
            <summary>
            The direction of the curve at the start-point. If the curve is closed, this is the direction where 
            the parameter is 0.0. 
            </summary>
        </member>
        <member name="P:CADability.GeoObject.ICurve.EndDirection">
            <summary>
            The direction of the curve at the endpoint. If the curve is closed, this is the direction where 
            the parameter is 1.0. 
            </summary>
        </member>
        <member name="M:CADability.GeoObject.ICurve.DirectionAt(System.Double)">
            <summary>
            Returns the direction of the curve at a specified point. The parameter prosition of the start-point
            is 0.0, the parameter position of the endpoint is 1.0. Directions of a position outside
            this interval may be undefined.
            </summary>
            <param name="Position">Position on the curve</param>
            <returns>The requested direction</returns>
        </member>
        <member name="M:CADability.GeoObject.ICurve.PointAt(System.Double)">
            <summary>
            Returns the point of the given position. The parameter prosition of the start-point
            is 0.0, the parameter position of the endpoint is 1.0. Points of a position outside
            this interval may be undefined. The correlatioon between the parameter Position and the
            resulting point may be not linear.
            </summary>
            <param name="Position">Position on the curve</param>
            <returns>The requested point</returns>
        </member>
        <member name="M:CADability.GeoObject.ICurve.PositionAtLength(System.Double)">
            <summary>
            Returns the parameter of the point at the given position. The position must be in the interval [0, Length].
            The correlatioon between the parameter Position and the
            resulting position is linear. The result is usually used for <see cref="M:CADability.GeoObject.ICurve.PointAt(System.Double)"/> or <see cref="M:CADability.GeoObject.ICurve.DirectionAt(System.Double)"/>.
            </summary>
            <param name="position">Position on the curve</param>
            <returns>The requested position</returns>
        </member>
        <member name="M:CADability.GeoObject.ICurve.PositionOf(CADability.GeoPoint)">
            <summary>
            Returns the parametric position of the point on the curve. This function is invers to
            <seealso cref="M:CADability.GeoObject.ICurve.DirectionAt(System.Double)"/>. If the given point is not on the curve, the result is the
            position of a point on the curve, that is close to the given point, but not necessary
            of the closest point.
            </summary>
            <param name="p">Point, whos position is requested</param>
            <returns>the requested position</returns>
        </member>
        <member name="M:CADability.GeoObject.ICurve.PositionOf(CADability.GeoPoint,System.Double)">
            <summary>
            Similar to <see cref="M:CADability.GeoObject.ICurve.PositionOf(CADability.GeoPoint)"/>. If the point is not on the curve and there are several
            solutions then the solution closest to the parameter prefer will be returned.
            </summary>
            <param name="p">Point, whos position is requested</param>
            <param name="prefer">preferable solution close to this value</param>
            <returns>the requested position</returns>
        </member>
        <member name="M:CADability.GeoObject.ICurve.PositionOf(CADability.GeoPoint,CADability.Plane)">
            <summary>
            Similar to the <seealso cref="M:CADability.GeoObject.ICurve.PointAt(System.Double)"/> method. Returns the same result, if the point
            is on the curve. If the point is not on the curve the problem is looked at in the given plane.
            i.e. the closest point on the projected 2d curve from the projected 2d point is used.
            </summary>
            <param name="p">Point, whos position is requested</param>
            <param name="pl">Plane for the computation of the closest point</param>
            <returns>the requested position</returns>
        </member>
        <member name="P:CADability.GeoObject.ICurve.Length">
            <summary>
            Returns the length of the curve.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.ICurve.Split(System.Double)">
            <summary>
            Splits the curve at the given position. The position must be in the interval 0..1
            and the curve must not be closed. For closed curves <see cref="M:CADability.GeoObject.ICurve.Split(System.Double,System.Double)"/>.
            </summary>
            <param name="Position">Where to split</param>
            <returns>the splitted curve(s)</returns>
        </member>
        <member name="M:CADability.GeoObject.ICurve.Split(System.Double,System.Double)">
            <summary>
            Splits the closed curve into two open curves at the given positions.
            </summary>
            <param name="Position1">first Position</param>
            <param name="Position2">second Position</param>
            <returns>the splitted curve(s)</returns>
        </member>
        <member name="P:CADability.GeoObject.ICurve.IsClosed">
            <summary>
            Determines, whether the curve is closed or open.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.ICurve.IsSingular">
            <summary>
            Determines, whether this curve is singular, i.e. it is only a point, returns the same value for each parameter
            </summary>
        </member>
        <member name="M:CADability.GeoObject.ICurve.Reverse">
            <summary>
            Reverses the direction of the curve.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.ICurve.Trim(System.Double,System.Double)">
            <summary>
            Modifies start and endpoint of this curve. StartPos must be less than EndPos.
            if StartPos is less than 0.0 or EndPos greater than 1.0 this only works for lines and
            (circular or elliptical) arcs.
            </summary>
            <param name="StartPos">New start position</param>
            <param name="EndPos">New end position</param>
        </member>
        <member name="M:CADability.GeoObject.ICurve.Clone">
            <summary>
            Returns an identical copy of this curve
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ICurve.CloneModified(CADability.ModOp)">
            <summary>
            Returns a modified copy of this curve
            </summary>
            <param name="m">modification</param>
            <returns>modified copy</returns>
        </member>
        <member name="M:CADability.GeoObject.ICurve.GetPlanarState">
            <summary>
            Determins the state of the curve in space. A curve may be either
            Planar (e.g. a cicle), NonPlanar (e.g. a polyline with vertices that
            dont shear a common plane) or UnderDetermined (e.g. a line defines a 
            sheaf of planes (Ebenenb√ºschel))
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ICurve.GetPlane">
            <summary>
            Determins the plane in which the curve resides. Throws CurveException if
            the curve's PlanarState is NonPlanar or UnderDetermined.
            </summary>
            <returns>The plane</returns>
        </member>
        <member name="M:CADability.GeoObject.ICurve.IsInPlane(CADability.Plane)">
            <summary>
            Determines whether the curve resides in the given plane.
            </summary>
            <param name="p">The plane for the test</param>
            <returns>true, when the curve resides in the plane</returns>
        </member>
        <member name="M:CADability.GeoObject.ICurve.GetProjectedCurve(CADability.Plane)">
            <summary>
            Orthogonally projects this curve into the given plane. Returns
            the 2D curve in the coordinate system of the given plane.
            </summary>
            <param name="p">The plane this curve will be projected on</param>
            <returns>The 2D curve in the given plane</returns>
        </member>
        <member name="P:CADability.GeoObject.ICurve.Description">
            <summary>
            Returns a description of the curve, used in labels of the controlcenter.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.ICurve.IsComposed">
            <summary>
            Returns true, if the curve is composed of other curves. <see cref="T:CADability.GeoObject.Path"/>s and <see cref="T:CADability.GeoObject.Polyline"/>s are composed curves.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.ICurve.SubCurves">
            <summary>
            Returns subcurves of composed curves. <see cref="T:CADability.GeoObject.Path"/>s and <see cref="T:CADability.GeoObject.Polyline"/>s are composed curves.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.ICurve.Approximate(System.Boolean,System.Double)">
            <summary>
            Returns a <see cref="T:CADability.GeoObject.Path"/> or a <see cref="T:CADability.GeoObject.Polyline"/> that approximates the curve with lines
            or lines and arcs.
            </summary>
            <param name="linesOnly">true: no arcs, only lines</param>
            <param name="maxError">Maximum derivation from the exact curve</param>
            <returns>The Approximation</returns>
        </member>
        <member name="M:CADability.GeoObject.ICurve.TangentPosition(CADability.GeoVector)">
            <summary>
            Returns a list of positions where the curve has the same or opposite direction as the given direction.
            Mainly used for visualisation purposes. If there are no such points (which is true in most cases) 
            An empty array should be returned.
            </summary>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ICurve.GetSelfIntersections">
            <summary>
            Returns the self intersection position of this curve. The returned array contains pairs of parameter values.
            Each intersectionpoint corresponds to two parameters.
            </summary>
            <returns>Parameters of the intersection points</returns>
        </member>
        <member name="M:CADability.GeoObject.ICurve.SameGeometry(CADability.GeoObject.ICurve,System.Double)">
            <summary>
            Returns true, if this curve and the provided curve describe the same curve in space (maybe opposite direction)
            </summary>
            <param name="other">The curve to be compared with</param>
            <param name="precision">The required precision</param>
            <returns>true, if geometrically equal</returns>
        </member>
        <member name="M:CADability.GeoObject.ICurve.GetExtent">
            <summary>
            Returns the bounging cube for this curve
            </summary>
            <returns>The cube bounding this curve</returns>
        </member>
        <member name="M:CADability.GeoObject.ICurve.HitTest(CADability.BoundingCube)">
            <summary>
            Determins whether this curve interferes with the provided cube.
            </summary>
            <param name="cube">Cube to check interference with</param>
            <returns>True, if curve and cube interfere</returns>
        </member>
        <member name="M:CADability.GeoObject.ICurve.GetSavePositions">
            <summary>
            Returns some positions (parameter values between 0.0 and 1.0) that can savely be used for Approximation purposes
            Usually not used by external applications
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ICurve.GetExtrema(CADability.GeoVector)">
            <summary>
            Returns points of the curve (parameter values between 0.0 and 1.0) where the curve is tangential to
            a plane defined by the normal vector <paramref name="direction"/>. These points are minima or maxima in that
            direction.
            </summary>
            <param name="direction">Direction for the extrema</param>
            <returns>Positions of the extrema, if any</returns>
        </member>
        <member name="M:CADability.GeoObject.ICurve.GetPlaneIntersection(CADability.Plane)">
            <summary>
            Returns the parameters of the intersection points with the provided plane
            </summary>
            <param name="plane">To intersect with</param>
            <returns>Intersection parameters, may be empty</returns>
        </member>
        <member name="M:CADability.GeoObject.ICurve.DistanceTo(CADability.GeoPoint)">
            <summary>
            Returns the minimal distance of point p to the curve. 
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ICurve.TryPointDeriv2At(System.Double,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@)">
            <summary>
            Tries to get the point and the first and second derivative of the curve at the specified position. (0..1)
            Some curves do not implement the second derivative and hence will return false.
            </summary>
            <param name="position">Position where to calculate point and derivatives</param>
            <param name="point">The point at the required position</param>
            <param name="deriv1">The first derivative at the provided parameter</param>
            <param name="deriv2">The second derivative at the provided parameter</param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ICurve.ParameterToPosition(System.Double)">
            <summary>
            convert the parameter, which is in a natural system (0..2*pi for circle, first knot to last knot for bspline) to the 0..1 normalized position
            </summary>
            <param name="parameter"></param>
            <returns>the position, 0..1 when inside the bounds</returns>
        </member>
        <member name="M:CADability.GeoObject.ICurve.PositionToParameter(System.Double)">
            <summary>
            convert the position (which is in the 0..1 interval) to the natural parameter value
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="T:CADability.GeoObject.ExtentedableCurveDirection">
            <summary>
            Enumeration for direction of curve extension
            </summary>
        </member>
        <member name="F:CADability.GeoObject.ExtentedableCurveDirection.forward">
            <summary>
            Extend only forward
            </summary>
        </member>
        <member name="F:CADability.GeoObject.ExtentedableCurveDirection.backward">
            <summary>
            Extend only backward
            </summary>
        </member>
        <member name="F:CADability.GeoObject.ExtentedableCurveDirection.both">
            <summary>
            Extend in both directions
            </summary>
        </member>
        <member name="T:CADability.GeoObject.IExtentedableCurve">
            <summary>
            Interface for ICurve implementing objects that can be extended in one or two directions
            </summary>
        </member>
        <member name="M:CADability.GeoObject.IExtentedableCurve.GetExtendedCurve(CADability.GeoObject.ExtentedableCurveDirection)">
            <summary>
            Returns the IOctTreeInsertable object categorizing this curve. Ususally used to search
            in an <see cref="T:CADability.OctTree`1"/>.
            </summary>
            <param name="direction">Extend direction</param>
            <returns>Interface for OctTree access</returns>
        </member>
        <member name="T:CADability.GeoObject.ISimpleCurve">
            <summary>
            Wird von einfachen Kurven implementiert um schnellere Schnitte berechnen zu k√∂nnen.
            Das kann auch noch aufgebohrt werden
            </summary>
        </member>
        <member name="T:CADability.GeoObject.Curves">
            <summary>
            This class provides static methods concerning the interaction
            of two or more ICurve objects.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Curves.GetCommonPlane(CADability.GeoObject.ICurve,CADability.GeoObject.ICurve,CADability.Plane@)">
            <summary>
            Determines the common plane of the two curves. If there is a common plane,
            the Parameter CommonPlane gets the result ant the function returns true. Otherwise
            the function returns false.
            </summary>
            <param name="c1">first curve</param>
            <param name="c2">second curve</param>
            <param name="CommonPlane">the resulting common plane</param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Curves.GetCommonPlane(CADability.GeoPoint,CADability.GeoObject.ICurve,CADability.Plane@)">
            <summary>
            Determines the commomn plane of a point and a curve. Returns the common plane in the 
            parameter and true if there is such a plane. Returns false, if the point lies not 
            in the plane. <seealso cref="T:CADability.Precision"/>
            </summary>
            <param name="p">The point</param>
            <param name="c2">The curve</param>
            <param name="CommonPlane">The common plane</param>
            <returns>true, if there is a common plane, else false</returns>
        </member>
        <member name="M:CADability.GeoObject.Curves.GetCommonPlane(CADability.GeoObject.ICurve[],CADability.Plane@)">
            <summary>
            Tries to find a plane that contains most of the given curves.
            </summary>
            <param name="curves"></param>
            <param name="CommonPlane"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Curves.Intersect(CADability.GeoObject.ICurve,CADability.GeoObject.ICurve,System.Boolean)">
            <summary>
            Returns the parameters of the intersection points of curve1 with curve2.
            Parameters are with respect to curve1. The two curves must reside in a common plane.
            </summary>
            <param name="curve1">First curve for intersection</param>
            <param name="curve2">Second curve for intersection</param>
            <param name="onlyInside">if true, only intersction point that are actually on the curves are returned
            otherwise also intersection points on the extension of ther curves are returned</param>
            <returns>Parameters for the intersection points</returns>
        </member>
        <member name="M:CADability.GeoObject.Curves.Intersect(CADability.GeoObject.ICurve,CADability.GeoObject.ICurve,System.Double[]@,System.Double[]@,CADability.GeoPoint[]@)">
            <summary>
            Calculates the intersection points of the two curves.
            </summary>
            <param name="curve1">First curve</param>
            <param name="curve2">Second curve</param>
            <param name="par1">Resulting parameters for the first curve</param>
            <param name="par2">Resulting parameters for the second curve</param>
            <param name="intersection">Three dimensional intersection points</param>
            <returns>Number of intersection points</returns>
        </member>
        <member name="M:CADability.GeoObject.Curves.Combine(CADability.GeoObject.ICurve,CADability.GeoObject.ICurve,System.Double)">
            <summary>
            Tries to combine two curves. crv1 and crv2 must be correct oriented and the endpoint of crv1 mut be the start-point of crv2
            </summary>
            <param name="crv1"></param>
            <param name="crv2"></param>
            <returns>the combined curve or null, if not possible</returns>
        </member>
        <member name="M:CADability.GeoObject.Curves.Overlapping(CADability.GeoObject.ICurve,CADability.GeoObject.ICurve,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Returns true if curve1 and curve2 are overlapping curves. The overlapping intervalls for both curves are
            returned in <paramref name="from1"/>, <paramref name="to1"/>, <paramref name="from2"/> and <paramref name="to2"/>.
            </summary>
            <param name="curve1">First curve</param>
            <param name="curve2">Second curve</param>
            <param name="precision">Required precision</param>
            <param name="from1">Starting parameter for first curve</param>
            <param name="to1">Ending parameter for first curve</param>
            <param name="from2">Starting parameter for second curve</param>
            <param name="to2">Ending parameter for second curve</param>
            <returns></returns>
        </member>
        <member name="T:CADability.GeoObject.CylindricalSurface">
            <summary>
            A cylindrical surface which implements <see cref="T:CADability.GeoObject.ISurface"/>. The surface represents a circular or elliptical
            cylinder. The u parameter always describes a circle or ellipse, the v parameter a Line.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.#ctor(CADability.GeoPoint,CADability.GeoVector,CADability.GeoVector,CADability.GeoVector)">
            <summary>
            Creates a cylindrical surface. The length of directionx and directiony specify the radius.
            The axis is perpendicular to directionx and directiony (right hand). The u parameter starts at
            location+directionx, the v parameter increments along the axis and is 0 at location.
            </summary>
            <param name="location"></param>
            <param name="directionx"></param>
            <param name="directiony"></param>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.GetModified(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetModified(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.GetNormal(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetNormal(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.GetTangentCurves(CADability.GeoVector,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetTangentCurves(CADability.GeoVector,System.Double,System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="direction"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.PointAt(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.PointAt(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.UDirection(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.UDirection(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.VDirection(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.VDirection(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.DerivationAt(CADability.GeoPoint2D,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.DerivationAt(CADability.GeoPoint2D,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@)"/>
            </summary>
            <param name="uv"></param>
            <param name="location"></param>
            <param name="du"></param>
            <param name="dv"></param>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.Derivation2At(CADability.GeoPoint2D,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Derivation2At(CADability.GeoPoint2D,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@)"/>
            </summary>
            <param name="uv"></param>
            <param name="location"></param>
            <param name="du"></param>
            <param name="dv"></param>
            <param name="duu"></param>
            <param name="dvv"></param>
            <param name="duv"></param>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.GetLineIntersection(CADability.GeoPoint,CADability.GeoVector)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetLineIntersection(CADability.GeoPoint,CADability.GeoVector)"/>
            </summary>
            <param name="startPoint"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.Intersect(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Intersect(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect)"/>
            </summary>
            <param name="thisBounds"></param>
            <param name="other"></param>
            <param name="otherBounds"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.Intersect(CADability.GeoObject.ICurve,CADability.BoundingRect,CADability.GeoPoint[]@,CADability.GeoPoint2D[]@,System.Double[]@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Intersect(CADability.GeoObject.ICurve,CADability.BoundingRect,CADability.GeoPoint[]@,CADability.GeoPoint2D[]@,System.Double[]@)"/>
            </summary>
            <param name="curve"></param>
            <param name="uvExtent"></param>
            <param name="ips"></param>
            <param name="uvOnFaces"></param>
            <param name="uOnCurve3Ds"></param>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.IsVanishingProjection(CADability.Projection,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.IsVanishingProjection(CADability.Projection,System.Double,System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="p"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.Make3dCurve(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Make3dCurve(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="curve2d"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.GetPlaneIntersection(CADability.GeoObject.PlaneSurface,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetPlaneIntersection(CADability.GeoObject.PlaneSurface,System.Double,System.Double,System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="pl"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.GetSafeParameterSteps(System.Double,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetSafeParameterSteps(System.Double,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)"/>
            </summary>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="intu"></param>
            <param name="intv"></param>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.PositionOf(CADability.GeoPoint)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.PositionOf(CADability.GeoPoint)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.GetZMinMax(CADability.Projection,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetZMinMax(CADability.Projection,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)"/>
            </summary>
            <param name="p"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="zMin"></param>
            <param name="zMax"></param>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Modify(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.CopyData(CADability.GeoObject.ISurface)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.CopyData(CADability.GeoObject.ISurface)"/>
            </summary>
            <param name="CopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.GetTouchingPoints(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetProjectedCurve(CADability.GeoObject.ICurve,System.Double)"/>
            </summary>
            <param name="curve"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.ReverseOrientation">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.ReverseOrientation"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.HitTest(CADability.BoundingCube,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.HitTest(CADability.BoundingCube,System.Double,System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="cube"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.HitTest(CADability.BoundingCube,CADability.GeoPoint2D@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.HitTest(CADability.BoundingCube,CADability.GeoPoint2D@)"/>
            </summary>
            <param name="bc"></param>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.Orientation(CADability.GeoPoint)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Orientation(CADability.GeoPoint)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.SameGeometry(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect,System.Double,CADability.ModOp2D@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.SameGeometry(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect,System.Double,CADability.ModOp2D@)"/>
            </summary>
            <param name="thisBounds"></param>
            <param name="other"></param>
            <param name="otherBounds"></param>
            <param name="precision"></param>
            <param name="firstToSecond"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.GetExtrema">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetExtrema"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.FixedU(System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.FixedU(System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="u"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.FixedV(System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.FixedV(System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="v"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.GetNonPeriodicSurface(CADability.Shapes.Border)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetNonPeriodicSurface(CADability.Shapes.Border)"/>
            </summary>
            <param name="maxOutline"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="M:CADability.GeoObject.CylindricalSurface.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="P:CADability.GeoObject.CylindricalSurface.IsRealCylinder">
            <summary>
            This surface is a round cylinder, not an elliptical cylinder
            </summary>
        </member>
        <member name="T:CADability.GeoObject.Dimension">
            <summary>
            The dimension object represents a dimensioning in a model and is a <see href="a2f7e3d8-5886-48a6-b0a2-a896dcce8c4a.htm">GeoObject</see>.
            To use a dimension object you must at least set the properties <see cref="P:CADability.GeoObject.Dimension.DimensionStyle"/>, <see cref="P:CADability.GeoObject.Dimension.DimLineRef"/>,
            <see cref="P:CADability.GeoObject.Dimension.DimLineDirection"/>, and add two points with the <see cref="M:CADability.GeoObject.Dimension.AddPoint(CADability.GeoPoint)"/> method. Example:
            <code>
            // assuming "project" is a reference to a Project
            Dimension d = Dimension.Construct();
            d.DimensionStyle = project.DimensionStyleList.Current;
            d.DimLineRef = new GeoPoint(200, 200, 0);
            d.DimLineDirection = GeoVector.XAxis;
            d.AddPoint(new GeoPoint(100, 100, 0));
            d.AddPoint(new GeoPoint(200, 100, 0));
            d.AddPoint(new GeoPoint(300, 100, 0));
            project.GetActiveModel().Add(d);
            </code>
            </summary>
        </member>
        <member name="T:CADability.GeoObject.Dimension.EDimType">
            <summary>
            Different types of dimensioning
            </summary>
        </member>
        <member name="F:CADability.GeoObject.Dimension.EDimType.DimPoints">
            <summary>
            Dimensioning the distance of two or more points in any angle
            </summary>
        </member>
        <member name="F:CADability.GeoObject.Dimension.EDimType.DimCoord">
            <summary>
            Dimensioning a coordinate position
            </summary>
        </member>
        <member name="F:CADability.GeoObject.Dimension.EDimType.DimAngle">
            <summary>
            Dimensioning an angle
            </summary>
        </member>
        <member name="F:CADability.GeoObject.Dimension.EDimType.DimRadius">
            <summary>
            Dimensioning a radius (of a circle or arc)
            </summary>
        </member>
        <member name="F:CADability.GeoObject.Dimension.EDimType.DimDiameter">
            <summary>
            Dimensioning a diameter (of a circle or arc)
            </summary>
        </member>
        <member name="F:CADability.GeoObject.Dimension.EDimType.DimLocation">
            <summary>
            Tagging a location
            </summary>
        </member>
        <member name="F:CADability.GeoObject.Dimension.dimLineDirection">
            <summary>
            Richtung der Ma√ülinie
            </summary>
        </member>
        <member name="F:CADability.GeoObject.Dimension.editingText">
            <summary>
            Die folgenden Daten f√ºr den Fall, dass der Text editiert wird
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Dimension.AddSymbol(CADability.GeoObject.GeoObjectList,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Ein Symbol zuf√ºgen. Die Ma√ülinie ist immer die X-Achse.
            </summary>
            <param name="List">hier zuf√ºgen</param>
            <param name="xPos">x-Position des Punktes</param>
            <param name="layoutFactor">Faktor Papier->Welt</param>
            <param name="leftSide">Symbol auf der linken Seite</param>
            <param name="outside">Symbol ist au√üerhalb</param>
        </member>
        <member name="M:CADability.GeoObject.Dimension.Decompose">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Decompose"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Dimension.SortPoints">
            <summary>
            Call this after a point to a dimension of type EDimType.DimCoord or EDimType.DimPoints
            has been added or changed, to rorder the list of points
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Dimension.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Modify(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.GeoObject.Dimension.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Dimension.CopyGeometry(CADability.GeoObject.IGeoObject)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.CopyGeometry(CADability.GeoObject.IGeoObject)"/>
            </summary>
            <param name="ToCopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.Dimension.GetShowProperties(CADability.IFrame)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetShowProperties(CADability.IFrame)"/>
            </summary>
            <param name="Frame"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Dimension.IsAttributeUsed(System.Object)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.IsAttributeUsed(System.Object)"/>
            </summary>
            <param name="Attribute"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Dimension.GetAttributeProperties(CADability.IFrame)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetAttributeProperties(CADability.IFrame)"/>
            </summary>
            <param name="Frame"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Dimension.GetBoundingCube">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetBoundingCube"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Dimension.PrePaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PrePaintTo3D(CADability.IPaintTo3D)"/>
            </summary>
            <param name="paintTo3D"></param>
        </member>
        <member name="M:CADability.GeoObject.Dimension.PaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3D(CADability.IPaintTo3D)"/>
            </summary>
            <param name="paintTo3D"></param>
        </member>
        <member name="M:CADability.GeoObject.Dimension.PrepareDisplayList(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PrepareDisplayList(System.Double)"/>
            </summary>
            <param name="precision"></param>
        </member>
        <member name="M:CADability.GeoObject.Dimension.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Dimension.GetExtent(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Dimension.GetExtent(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(System.Double)"/>
            </summary>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Dimension.HitTest(CADability.BoundingCube@,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.BoundingCube@,System.Double)"/>
            </summary>
            <param name="cube"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Dimension.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)"/>
            </summary>
            <param name="projection"></param>
            <param name="rect"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Dimension.HitTest(CADability.Projection.PickArea,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection.PickArea,System.Boolean)"/>
            </summary>
            <param name="area"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Dimension.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)"/>
            </summary>
            <param name="fromHere"></param>
            <param name="direction"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Dimension.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.GeoObject.Dimension.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="M:CADability.GeoObject.Dimension.Recalc">
            <summary>
            Call this, if the DimensionStyle used by this Dimension was modified.
            </summary>
        </member>
        <member name="T:CADability.GeoObject.Ellipse">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.SetCirclePlane2Points(CADability.Plane,CADability.GeoPoint,CADability.GeoPoint)">
            <summary>
            Kreis aus Ebene und zwei gegen√ºberliegenden Punkten auf dem Kreis
            </summary>
            <param name="p">Die Ebene des Kreises (3D-Parameter)</param>
            <param name="circlePoint1">1. Punkt des Kreises</param>
            <param name="circlePoint2">2. Punkt des Kreises</param>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.TangentParameter(CADability.GeoVector)">
            <summary>
            Tangentenpunkte der Ellipse bei vorgegebener Richtung
            </summary>
            <param name="Direction">Richtung der Tangente</param>
        </member>
        <member name="P:CADability.GeoObject.Ellipse.Center">
            <summary>
            gets or sets the center of this circle or ellipse
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.PlaneIntersection(CADability.Plane)">
            <summary>
            Returns the intersectionpoints of this ellipse with the provided plane <paramref name="toIntersectWith"/>.
            The result is an array with 0 to 2 <see cref="T:CADability.GeoPoint"/>s.
            </summary>
            <param name="toIntersectWith">Plane to intersect with</param>
            <returns>The intersectionpoints</returns>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.CopyGeometry(CADability.GeoObject.IGeoObject)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.CopyGeometry(CADability.GeoObject.IGeoObject)"/>
            </summary>
            <param name="ToCopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Modify(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.FindSnapPoint(CADability.GeoObject.SnapPointFinder)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.FindSnapPoint(CADability.GeoObject.SnapPointFinder)"/>
            </summary>
            <param name="spf"></param>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.AttributeChanged(CADability.INamedAttribute)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.AttributeChanged(CADability.INamedAttribute)"/>
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.HasValidData">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HasValidData"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.GetShowProperties(CADability.IFrame)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetShowProperties(CADability.IFrame)"/>
            </summary>
            <param name="Frame"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.GetBoundingCube">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetBoundingCube"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.PaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3D(CADability.IPaintTo3D)"/>
            </summary>
            <param name="paintTo3D"></param>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.PrepareDisplayList(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PrepareDisplayList(System.Double)"/>
            </summary>
            <param name="precision"></param>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.GetExtent(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.GetExtent(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(System.Double)"/>
            </summary>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.HitTest(CADability.BoundingCube@,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.BoundingCube@,System.Double)"/>
            </summary>
            <param name="cube"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)"/>
            </summary>
            <param name="projection"></param>
            <param name="rect"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.HitTest(CADability.Projection.PickArea,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection.PickArea,System.Boolean)"/>
            </summary>
            <param name="area"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)"/>
            </summary>
            <param name="fromHere"></param>
            <param name="direction"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="P:CADability.GeoObject.Ellipse.IsCircle">
            <summary>
            Returns true if both axis of the ellipse have the same length. It may be a circle or a circular arc.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Ellipse.IsArc">
            <summary>
            Returns true if it is not a full circle or a full ellipse, i.e. the <see cref="P:CADability.GeoObject.Ellipse.SweepParameter"/> is
            not -2*pi and not 2*pi.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Ellipse.StartParameter">
            <summary>
            Gets or sets the startparameter of this circular or elliptical arc. The startparameter determins the
            startpoint of this curve according to the formula: Center + cos(StartParameter)*MajorAxis + sin(StartParameter)*MinorAxis
            For elliptical arcs the startparameter is not identical to the angle of the startpoint.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Ellipse.SweepParameter">
            <summary>
            Gets or sets the sweep amount of this arc. A full circle or ellipse must have a sweepparameter of
            either 2.0*Math.PI or -2.0*Math.PI, The sweep parameter of circular or elliptical arcs are
            in the range of -2.0*Math.PI &lt; SweepParameter &lt; 2.0*Math.PI. SweepParameter is often used 
            in connection with startParameter
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.DirectionAt(System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.DirectionAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.PointAt(System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.PointAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.PositionOf(CADability.GeoPoint)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.PositionOf(CADability.GeoPoint)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.PositionOf(CADability.GeoPoint,System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.PositionOf(CADability.GeoPoint,System.Double)"/>
            </summary>
            <param name="p"></param>
            <param name="prefer"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.PositionOf(CADability.GeoPoint,CADability.Plane)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.PositionOf(CADability.GeoPoint,CADability.Plane)"/>
            </summary>
            <param name="p"></param>
            <param name="pl"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.ParameterOf(CADability.GeoPoint)">
            <summary>
            Returns the Parameter of the given point projected into the plane of this ellipse (pp). 
            For a circle or arc this is the
            radian of the angle of the point. For an ellipse this is the value (a), where
            e.x = center.x+majorradius*cos(a), e.y = center.y+minorradius*cos(a) yields a point (e)
            on the ellipse so that (pp) coincides with the line (center,e).
            </summary>
            <param name="p">The point to check</param>
            <returns>The parameter value</returns>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.Split(System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.Split(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.Split(System.Double,System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.Split(System.Double,System.Double)"/>
            </summary>
            <param name="Position1"></param>
            <param name="Position2"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.Trim(System.Double,System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.Trim(System.Double,System.Double)"/>
            </summary>
            <param name="StartPos"></param>
            <param name="EndPos"></param>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.GetPlanarState">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.GetPlanarState"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.GetPlane">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.GetPlane"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.IsInPlane(CADability.Plane)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.IsInPlane(CADability.Plane)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.GetProjectedCurve(CADability.Plane)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.GetProjectedCurve(CADability.Plane)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.TryPointDeriv2At(System.Double,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.TryPointDeriv2At(System.Double,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@)"/>
            </summary>
            <param name="position"></param>
            <param name="point"></param>
            <param name="deriv"></param>
            <param name="deriv2"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.GeoObject.Ellipse.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.GeoObject.Face">
            <summary>
            A face is a finite piece of a surface. It is bounded by a <see cref="T:CADability.Shapes.SimpleShape"/> in the 2-dimensional u/v space
            of the surface. A face is also a <see cref="T:CADability.GeoObject.IGeoObject"/>. The bounding curves of a face are implemented as <see cref="T:CADability.Edge"/>s.
            If a face is contained in a <see cref="T:CADability.Model"/> it doesnt share its edges with other faces. If a face is part of a <see cref="T:CADability.GeoObject.Shell"/>
            (which maybe a part of a <see cref="T:CADability.GeoObject.Solid"/>) it shares some or all of its edges with other faces.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Face.GetHashCode">
            <summary>
            Internal use only
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Face.MakeFacesFromStepAdvancedFace(CADability.GeoObject.ISurface,System.Collections.Generic.List{System.Collections.Generic.List{CADability.StepEdgeDescriptor}},System.Boolean,System.Double)">
            <summary>
            Make a face (or maybe multiple faces in case of periodic surfaces) from the definition in a step file
            </summary>
            <param name="surface">the surface as defined in the step file</param>
            <param name="loops">the loops of 3d edges, both outlines and holes, for this face</param>
            <param name="sameSense">orientation of the surface so that the normal points outward</param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Face.SortEdges(CADability.GeoObject.Face,CADability.Vertex,CADability.Vertex,CADability.Edge[])">
            <summary>
            permutate the order of the edges so that the first edge starts at fromVertex and the last edge ends at toVertex and the edges are connected
            </summary>
            <param name="onThisFace"></param>
            <param name="fromVertex"></param>
            <param name="toVertex"></param>
            <param name="edges"></param>
        </member>
        <member name="M:CADability.GeoObject.Face.MakeFace(CADability.GeoObject.GeoObjectList)">
            <summary>
            Try to make a Face from the provided objects, using the curves to make a planar face
            </summary>
            <param name="sel"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Face.SplitSingleOutlines">
            <summary>
            If there is a outline (or hole) consisting of a single curve (e.g. closed circle) then split this Edge into two parts
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Face.MakeFace(CADability.GeoObject.ISurface,CADability.Shapes.SimpleShape)">
            <summary>
            Creates a face by specification of the geometrical surface and the outline in the parametric space
            on that surface.
            </summary>
            <param name="surface">The surface</param>
            <param name="outline">The outline</param>
            <returns>The created face</returns>
        </member>
        <member name="M:CADability.GeoObject.Face.MakePlanarFace(CADability.GeoObject.IGeoObject[])">
            <summary>
            Creates a face by connecting curves. The objects in <paramref name="bounds"/> must describe a closed border
            which may contain some holes.
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Face.GetPlaneIntersection(CADability.GeoObject.PlaneSurface)">
            <summary>
            Returns the curves that result from a planar intersection of this face with the provided plane.
            The curves are clipped to the outline (and holes) of the face.
            </summary>
            <param name="pl">The plane to intersect with</param>
            <returns>Array of intersection curves</returns>
        </member>
        <member name="P:CADability.GeoObject.Face.Area">
            <summary>
            Returns the twodimensional shape of the outline of this face in the parametric (u/v) space of the surface.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Face.Domain">
            <summary>
            A bounding rectangle which restricts the parametric space of the <see cref="P:CADability.GeoObject.Face.Surface"/>.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Face.Name">
            <summary>
            The name of the face. 
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Face.AllEdges">
            <summary>
            Returns all edges that surround this face (also the holes in this face)
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Face.OutlineEdges">
            <summary>
            Gets all edges that represent the outline of this face (not the holes).
            The order of the edges is counterclockwise when you look at the face from the outside.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Face.HoleEdges(System.Int32)">
            <summary>
            Returns all edges that belong to the hole with the provided <paramref name="index"/>.
            The order of the edges is counterclockwise when you look at the face from the outside.
            </summary>
            <param name="index">Index of the hole to get</param>
            <returns>The requested hole</returns>
        </member>
        <member name="P:CADability.GeoObject.Face.HoleCount">
            <summary>
            Gets the number of holes in this face.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Face.GetTangentialEdges(CADability.Projection)">
            <summary>
            Returns edges inside the Face, which appear as outline curves in the shadow projection of the face.
            </summary>
            <param name="pr">The projection</param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Face.Get2DCurves(System.Collections.Generic.List{CADability.Edge})">
            <summary>
            Returns the uv representations of the provided edges on the surface of this face
            </summary>
            <param name="edges"></param>
            <returns></returns>
        </member>
        <member name="P:CADability.GeoObject.Face.Surface">
            <summary>
            Returns the geometrical surface on which this face resides.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Face.GetUVBounds(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Returnes the minimum and maximum values of coordinates in the parametric space used by this face.
            </summary>
            <param name="umin">Minimum in u direction</param>
            <param name="umax">Maximum in u direction</param>
            <param name="vmin">Minimum in v direction</param>
            <param name="vmax">Maximum in v direction</param>
        </member>
        <member name="M:CADability.GeoObject.Face.GetUVBounds">
            <summary>
            Returnes the minimum and maximum values of coordinates in the parametric space used by this face.
            </summary>
            <returns>Extent in parametric space (u/v)</returns>
        </member>
        <member name="M:CADability.GeoObject.Face.CopyGeometry(CADability.GeoObject.IGeoObject)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.CopyGeometry(CADability.GeoObject.IGeoObject)"/>
            </summary>
            <param name="ToCopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.Face.GetShowProperties(CADability.IFrame)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetShowProperties(CADability.IFrame)"/>
            </summary>
            <param name="Frame"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Face.FindEdgeChain(CADability.Vertex,CADability.Vertex)">
            <summary>
            Find a chain of edges from the Vertex <paramref name="from"/> to the Vertex <paramref name="to"/>.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Face.FindConnection(CADability.Vertex,Wintellect.PowerCollections.Set{CADability.Vertex})">
            <summary>
            Find a connection from the provided startVertex up to the first vertex in stopVertices
            </summary>
            <param name="startVertex"></param>
            <param name="stopVertices"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Face.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Face.ModifySurfaceOnly(CADability.ModOp)">
            <summary>
            This surface modification leaves the face in an invalid state, the edges muste be modified accordingly
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.GeoObject.Face.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Modify(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.GeoObject.Face.FindSnapPoint(CADability.GeoObject.SnapPointFinder)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.FindSnapPoint(CADability.GeoObject.SnapPointFinder)"/>
            </summary>
            <param name="spf"></param>
        </member>
        <member name="M:CADability.GeoObject.Face.GetBoundingCube">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetBoundingCube"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Face.GetInnerIntersection(CADability.GeoObject.Face)">
            <summary>
            Find inner intersection curves of two faces. This is only used to find intersection curves, which do not cross the edges of the faces. (but might also find and return such curves)
            </summary>
            <param name="other">the other face</param>
            <returns>Array of inner intersection curves</returns>
        </member>
        <member name="M:CADability.GeoObject.Face.PaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3D(CADability.IPaintTo3D)"/>
            </summary>
            <param name="paintTo3D"></param>
        </member>
        <member name="M:CADability.GeoObject.Face.PaintTo3DList(CADability.IPaintTo3D,CADability.GeoObject.ICategorizedDislayLists)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3DList(CADability.IPaintTo3D,CADability.GeoObject.ICategorizedDislayLists)"/>
            </summary>
            <param name="paintTo3D"></param>
            <param name="lists"></param>
        </member>
        <member name="M:CADability.GeoObject.Face.PrepareDisplayList(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PrepareDisplayList(System.Double)"/>
            </summary>
            <param name="precision"></param>
        </member>
        <member name="M:CADability.GeoObject.Face.GetExtent(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Face.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Face.GetExtent(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(System.Double)"/>
            </summary>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Face.Contains(CADability.GeoPoint2D@,System.Boolean)">
            <summary>
            Checks whether the provided 2d point in the parameter space of the surface is inside the bounds of this face.
            If the surface is periodic then it will also be checked whether the point with its periodic offset
            is contained in the face. In this case, the 2d coordinates of the point are updated to reflect the correct
            period in which it is inside the face
            </summary>
            <param name="p">The point to check</param>
            <param name="acceptOnCurve">Also accept points on the outline</param>
            <returns>true if the point is inside the face</returns>
        </member>
        <member name="M:CADability.GeoObject.Face.HitTest(CADability.BoundingCube@,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.BoundingCube@,System.Double)"/>
            </summary>
            <param name="cube"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Face.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)"/>
            </summary>
            <param name="projection"></param>
            <param name="rect"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Face.HitTest(CADability.Projection.PickArea,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection.PickArea,System.Boolean)"/>
            </summary>
            <param name="area"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Face.Distance(CADability.GeoPoint)">
            <summary>
            Returns the smallest distance from the provided point to the face. It will be the distance to
            a perpendicular footpoint on the face. If there is no such perpendicular footpoint 
            double.MaxValue will be returned. This method does not compute the distance to edges or vertices.
            If you need those distances use <see cref="M:CADability.GeoObject.ICurve.PositionOf(CADability.GeoPoint)"/> and <see cref="M:CADability.GeoObject.ICurve.PointAt(System.Double)"/>.
            </summary>
            <param name="fromHere">Point from which the distance is calculated</param>
            <returns>The signed distance, positive is to the outside, negative to the inside</returns>
        </member>
        <member name="M:CADability.GeoObject.Face.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)"/>
            </summary>
            <param name="fromHere"></param>
            <param name="direction"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Face.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.GeoObject.Face.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="M:CADability.GeoObject.Face.SeperateEdge(CADability.Edge)">
            <summary>
            The provided edge is removed from this face and replaced by an identical edge. Both edges now only have primaryFace set
            </summary>
            <param name="edge"></param>
        </member>
        <member name="M:CADability.GeoObject.Face.ReplaceEdge(CADability.Edge,CADability.GeoObject.Face)">
            <summary>
            die gegebene edge soll in dieses Face eingebaut werden. Eine Umrisskante wird zun√§chst auf dem
            ganzen Face erzeugt und dann in die beiden betroffenen split Faces eingebaut
            </summary>
            <param name="edge"></param>
            <param name="RemoveFromThis"></param>
        </member>
        <member name="P:CADability.GeoObject.Face.OrientedOutward">
            <summary>
            Returns the orientation of this face. this is only meaningful if this face is part of a closed shell
            which defines a solid. If true, the normal vector of the surface of this face points outward of the solid,
            if false it points into the inside.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Face.GetTriangulation(System.Double,CADability.GeoPoint[]@,CADability.GeoPoint2D[]@,System.Int32[]@,CADability.BoundingCube@)">
            <summary>
            Returns the triangulation of this face to the provided precision.
            <paramref name="trianglePoint"/> and <paramref name="triangleUVPoint"/> are two arrays of the same length specifying the
            vertices of the triangle in 3d or 2d surface coordinates. <paramref name="triangleIndex"/> is a list of indizes to
            trianglePoint and triangleUVPoint where each triple of indices describes one triangle. The length of triangleIndex is a multiple of 3.
            </summary>
            <param name="precision">Required precision</param>
            <param name="trianglePoint">Resulting 3d points</param>
            <param name="triangleUVPoint">Resulting 2d points</param>
            <param name="triangleIndex">Triangle indizes</param>
            <param name="triangleExtent">Extent of the triangles</param>
        </member>
        <member name="M:CADability.GeoObject.Face.MakeRegularSurface(System.Double)">
            <summary>
            PRELIMINARY!
            Tries to use a more simple surface for this face. E.g. a NurbsSurface will be reduced to a torodial surface
            if the data allows it. The followind replacements are currently performed
            <list type="">
            <item>NurbsSurface -> PlanarSurface</item>
            <item>NurbsSurface -> TorodialSurface</item>
            <item>in work:</item>
            <item>NurbsSurface -> CylindricalSurface</item>
            <item>NurbsSurface -> SphericalSurface</item>
            <item>NurbsSurface -> ConicalSurface</item>
            <item>SurfaceOfRevolution -> CylindricalSurface</item>
            <item>SurfaceOfRevolution -> TorodialSurface</item>
            <item>SurfaceOfRevolution -> ConicalSurface</item>
            <item>SurfaceOfLinearExtrusion -> PlanarSurface</item>
            <item>SurfaceOfLinearExtrusion -> CylindricalSurface</item>
            </list>
            </summary>
            <param name="maxError">The maximum aberration of the surfaces</param>
            <returns>true if surface could be simplyfied</returns>
        </member>
        <member name="M:CADability.GeoObject.Face.ReverseOrientation">
            <summary>
            Reverses the orientation of this Face. the normal vector on any point of the surface will point to 
            the opposite direction
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Face.Split(System.Collections.Generic.List{CADability.Edge},System.Collections.Generic.List{System.Collections.Generic.List{CADability.Edge}})">
            <summary>
            Mache ein neues Face, welches diesem entspricht und durch die neue outline bzw. holes gegeben ist
            Die Kanten wandern von diesem Face zum neuen, d.h. das primaryFace bzw. secondaryFace der Kanten wird ge√§ndert.
            Somit wird dieses Face ung√ºltig.
            </summary>
            <param name="outlines"></param>
            <param name="holes"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Face.combineEdges(CADability.Edge,CADability.Edge)">
            <summary>
            Combine two edges into a single edge, if they are connected and have the same pair of faces
            </summary>
            <param name="edg1"></param>
            <param name="edg2"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Face.UseEdge(CADability.Edge)">
            <summary>
            Tries to use the provided edge if this face has a geometrical identical edge
            </summary>
            <param name="toUse"></param>
            <returns>true, if edge was replaced</returns>
        </member>
        <member name="M:CADability.GeoObject.Face.MakeFace(CADability.GeoPoint,CADability.GeoPoint,CADability.GeoPoint)">
            <summary>
            Creates a new face representing a tringle in space
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CADability.GeoObject.Face.GetOffset(System.Double,System.Collections.Generic.Dictionary{CADability.Vertex,CADability.Vertex})" -->
        <member name="M:CADability.GeoObject.Face.ConnectTwoFaces(CADability.GeoObject.Face,CADability.GeoObject.Face,System.Double)">
            <summary>
            Connect two faces by geometrically identical edges. Return true if at least one pair of edges has been combined (to a single edge).
            Doesn't combine singular edges.
            </summary>
            <param name="face1"></param>
            <param name="face2"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Face.PositionOf(CADability.GeoPoint)">
            <summary>
            Getst the Surface.PositionOf(p) in ther correct periodic domain
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Face.GetContextMenu(CADability.IFrame)">
            <summary>
            Returns a menu, which is shown when there is a right click on the face
            </summary>
            <param name="frame"></param>
            <returns></returns>
        </member>
        <member name="T:CADability.GeoObject.GeneralCurve">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.ProjectedCurve.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.ProjectedCurve.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.PaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3D(CADability.IPaintTo3D)"/>
            </summary>
            <param name="paintTo3D"></param>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.GetExtent(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.GetBoundingCube">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetBoundingCube"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.GetShowProperties(CADability.IFrame)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetShowProperties(CADability.IFrame)"/>
            </summary>
            <param name="Frame"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.PrepareDisplayList(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PrepareDisplayList(System.Double)"/>
            </summary>
            <param name="precision"></param>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.GetExtent(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(System.Double)"/>
            </summary>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.HitTest(CADability.BoundingCube@,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.BoundingCube@,System.Double)"/>
            </summary>
            <param name="cube"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)"/>
            </summary>
            <param name="projection"></param>
            <param name="rect"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.HitTest(CADability.Projection.PickArea,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection.PickArea,System.Boolean)"/>
            </summary>
            <param name="area"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)"/>
            </summary>
            <param name="fromHere"></param>
            <param name="direction"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.DirectionAt(System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.DirectionAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.PointAt(System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.PointAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.PositionOf(CADability.GeoPoint)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.PositionOf(CADability.GeoPoint)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.PositionOf(CADability.GeoPoint,System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.PositionOf(CADability.GeoPoint,System.Double)"/>
            </summary>
            <param name="p"></param>
            <param name="prefer"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.PositionOf(CADability.GeoPoint,CADability.Plane)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.PositionOf(CADability.GeoPoint,CADability.Plane)"/>
            </summary>
            <param name="p"></param>
            <param name="pl"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.Reverse">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.Reverse"/>
            </summary>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.Split(System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.Split(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.Split(System.Double,System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.Split(System.Double,System.Double)"/>
            </summary>
            <param name="Position1"></param>
            <param name="Position2"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.Trim(System.Double,System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.Trim(System.Double,System.Double)"/>
            </summary>
            <param name="StartPos"></param>
            <param name="EndPos"></param>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.CloneModified(CADability.ModOp)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.CloneModified(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.GetPlanarState">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.GetPlanarState"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.GetPlane">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.GetPlane"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.IsInPlane(CADability.Plane)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.IsInPlane(CADability.Plane)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.GetProjectedCurve(CADability.Plane)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.GetProjectedCurve(CADability.Plane)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.Approximate(System.Boolean,System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.Approximate(System.Boolean,System.Double)"/>
            </summary>
            <param name="linesOnly"></param>
            <param name="maxError"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.TangentPosition(CADability.GeoVector)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.TangentPosition(CADability.GeoVector)"/>
            </summary>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.GetSelfIntersections">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.GetSelfIntersections"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.SameGeometry(CADability.GeoObject.ICurve,System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.SameGeometry(CADability.GeoObject.ICurve,System.Double)"/>
            </summary>
            <param name="other"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.PositionAtLength(System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.PositionAtLength(System.Double)"/>
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.DistanceTo(CADability.GeoPoint)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.DistanceTo(CADability.GeoPoint)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.TryPointDeriv2At(System.Double,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.TryPointDeriv2At(System.Double,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@)"/>
            </summary>
            <param name="position"></param>
            <param name="point"></param>
            <param name="deriv"></param>
            <param name="deriv2"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.GeoObject.GeneralCurve.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.GeoObject.CurveOnSurface">
            <summary>
            Curve given by a surface and a 2d curve on this surface. Used mainly for edges.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.CurveOnSurface.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.GeoObject.CurveOnSurface.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.GeoObject.TetraederHull">
            <summary>
            Diese Klasse hat den Zweck Methoden des ICurve Interfaces allgemein zu implementieren. Die Kurve wird von
            einer Tedraeder H√ºlle eingegrenzt und erm√∂glicht somit z.B. Schnitte und Extrempunkte zu bestimmen
            </summary>
        </member>
        <member name="T:CADability.GeoObject.GeoObjectChange">
            <summary>
            This class is used as a parameter in the <see cref="T:CADability.GeoObject.ChangeDelegate"/> event of IGeoObject 
            (see <see cref="E:CADability.GeoObject.IGeoObject.WillChangeEvent"/>).
            </summary>
        </member>
        <member name="F:CADability.GeoObject.GeoObjectChange.OnlyAttributeChanged">
            <summary>
            Notifies that only an attribute was changed in contrast to a change of the geometry.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.GeoObjectChange.NoUndoNecessary">
            <summary>
            Notifies that this change doesn't require an undo operation
            </summary>
        </member>
        <member name="M:CADability.GeoObject.GeoObjectChange.#ctor(CADability.GeoObject.IGeoObject,System.Type,System.String,System.Object[])">
            <summary>
            Creates a new GeoObjectChange object. See the appropriate constructor of <see cref="T:CADability.ReversibleChange"/> for details.
            </summary>
            <param name="objectToChange">The object which will be or was changed</param>
            <param name="interfaceForMethod">the interface on which contains the method or property</param>
            <param name="methodOrPropertyName">the case sensitive name of the method or property</param>
            <param name="parameters">The parameters neede to call this method or property</param>
        </member>
        <member name="M:CADability.GeoObject.GeoObjectChange.#ctor(CADability.GeoObject.IGeoObject,System.String,System.Object[])">
            <summary>
            Creates a new GeoObjectChange object. See the appropriate constructor of <see cref="T:CADability.ReversibleChange"/> for details.
            </summary>
            <param name="objectToChange">The object which will be or was changed</param>
            <param name="methodOrPropertyName">the case sensitive name of the method or property</param>
            <param name="parameters">The parameters neede to call this method or property</param>
        </member>
        <member name="M:CADability.GeoObject.GeoObjectChange.#ctor(CADability.GeoObject.IGeoObject,CADability.ModOp)">
            <summary>
            Creates a new GeoObjectChange object that reflects a modification by the <see cref="T:CADability.ModOp"/> m.
            </summary>
            <param name="objectToChange">The object which will be or was changed</param>
            <param name="m">the ModOp that changes or changed the object</param>
        </member>
        <member name="T:CADability.GeoObject.ChangeDelegate">
            <summary>
            Delegate method that is invoked when a GeoObject is about to change or did change.
            </summary>
            <param name="Sender">The GeoObject</param>
            <param name="Change">Type of change</param>
        </member>
        <member name="T:CADability.GeoObject.IGeoObjectOwner">
            <summary>
            An <see cref="T:CADability.GeoObject.IGeoObject"/> object is either owned by a <see cref="T:CADability.Model"/>
            or by a <see cref="T:CADability.GeoObject.Block"/> or it has no owner. The property <see cref="P:CADability.GeoObject.IGeoObject.Owner"/>
            sets or gets that owner. The <see cref="T:CADability.Model"/> or <see cref="T:CADability.GeoObject.Block"/> implement this
            interface. If you need more functionality than Add and Remove, try to cast
            IGeoObjectOwner to Model or Block.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectOwner.Remove(CADability.GeoObject.IGeoObject)">
            <summary>
            Removes the given <see cref="T:CADability.GeoObject.IGeoObject"/> from this container.
            </summary>
            <param name="toRemove">IGeoObject to remove</param>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectOwner.Add(CADability.GeoObject.IGeoObject)">
            <summary>
            Adds the given <see cref="T:CADability.GeoObject.IGeoObject"/> to this container.
            </summary>
            <param name="toAdd"></param>
        </member>
        <member name="T:CADability.GeoObject.IGeoObject">
            <summary>
            IGeoObject is the interface that all geometric entities must support 
            (see <a href="c90ccd0b-e1de-4859-8d4d-20e516a766cd.htm">GeoObject</a>). 
            </summary>
        </member>
        <member name="M:CADability.GeoObject.IGeoObject.Modify(CADability.ModOp)">
            <summary>
            Modifies this GeoObject with the given <see cref="T:CADability.ModOp">modification operation</see> 
            (includes moving, rotating, reflecting, scaling etc.).
            </summary>
            <param name="m">Operation to be applied</param>
        </member>
        <member name="M:CADability.GeoObject.IGeoObject.Clone">
            <summary>
            Clones this GeoObject.
            </summary>
            <returns>the cloned GeoObject</returns>
        </member>
        <member name="M:CADability.GeoObject.IGeoObject.HasChildren">
            <summary>
            Determins whether this GeoObject has child objects. E.g. <see cref="T:CADability.GeoObject.Block"/> objects have children.
            This is necessary when the child objects have different Layers
            </summary>
            <returns></returns>
        </member>
        <member name="P:CADability.GeoObject.IGeoObject.NumChildren">
            <summary>
            Returns the number of children the GeoObject has. Simple GeoObjects (like <see cref="T:CADability.GeoObject.Line"/>) 
            dont have children.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.IGeoObject.Child(System.Int32)">
            <summary>
            Returns the child with the given index. See <see cref="M:CADability.GeoObject.IGeoObject.HasChildren"/>.
            </summary>
            <param name="Index">index of required child</param>
            <returns>this child</returns>
        </member>
        <member name="P:CADability.GeoObject.IGeoObject.Owner">
            <summary>
            Returns the owner of this GeoObject. Each GeoObject has only one owner. 
            This might be a <see cref="T:CADability.Model"/> or a GeoObject derived from <see cref="T:CADability.GeoObject.Block"/>.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.IGeoObject.CopyGeometry(CADability.GeoObject.IGeoObject)">
            <summary>
            Copies the geometrical aspects of the given GeoObject to this GeoObject. Both objects
            must be of the same type. The attributes are not copied.
            </summary>
            <param name="ToCopyFrom">GeoObject to copy from</param>
        </member>
        <member name="M:CADability.GeoObject.IGeoObject.CopyAttributes(CADability.GeoObject.IGeoObject)">
            <summary>
            Copies the attributes from the given GeoObject to this GeoObject. The geometry remains unchanged.
            </summary>
            <param name="ToCopyFrom">GeoObject to copy from</param>
        </member>
        <member name="E:CADability.GeoObject.IGeoObject.WillChangeEvent">
            <summary>
            Event that must be provided by each GeoObject. This event will be fired when
            the GeoObject is about to change (either geometrical aspects or attributes).
            </summary>
        </member>
        <member name="E:CADability.GeoObject.IGeoObject.DidChangeEvent">
            <summary>
            Event that must be provided by each GeoObject. This event will be fired when
            the GeoObject did change (either geometrical aspects or attributes).
            </summary>
        </member>
        <member name="M:CADability.GeoObject.IGeoObject.GetShowProperties(CADability.IFrame)">
            <summary>
            Gets a <see cref="T:CADability.UserInterface.IShowProperty"/> object that represents the properties of
            this geoobject. The result will be used to display the properties in the 
            control center.
            </summary>
            <param name="Frame">IFrame reference used to check settings</param>
            <returns>properties</returns>
        </member>
        <member name="M:CADability.GeoObject.IGeoObject.GetAttributeProperties(CADability.IFrame)">
            <summary>
            Gets a list of <see cref="T:CADability.UserInterface.IShowProperty"/> objects that represent the non geometric
            properties of this geoobject. This list will be used during construct actions (e.g.
            when interactively drawing that object) to display properties like color or layer.
            </summary>
            <param name="Frame">IFrame reference used to check settings</param>
            <returns>list of properties</returns>
        </member>
        <member name="M:CADability.GeoObject.IGeoObject.GetBoundingCube">
            <summary>
            Returns a bounding cube of the object. The object must fir into this cube. 
            There may be a smaller cube that contains the object if it is to expensive to
            calculate the exact cube.
            </summary>
            <returns>the bounding cube</returns>
        </member>
        <member name="M:CADability.GeoObject.IGeoObject.UpdateAttributes(CADability.Attribute.IAttributeListContainer)">
            <summary>
            When an IGeoObject changes the context that contains the lists of attributes
            it must replace its attributes by those given in the new context. If there are
            no appropriate attributes in the new context, these attributes must be included
            int this new context. This happens when drag and drop operations are executed
            or when a model is copied from one project to another project.
            <see cref="T:CADability.GeoObject.IGeoObjectImpl"/> contains a complete implementation regarding
            the attributes <see cref="T:CADability.Attribute.Style"/>, <see cref="T:CADability.Attribute.Layer"/>, <see cref="T:CADability.Attribute.ColorDef"/>,
            <see cref="T:CADability.Attribute.LineWidth"/>, <see cref="T:CADability.Attribute.LinePattern"/>, <see cref="T:CADability.Attribute.HatchStyle"/> and <see cref="T:CADability.Attribute.DimensionStyle"/>
            </summary>
            <param name="alc">The context, usually a Project which contains the attribute lists</param>
        </member>
        <member name="P:CADability.GeoObject.IGeoObject.UserData">
            <summary>
            Gets the user data collection for this GeoObject. This is the way to connect your own
            objects with a GeoObject. See <see cref="P:CADability.GeoObject.IGeoObject.UserData"/>.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.IGeoObject.IsAttributeUsed(System.Object)">
            <summary>
            Returns true if this object uses the attribute in the parameter.
            Attributes may be CADability objects like <see cref="T:CADability.Attribute.Layer"/> etc.
            or any user defined objects.
            </summary>
            <param name="Attribute">attribut to check</param>
            <returns>true if used by this GeoObject</returns>
        </member>
        <member name="M:CADability.GeoObject.IGeoObject.SetNamedAttribute(System.String,CADability.INamedAttribute)">
            <summary>
            Sets an attribut to the GeoObject. There are the following types (keys) of attributes 
            predefined in CADability, which can be set with this method:
            <list type="">
            <item> "Layer": sets a <see cref="T:CADability.Attribute.Layer"/></item>
            <item> "ColorDef": sets a <see cref="T:CADability.Attribute.ColorDef"/></item>
            <item> "LineWidth": sets a <see cref="T:CADability.Attribute.LineWidth"/></item>
            <item> "LinePattern": sets a <see cref="T:CADability.Attribute.LinePattern"/></item>
            <item> "HatchStyle": sets a <see cref="T:CADability.Attribute.HatchStyle"/></item>
            <item> "DimensionStyle": sets a <see cref="T:CADability.Attribute.DimensionStyle"/></item>
            <item> "Style": sets a <see cref="T:CADability.Attribute.Style"/></item>
            </list>
            Other attributes may be provided by the user.
            </summary>
            <param name="key">key or typename of attribute to set</param>
            <param name="toSet">attribute</param>
        </member>
        <member name="M:CADability.GeoObject.IGeoObject.GetNamedAttribute(System.String)">
            <summary>
            Gets an attribut from the GeoObject. There are the following types (keys) of attributes 
            predefined in CADability, which can be set with this method:
            <list type="">
            <item> "Layer": sets a <see cref="T:CADability.Attribute.Layer"/></item>
            <item> "ColorDef": sets a <see cref="T:CADability.Attribute.ColorDef"/></item>
            <item> "LineWidth": sets a <see cref="T:CADability.Attribute.LineWidth"/></item>
            <item> "LinePattern": sets a <see cref="T:CADability.Attribute.LinePattern"/></item>
            <item> "HatchStyle": sets a <see cref="T:CADability.Attribute.HatchStyle"/></item>
            <item> "DimensionStyle": sets a <see cref="T:CADability.Attribute.DimensionStyle"/></item>
            <item> "Style": sets a <see cref="T:CADability.Attribute.Style"/></item>
            </list>
            Other attributes may be provided by the user.
            </summary>
            <param name="key">key or typename of the required attribute</param>
            <returns>the attribute or null, if there is no such attribute</returns>
        </member>
        <member name="P:CADability.GeoObject.IGeoObject.Attributes">
            <summary>
            Gets all attributes that this GeoObject posesses.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.IGeoObject.CustomAttributeKeys">
            <summary>
            Gets all custom attributes attached to this object
            </summary>
        </member>
        <member name="M:CADability.GeoObject.IGeoObject.AttributeChanged(CADability.INamedAttribute)">
            <summary>
            This method is called to notify the object of an attribute that changed some of 
            its properties. The objects returns true, if it needs to be repainted.
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="M:CADability.GeoObject.IGeoObject.ModifyWithMouse(System.Object,System.String,System.Boolean)">
            <summary>
            Notifies about the begin and end of a modification with the mouse
            </summary>
            <param name="sender">the causer</param>
            <param name="propertyName">name of the property beeing changed</param>
            <param name="startModify">true: beginning, false: ending</param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.IGeoObject.FindSnapPoint(CADability.GeoObject.SnapPointFinder)">
            <summary>
            Asks the object to enumerate all its possible snap points according to the 
            required modes defined by the parameter.
            </summary>
            <param name="spf">definition and collection of snap points</param>
        </member>
        <member name="M:CADability.GeoObject.IGeoObject.HasValidData">
            <summary>
            Determins whether the GeoObject has valid data (e.g. to be added to a model).
            E.g. a line where the startpoint is identical to the endpoint or a circle with 
            radius &lt;=0.0 is considered invalid.
            </summary>
            <returns>true, if valid, false otherwise</returns>
        </member>
        <member name="P:CADability.GeoObject.IGeoObject.Description">
            <summary>
            Returns a description of the GeoObject which is used in the control center
            </summary>
            <returns>a short description</returns>
        </member>
        <member name="M:CADability.GeoObject.IGeoObject.PrePaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Called before PaintTo3D, not collected in the DisplayList
            </summary>
            <param name="paintTo3D"></param>
        </member>
        <member name="M:CADability.GeoObject.IGeoObject.PaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Paint the object to the 3D display machine and returns a (possibly cached) displaylist
            </summary>
            <param name="paintTo3D">where to paint</param>
        </member>
        <member name="M:CADability.GeoObject.IGeoObject.PrepareDisplayList(System.Double)">
            <summary>
            This method will be called from a background thread when a higher precision
            displaylist is needed. The object should do all the necessary calculation
            to produce a display list with the required precision. The display list 
            will later be acquired by a call to PaintTo3DList (or PaintTo3D) from the main thred
            because the display dirvers are not multithread enabled.
            </summary>
            <param name="precision">The required precision</param>
        </member>
        <member name="M:CADability.GeoObject.IGeoObject.PropagateAttributes(CADability.Attribute.Layer,CADability.Attribute.ColorDef)">
            <summary>
            Propagates the layer and color from the owner (usually a <see cref="T:CADability.GeoObject.BlockRef"/>) to this object.
            </summary>
            <param name="layer">The layer</param>
            <param name="colorDef">The color</param>
        </member>
        <member name="P:CADability.GeoObject.IGeoObject.Actuator">
            <summary>
            Gets or sets an actuator or drive that defines the mechanical constraint or degree of freedom for this object
            Used for animation, static objects dont have an actuator (null)
            </summary>
        </member>
        <member name="T:CADability.GeoObject.GeoObjectException">
            <summary>
            Exception type thrown by GeoObjects
            </summary>
        </member>
        <member name="T:CADability.GeoObject.GeoObjectException.tExceptionType">
            <summary>
            Kind of exception
            </summary>
        </member>
        <member name="F:CADability.GeoObject.GeoObjectException.tExceptionType.NoChildren">
            <summary>
            This GeoObject has no children
            </summary>
        </member>
        <member name="F:CADability.GeoObject.GeoObjectException.tExceptionType.InvalidPropertyPage">
            <summary>
            The property page is invalid
            </summary>
        </member>
        <member name="F:CADability.GeoObject.GeoObjectException.ExceptionType">
            <summary>
            Gets the kind of exception
            </summary>
        </member>
        <member name="T:CADability.GeoObject.IGeoObjectImpl">
            <summary>
            This class helps to implement IGeoObject by implementing some IGeoObject methods
            in a default way and by offering some helper methods.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.IGeoObjectImpl.isChanging">
            <summary>
            Each call to <see cref="M:CADability.GeoObject.IGeoObjectImpl.FireWillChange(CADability.GeoObject.GeoObjectChange)"/> increments this value, each call to
            <see cref="M:CADability.GeoObject.IGeoObjectImpl.FireDidChange(CADability.GeoObject.GeoObjectChange)"/> decrements this value. If isChanging is 0
            then the object is in a stable state.
            </summary>
        </member>
        <member name="T:CADability.GeoObject.IGeoObjectImpl.ChangingException">
            <summary>
            An ApplicationException thrown when an error happens during a change operation.
            </summary>
        </member>
        <member name="T:CADability.GeoObject.IGeoObjectImpl.ChangingAttribute">
            <summary>
            Helper class to wrap the setting of an attribute. Usually used in this way:
            <code>
                using (new ChangingAttribute(this,atrName,attribute))
                {
                    // ... set the attribute here ...
                }
            </code>
            This will call <see cref="M:CADability.GeoObject.IGeoObjectImpl.FireWillChange(CADability.GeoObject.GeoObjectChange)"/> before the attribute is changed
            and <see cref="M:CADability.GeoObject.IGeoObjectImpl.FireDidChange(CADability.GeoObject.GeoObjectChange)"/> after the attribute was changed.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.ChangingAttribute.#ctor(CADability.GeoObject.IGeoObjectImpl,System.String,System.Object)">
            <summary>
            Creates a ChangingAttribute
            </summary>
            <param name="geoObject">causing GeoObject</param>
            <param name="propertyName">name of the property to set the attribute</param>
            <param name="propertyValue">the attribute beeing set</param>
        </member>
        <member name="T:CADability.GeoObject.IGeoObjectImpl.Changing">
            <summary>
            Helper class to wrap any changing of this GeoObject. Usually used in this way:
            <code>
                using (new Changing(this,...))
                {
                    // ... make the change here ...
                }
            </code>
            This will call <see cref="M:CADability.GeoObject.IGeoObjectImpl.FireWillChange(CADability.GeoObject.GeoObjectChange)"/> before the GeoObject is changed
            and <see cref="M:CADability.GeoObject.IGeoObjectImpl.FireDidChange(CADability.GeoObject.GeoObjectChange)"/> after the GeoObject was changed with the appropriate parameters.
            Changig takes nested changes into account and raises the events only at the outermost level.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.Changing.NoUndoNecessary">
            <summary>
            Sets <see cref="F:CADability.GeoObject.GeoObjectChange.NoUndoNecessary"/> to true for the
            parameter of the call to <see cref="M:CADability.GeoObject.IGeoObjectImpl.FireWillChange(CADability.GeoObject.GeoObjectChange)"/> 
            and <see cref="M:CADability.GeoObject.IGeoObjectImpl.FireDidChange(CADability.GeoObject.GeoObjectChange)"/>.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.Changing.#ctor(CADability.GeoObject.IGeoObjectImpl,System.String)">
            <summary>
            Changing a property, that has public get and set methods, and has only
            one property with this name. On construction the value of that property
            will be requested by a reflection call to "get_PropertyName"
            </summary>
            <param name="geoObject">The GeoObject</param>
            <param name="PropertyName">The Name of the property</param>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.Changing.#ctor(CADability.GeoObject.IGeoObjectImpl,System.Boolean,System.Boolean,System.String,System.Object[])">
            <summary>
            Changing a GeoObject with a specification on how to undo that change.
            Undo might be performed later vie reflection. So we need the name of the method
            here and the parameters for that method.
            </summary>
            <param name="geoObject">the GeoObject</param>
            <param name="noUndo">true if no undo is required, false otherwise</param>
            <param name="onlyAttribute">true if only an attribute is changed not the geometry</param>
            <param name="MethodOrPropertyName">name of a public method that might be called later by undo</param>
            <param name="Parameters">parameters for the method</param>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.Changing.#ctor(CADability.GeoObject.IGeoObjectImpl)">
            <summary>
            Changing geometrical aspects of an GeoObject. A <see cref="M:CADability.GeoObject.IGeoObjectImpl.Clone"/> of this GeoObject is 
            made and saved and <see cref="M:CADability.GeoObject.IGeoObjectImpl.CopyGeometry(CADability.GeoObject.IGeoObject)"/> might be called with that clone later
            when there is an undo.
            </summary>
            <param name="geoObject">the GeoObject</param>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.Changing.#ctor(CADability.GeoObject.IGeoObjectImpl,System.Boolean,System.Boolean)">
            <summary>
            Changing geometrical aspects of an GeoObject. A <see cref="M:CADability.GeoObject.IGeoObjectImpl.Clone"/> of this GeoObject is 
            made and saved and <see cref="M:CADability.GeoObject.IGeoObjectImpl.CopyGeometry(CADability.GeoObject.IGeoObject)"/> might be called with that clone later
            when there is an undo.
            </summary>
            <param name="geoObject">the GeoObject</param>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.Changing.#ctor(CADability.GeoObject.IGeoObjectImpl,System.Boolean)">
            <summary>
            Changing geometrical aspects of an GeoObject. A <see cref="M:CADability.GeoObject.IGeoObjectImpl.Clone"/> of this GeoObject is 
            made and saved and <see cref="M:CADability.GeoObject.IGeoObjectImpl.CopyGeometry(CADability.GeoObject.IGeoObject)"/> might be called with that clone later
            when there is an undo.
            </summary>
            <param name="geoObject">the GeoObject</param>
            <param name="UndoNecessary">true, if undo is required</param>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.Changing.#ctor(CADability.GeoObject.IGeoObjectImpl,System.String,System.Object[])">
            <summary>
            Changing a GeoObject with a specification on how to undo that change.
            Undo might be performed later vie reflection. So we need the name of the method
            here and the parameters for that method.
            </summary>
            <param name="geoObject">the GeoObject</param>
            <param name="MethodOrPropertyName">name of a public method that might be called later by undo</param>
            <param name="Parameters">parameters for the method</param>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.Changing.#ctor(CADability.GeoObject.IGeoObjectImpl,System.Type,System.String,System.Object[])">
            <summary>
            Changing a GeoObject with a specification on how to undo that change.
            Undo might be performed later vie reflection. So we need the name of the method
            here and the parameters for that method. The method must be in the given interface.
            </summary>
            <param name="geoObject">the GeoObject</param>
            <param name="interfaceForMethod">the type of the interface which contains the method</param>
            <param name="MethodOrPropertyName">name of a public method that might be called later by undo</param>
            <param name="Parameters">parameters for the method</param>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.Changing.Dispose">
            <summary>
            Implements IDisposable.Dispose. Calls <see cref="M:CADability.GeoObject.IGeoObjectImpl.FireDidChange(CADability.GeoObject.GeoObjectChange)"/> when not inside a nested
            changing.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.#ctor">
            <summary>
            Constructor that initializes some members. Must always be called
            </summary>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="E:CADability.GeoObject.IGeoObjectImpl.WillChangeEvent">
            <summary>
            Event that is raised when the GeoObject is about to change. 
            </summary>
        </member>
        <member name="E:CADability.GeoObject.IGeoObjectImpl.DidChangeEvent">
            <summary>
            Event that is raised when the GeoObject did change. 
            </summary>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.FireWillChange(CADability.GeoObject.GeoObjectChange)">
            <summary>
            Helper method to rais the <see cref="E:CADability.GeoObject.IGeoObjectImpl.WillChangeEvent"/>.
            </summary>
            <param name="Change">type of chage that is about to happen</param>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.FireDidChange(CADability.GeoObject.GeoObjectChange)">
            <summary>
            Helper method to raise the <see cref="E:CADability.GeoObject.IGeoObjectImpl.DidChangeEvent"/>.
            </summary>
            <param name="Change">type of chage that did happen</param>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObject.Modify(CADability.ModOp)"/>. Must be implemented by each GeoObject.
            No default implementation.
            </summary>
            <param name="m">the modification</param>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.ModifyInverse(CADability.ModOp)">
            <summary>
            Modify with the inverse modification. Calls Modify(m.GetInverse());
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObject.Clone"/>. Must be implemented by each GeoObject. No default implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.HasChildren">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObject.HasChildren"/>. The deafult implementation returns false.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CADability.GeoObject.IGeoObjectImpl.NumChildren">
            <summary>
            Overrides <see cref="P:CADability.GeoObject.IGeoObject.NumChildren"/>. The default implementation returns 0.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.Child(System.Int32)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObject.Child(System.Int32)"/>. The default implementation throws
            a <see cref="T:CADability.GeoObject.GeoObjectException"/> <see cref="F:CADability.GeoObject.GeoObjectException.tExceptionType.NoChildren"/>.
            </summary>
            <param name="Index"></param>
            <returns></returns>
        </member>
        <member name="P:CADability.GeoObject.IGeoObjectImpl.Owner">
            <summary>
            Overrides <see cref="P:CADability.GeoObject.IGeoObject.Owner"/>. Fully implements set and get property
            and saves the value in a private member.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.IsAttributeUsed(System.Object)">
            <summary>
            /// Overrides <see cref="M:CADability.GeoObject.IGeoObject.IsAttributeUsed(System.Object)"/>. The default implementation recursively
            calls IsAttributeUsed for all children (if any) and then checks the usage for all
            attributes implemented by CADability. No checks are performed for non CADability
            attributes. So you can override this method to handle your own attributes and call
            the base implementation for CADability attributes.
            </summary>
            <param name="attribute">attribut to check</param>
            <returns>true if used by this GeoObject</returns>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.AttributeChanged(CADability.INamedAttribute)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObject.AttributeChanged(CADability.INamedAttribute)"/>. Checks all CADability attributes.
            Checking your own attributes is left to your code.
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.CopyGeometry(CADability.GeoObject.IGeoObject)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObject.CopyGeometry(CADability.GeoObject.IGeoObject)"/>, but doesn't implement it.
            Must be implemented by each GeoObject.
            </summary>
            <param name="ToCopyFrom">GeoObject to copy geometrical data from</param>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.CopyAttributes(CADability.GeoObject.IGeoObject)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.IGeoObject.CopyAttributes(CADability.GeoObject.IGeoObject)"/>. The default implementation handles
            all CADability attributes and leaves the handling of non CADability attributes to your code.
            </summary>
            <param name="ToCopyFrom">GeoObject to copy attribute data from</param>
        </member>
        <member name="P:CADability.GeoObject.IGeoObjectImpl.Attributes">
            <summary>
            Implements <see cref="P:CADability.GeoObject.IGeoObject.Attributes"/>. Returns a collection af all CADability attributes
            used by this GeoObject. Non CADability attributes must be handled by your code.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.SetNamedAttribute(System.String,CADability.INamedAttribute)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.IGeoObject.SetNamedAttribute(System.String,CADability.INamedAttribute)"/>. The default implementation handles
            all CADability attributes and leaves the handling of non CADability attributes to your code.
            </summary>
            <param name="key">key or typename of attribute to set</param>
            <param name="toSet">attribute</param>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.GetNamedAttribute(System.String)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.IGeoObject.GetNamedAttribute(System.String)"/>. The default implementation handles
            all CADability attributes and leaves the handling of non CADability attributes to your code.
            </summary>
            <param name="key">key or typename of attribute to set</param>
            <returns>the named attribute</returns>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements ISerializable.GetObjectData. Saves <see cref="P:CADability.GeoObject.IGeoObjectImpl.UserData"/>, <see cref="P:CADability.GeoObject.IGeoObjectImpl.Layer"/> and <see cref="P:CADability.GeoObject.IGeoObjectImpl.Style"/>.
            All other properties of the GeoObject must be saved by the derived class. don't forget
            to call the base implementation
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.GetShowProperties(CADability.IFrame)">
            <summary>
            Should be overridden and return a <see cref="T:CADability.UserInterface.IShowProperty"/> derived object
            that handles the display and modification of the properties of the IGeoObject derived object.
            Default implementation return null.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.GetAttributeProperties(CADability.IFrame)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.IGeoObject.GetAttributeProperties(CADability.IFrame)"/>. The default implementation returns
            ShowProperties for all CADability attributes.
            </summary>
            <param name="Frame">the frame of the view</param>
            <returns>list of showproperties</returns>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.GetBoundingCube">
            <summary>
            Implements <see cref="M:CADability.GeoObject.IGeoObject.GetBoundingCube"/> abstract.
            Must be overridden. 
            </summary>
            <returns>the bounding cube</returns>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.UpdateAttributes(CADability.Attribute.IAttributeListContainer)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.IGeoObject.UpdateAttributes(CADability.Attribute.IAttributeListContainer)"/> for all CADability attributes.
            Non CADability attributes are not handled and must be handled if there are any.
            </summary>
            <param name="alc"></param>
        </member>
        <member name="P:CADability.GeoObject.IGeoObjectImpl.UserData">
            <summary>
            Fully implements <see cref="P:CADability.GeoObject.IGeoObject.UserData"/>. No need to override.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.IGeoObjectImpl.isModifyingWithMouse">
            <summary>
            depreciated
            </summary>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.ModifyWithMouse(System.Object,System.String,System.Boolean)">
            <summary>
            depreciated
            </summary>
            <param name="sender"></param>
            <param name="propertyName"></param>
            <param name="startModify"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.FindSnapPoint(CADability.GeoObject.SnapPointFinder)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.IGeoObject.FindSnapPoint(CADability.GeoObject.SnapPointFinder)"/>, but does nothing. Should be overridden.
            </summary>
            <param name="spf"></param>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.HasValidData">
            <summary>
            Default implementation of IGeoObject.HasValidData. Returns true.
            Override if the derived object can decide itself.
            </summary>
            <returns>true</returns>
        </member>
        <member name="P:CADability.GeoObject.IGeoObjectImpl.Description">
            <summary>
            Returns a textual description of the GeoObject. Mainly used for debugging purposes
            </summary>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Patin the object to th <see cref="T:CADability.IPaintTo3D"/> interface. 
            </summary>
            <param name="paintTo3D">Target for the paint operation</param>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.PrepareDisplayList(System.Double)">
            <summary>
            Called before <see cref="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3D(CADability.IPaintTo3D)"/> is called, should implement the time consuming work for the display (like calculationg the triangulation
            of Faces or Polylines of Curves). Not normally used by user code.
            </summary>
            <param name="precision">Required precision</param>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.PrePaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Hier kann man Dinge vor OpenList tun (da sie selbst vielleicht ein OpenList ben√∂tigen)
            </summary>
            <param name="paintTo3D"></param>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3DList(CADability.IPaintTo3D,CADability.GeoObject.ICategorizedDislayLists)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.IGeoObject.PaintTo3DList(CADability.IPaintTo3D,CADability.GeoObject.ICategorizedDislayLists)"/>
            </summary>
            <param name="paintTo3D"></param>
            <param name="lists"></param>
        </member>
        <member name="P:CADability.GeoObject.IGeoObjectImpl.PreferredStyle">
            <summary>
            Returns the preferred style for this objects, see <see cref="T:CADability.Attribute.Style.EDefaultFor"/>.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Returns the 2 dimensional extent of objects for a specific projection.
            </summary>
            <param name="projection">The projection for which the extent is beeing queried</param>
            <param name="extentPrecision">Raw or exact extent</param>
            <returns>The 2 dimensional extent.</returns>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Deprecated.
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="P:CADability.GeoObject.IGeoObjectImpl.OwnedItems">
            <summary>
            Returns an array of objects owned by this object. E.g. a face is owned by a shell.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.IGeoObjectImpl.IsVisible">
            <summary>
            Reads or writes the visible flag. Invisible objects ar not displayed.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.PropagateAttributes(CADability.Attribute.Layer,CADability.Attribute.ColorDef)">
            <summary>
            Sets the provided layer and color to this object and propagates these attributes to the owned objects.
            </summary>
            <param name="layer">Layer to set</param>
            <param name="colorDef">Color to set</param>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.Decompose">
            <summary>
            Decomposes this GeoObject into simpler GeoObjects. May return null if there are no simpler objects.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CADability.GeoObject.IGeoObjectImpl.Actuator">
            <summary>
            Sets or gets the drive assiziated with this GeoObject
            </summary>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.SetColorDef(CADability.Attribute.ColorDef@,CADability.Attribute.ColorDef)">
            <summary>
            Hilfsfunktion zum Setzen der Farbe und gleichzeitig die Events feuern
            </summary>
            <param name="color">Referenz auf die i.a. private Membervariable</param>
            <param name="c">der neue Farbwert</param>
        </member>
        <member name="P:CADability.GeoObject.IGeoObjectImpl.Layer">
            <summary>
            Fully implements <see cref="P:CADability.Attribute.ILayer.Layer"/>. Stores the layer in a private member.
            Setting raises the <see cref="E:CADability.GeoObject.IGeoObjectImpl.WillChangeEvent"/> and <see cref="E:CADability.GeoObject.IGeoObjectImpl.DidChangeEvent"/>.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.IGeoObjectImpl.Style">
            <summary>
            Fully implements <see cref="P:CADability.Attribute.IStyle.Style"/>. Stores the style in a private member.
            Setting raises the <see cref="E:CADability.GeoObject.IGeoObjectImpl.WillChangeEvent"/> and <see cref="E:CADability.GeoObject.IGeoObjectImpl.DidChangeEvent"/>.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.IGeoObjectImpl.StyleIsValid">
            <summary>
            Returns true, if the setting of the style of this object is identical to the
            setting of the individual attributes, false otherwise
            </summary>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(CADability.GeoObject.IGeoObject,CADability.Projection,System.Boolean)">
            <summary>
            Returns the bounding rectangle of the GeoObject with respect to a specified projection
            </summary>
            <param name="go">the GeoObject</param>
            <param name="projection">the projection</param>
            <param name="regardLineWidth">regard line with</param>
            <returns>the bounding rectangle</returns>
        </member>
        <member name="M:CADability.GeoObject.IGeoObjectImpl.IsOwnedByBlockRef(CADability.GeoObject.IGeoObject)">
            <summary>
            Checks whether the GeoObject is owned by a <see cref="T:CADability.GeoObject.BlockRef"/> object.
            </summary>
            <param name="toTest"></param>
            <returns></returns>
        </member>
        <member name="T:CADability.GeoObject.GeoObjectList">
            <summary>
            Simple list of GeoObjects (IGeoObject). Implemented as an ArrayList.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.GeoObjectList.RemoveChildrenOf(CADability.GeoObject.IGeoObject)">
            <summary>
            Removes all GeoObjects that are owned by Parent
            </summary>
            <param name="Parent">The owner</param>
        </member>
        <member name="M:CADability.GeoObject.GeoObjectList.Reduce(CADability.Attribute.FilterList)">
            <summary>
            Remove all objects that are not accepted by the given filter.
            </summary>
            <param name="filterList">List of filters to check with</param>
        </member>
        <member name="M:CADability.GeoObject.GeoObjectList.HasSameContent(CADability.GeoObject.GeoObjectList)">
            <summary>
            Tests, weather this list and the list l have the same content 
            (maybe in a different order)
            </summary>
            <param name="l">The GeoObjectList to compare with this list</param>
            <returns>true if the lists have the same content</returns>
        </member>
        <member name="M:CADability.GeoObject.GeoObjectList.CloneObjects">
            <summary>
            Returns a deep clone of the list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.GeoObjectList.Clone">
            <summary>
            Returns a new independent GeoObjectList that contains the same objects as
            this list (shallow copy)
            </summary>
            <returns>the new list</returns>
        </member>
        <member name="P:CADability.GeoObject.GeoObjectList.Count">
            <summary>
            Returns the number of GeoObjects in this list.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.GeoObjectList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.GeoObject.GeoObjectList.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="M:CADability.GeoObject.GeoObjectList.ReduceToOwner">
            <summary>
            A GeoObjectList is reduced to the owners of the contained objects. I.e. when an object has an owner
            of type IGeoObject (like a child of a <see cref="T:CADability.GeoObject.Block"/>), it is removed from the list and the owner is 
            added instead. As a result, the list contains only objects that are owned by a <see cref="T:CADability.Model"/> or
            don't have an owner at all.
            </summary>
        </member>
        <member name="T:CADability.GeoObject.Hatch">
            <summary>
            A GeoObject that represents a flat (2d) shape filled by a <see cref="T:CADability.Attribute.HatchStyle"/>. 
            It also acts as a <see cref="T:CADability.GeoObject.Block"/> presenting e.g. the hatch lines as its 
            containing child objects.
            To fully define a Hatch object you have to set these three properties: <see cref="P:CADability.GeoObject.Hatch.Plane"/>, 
            <see cref="P:CADability.GeoObject.Hatch.CompoundShape"/> and <see cref="P:CADability.GeoObject.Hatch.HatchStyle"/>. If you omit one of these properties
            you wont see the Hatch object as it is not fully defined. No defaults are assumed.
            </summary>
        </member>
        <member name="T:CADability.GeoObject.Hatch.ConstructionDelegate">
            <summary>
            Delegate definition for <see cref="F:CADability.GeoObject.Hatch.Constructor"/>
            </summary>
            <returns>your derived Hatch Object</returns>
        </member>
        <member name="F:CADability.GeoObject.Hatch.Constructor">
            <summary>
            Factory mechanism for constructing Hatch objects
            If you have a class derivec from this class (Hatch) and everytime CADability creates a hatch
            object your object should be created, you have to register your static construct method here.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Hatch.Construct">
            <summary>
            The only way to construct a hatch object. If a <see cref="F:CADability.GeoObject.Hatch.Constructor"/> is registered,
            this constructor will be used, if not a Hatch object is created.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Hatch.#ctor">
            <summary>
            Empty constructor, must be called when a derived object is constructed.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Hatch.Recalc">
            <summary>
            After the <see cref="P:CADability.GeoObject.Hatch.HatchStyle"/>, the <see cref="P:CADability.GeoObject.Hatch.CompoundShape"/> or the <see cref="P:CADability.GeoObject.Hatch.HatchStyle"/> has been modified
            this method must be called to calculate the new contents.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Hatch.CompoundShape">
            <value>
            The shape (<see cref="T:CADability.Shapes.CompoundShape"/>, bounding curves and holes) which is handled by this object
            </value>
        </member>
        <member name="P:CADability.GeoObject.Hatch.HatchStyle">
            <summary>
            The <see cref="T:CADability.Attribute.HatchStyle"/> that defines the interior of this object
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Hatch.Plane">
            <summary>
            The <see cref="T:CADability.Plane"/> which defines the 3d position of the <see cref="P:CADability.GeoObject.Hatch.CompoundShape"/>.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Hatch.Decompose">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Decompose"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Hatch.Modify(CADability.ModOp)">
            <summary>
            Overrides IGeoObjectImpl.<see cref="M:CADability.GeoObject.IGeoObjectImpl.Modify(CADability.ModOp)"/> and implements IGeoObject.<see cref="M:CADability.GeoObject.IGeoObject.Modify(CADability.ModOp)"/>.
            </summary>
            <param name="m">see <see cref="M:CADability.GeoObject.IGeoObject.Modify(CADability.ModOp)"/></param>
        </member>
        <member name="M:CADability.GeoObject.Hatch.Clone">
            <summary>
            Overrides IGeoObjectImpl.<see cref="M:CADability.GeoObject.IGeoObjectImpl.Clone"/> and implements IGeoObject.<see cref="M:CADability.GeoObject.IGeoObject.Clone"/>.
            </summary>
            <returns>see <see cref="M:CADability.GeoObject.IGeoObject.Clone"/></returns>
        </member>
        <member name="M:CADability.GeoObject.Hatch.CopyGeometry(CADability.GeoObject.IGeoObject)">
            <summary>
            Overrides IGeoObjectImpl.<see cref="M:CADability.GeoObject.IGeoObjectImpl.CopyGeometry(CADability.GeoObject.IGeoObject)"/> and implements IGeoObject.<see cref="M:CADability.GeoObject.IGeoObject.CopyGeometry(CADability.GeoObject.IGeoObject)"/>.
            </summary>
            <param name="ToCopyFrom">see <see cref="M:CADability.GeoObject.IGeoObject.CopyGeometry(CADability.GeoObject.IGeoObject)"/></param>
        </member>
        <member name="M:CADability.GeoObject.Hatch.GetAttributeProperties(CADability.IFrame)">
            <summary>
            Overrides IGeoObjectImpl.<see cref="M:CADability.GeoObject.IGeoObjectImpl.GetAttributeProperties(CADability.IFrame)"/> and implements IGeoObject.<see cref="M:CADability.GeoObject.IGeoObject.GetAttributeProperties(CADability.IFrame)"/>.
            </summary>
            <param name="Frame">see <see cref="M:CADability.GeoObject.IGeoObject.GetAttributeProperties(CADability.IFrame)"/></param>
            <returns>see <see cref="M:CADability.GeoObject.IGeoObject.GetAttributeProperties(CADability.IFrame)"/></returns>
        </member>
        <member name="M:CADability.GeoObject.Hatch.GetShowProperties(CADability.IFrame)">
            <summary>
            Overrides IGeoObjectImpl.<see cref="M:CADability.GeoObject.IGeoObjectImpl.GetShowProperties(CADability.IFrame)"/> and implements IGeoObject.<see cref="M:CADability.GeoObject.IGeoObject.GetShowProperties(CADability.IFrame)"/>.
            </summary>
            <param name="Frame">see <see cref="M:CADability.GeoObject.IGeoObject.GetShowProperties(CADability.IFrame)"/></param>
            <returns>see <see cref="M:CADability.GeoObject.IGeoObject.GetShowProperties(CADability.IFrame)"/></returns>
        </member>
        <member name="M:CADability.GeoObject.Hatch.IsAttributeUsed(System.Object)">
            <summary>
            Overrides IGeoObjectImpl.<see cref="M:CADability.GeoObject.IGeoObjectImpl.IsAttributeUsed(System.Object)"/> and implements IGeoObject.<see cref="M:CADability.GeoObject.IGeoObject.IsAttributeUsed(System.Object)"/>.
            </summary>
            <param name="Attribute">see <see cref="M:CADability.GeoObject.IGeoObject.IsAttributeUsed(System.Object)"/></param>
            <returns>see <see cref="M:CADability.GeoObject.IGeoObject.IsAttributeUsed(System.Object)"/></returns>
        </member>
        <member name="M:CADability.GeoObject.Hatch.PaintTo3DList(CADability.IPaintTo3D,CADability.GeoObject.ICategorizedDislayLists)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3DList(CADability.IPaintTo3D,CADability.GeoObject.ICategorizedDislayLists)"/>
            </summary>
            <param name="paintTo3D"></param>
            <param name="lists"></param>
        </member>
        <member name="M:CADability.GeoObject.Hatch.PaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3D(CADability.IPaintTo3D)"/>
            </summary>
            <param name="paintTo3D"></param>
        </member>
        <member name="M:CADability.GeoObject.Hatch.GetExtent(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Hatch.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Hatch.GetBoundingCube">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetBoundingCube"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Hatch.GetExtent(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(System.Double)"/>
            </summary>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Hatch.HitTest(CADability.BoundingCube@,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.BoundingCube@,System.Double)"/>
            </summary>
            <param name="cube"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Hatch.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)"/>
            </summary>
            <param name="projection"></param>
            <param name="rect"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Hatch.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)"/>
            </summary>
            <param name="fromHere"></param>
            <param name="direction"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Hatch.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.GeoObject.Hatch.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements ISerializable:GetObjectData
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:CADability.GeoObject.HelicalSurface">
            <summary>
            A helical surface defined by an axis, a curve and a pitch. the curve and the axis must reside in a common plane. The curve is revolved around the axis
            while beeing moved in direction of the axis. The distance movement in direction of the aixs is "pitch" for one full turn.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.HelicalSurface.Location">
            <summary>
            Returns the location of the axis of revolution
            </summary>
        </member>
        <member name="P:CADability.GeoObject.HelicalSurface.Axis">
            <summary>
            Returns the direction of the axis of revolution
            </summary>
        </member>
        <member name="P:CADability.GeoObject.HelicalSurface.XAxis">
            <summary>
            Returns the 0 position of the revolution
            </summary>
        </member>
        <member name="P:CADability.GeoObject.HelicalSurface.BasisCurve">
            <summary>
            Returns the curve that is rotated to form this surface
            </summary>
        </member>
        <member name="M:CADability.GeoObject.HelicalSurface.PointAt(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.PointAt(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.HelicalSurface.UDirection(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.UDirection(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.HelicalSurface.VDirection(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.VDirection(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.HelicalSurface.GetNormal(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetNormal(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.HelicalSurface.GetZMinMax(CADability.Projection,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetZMinMax(CADability.Projection,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)"/>
            </summary>
            <param name="p"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="zMin"></param>
            <param name="zMax"></param>
        </member>
        <member name="M:CADability.GeoObject.HelicalSurface.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.HelicalSurface.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Modify(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.GeoObject.HelicalSurface.GetModified(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetModified(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.HelicalSurface.CopyData(CADability.GeoObject.ISurface)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.CopyData(CADability.GeoObject.ISurface)"/>
            </summary>
            <param name="CopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.HelicalSurface.FixedU(System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.FixedU(System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="u"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.HelicalSurface.FixedV(System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.FixedV(System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="v"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.HelicalSurface.Orientation(CADability.GeoPoint)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Orientation(CADability.GeoPoint)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.HelicalSurface.ReverseOrientation">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.ReverseOrientation"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.HelicalSurface.GetSafeParameterSteps(System.Double,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetSafeParameterSteps(System.Double,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)"/>
            </summary>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="intu"></param>
            <param name="intv"></param>
        </member>
        <member name="M:CADability.GeoObject.HelicalSurface.SameGeometry(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect,System.Double,CADability.ModOp2D@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.SameGeometry(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect,System.Double,CADability.ModOp2D@)"/>
            </summary>
            <param name="thisBounds"></param>
            <param name="other"></param>
            <param name="otherBounds"></param>
            <param name="precision"></param>
            <param name="firstToSecond"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.HelicalSurface.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="T:CADability.GeoObject.Intersection">
            <summary>
            This class provides some static methods concerning the intersection of 3D
            <see cref="T:CADability.GeoObject.IGeoObject"/> objects. The class <see cref="T:CADability.GeoObject.Curves"/> also provides
            some inetersction methods of <see cref="T:CADability.GeoObject.ICurve"/> objects.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Intersection.Intersect(CADability.GeoObject.GeoObjectList,CADability.Plane)">
            <summary>
            Calculates intersection objects. The objects in the list toIntersect are 
            intersected with the plane intersectWith.
            </summary>
            <param name="toIntersect">list of objects to intersect</param>
            <param name="intersectWith">plane to intersect with</param>
            <returns>intersection objects</returns>
        </member>
        <member name="T:CADability.GeoObject.Line">
            <summary>
            The line is a <see href="GeoObject.html">IGeoObject</see>. It is actually a line segment
            not an infinite line.
            </summary>
        </member>
        <member name="T:CADability.GeoObject.Line.ConstructionDelegate">
            <summary>
            Delegate for the construction of a Line.
            </summary>
            <returns>A Line or Line derived class</returns>
        </member>
        <member name="F:CADability.GeoObject.Line.Constructor">
            <summary>
            Provide a delegate here if you want you Line derived class to be 
            created each time CADability creates a line.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Line.Construct">
            <summary>
            The only way to create a line. There are no public constructors for the line to assure
            that this is the only way to construct a line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Line.#ctor">
            <summary>
            Empty protected constructor.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Line.StartPoint">
            <summary>
            Sets or gets the startpoint of the line. Setting the startpoint causes the line to fire the
            <see cref="E:CADability.GeoObject.IGeoObject.WillChangeEvent"/> and the <see cref="E:CADability.GeoObject.IGeoObject.DidChangeEvent"/>.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Line.EndPoint">
            <summary>
            Sets or gets the endpoint of the line. Setting the endpoint causes the line to fire the
            <see cref="E:CADability.GeoObject.IGeoObject.WillChangeEvent"/> and the <see cref="E:CADability.GeoObject.IGeoObject.DidChangeEvent"/>.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Line.SetTwoPoints(CADability.GeoPoint,CADability.GeoPoint)">
            <summary>
            Sets the start and endpoint of the line. This method causes the line to fire the
            <see cref="E:CADability.GeoObject.IGeoObject.WillChangeEvent"/> and the <see cref="E:CADability.GeoObject.IGeoObject.DidChangeEvent"/>.
            </summary>
            <param name="startPoint">the new startpoint</param>
            <param name="endPoint">the new endpoint</param>
        </member>
        <member name="P:CADability.GeoObject.Line.Length">
            <summary>
            Gets or sets the length of the line. Setting the length modifies the endpoint and keeps the startpoint
            and causes the line to fire the
            <see cref="E:CADability.GeoObject.IGeoObject.WillChangeEvent"/> and the <see cref="E:CADability.GeoObject.IGeoObject.DidChangeEvent"/>.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Line.LengthFixPoint">
            <summary>
            do not use, used only internaly.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Line.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Modify(CADability.ModOp)"/> and implements <see cref="M:CADability.GeoObject.IGeoObject.Modify(CADability.ModOp)"/>.
            </summary>
            <param name="m">the operator for the modification</param>
        </member>
        <member name="M:CADability.GeoObject.Line.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Clone"/> and implements <see cref="M:CADability.GeoObject.IGeoObject.Clone"/>.
            Returns a clone of this line.
            </summary>
            <returns>the clone</returns>
        </member>
        <member name="M:CADability.GeoObject.Line.CopyGeometry(CADability.GeoObject.IGeoObject)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.CopyGeometry(CADability.GeoObject.IGeoObject)"/> and implements <see cref="M:CADability.GeoObject.IGeoObject.CopyGeometry(CADability.GeoObject.IGeoObject)"/>.
            Copies the start and endpoint of the given line. This method causes the line to fire the
            <see cref="E:CADability.GeoObject.IGeoObject.WillChangeEvent"/> and the <see cref="E:CADability.GeoObject.IGeoObject.DidChangeEvent"/>.
            </summary>
            <param name="ToCopyFrom">must be a line, to copy data from</param>
        </member>
        <member name="M:CADability.GeoObject.Line.FindSnapPoint(CADability.GeoObject.SnapPointFinder)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.FindSnapPoint(CADability.GeoObject.SnapPointFinder)"/>
            </summary>
            <param name="spf"></param>
        </member>
        <member name="M:CADability.GeoObject.Line.GetBoundingCube">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetBoundingCube"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Line.HasValidData">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HasValidData"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Line.PaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3D(CADability.IPaintTo3D)"/>
            </summary>
            <param name="paintTo3D"></param>
        </member>
        <member name="M:CADability.GeoObject.Line.PrepareDisplayList(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PrepareDisplayList(System.Double)"/>
            </summary>
            <param name="precision"></param>
        </member>
        <member name="M:CADability.GeoObject.Line.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Line.GetExtent(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Line.GetExtent(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(System.Double)"/>
            </summary>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Line.HitTest(CADability.BoundingCube@,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.BoundingCube@,System.Double)"/>
            </summary>
            <param name="cube"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Line.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)"/>
            </summary>
            <param name="projection"></param>
            <param name="rect"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Line.HitTest(CADability.Projection.PickArea,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection.PickArea,System.Boolean)"/>
            </summary>
            <param name="area"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Line.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)"/>
            </summary>
            <param name="fromHere"></param>
            <param name="direction"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Line.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.GeoObject.Line.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements ISerializable:GetObjectData
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CADability.GeoObject.Line.GetShowProperties(CADability.IFrame)">
            <summary>
            Liefert die Liste aller anzuzeigenden Properties
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Line.DirectionAt(System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.DirectionAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Line.PointAt(System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.PointAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Line.PositionOf(CADability.GeoPoint)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.PositionOf(CADability.GeoPoint)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Line.PositionOf(CADability.GeoPoint,System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.PositionOf(CADability.GeoPoint,System.Double)"/>
            </summary>
            <param name="p"></param>
            <param name="prefer"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Line.PositionOf(CADability.GeoPoint,CADability.Plane)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.PositionOf(CADability.GeoPoint,CADability.Plane)"/>
            </summary>
            <param name="p"></param>
            <param name="pl"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Line.Split(System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.Split(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Line.Split(System.Double,System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.Split(System.Double,System.Double)"/>
            </summary>
            <param name="Position1"></param>
            <param name="Position2"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Line.Trim(System.Double,System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.Trim(System.Double,System.Double)"/>
            </summary>
            <param name="StartPos"></param>
            <param name="EndPos"></param>
        </member>
        <member name="M:CADability.GeoObject.Line.GetPlanarState">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.GetPlanarState"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Line.GetPlane">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.GetPlane"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Line.IsInPlane(CADability.Plane)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.IsInPlane(CADability.Plane)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Line.GetProjectedCurve(CADability.Plane)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.GetProjectedCurve(CADability.Plane)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="T:CADability.GeoObject.Make3D">
            <summary>
            A class with static methods to create and combine <see cref="T:CADability.GeoObject.Solid"/>s, <see cref="T:CADability.GeoObject.Shell"/>s or <see cref="T:CADability.GeoObject.Face"/>s.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Make3D.MakeOffset(CADability.GeoObject.Solid,System.Double)">
            <summary>
            PRELIMINARY: Creates a solid as an offset to the provided <paramref name="solid"/>. Positiv values for <paramref name="offset"/>
            expand the solid, negative values contract it. Might be changed in future, especially the result 
            will be an array, because contracting might produce several solids.
            </summary>
            <param name="solid">Solid to expand or contract</param>
            <param name="offset">Offset for the operation</param>
            <returns>The resulting solid</returns>
        </member>
        <member name="M:CADability.GeoObject.Make3D.MakeRevolution(CADability.GeoObject.IGeoObject,CADability.GeoPoint,CADability.GeoVector,System.Double,CADability.Project)">
            <summary>
            Creates a <see cref="T:CADability.GeoObject.Solid"/>, a <see cref="T:CADability.GeoObject.Shell"/> or a <see cref="T:CADability.GeoObject.Face"/> by rotating a <see cref="T:CADability.GeoObject.Path"/>, a <see cref="T:CADability.GeoObject.Face"/>
            or a <see cref="T:CADability.GeoObject.Shell"/> around a given axis. Rotating a path yields a shell, rotating a face or a shell
            returns a <see cref="T:CADability.GeoObject.Solid"/>. Rotating a different type of <see cref="T:CADability.GeoObject.IGeoObject"/> returns null.
            </summary>
            <param name="faceShellOrPath">object to rotate</param>
            <param name="location">a point on the axis</param>
            <param name="direction">direction of the axis</param>
            <param name="sweep">amount to rotate (2*Math.PI is a full rotation)</param>
            <param name="project">the <see cref="T:CADability.Project"/> to set default styles for the result</param>
            <returns>the created solid or shell</returns>
        </member>
        <member name="M:CADability.GeoObject.Make3D.MakePrismMiter(CADability.Shapes.SimpleShape,CADability.GeoPoint,CADability.GeoVector,CADability.GeoVector,CADability.GeoVector,CADability.GeoVector)">
            <summary>
            Creates a prism or profile as an extrusion of the provided shape. The position of the prism
            is defined by location and mainDirection. The shape is a 2D object. The 2d origin is moved along
            the axis defined by location and main direction. The topDirection vector corresponds to the
            2d y-axis of the shape. The beginning and ending of the extrusion is a miter cut that allows
            the same profile be conected to the starting or ending point where mainDirection and startMiter
            are exchanged and topDirection is kept.
            </summary>
            <param name="shape">2d shape to be extruded, the 2d origin is moved along mainDirection</param>
            <param name="location">Starting point of the resulting profile, corresponds to the 2d origin</param>
            <param name="topDirection">The "up" direction fo the resulting profile, corresponds to the y-axis of the 2d shape</param>
            <param name="mainDirection">Direction of the prism, the length of this vector defines the length of the prism</param>
            <param name="startMiter">Direction of the connectiong profile at the starting point</param>
            <param name="endMiter">Direction of the connecting profile at the ending point</param>
            <returns>The resulting solid</returns>
        </member>
        <member name="M:CADability.GeoObject.Make3D.MakePrism(CADability.GeoObject.IGeoObject,CADability.GeoVector,CADability.Project,System.Boolean)">
            <summary>
            Creates a <see cref="T:CADability.GeoObject.Solid"/>, a <see cref="T:CADability.GeoObject.Shell"/> or a <see cref="T:CADability.GeoObject.Face"/> by moving a <see cref="T:CADability.GeoObject.Path"/>, a <see cref="T:CADability.GeoObject.Face"/>
            or a <see cref="T:CADability.GeoObject.Shell"/> along a given vector. Moving a path yields a face or a shell, moving a face or a shell
            returns a <see cref="T:CADability.GeoObject.Solid"/>. Moving a different type of <see cref="T:CADability.GeoObject.IGeoObject"/> returns null.
            </summary>
            <param name="faceShellOrPath">object to move</param>
            <param name="vect">vector along which the object is to be moved</param>
            <param name="project">the <see cref="T:CADability.Project"/> to set default styles for the result</param>
            <returns>the created solid, face or shell</returns>
        </member>
        <member name="M:CADability.GeoObject.Make3D.Union(CADability.GeoObject.Solid,CADability.GeoObject.Solid)">
            <summary>
            Returns the union of the two given <see cref="T:CADability.GeoObject.Solid"/>s. If the solids are disjunct, null will be returned
            </summary>
            <param name="s1">first solid</param>
            <param name="s2">second solid</param>
            <param name="project">the project to find attributes</param>
            <returns>union of the two solids or null</returns>
        </member>
        <member name="M:CADability.GeoObject.Make3D.Difference(CADability.GeoObject.Solid,CADability.GeoObject.Solid)">
            <summary>
            Returns the difference of the two given <see cref="T:CADability.GeoObject.Solid"/>s. If the solids are disjunct, null will be returned.
            s2 will be subtracted from s1.
            </summary>
            <param name="s1">first solid</param>
            <param name="s2">second solid</param>
            <param name="project">the project to find attributes</param>
            <returns>difference of the two solids or null</returns>
        </member>
        <member name="M:CADability.GeoObject.Make3D.Difference(CADability.GeoObject.Shell,CADability.GeoObject.Solid)">
            <summary>
            Returns the remains of a shell when a solid is subtracted.
            </summary>
            <param name="shl">Shell to be modified</param>
            <param name="sld">Solid which is subtracted</param>
            <returns>One ore more shells</returns>
        </member>
        <member name="M:CADability.GeoObject.Make3D.Difference(CADability.GeoObject.Face,CADability.GeoObject.Solid)">
            <summary>
            Returns the remains of a face when a solid is subtracted.
            </summary>
            <param name="fce">Face to be modified</param>
            <param name="sld">Solid which is subtracted</param>
            <returns>One ore more faces</returns>
        </member>
        <member name="M:CADability.GeoObject.Make3D.MakeRuledSolid(CADability.GeoObject.Path,CADability.GeoObject.Path,CADability.Project)">
            <summary>
            Connects the two wires with a ruled surface. The two wires must have the same number of segments.
            Each segment of the first path is connected with the segment with the same index of the second path.
            Both pathes must be closed. A solid is returned bound by the faces of the two pathes and the ruled
            surfaces. If there is an error null will be returned
            </summary>
            <param name="firstPath">the first path</param>
            <param name="secondPath">teh second path</param>
            <param name="project">the project to find attributes</param>
            <returns>the generated solid or null</returns>
        </member>
        <member name="M:CADability.GeoObject.Make3D.MakeRuledShell(CADability.GeoObject.Path,CADability.GeoObject.Path,CADability.Project)">
            <summary>
            Connects the two wires with a ruled surface. The two wires must have the same number of segments.
            Each segment of the first path is connected with the segment with the same index of the second path.
            The pathes may be open or closed. the ruled surfaces will be returned as a shell.
            If there is an error null will be returned
            </summary>
            <param name="firstPath">the first path</param>
            <param name="secondPath">teh second path</param>
            <param name="project">the project to find attributes</param>
            <returns>the generated shell or null</returns>
        </member>
        <member name="M:CADability.GeoObject.Make3D.ExtrudeCurveToFace(CADability.GeoObject.ICurve,CADability.GeoObject.ICurve)">
            <summary>
            Extrude a curve along another curve. E.g. if you extrude a circle along a line (which is perpendicular to the cirle plane) you will get a cylindrical face.
            If the curve <paramref name="along"/> is planar, the curve <paramref name="toExtrude"/> will be only rotated around the plane's normal (and moved of course),
            If the curve <paramref name="along"/> is not planar, there is no well difined way how to rotate the curve <paramref name="toExtrude"/>.
            </summary>
            <param name="toExtrude"></param>
            <param name="along"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Make3D.MakeHelicalSolid(CADability.GeoPoint2D,CADability.GeoVector2D,CADability.Plane,CADability.Curve2D.Path2D,System.Double,System.Boolean)">
            <summary>
            Creates a Solid by winding the closed path around the axis. The axisDirection also specifies the pitch
            </summary>
            <param name="axisLocation"></param>
            <param name="axisDirection"></param>
            <param name="plane"></param>
            <param name="path"></param>
            <param name="numTurns"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Make3D.MakeHelicalSolid(CADability.GeoPoint2D,CADability.Plane,CADability.Curve2D.Path2D,System.Double,System.Boolean)">
            <summary>
            Creates a thred (screw) from a profile (path) and a point in a plane. The path must be open and the pitch and direction is determined by
            the start- and endpoint of the path. The radius of the thread is the distance of the axisLocation to the connection of start- and enpoints of the path.
            Cylindrical segments form the start and endcaps.
            </summary>
            <param name="axisLocation">Location of the axis in the plane</param>
            <param name="plane">The plane, in which path and axisLocation are defined</param>
            <param name="path">The profile of the thread</param>
            <param name="numTurns">Number of turns</param>
            <returns>A Solid with the thread</returns>
        </member>
        <member name="M:CADability.GeoObject.Make3D.SewFacesAndShells(CADability.GeoObject.GeoObjectList)">
            <summary>
            Takes all faces and shells from the given list and tries to sew them together. When two or more faces have
            common edges they are connected to shells. Shells with no free edges are converted to solids.
            </summary>
            <param name="select">faces and shells to sew</param>
            <returns>resulting objects</returns>
        </member>
        <member name="M:CADability.GeoObject.Make3D.Intersection(CADability.GeoObject.Solid,CADability.GeoObject.Solid)">
            <summary>
            Returns the intersection of the two given <see cref="T:CADability.GeoObject.Solid"/>s. If the solids are disjunct, null will be returned.
            s1 and s2 will be intersected, the common solid is returned, which may consist of several solids
            </summary>
            <param name="s1">first solid</param>
            <param name="s2">second solid</param>
            <param name="project">the project to find attributes</param>
            <returns>intersection of the two solids or null</returns>
        </member>
        <member name="M:CADability.GeoObject.Make3D.MakeCone(CADability.GeoPoint,CADability.GeoVector,CADability.GeoVector,System.Double,System.Double)">
            <summary>
            Creates a cone. The cone is defined by two parallel discs with two different radii. The first disc is centered
            at location, the second at location + directionZ. directionZ is also the normal vector of both discs.
            directionX must be perpendicular to directionZ and specifies the startpoint of the circular edge.
            </summary>
            <param name="location">location of the cone</param>
            <param name="directionX">startpoint of edge</param>
            <param name="directionZ">axis of the cone</param>
            <param name="radius1">radius at location</param>
            <param name="radius2">radius at location + directionZ</param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Make3D.ExtrudeCurveToFace(CADability.GeoObject.ICurve,CADability.GeoVector,CADability.Edge,CADability.Edge,CADability.Edge,CADability.Edge,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            INTERN! Macht aus einer Kurve und einer Richtung ein Face. Es entstehen 4 Edges: 0: die Kurve curve selbst, 1: Endpunkt
            der Kurve plus extrusion, 2: versetzte r√ºkw√§rtige Kurve, 3: inverse zu 1, endet am Startpunkt von curve. Evtl. k√∂nnen
            einige der Edges bereits existieren und sollen dann verwendet werden, so spart man sich das nachtr√§gliche zusammenf√ºgen 
            einzelner Faces zu einer Shell. Die Parameter forward0 bis forward3 geben an, ob die 3D Kurve in der Edge die
            richtige Richtung hat oder nicht.
            </summary>
            <param name="curve"></param>
            <param name="extrusion"></param>
            <param name="edge0"></param>
            <param name="edge1"></param>
            <param name="edge2"></param>
            <param name="edge3"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Make3D.Extrude(CADability.GeoObject.IGeoObject,CADability.GeoVector,CADability.Project)">
            <summary>
            Extrudes the provided object <paramref name="faceShellPathCurve"/> along the <paramref name="extension"/>.
            </summary>
            <param name="faceShellPathCurve">Object to extrude, may be a <see cref="T:CADability.GeoObject.Face"/>, <see cref="T:CADability.GeoObject.Shell"/>, <see cref="T:CADability.GeoObject.Path"/> or <see cref="T:CADability.GeoObject.ICurve"/> object</param>
            <param name="extension">Direction and length of extension</param>
            <param name="project">A project which is used to set default attributes to the result, may be null</param>
            <returns>The extruded face, shell or solid, null if extrusion not possible</returns>
        </member>
        <member name="M:CADability.GeoObject.Make3D.SplitCommonFace(CADability.GeoObject.Solid,CADability.GeoObject.Solid,CADability.GeoObject.Face[]@,CADability.GeoObject.Face[]@)">
            <summary>
            Checks whether the two provided solids have overlapping faces. If this is the case, one of the
            two faces or both faces are split in a way that the modified solids have common, identical
            faces which have the same outlines
            </summary>
            <param name="s1">The first solid</param>
            <param name="s2">The second solid</param>
            <param name="splittedOnS1">Splitted faces on s1</param>
            <param name="splittedOnS2">Splitted faces on s2</param>
            <returns>Returns true if common overlapping faces were found.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CADability.GeoObject.Make3D.CloneFaceUserData(CADability.GeoObject.Solid[],CADability.GeoObject.Solid[])" -->
        <member name="M:CADability.GeoObject.NonPeriodicCylindricalSurface.PointAt(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.PointAt(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NonPeriodicCylindricalSurface.DerivationAt(CADability.GeoPoint2D,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.DerivationAt(CADability.GeoPoint2D,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@)"/>
            </summary>
            <param name="uv"></param>
            <param name="location"></param>
            <param name="du"></param>
            <param name="dv"></param>
        </member>
        <member name="M:CADability.GeoObject.NonPeriodicCylindricalSurface.Derivation2At(CADability.GeoPoint2D,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Derivation2At(CADability.GeoPoint2D,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@)"/>
            </summary>
            <param name="uv"></param>
            <param name="location"></param>
            <param name="du"></param>
            <param name="dv"></param>
            <param name="duu"></param>
            <param name="dvv"></param>
            <param name="duv"></param>
        </member>
        <member name="M:CADability.GeoObject.NonPeriodicCylindricalSurface.UDirection(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.UDirection(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NonPeriodicCylindricalSurface.VDirection(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.VDirection(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NonPeriodicCylindricalSurface.GetNormal(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetNormal(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NonPeriodicCylindricalSurface.PositionOf(CADability.GeoPoint)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.PositionOf(CADability.GeoPoint)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NonPeriodicCylindricalSurface.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NonPeriodicCylindricalSurface.CopyData(CADability.GeoObject.ISurface)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.CopyData(CADability.GeoObject.ISurface)"/>
            </summary>
            <param name="CopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.NonPeriodicCylindricalSurface.GetModified(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetModified(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NonPeriodicCylindricalSurface.FixedU(System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.FixedU(System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="u"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NonPeriodicCylindricalSurface.FixedV(System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.FixedV(System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="v"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NonPeriodicCylindricalSurface.GetLineIntersection(CADability.GeoPoint,CADability.GeoVector)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetLineIntersection(CADability.GeoPoint,CADability.GeoVector)"/>
            </summary>
            <param name="startPoint"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NonPeriodicCylindricalSurface.GetProjectedCurve(CADability.GeoObject.ICurve,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetProjectedCurve(CADability.GeoObject.ICurve,System.Double)"/>
            </summary>
            <param name="curve"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NonPeriodicCylindricalSurface.GetPlaneIntersection(CADability.GeoObject.PlaneSurface,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetPlaneIntersection(CADability.GeoObject.PlaneSurface,System.Double,System.Double,System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="pl"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NonPeriodicCylindricalSurface.Make3dCurve(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Make3dCurve(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="curve2d"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NonPeriodicCylindricalSurface.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.GeoObject.FixedParameterCurve`1">
            <summary>
            Allgemeine Implementierung einer 3D Kurve auf einer Fl√§che mit festem u bzw v Parameter
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CADability.GeoObject.FixedParameterCurve`1.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Modify(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.GeoObject.FixedParameterCurve`1.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.FixedParameterCurve`1.CopyGeometry(CADability.GeoObject.IGeoObject)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.CopyGeometry(CADability.GeoObject.IGeoObject)"/>
            </summary>
            <param name="ToCopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.NonPeriodicSurface.#ctor(CADability.GeoObject.ISurface,System.Double,System.Double)">
            <summary>
            Non-periodic surface made from a periodic surface. The periodic surface must be peiodic in u and may have a pole at vmin or vmax
            </summary>
            <param name="periodicSurface"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
        </member>
        <member name="T:CADability.GeoObject.NurbsSurface">
            <summary>
            A NURBS surface implementing <see cref="T:CADability.GeoObject.ISurface"/>. 
            </summary>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.#ctor(CADability.GeoPoint[0:,0:],System.Double[0:,0:],System.Double[],System.Double[],System.Int32[],System.Int32[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new NURBS surface with the given data.
            </summary>
            <param name="poles">the poles</param>
            <param name="weights">the weight of the poles</param>
            <param name="uKnots">the knots in u direction (no duplicate values)</param>
            <param name="vKnots">the knots in v direction (no duplicate values)</param>
            <param name="uMults">the multiplicities in u direction</param>
            <param name="vMults">the multiplicities in v direction</param>
            <param name="uDegree">the degree in u direction</param>
            <param name="vDegree">the degree in v direction</param>
            <param name="uPeriodic">closed in u direction</param>
            <param name="vPeriodic">closed in v direction</param>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.#ctor(CADability.GeoPoint[0:,0:],System.Double[0:,0:],System.Double[],System.Double[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new NURBS surface with the given data.
            </summary>
            <param name="poles">the poles</param>
            <param name="weights">the weight of the poles</param>
            <param name="uKnots">the knots in u direction (multiple knots may have the same value)</param>
            <param name="vKnots">the knots in v direction (multiple knots may have the same value)</param>
            <param name="uDegree">the degree in u direction</param>
            <param name="vDegree">the degree in v direction</param>
            <param name="uPeriodic">closed in u direction</param>
            <param name="vPeriodic">closed in v direction</param>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.#ctor(CADability.GeoPoint[0:,0:],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new NURBS surface which interpolates the provided points. The surface will contain the provided points exactely
            and smoothly interpolated inbetween. The points are organized in a two dimensional array resembling the u and v direction
            (first and second index) of the NURBS surface
            </summary>
            <param name="throughPoints">Points to be interpolated</param>
            <param name="maxUDegree">The maximum degree in respect of the first index</param>
            <param name="maxVDegree">The maximum degree in respect of the second index</param>
            <param name="uPeriodic">Periodicy in respect of the first index</param>
            <param name="vPeriodic">Periodicy in respect of the second index</param>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.GetSimpleSurface(System.Double,CADability.GeoObject.ISurface@,CADability.ModOp2D@)">
            <summary>
            Returns true if this NurbsSurface can be represented as a simpler surface. Simple surfaces have
            better performances. 
            </summary>
            <param name="precision">The precision within the simpler surface must approximate this surface (0.0: use global Precision)</param>
            <param name="simpleSurface">the found surface or null</param>
            <param name="reparametrisation">the needed reparametrisation of the uv space from this surface to the surface found</param>
            <returns>true, if simpler form exists</returns>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.FixedU(System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.FixedU(System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="u"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.FixedV(System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.FixedV(System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="v"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.GetModified(CADability.ModOp)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.GetModified(CADability.ModOp)"/>.
            </summary>
            <param name="m">how to modify</param>
            <returns>modified surface</returns>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.IsVanishingProjection(CADability.Projection,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.IsVanishingProjection(CADability.Projection,System.Double,System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="p"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.GetZMinMax(CADability.Projection,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetZMinMax(CADability.Projection,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)"/>
            </summary>
            <param name="p"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="zMin"></param>
            <param name="zMax"></param>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Modify(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.PointAt(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.PointAt(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.DerivationAt(CADability.GeoPoint2D,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.DerivationAt(CADability.GeoPoint2D,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@)"/>
            </summary>
            <param name="uv"></param>
            <param name="location"></param>
            <param name="du"></param>
            <param name="dv"></param>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.UDirection(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.UDirection(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.VDirection(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.VDirection(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.GetNormal(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetNormal(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.ReverseOrientation">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.ReverseOrientation"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.Make3dCurve(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Make3dCurve(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="curve2d"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.GetSafeParameterSteps(System.Double,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetSafeParameterSteps(System.Double,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)"/>
            </summary>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="intu"></param>
            <param name="intv"></param>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.CopyData(CADability.GeoObject.ISurface)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.CopyData(CADability.GeoObject.ISurface)"/>
            </summary>
            <param name="CopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.GetUSingularities">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetUSingularities"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.GetVSingularities">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetVSingularities"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.GetPlaneIntersection(CADability.GeoObject.PlaneSurface,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetPlaneIntersection(CADability.GeoObject.PlaneSurface,System.Double,System.Double,System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="pl"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.GetLineIntersection(CADability.GeoPoint,CADability.GeoVector)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetLineIntersection(CADability.GeoPoint,CADability.GeoVector)"/>
            </summary>
            <param name="startPoint"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.GetNaturalBounds(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetNaturalBounds(System.Double@,System.Double@,System.Double@,System.Double@)"/>
            </summary>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.GetSaveUSteps">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetSaveUSteps"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.GetSaveVSteps">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetSaveVSteps"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.GetExtrema">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetExtrema"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.HitTest(CADability.BoundingCube,CADability.GeoPoint2D@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.HitTest(CADability.BoundingCube,CADability.GeoPoint2D@)"/>
            </summary>
            <param name="cube"></param>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.SameGeometry(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect,System.Double,CADability.ModOp2D@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.SameGeometry(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect,System.Double,CADability.ModOp2D@)"/>
            </summary>
            <param name="thisBounds"></param>
            <param name="other"></param>
            <param name="otherBounds"></param>
            <param name="precision"></param>
            <param name="firstToSecond"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.Intersect(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Intersect(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect)"/>
            </summary>
            <param name="thisBounds"></param>
            <param name="other"></param>
            <param name="otherBounds"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.Intersect(CADability.GeoObject.ICurve,CADability.BoundingRect,CADability.GeoPoint[]@,CADability.GeoPoint2D[]@,System.Double[]@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Intersect(CADability.GeoObject.ICurve,CADability.BoundingRect,CADability.GeoPoint[]@,CADability.GeoPoint2D[]@,System.Double[]@)"/>
            </summary>
            <param name="curve"></param>
            <param name="uvExtent"></param>
            <param name="ips"></param>
            <param name="uvOnFaces"></param>
            <param name="uOnCurve3Ds"></param>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.Derivation2At(CADability.GeoPoint2D,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Derivation2At(CADability.GeoPoint2D,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@)"/>
            </summary>
            <param name="uv"></param>
            <param name="location"></param>
            <param name="du"></param>
            <param name="dv"></param>
            <param name="duu"></param>
            <param name="dvv"></param>
            <param name="duv"></param>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.HasDiscontinuousDerivative(CADability.Curve2D.ICurve2D[]@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.HasDiscontinuousDerivative(CADability.Curve2D.ICurve2D[]@)"/>
            </summary>
            <param name="discontinuities"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="M:CADability.GeoObject.NurbsSurface.findBestFitTorus(CADability.GeoPoint[],CADability.GeoVector[],CADability.GeoPoint@,CADability.GeoVector@,System.Double@,System.Double@)">
            <summary>
            Finds the torus that interpolates the provided points and their normals with the smalles error
            </summary>
            <param name="samples"></param>
            <param name="normals"></param>
            <param name="location"></param>
            <param name="direction"></param>
            <param name="radius1"></param>
            <param name="radius2"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.OffsetSurface.FixedCurve.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Modify(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.GeoObject.OffsetSurface.FixedCurve.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.OffsetSurface.FixedCurve.CopyGeometry(CADability.GeoObject.IGeoObject)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.CopyGeometry(CADability.GeoObject.IGeoObject)"/>
            </summary>
            <param name="ToCopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.OffsetSurface.GetNaturalBounds(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetNaturalBounds(System.Double@,System.Double@,System.Double@,System.Double@)"/>
            </summary>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
        </member>
        <member name="M:CADability.GeoObject.OffsetSurface.PointAt(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.PointAt(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.OffsetSurface.UDirection(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.UDirection(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.OffsetSurface.VDirection(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.VDirection(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.OffsetSurface.GetNormal(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetNormal(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.OffsetSurface.GetZMinMax(CADability.Projection,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetZMinMax(CADability.Projection,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)"/>
            </summary>
            <param name="p"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="zMin"></param>
            <param name="zMax"></param>
        </member>
        <member name="M:CADability.GeoObject.OffsetSurface.Make3dCurve(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Make3dCurve(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="curve2d"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.OffsetSurface.GetPlaneIntersection(CADability.GeoObject.PlaneSurface,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetPlaneIntersection(CADability.GeoObject.PlaneSurface,System.Double,System.Double,System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="pl"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.OffsetSurface.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.OffsetSurface.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Modify(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.GeoObject.OffsetSurface.GetModified(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetModified(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.OffsetSurface.CopyData(CADability.GeoObject.ISurface)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.CopyData(CADability.GeoObject.ISurface)"/>
            </summary>
            <param name="CopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.OffsetSurface.GetLineIntersection(CADability.GeoPoint,CADability.GeoVector)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetLineIntersection(CADability.GeoPoint,CADability.GeoVector)"/>
            </summary>
            <param name="startPoint"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.OffsetSurface.GetOffsetSurface(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetOffsetSurface(System.Double)"/>
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.OffsetSurface.FixedU(System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.FixedU(System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="u"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.OffsetSurface.FixedV(System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.FixedV(System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="u"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.OffsetSurface.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="T:CADability.GeoObject.Path">
            <summary>
            A geoobject, that derives from Block and represents a ordered collection of
            geoobjects which all support the ICurve intrface. The contained curves are connected, 
            i.e. Child(i).EndPoint is equal or close to Child(i+1).StartPoint.
            The Path is not necessary planar, closed and may be self intersecting.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.Path.ModificationMode.keepAngle">
            <summary>
            when modifying a point keeps the angle between the two connected curves
            </summary>
        </member>
        <member name="F:CADability.GeoObject.Path.ModificationMode.keepArcRatio">
            <summary>
            keeps the ratio of the two radii of an ellipse, i.e. a circular ellipse will stay circular
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Path.CreateFromModel(CADability.GeoObject.ICurve,CADability.Model,CADability.Projection,System.Boolean)">
            <summary>
            Returns a Path containing the curve BeginWith and other curves from the projectedModel.
            The curve BeginWith is checked at both ends to find connected objects. The search is stopped
            if there are nore more connected objects. The curves are clones and are tagged with <see cref="T:CADability.UserData"/> objects
            with the name key "CADability.Path.Original" and the original object as the value. 
            If flatten is true, UserData will be lost.
            </summary>
            <param name="BeginWith">Curve to begin with</param>
            <param name="projectedModel">Projected model to search</param>
            <param name="flatten">true: flatten the result, false: result not flattened</param>
            <returns>The path or null if no cennecting objects found</returns>
        </member>
        <member name="M:CADability.GeoObject.Path.CreateFromModel(CADability.GeoObject.ICurve,CADability.Model,System.Boolean)">
            <summary>
            Returns a Path containing the curve BeginWith and other curves from the Model.
            The curve BeginWith is checked at both ends to find connected objects. The search is stopped
            when there are nore more connected objects. The curves are clones and are tagged with <see cref="T:CADability.UserData"/> objects
            with the name key "CADability.Path.Original" and the original object as the value. 
            If flatten is true, UserData will be lost.
            </summary>
            <param name="BeginWith">Curve to begin with</param>
            <param name="model">the model to search for connecting curves</param>
            <param name="flatten">true: flatten the result, false: result not flattened</param>
            <returns>The path or null if no cennecting objects found</returns>
        </member>
        <member name="M:CADability.GeoObject.Path.Set(CADability.GeoObject.GeoObjectList,System.Boolean,System.Double)">
            <summary>
            Takes a list of unsorted and unoriented geoobjects and tries to put them
            together to a connected path. All previously contained segments are removed.
            All objects of the list, that are used in this path will be removed
            from their owner (see <see cref="P:CADability.GeoObject.IGeoObject.Owner"/>). To avoid objects
            bee removed from their owner (e.g. <see cref="T:CADability.Model"/> or <see cref="T:CADability.GeoObject.Block"/>)
            use a list of cloned GeoObjects (<see cref="M:CADability.GeoObject.GeoObjectList.CloneObjects"/>).
            </summary>
            <param name="l">List of unsorted GeoObjects</param>
            <param name="moreThanOne">if true, the path must consist of more than one curve</param>
            <returns>success</returns>
        </member>
        <member name="M:CADability.GeoObject.Path.Set(CADability.GeoObject.ICurve[])">
            <summary>
            Makes this path represent the given list if all objects in that list are properly
            oriented and connected. If the objects do not connect, false will be returned and this
            path remains unchanged.
            </summary>
            <param name="connectedCurves">new contents of this path</param>
            <returns>true on success, false on failure</returns>
        </member>
        <member name="M:CADability.GeoObject.Path.Flatten">
            <summary>
            Flattens this path. All subcurves that are composed of simple curves
            are decomposed into simpler curves (e.g. a polyline is decomposed into lines)
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Path.Add(CADability.GeoObject.ICurve)">
            <summary>
            Adds a curve to this path. It is checked whether the curve to add can be connected
            to the start or endpoint of this path. If necessary the curve will be reversed. If
            it cannot be connected false will be returned.
            </summary>
            <param name="ToAdd">curve to add</param>
            <returns>true on success, false on failure</returns>
        </member>
        <member name="M:CADability.GeoObject.Path.Clear">
            <summary>
            Removes all subcurves, the Path will be empty. Use this before modifying
            contained objects of this path because it is not allowed to mdify an object
            in a path in a way that would compromise the consitence of the path
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Path.Decompose">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Decompose"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Path.RemoveShortSegments(System.Double)">
            <summary>
            Removes all segments that are shorter than maxLengthToRemove. Connects the ramaining segments.
            </summary>
            <param name="maxLengthToRemove">Max. length of subcurves to remove</param>
        </member>
        <member name="M:CADability.GeoObject.Path.BestCyclicalPosition(CADability.GeoObject.Path)">
            <summary>
            Assumes both this and toThis are closed Paths with the same number of segments. Changes this Path
            to start with the segment where the distance of corresponding vertices is minimal. The geometry of 
            this curve will not be changed
            </summary>
            <param name="toThis">adapt to this path</param>
            <returns>true, if condition is satisfied</returns>
        </member>
        <member name="M:CADability.GeoObject.Path.InsertPoint(System.Double)">
            <summary>
            Splits the curve of this path that contains the provided position. If position is exactely 
            on the connection of two subcurves, the path remains unchanged. Otherwise the curve containing the
            position is split and both curves are added to the path
            </summary>
            <param name="position">Where to split, must be inbetween 0 and 1</param>
        </member>
        <member name="P:CADability.GeoObject.Path.Count">
            <value>
            Gets the number uf subcurves in this path.
            </value>
        </member>
        <member name="M:CADability.GeoObject.Path.Curve(System.Int32)">
            <summary>
            Returns the i-th curve of the path. Do not modify this curve or the path
            will be in an invalid state. For the number of curves see <see cref="P:CADability.GeoObject.Path.CurveCount"/>.
            </summary>
            <param name="Index">Index of the desired curve</param>
            <returns>The curve with the given index</returns>
        </member>
        <member name="P:CADability.GeoObject.Path.Curves">
            <summary>
            Returns a cloned array of the curves of this path. Do not modify the
            curves or the path will be in an invalid state.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Path.CurveCount">
            <summary>
            Returns the number of curves in the Path
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Path.GetShowProperties(CADability.IFrame)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetShowProperties(CADability.IFrame)"/>
            </summary>
            <param name="Frame"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Path.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Path.CopyGeometry(CADability.GeoObject.IGeoObject)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.CopyGeometry(CADability.GeoObject.IGeoObject)"/>
            </summary>
            <param name="ToCopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.Path.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Modify(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.GeoObject.Path.FindSnapPoint(CADability.GeoObject.SnapPointFinder)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.FindSnapPoint(CADability.GeoObject.SnapPointFinder)"/>
            </summary>
            <param name="spf"></param>
        </member>
        <member name="M:CADability.GeoObject.Path.GetBoundingCube">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetBoundingCube"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Path.PaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3D(CADability.IPaintTo3D)"/>
            </summary>
            <param name="paintTo3D"></param>
        </member>
        <member name="M:CADability.GeoObject.Path.PrepareDisplayList(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PrepareDisplayList(System.Double)"/>
            </summary>
            <param name="precision"></param>
        </member>
        <member name="M:CADability.GeoObject.Path.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Path.GetExtent(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(System.Double)"/>
            </summary>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Path.HitTest(CADability.BoundingCube@,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.BoundingCube@,System.Double)"/>
            </summary>
            <param name="cube"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Path.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)"/>
            </summary>
            <param name="projection"></param>
            <param name="rect"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Path.HitTest(CADability.Projection.PickArea,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection.PickArea,System.Boolean)"/>
            </summary>
            <param name="area"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Path.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)"/>
            </summary>
            <param name="fromHere"></param>
            <param name="direction"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Path.DirectionAt(System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.DirectionAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Path.PointAt(System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.PointAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Path.PositionOf(CADability.GeoPoint,CADability.Plane)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.PositionOf(CADability.GeoPoint,CADability.Plane)"/>
            </summary>
            <param name="p"></param>
            <param name="pl"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Path.PositionOf(CADability.GeoPoint,System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.PositionOf(CADability.GeoPoint,System.Double)"/>
            </summary>
            <param name="p"></param>
            <param name="prefer"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Path.PositionOf(CADability.GeoPoint)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.PositionOf(CADability.GeoPoint)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Path.Split(System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.Split(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Path.Split(System.Double,System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.Split(System.Double,System.Double)"/>
            </summary>
            <param name="Position1"></param>
            <param name="Position2"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Path.Trim(System.Double,System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.Trim(System.Double,System.Double)"/>
            </summary>
            <param name="StartPos"></param>
            <param name="EndPos"></param>
        </member>
        <member name="M:CADability.GeoObject.Path.GetPlanarState">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.GetPlanarState"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Path.GetPlane">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.GetPlane"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Path.IsInPlane(CADability.Plane)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.IsInPlane(CADability.Plane)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Path.GetProjectedCurve(CADability.Plane)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.GetProjectedCurve(CADability.Plane)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Path.TryPointDeriv2At(System.Double,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.TryPointDeriv2At(System.Double,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@)"/>
            </summary>
            <param name="position"></param>
            <param name="point"></param>
            <param name="deriv"></param>
            <param name="deriv2"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Path.IndexAtLength(System.Double)">
            <summary>
            Returns the index of the subcurve at the given position. Position must be between 0.0 and this.Length
            </summary>
            <param name="position">Position for the query</param>
            <returns>Index of the curve</returns>
        </member>
        <member name="M:CADability.GeoObject.Path.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.GeoObject.Path.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements ISerializable:GetObjectData
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:CADability.GeoObject.InfinitePath">
            <summary>
            Dieses Objekt dient nur dazu, Kurven in der N√§he des verl√§ngerten Pfades aus dem OctTree zu filtern
            Wenn das erste und das letzte Segment unendlich verl√§ngert werden und zwar in beide Richtungen,
            so liefert das mehr Objekte als gew√ºnscht, schaded aber nur der Performance
            </summary>
        </member>
        <member name="M:CADability.GeoObject.PHCurve.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.GeoObject.PHOffsetCurve.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="T:CADability.GeoObject.PlaneSurface">
            <summary>
            A planar infinite surface. Implements ISurface.
            The plane is defined by two vectors which are not necessary perpendicular or normed.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.PlaneSurface.GetModified(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetModified(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.PlaneSurface.Make3dCurve(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Make3dCurve(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="curve2d"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.PlaneSurface.GetNormal(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetNormal(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.PlaneSurface.UDirection(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.UDirection(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.PlaneSurface.VDirection(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.VDirection(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.PlaneSurface.PointAt(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.PointAt(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.PlaneSurface.PositionOf(CADability.GeoPoint)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.PositionOf(CADability.GeoPoint)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.PlaneSurface.IsVanishingProjection(CADability.Projection,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.IsVanishingProjection(CADability.Projection,System.Double,System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="p"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.PlaneSurface.GetZMinMax(CADability.Projection,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetZMinMax(CADability.Projection,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)"/>
            </summary>
            <param name="p"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="zMin"></param>
            <param name="zMax"></param>
        </member>
        <member name="M:CADability.GeoObject.PlaneSurface.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.PlaneSurface.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Modify(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.GeoObject.PlaneSurface.GetPlaneIntersection(CADability.GeoObject.PlaneSurface,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetPlaneIntersection(CADability.GeoObject.PlaneSurface,System.Double,System.Double,System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="pl"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.PlaneSurface.GetLineIntersection(CADability.GeoPoint,CADability.GeoVector)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetLineIntersection(CADability.GeoPoint,CADability.GeoVector)"/>
            </summary>
            <param name="startPoint"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.PlaneSurface.CopyData(CADability.GeoObject.ISurface)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.CopyData(CADability.GeoObject.ISurface)"/>
            </summary>
            <param name="CopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.PlaneSurface.GetProjectedCurve(CADability.GeoObject.ICurve,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetProjectedCurve(CADability.GeoObject.ICurve,System.Double)"/>
            </summary>
            <param name="curve"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.PlaneSurface.ReverseOrientation">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.ReverseOrientation"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.PlaneSurface.SameGeometry(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect,System.Double,CADability.ModOp2D@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.SameGeometry(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect,System.Double,CADability.ModOp2D@)"/>
            </summary>
            <param name="thisBounds"></param>
            <param name="other"></param>
            <param name="otherBounds"></param>
            <param name="precision"></param>
            <param name="firstToSecond"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.PlaneSurface.GetOffsetSurface(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetOffsetSurface(System.Double)"/>
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.PlaneSurface.Orientation(CADability.GeoPoint)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Orientation(CADability.GeoPoint)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.PlaneSurface.HitTest(CADability.BoundingCube,CADability.GeoPoint2D@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.HitTest(CADability.BoundingCube,CADability.GeoPoint2D@)"/>
            </summary>
            <param name="bc"></param>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.PlaneSurface.GetExtrema">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetExtrema"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.PlaneSurface.GetPolynomialParameters">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetPolynomialParameters"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.PlaneSurface.Intersect(CADability.GeoObject.ICurve,CADability.BoundingRect,CADability.GeoPoint[]@,CADability.GeoPoint2D[]@,System.Double[]@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Intersect(CADability.GeoObject.ICurve,CADability.BoundingRect,CADability.GeoPoint[]@,CADability.GeoPoint2D[]@,System.Double[]@)"/>
            </summary>
            <param name="curve"></param>
            <param name="uvExtent"></param>
            <param name="ips"></param>
            <param name="uvOnFaces"></param>
            <param name="uOnCurve3Ds"></param>
        </member>
        <member name="M:CADability.GeoObject.PlaneSurface.FixedU(System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.FixedU(System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="u"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.PlaneSurface.FixedV(System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.FixedV(System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="v"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.PlaneSurface.PerpendicularFoot(CADability.GeoPoint)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.PerpendicularFoot(CADability.GeoPoint)"/>
            </summary>
            <param name="fromHere"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.PlaneSurface.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="T:CADability.GeoObject.PointSymbol">
            <summary>
            Flags definig the symbol for the presentation of a <see cref="T:CADability.GeoObject.Point"/> object.
            The flag may contain one of the values Empty=0x0,Dot=0x1,Plus=0x2,Cross=0x3,Line=0x4 
            combined with Square=0x8 or Circle=0x10.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.PointSymbol.Empty">
            <summary>
            Don't display.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.PointSymbol.Dot">
            <summary>
            Display as a one pixel sized dot.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.PointSymbol.Plus">
            <summary>
            Display as a small "+"-shaped cross
            </summary>
        </member>
        <member name="F:CADability.GeoObject.PointSymbol.Cross">
            <summary>
            Display as a small "X"-shaped cross
            </summary>
        </member>
        <member name="F:CADability.GeoObject.PointSymbol.Line">
            <summary>
            Display as a small vertical line
            </summary>
        </member>
        <member name="F:CADability.GeoObject.PointSymbol.Square">
            <summary>
            Display an additional square around the dot, cross or line
            </summary>
        </member>
        <member name="F:CADability.GeoObject.PointSymbol.Circle">
            <summary>
            Display an additional circle around the dot, cross or line
            </summary>
        </member>
        <member name="F:CADability.GeoObject.PointSymbol.Select">
            <summary>
            Do not use, internally used to show selected points
            </summary>
        </member>
        <member name="T:CADability.GeoObject.Point">
            <summary>
            Implements a point as a <see cref="T:CADability.GeoObject.IGeoObject"/>. 
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Point.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Point.CopyGeometry(CADability.GeoObject.IGeoObject)">
            <summary>
            Implements the <see cref="M:CADability.GeoObject.IGeoObjectImpl.CopyGeometry(CADability.GeoObject.IGeoObject)"/> method.
            </summary>
            <param name="ToCopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.Point.FindSnapPoint(CADability.GeoObject.SnapPointFinder)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.FindSnapPoint(CADability.GeoObject.SnapPointFinder)"/>
            </summary>
            <param name="spf"></param>
        </member>
        <member name="M:CADability.GeoObject.Point.GetBoundingCube">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetBoundingCube"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Point.GetShowProperties(CADability.IFrame)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetShowProperties(CADability.IFrame)"/>
            </summary>
            <param name="Frame"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Point.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Modify(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.GeoObject.Point.GetAttributeProperties(CADability.IFrame)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetAttributeProperties(CADability.IFrame)"/>
            </summary>
            <param name="Frame"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Point.PrePaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PrePaintTo3D(CADability.IPaintTo3D)"/>
            </summary>
            <param name="paintTo3D"></param>
        </member>
        <member name="M:CADability.GeoObject.Point.PaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3D(CADability.IPaintTo3D)"/>
            </summary>
            <param name="paintTo3D"></param>
        </member>
        <member name="M:CADability.GeoObject.Point.PrepareDisplayList(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PrepareDisplayList(System.Double)"/>
            </summary>
            <param name="precision"></param>
        </member>
        <member name="M:CADability.GeoObject.Point.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Point.GetNamedAttribute(System.String)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetNamedAttribute(System.String)"/>
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Point.GetExtent(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(System.Double)"/>
            </summary>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Point.HitTest(CADability.BoundingCube@,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.BoundingCube@,System.Double)"/>
            </summary>
            <param name="cube"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Point.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)"/>
            </summary>
            <param name="projection"></param>
            <param name="rect"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Point.HitTest(CADability.Projection.PickArea,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection.PickArea,System.Boolean)"/>
            </summary>
            <param name="area"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Point.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)"/>
            </summary>
            <param name="fromHere"></param>
            <param name="direction"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Point.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.GeoObject.Point.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.GeoObject.Polyline">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Polyline.SetClosedPolylineStartIndex(System.Int32)">
            <summary>
            Let the closed polyline start with the vertex with the specified index. The vertex array will be rotated
            </summary>
            <param name="startIndex">Index of vertex with which to start</param>
            <returns>true on success</returns>
        </member>
        <member name="M:CADability.GeoObject.Polyline.AttributeChanged(CADability.INamedAttribute)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.AttributeChanged(CADability.INamedAttribute)"/>
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Polyline.CopyGeometry(CADability.GeoObject.IGeoObject)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.CopyGeometry(CADability.GeoObject.IGeoObject)"/>
            </summary>
            <param name="ToCopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.Polyline.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Modify(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.GeoObject.Polyline.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Polyline.FindSnapPoint(CADability.GeoObject.SnapPointFinder)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.FindSnapPoint(CADability.GeoObject.SnapPointFinder)"/>
            </summary>
            <param name="spf"></param>
        </member>
        <member name="M:CADability.GeoObject.Polyline.GetShowProperties(CADability.IFrame)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetShowProperties(CADability.IFrame)"/>
            </summary>
            <param name="Frame"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Polyline.GetBoundingCube">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetBoundingCube"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Polyline.HasValidData">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HasValidData"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Polyline.PaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3D(CADability.IPaintTo3D)"/>
            </summary>
            <param name="paintTo3D"></param>
        </member>
        <member name="M:CADability.GeoObject.Polyline.PrepareDisplayList(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PrepareDisplayList(System.Double)"/>
            </summary>
            <param name="precision"></param>
        </member>
        <member name="M:CADability.GeoObject.Polyline.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Polyline.Decompose">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Decompose"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Polyline.GetExtent(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Polyline.GetExtent(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(System.Double)"/>
            </summary>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Polyline.HitTest(CADability.BoundingCube@,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.BoundingCube@,System.Double)"/>
            </summary>
            <param name="cube"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Polyline.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)"/>
            </summary>
            <param name="projection"></param>
            <param name="rect"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Polyline.HitTest(CADability.Projection.PickArea,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection.PickArea,System.Boolean)"/>
            </summary>
            <param name="area"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Polyline.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)"/>
            </summary>
            <param name="fromHere"></param>
            <param name="direction"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Polyline.DirectionAt(System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.DirectionAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Polyline.PointAt(System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.PointAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Polyline.PositionOf(CADability.GeoPoint)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.PositionOf(CADability.GeoPoint)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Polyline.PositionOf(CADability.GeoPoint,System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.PositionOf(CADability.GeoPoint,System.Double)"/>
            </summary>
            <param name="p"></param>
            <param name="prefer"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Polyline.PositionOf(CADability.GeoPoint,CADability.Plane)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.PositionOf(CADability.GeoPoint,CADability.Plane)"/>
            </summary>
            <param name="p"></param>
            <param name="pl"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Polyline.Reverse">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.Reverse"/>
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Polyline.Split(System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.Split(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Polyline.Split(System.Double,System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.Split(System.Double,System.Double)"/>
            </summary>
            <param name="Position1"></param>
            <param name="Position2"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Polyline.Trim(System.Double,System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.Trim(System.Double,System.Double)"/>
            </summary>
            <param name="StartPos"></param>
            <param name="EndPos"></param>
        </member>
        <member name="M:CADability.GeoObject.Polyline.GetPlanarState">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.GetPlanarState"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Polyline.GetPlane">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.GetPlane"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Polyline.IsInPlane(CADability.Plane)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.IsInPlane(CADability.Plane)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Polyline.GetProjectedCurve(CADability.Plane)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.GetProjectedCurve(CADability.Plane)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Polyline.TryPointDeriv2At(System.Double,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ICurve.TryPointDeriv2At(System.Double,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@)"/>
            </summary>
            <param name="position"></param>
            <param name="point"></param>
            <param name="deriv"></param>
            <param name="deriv2"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Polyline.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.GeoObject.Polyline.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="M:CADability.GeoObject.ShowPropertyShell.Opened(System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Opened(System.Boolean)"/>
            </summary>
            <param name="IsOpen"></param>
        </member>
        <member name="P:CADability.GeoObject.Shell.Edges">
            <summary>
            Returns all the edges of this Shell. Each egde is unique in the array 
            but may belong to two different faces.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Shell.Faces">
            <summary>
            Returns all <see cref="T:CADability.GeoObject.Face">Faces</see> of this shell. Do not modify the returned array since it is
            (for better performance) the original array contained in this Shell.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Shell.Name">
            <summary>
            The name of the shell. 
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Shell.GetPlaneIntersection(CADability.GeoObject.PlaneSurface)">
            <summary>
            Returns the curves that result from a planar intersection of this shell with the provided plane.
            The curves are properly clipped.
            </summary>
            <param name="pl">The plane to intersect with</param>
            <returns>Array of intersection curves</returns>
        </member>
        <member name="M:CADability.GeoObject.Shell.SetFaces(CADability.GeoObject.Face[])">
            <summary>
            Sets the faces of a shell. The faces must all be connected to form a single shell, they may have free edges.
            This is not checked. This method does not accumulate the faces.
            </summary>
            <param name="faces">The new faces that build the shell</param>
        </member>
        <member name="M:CADability.GeoObject.Shell.GetShadow(CADability.Plane)">
            <summary>
            Returns a SimpleShape with the outline and holes of the shadow of the projection of the shell perpendicular on the provided plane.
            </summary>
            <param name="onThisPlane"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Shell.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Modify(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.GeoObject.Shell.Clone(System.Collections.Generic.Dictionary{CADability.Edge,CADability.Edge},System.Collections.Generic.Dictionary{CADability.Vertex,CADability.Vertex},System.Collections.Generic.Dictionary{CADability.GeoObject.Face,CADability.GeoObject.Face})">
            <summary>
            Clones the shell and fills the dictionaries with original to cloned references
            </summary>
            <param name="clonedEdges"></param>
            <param name="clonedVertices"></param>
            <param name="clonedFaces"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Shell.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Shell.CopyGeometry(CADability.GeoObject.IGeoObject)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.CopyGeometry(CADability.GeoObject.IGeoObject)"/>
            </summary>
            <param name="ToCopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.Shell.GetShowProperties(CADability.IFrame)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetShowProperties(CADability.IFrame)"/>
            </summary>
            <param name="Frame"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Shell.FindSnapPoint(CADability.GeoObject.SnapPointFinder)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.FindSnapPoint(CADability.GeoObject.SnapPointFinder)"/>
            </summary>
            <param name="spf"></param>
        </member>
        <member name="M:CADability.GeoObject.Shell.GetBoundingCube">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetBoundingCube"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Shell.PaintTo3DList(CADability.IPaintTo3D,CADability.GeoObject.ICategorizedDislayLists)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3DList(CADability.IPaintTo3D,CADability.GeoObject.ICategorizedDislayLists)"/>
            </summary>
            <param name="paintTo3D"></param>
            <param name="lists"></param>
        </member>
        <member name="M:CADability.GeoObject.Shell.PaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3D(CADability.IPaintTo3D)"/>
            </summary>
            <param name="paintTo3D"></param>
        </member>
        <member name="M:CADability.GeoObject.Shell.PrepareDisplayList(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PrepareDisplayList(System.Double)"/>
            </summary>
            <param name="precision"></param>
        </member>
        <member name="M:CADability.GeoObject.Shell.GetExtent(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Shell.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Shell.Decompose">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Decompose"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Shell.GetExtent(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(System.Double)"/>
            </summary>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Shell.HitTest(CADability.BoundingCube@,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.BoundingCube@,System.Double)"/>
            </summary>
            <param name="cube"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Shell.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)"/>
            </summary>
            <param name="projection"></param>
            <param name="rect"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Shell.HitTest(CADability.Projection.PickArea,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection.PickArea,System.Boolean)"/>
            </summary>
            <param name="area"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Shell.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)"/>
            </summary>
            <param name="fromHere"></param>
            <param name="direction"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Shell.HasFreeEdges">
            <summary>
            Returns true if there is an edge that belongs to a single face. If there are no free edges the shell
            can be used for a solid.
            </summary>
            <returns>true if there are free edges</returns>
        </member>
        <member name="P:CADability.GeoObject.Shell.IsClosed">
            <summary>
            Checks whether the shall is closed, i.e. all edges of all faces connect two faces of this shell.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Shell.GetEnclosedPart(CADability.GeoObject.Path,System.Double)">
            <summary>
            Preliminary: Returns the enclosed part of the shell which is inside the border
            </summary>
            <param name="closedBorder"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Shell.RemoveFace(CADability.GeoObject.Face)">
            <summary>
            Removes the provided <paramref name="face"/> from the shell. Connecting edges are seperated
            </summary>
            <param name="face"></param>
        </member>
        <member name="M:CADability.GeoObject.Shell.CombineConnectedFaces">
            <summary>
            Adjacent faces that share a common surface are replaced by a single face
            </summary>
            <returns>Number of faces that have been combined</returns>
        </member>
        <member name="M:CADability.GeoObject.Shell.SameForm(CADability.GeoObject.Shell,System.Double,CADability.ModOp@)">
            <summary>
            Returns true, if this shell and the other shell describe the same form. The two shells may be at different positions in 3d space, but may not be rotated,
            i.e. must have the same orientation in 3d space.
            </summary>
            <param name="other">the other shell</param>
            <param name="precision">maximum difference in the geometry of the two shells accepted as still beeing equal</param>
            <param name="translation">how to move the other shell to coincide with this shell</param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Shell.FindSameForm(CADability.GeoObject.Face[],System.Double,CADability.GeoObject.Shell.FindSameFormSearchMode)">
            <summary>
            Find other instances of the "form" given by the parameter form. The faces in form must be a subset of faces of this shell.
            Returned are other subsets of faces of this shell that describe the same form.
            </summary>
            <param name="form"></param>
            <param name="precision"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Shell.FeatureFromFace(CADability.GeoObject.Face)">
            <summary>
            Tries to find a feature like a drill hole or a part sticking out of the shell starting with this face.
            The rule is that faces connected with the face toStartWith are combined until the open edges have the same underlying surface. There might be one
            or two loops of such open edges (two loops for a hole going through the body).
            </summary>
            <param name="toStartWith"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Shell.FeatureFromEdges(CADability.Edge[],CADability.GeoObject.Face[])">
            <summary>
            edgeLoop must be a closed set of edges on this shell. The shell will be splitted at this loop.
            All edges in edgeLoop join one of the faces in facesToCutoff. These parts of the shell will not be used.
            At this loop, which remains open in the first step, the resulting shell will be closed by faces with surfaces from facesToCutOff.
            </summary>
            <param name="edge"></param>
            <param name="face"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Shell.GetContextMenu(CADability.IFrame)">
            <summary>
            Returns a menu, which is shown when there is a right click on the face
            </summary>
            <param name="frame"></param>
            <returns></returns>
        </member>
        <member name="T:CADability.GeoObject.SnapPointFinder">
            <summary>
            Ths class serves as a parameter to <see cref="M:CADability.GeoObject.IGeoObject.FindSnapPoint(CADability.GeoObject.SnapPointFinder)"/>.
            It keeps the best snappoint, the object, which caused it and the distance
            to the mouse point.
            </summary>
        </member>
        <member name="T:CADability.GeoObject.SnapPointFinder.SnapModes">
            <summary>
            Snap modes to specify in which points the SnapPointFinder should respect
            </summary>
        </member>
        <member name="F:CADability.GeoObject.SnapPointFinder.SnapModes.SnapToIntersectionPoint">
            <summary>
            Snap to intersection points of curves.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.SnapPointFinder.SnapModes.SnapToDropPoint">
            <summary>
            Snap to the perpendicular foot point from the basepoint. A basepoint is required.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.SnapPointFinder.SnapModes.SnapToObjectPoint">
            <summary>
            Snap to any point on the object, may be some intermediate point on the object.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.SnapPointFinder.SnapModes.SnapToObjectSnapPoint">
            <summary>
            Snap to a specifically qualified point on the object, usually start or endpoint, centerpoint depending on the kind of object.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.SnapPointFinder.SnapModes.SnapToObjectCenter">
            <summary>
            Snap to the center of the object under the cursor.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.SnapPointFinder.SnapModes.SnapToTangentPoint">
            <summary>
            Snap to a tangent point of the object under the cursor. A basepoint must be defined from which the tangent line starts.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.SnapPointFinder.SnapModes.SnapToGridPoint">
            <summary>
            Snap to a grid point. This has lower priority than the other snap operations.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.SnapPointFinder.SnapModes.AdjustOrtho">
            <summary>
            Snap to a point horizontally or vertically adjusted to the basepoint. A basepoint is required in this maode.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.SnapPointFinder.SnapModes.SnapToZero">
            <summary>
            Snap to the absolute origin of the coordinatesystem or drawing plane.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.SnapPointFinder.SnapModes.SnapToFaceSurface">
            <summary>
            Snap to any point on the surface of the Face under the cursor.
            </summary>
        </member>
        <member name="T:CADability.GeoObject.SnapPointFinder.DidSnapModes">
            <summary>
            Resulting snap modes of the snap opertaion.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.SnapPointFinder.DidSnapModes.DidNotSnap">
            <summary>
            There was no snap action.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.SnapPointFinder.DidSnapModes.DidSnapToIntersectionPoint">
            <summary>
            <see cref="F:CADability.GeoObject.SnapPointFinder.SnapModes.SnapToIntersectionPoint"/> caused the snapping.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.SnapPointFinder.DidSnapModes.DidSnapToDropPoint">
            <summary>
            <see cref="F:CADability.GeoObject.SnapPointFinder.SnapModes.SnapToDropPoint"/> caused the snapping.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.SnapPointFinder.DidSnapModes.DidSnapToObjectPoint">
            <summary>
            <see cref="F:CADability.GeoObject.SnapPointFinder.SnapModes.SnapToObjectPoint"/> caused the snapping.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.SnapPointFinder.DidSnapModes.DidSnapToObjectSnapPoint">
            <summary>
            <see cref="F:CADability.GeoObject.SnapPointFinder.SnapModes.SnapToObjectSnapPoint"/> caused the snapping.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.SnapPointFinder.DidSnapModes.DidSnapToObjectCenter">
            <summary>
            <see cref="!:SnapModes.SnapToCenter"/> caused the snapping.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.SnapPointFinder.DidSnapModes.DidSnapToTangentPoint">
            <summary>
            <see cref="F:CADability.GeoObject.SnapPointFinder.SnapModes.SnapToTangentPoint"/> caused the snapping.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.SnapPointFinder.DidSnapModes.DidSnapToGridPoint">
            <summary>
            <see cref="F:CADability.GeoObject.SnapPointFinder.SnapModes.SnapToGridPoint"/> caused the snapping.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.SnapPointFinder.DidSnapModes.DidAdjustOrtho">
            <summary>
            <see cref="F:CADability.GeoObject.SnapPointFinder.SnapModes.AdjustOrtho"/> caused the snapping.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.SnapPointFinder.DidSnapModes.DidSnapToLocalZero">
            <summary>
            <see cref="F:CADability.GeoObject.SnapPointFinder.SnapModes.SnapToZero"/> caused the snapping to the drawing plane origin.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.SnapPointFinder.DidSnapModes.DidSnapToAbsoluteZero">
            <summary>
            <see cref="F:CADability.GeoObject.SnapPointFinder.SnapModes.SnapToZero"/> caused the snapping to absolute zero.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.SnapPointFinder.DidSnapModes.DidSnapToFaceSurface">
            <summary>
            <see cref="F:CADability.GeoObject.SnapPointFinder.SnapModes.SnapToFaceSurface"/> caused the snapping.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.SnapPointFinder.DidSnapModes.KeyboardInput">
            <summary>
            There was a keyboard input for the point, no snapping.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.SnapPointFinder.SourcePoint">
            <summary>
            Postition of the source point on the projection plane
            </summary>
        </member>
        <member name="P:CADability.GeoObject.SnapPointFinder.SourcePoint3D">
            <value>
            Gets the source point (which is the mouse position on the projection plane)
            as a 3D point. Together with the direction of the projection this makes a
            line that is perpendicular to the screen and goes through the mouse point.
            </value>
        </member>
        <member name="M:CADability.GeoObject.SnapPointFinder.Check(CADability.GeoPoint,CADability.GeoObject.IGeoObject,CADability.GeoObject.SnapPointFinder.DidSnapModes)">
            <summary>
            The <see cref="T:CADability.GeoObject.IGeoObject"/> obj offers the point p as a snappoint in the given mode.
            This method checks whether to use this point as the closest snap point.
            This method is typically called by GeoObjects from the <see cref="M:CADability.GeoObject.IGeoObject.FindSnapPoint(CADability.GeoObject.SnapPointFinder)"/> method.
            </summary>
            <param name="p"></param>
            <param name="obj"></param>
            <param name="mode"></param>
        </member>
        <member name="T:CADability.GeoObject.Solid">
            <summary>
            A Solid is a <see cref="T:CADability.GeoObject.IGeoObject"/> implementation that represents a solid body.
            Its main data is a collection of oriented faces. The normal vector on any point of the face
            points to the outside of the body. Solids have one set of faces that represent the outer hull
            and any number of cavyties that reside totally inside the outer hull. All cavyties are disjoint.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Solid.Edges">
            <summary>
            Returns all the edges of this Shell. Each egde is unique in the array 
            but may belong to two different faces.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Solid.Shells">
            <summary>
            Returns a list of all shells that bound this solid. In most cases there is only a single shell.
            If there is more than one shell the shell with index 0 is the outer hull and all subsequent shells
            describe cavyties that reside totally inside the outer hull.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Solid.Name">
            <summary>
            The name of the solid. 
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Solid.GetPlaneIntersection(CADability.GeoObject.PlaneSurface)">
            <summary>
            Returns the curves that result from a planar intersection of this shell with the provided plane.
            The curves are properly clipped.
            </summary>
            <param name="pl">The plane to intersect with</param>
            <returns>Array of intersection curves</returns>
        </member>
        <member name="P:CADability.GeoObject.Solid.Volume">
            <summary>
            Returns the volume (capacity) of this solid.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Solid.GetShowProperties(CADability.IFrame)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetShowProperties(CADability.IFrame)"/>
            </summary>
            <param name="Frame"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Solid.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Modify(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.GeoObject.Solid.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Solid.CopyGeometry(CADability.GeoObject.IGeoObject)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.CopyGeometry(CADability.GeoObject.IGeoObject)"/>
            </summary>
            <param name="ToCopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.Solid.FindSnapPoint(CADability.GeoObject.SnapPointFinder)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.FindSnapPoint(CADability.GeoObject.SnapPointFinder)"/>
            </summary>
            <param name="spf"></param>
        </member>
        <member name="M:CADability.GeoObject.Solid.GetBoundingCube">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetBoundingCube"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Solid.PaintTo3DList(CADability.IPaintTo3D,CADability.GeoObject.ICategorizedDislayLists)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3DList(CADability.IPaintTo3D,CADability.GeoObject.ICategorizedDislayLists)"/>
            </summary>
            <param name="paintTo3D"></param>
            <param name="lists"></param>
        </member>
        <member name="M:CADability.GeoObject.Solid.PaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3D(CADability.IPaintTo3D)"/>
            </summary>
            <param name="paintTo3D"></param>
        </member>
        <member name="M:CADability.GeoObject.Solid.PrepareDisplayList(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PrepareDisplayList(System.Double)"/>
            </summary>
            <param name="precision"></param>
        </member>
        <member name="M:CADability.GeoObject.Solid.GetExtent(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Solid.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Solid.GetExtent(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(System.Double)"/>
            </summary>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Solid.HitTest(CADability.BoundingCube@,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.BoundingCube@,System.Double)"/>
            </summary>
            <param name="cube"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Solid.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)"/>
            </summary>
            <param name="projection"></param>
            <param name="rect"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Solid.HitTest(CADability.Projection.PickArea,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection.PickArea,System.Boolean)"/>
            </summary>
            <param name="area"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Solid.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)"/>
            </summary>
            <param name="fromHere"></param>
            <param name="direction"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Solid.Unite(CADability.GeoObject.Solid,CADability.GeoObject.Solid)">
            <summary>
            Unites the two solids and returns the union. If the solids are disjunct, null is returned.
            </summary>
            <param name="solid1">first solid</param>
            <param name="solid2">second solid</param>
            <returns>union or null</returns>
        </member>
        <member name="M:CADability.GeoObject.Solid.Intersect(CADability.GeoObject.Solid,CADability.GeoObject.Solid)">
            <summary>
            Returns the intersection of two solids, i.e. those parts that are common to both solids. If the 
            solids are disjunct, an empty array is returned. There may be more than one solid body as a restult.
            </summary>
            <param name="solid1">first solid</param>
            <param name="solid2">second solid</param>
            <returns>array of common parts</returns>
        </member>
        <member name="M:CADability.GeoObject.Solid.Subtract(CADability.GeoObject.Solid,CADability.GeoObject.Solid)">
            <summary>
            Returns the difference of two solids. The second solid is removed from the first solid. If the
            solids are disjunct, (a clone of the) the first solid is returned. If the second solid contains the
            first solid, an empty array is returned.
            </summary>
            <param name="first">first solid</param>
            <param name="second">second solid</param>
            <returns>the difference</returns>
        </member>
        <member name="M:CADability.GeoObject.Solid.Decompose">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Decompose"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Solid.GetContextMenu(CADability.IFrame)">
            <summary>
            Returns a menu, which is shown when there is a right click on the solid
            </summary>
            <param name="frame"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SphericalSurface.GetModified(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetModified(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SphericalSurface.GetNormal(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetNormal(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SphericalSurface.GetTangentCurves(CADability.GeoVector,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetTangentCurves(CADability.GeoVector,System.Double,System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="direction"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SphericalSurface.PointAt(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.PointAt(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SphericalSurface.UDirection(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.UDirection(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SphericalSurface.VDirection(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.VDirection(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SphericalSurface.GetLineIntersection(CADability.GeoPoint,CADability.GeoVector)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetLineIntersection(CADability.GeoPoint,CADability.GeoVector)"/>
            </summary>
            <param name="startPoint"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SphericalSurface.IsVanishingProjection(CADability.Projection,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.IsVanishingProjection(CADability.Projection,System.Double,System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="p"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SphericalSurface.Make3dCurve(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Make3dCurve(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="curve2d"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SphericalSurface.GetPlaneIntersection(CADability.GeoObject.PlaneSurface,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetPlaneIntersection(CADability.GeoObject.PlaneSurface,System.Double,System.Double,System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="pl"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SphericalSurface.GetSafeParameterSteps(System.Double,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetSafeParameterSteps(System.Double,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)"/>
            </summary>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="intu"></param>
            <param name="intv"></param>
        </member>
        <member name="M:CADability.GeoObject.SphericalSurface.PositionOf(CADability.GeoPoint)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.PositionOf(CADability.GeoPoint)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SphericalSurface.GetZMinMax(CADability.Projection,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetZMinMax(CADability.Projection,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)"/>
            </summary>
            <param name="p"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="zMin"></param>
            <param name="zMax"></param>
        </member>
        <member name="M:CADability.GeoObject.SphericalSurface.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SphericalSurface.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Modify(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.GeoObject.SphericalSurface.CopyData(CADability.GeoObject.ISurface)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.CopyData(CADability.GeoObject.ISurface)"/>
            </summary>
            <param name="CopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.SphericalSurface.Orientation(CADability.GeoPoint)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Orientation(CADability.GeoPoint)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SphericalSurface.HitTest(CADability.BoundingCube,CADability.GeoPoint2D@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.HitTest(CADability.BoundingCube,CADability.GeoPoint2D@)"/>
            </summary>
            <param name="bc"></param>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SphericalSurface.GetSaveUSteps">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetSaveUSteps"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SphericalSurface.GetSaveVSteps">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetSaveVSteps"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SphericalSurface.GetExtrema">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetExtrema"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SphericalSurface.GetPolynomialParameters">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetPolynomialParameters"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SphericalSurface.ReverseOrientation">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.ReverseOrientation"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SphericalSurface.FixedU(System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.FixedU(System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="u"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SphericalSurface.FixedV(System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.FixedV(System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="v"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SphericalSurface.SameGeometry(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect,System.Double,CADability.ModOp2D@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.SameGeometry(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect,System.Double,CADability.ModOp2D@)"/>
            </summary>
            <param name="thisBounds"></param>
            <param name="other"></param>
            <param name="otherBounds"></param>
            <param name="precision"></param>
            <param name="firstToSecond"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SphericalSurface.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="T:CADability.GeoObject.ISurface">
            <summary>
            The ISurface interface must be implemented by all 3-dimensional unbound surfaces that are used by the
            <see cref="T:CADability.GeoObject.Face"/> object. The surface has a well defined 2-dimensional coordinate system, usually referred to
            as the u/v system.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.ISurface.GetModified(CADability.ModOp)">
            <summary>
            Returns a clone of this surface modified by the given ModOp.
            </summary>
            <param name="m">how to modify</param>
        </member>
        <member name="M:CADability.GeoObject.ISurface.Make3dCurve(CADability.Curve2D.ICurve2D)">
            <summary>
            Returns a 3-dimensional curve from the given 2-dimensional curve. the 2-dimensional curve
            is interpreted in the u/v system of the surface.
            </summary>
            <param name="curve2d">the base curve</param>
            <returns>corresponding 3-d curve</returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.GetNormal(CADability.GeoPoint2D)">
            <summary>
            Returns the normal vector (perpendicular to the surface) at the given u/v point
            </summary>
            <param name="uv">position of normal</param>
            <returns>normal vector</returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.UDirection(CADability.GeoPoint2D)">
            <summary>
            Returns the direction at the given u/v point in direction of the u-axis
            </summary>
            <param name="uv">position</param>
            <returns>direction</returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.VDirection(CADability.GeoPoint2D)">
            <summary>
            Returns the direction at the given u/v point in direction of the v-axis
            </summary>
            <param name="uv">position</param>
            <returns>direction</returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.PointAt(CADability.GeoPoint2D)">
            <summary>
            Returns the 3-dimensional point at the given u/v point
            </summary>
            <param name="uv">position</param>
            <returns>point</returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.PositionOf(CADability.GeoPoint)">
            <summary>
            Returns the u/v position of the given point. It is assumed that the point is on the surface,
            if not the result is undetermined.
            </summary>
            <param name="p">point</param>
            <returns>position</returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.DerivationAt(CADability.GeoPoint2D,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@)">
            <summary>
            Returns the point and the two derivations of the suface in a single call. It returns the same result as calling
            <see cref="M:CADability.GeoObject.ISurface.PointAt(CADability.GeoPoint2D)"/>, <see cref="M:CADability.GeoObject.ISurface.VDirection(CADability.GeoPoint2D)"/> und <see cref="M:CADability.GeoObject.ISurface.VDirection(CADability.GeoPoint2D)"/> succesively but is often faster
            than the three seperate calls.
            </summary>
            <param name="uv">Point in the parameter space</param>
            <param name="location">Resulting 3D point</param>
            <param name="du">Resulting derivation in u</param>
            <param name="dv">Resulting derivation in v</param>
        </member>
        <member name="M:CADability.GeoObject.ISurface.Derivation2At(CADability.GeoPoint2D,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@)">
            <summary>
            Returns the point, the two first derivations and the three second derivations of the surface at the provided parameter position.
            
            </summary>
            <param name="uv">Point in the parameter space</param>
            <param name="location">Resulting 3D point</param>
            <param name="du">Resulting derivation in u</param>
            <param name="dv">Resulting derivation in v</param>
            <param name="duu"></param>
            <param name="dvv"></param>
            <param name="duv"></param>
        </member>
        <member name="M:CADability.GeoObject.ISurface.GetPlaneIntersection(CADability.GeoObject.PlaneSurface,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the intersection curve(s) of this surface with the given plane. An empty array is returned if there is no intersection.
            umin, umax, vmin, vmax define the Parameterspace of this surface (not of the PlaneSurface) for the intersection. It is also the periodic domain
            in which the 2d curve for this surface will be returned, if this surface is periodic. the resulting curves may exceed the area provided by umin, umax, vmin, vmax.
            </summary>
            <param name="pl">plane to intersect with</param>
            <returns>intersection curves</returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.GetTangentCurves(CADability.GeoVector,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns curves where direction is perpendicular to the normal vector
            </summary>
            <param name="direction"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.GetSafeParameterSteps(System.Double,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)">
            <summary>
            Gets spans of the parameterspace that are guaranteed to contain only one inflection point.
            The returned intu should contain umin as first and umax as last value (same with v)
            </summary>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="intu"></param>
            <param name="intv"></param>
        </member>
        <member name="M:CADability.GeoObject.ISurface.IsVanishingProjection(CADability.Projection,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns true if the given projection makes the surface disappear, i.e. degenerate to an edge.
            </summary>
            <param name="p">the projection</param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <returns>true if vanishing, falso otherwise</returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.GetLineIntersection(CADability.GeoPoint,CADability.GeoVector)">
            <summary>
            Returns the intersectionpoints of this surface with the line given by the parameters.
            Teh returned point are in the parametric (u/v) space of this surface.
            </summary>
            <param name="startPoint">startpoint of the line</param>
            <param name="direction">direction of the line</param>
            <returns></returns>
        </member>
        <member name="P:CADability.GeoObject.ISurface.IsUPeriodic">
            <summary>
            Returns true, if this surface is periodic in the u direction (e.g. a cylinder)
            false otherwise.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.ISurface.IsVPeriodic">
            <summary>
            Returns true, if this surface is periodic in the v direction (e.g. a torus)
            false otherwise.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.ISurface.UPeriod">
            <summary>
            Returns the u priod of this surface if it is <see cref="P:CADability.GeoObject.ISurface.IsUPeriodic">u periodic</see>
            0.0 otherwise
            </summary>
        </member>
        <member name="P:CADability.GeoObject.ISurface.VPeriod">
            <summary>
            Returns the v priod of this surface if it is <see cref="P:CADability.GeoObject.ISurface.IsVPeriodic">v periodic</see>
            0.0 otherwise
            </summary>
        </member>
        <member name="M:CADability.GeoObject.ISurface.GetUSingularities">
            <summary>
            returns the values for the u parameter where this surface is singular i.e. changing
            v with this u parameter fixed doesn't change the 3D point.
            </summary>
            <returns>list of u singularities</returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.GetVSingularities">
            <summary>
            returns the values for the v parameter where this surface is singular i.e. changing
            u with this v parameter fixed doesn't change the 3D point.
            </summary>
            <returns>list of v singularities</returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.MakeFace(CADability.Shapes.SimpleShape)">
            <summary>
            Makes a <see cref="T:CADability.GeoObject.Face"/> from this surface with the given bounds in the parametric (u/v) space.
            </summary>
            <param name="simpleShape">the bounds</param>
            <returns>the created face or null</returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.GetZMinMax(CADability.Projection,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Gets the minimum and maximumm valus for the z-coordinate of a rectangular patch (in parametric space) 
            of this surface under a certain projection
            </summary>
            <param name="p">the projection</param>
            <param name="umin">left bound of the rectangular patch</param>
            <param name="umax">right bound of the rectangular patch</param>
            <param name="vmin">bottom bound of the rectangular patch</param>
            <param name="vmax">top bound of the rectangular patch</param>
            <param name="zMin">returned minimum</param>
            <param name="zMax">returned maximum</param>
        </member>
        <member name="M:CADability.GeoObject.ISurface.MakeCanonicalForm">
            <summary>
            Modifies this surface into a more canonical form and returns the modification for the parametric
            space which reverses this modification in 2d. Curves in the parametric space of this surface will become
            invalid unless modified by the returned transformation.
            </summary>
            <returns>2d modification for the parametric space</returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.Clone">
            <summary>
            Returns an identical but independant copy of this surface
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.Modify(CADability.ModOp)">
            <summary>
            Modifies this surface with the given operation
            </summary>
            <param name="m">how to modif</param>
        </member>
        <member name="M:CADability.GeoObject.ISurface.CopyData(CADability.GeoObject.ISurface)">
            <summary>
            Copies the data of the given surface to this surface. The two surfaces are guaranteed to be of the
            same type. (Used after <see cref="M:CADability.GeoObject.ISurface.Clone"/> and <see cref="M:CADability.GeoObject.ISurface.Modify(CADability.ModOp)"/> to restore the original values).
            </summary>
            <param name="CopyFrom">where to copy the data from</param>
        </member>
        <member name="M:CADability.GeoObject.ISurface.Approximate(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a NurbSurface as an approximation of this surface
            </summary>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.GetProjectedCurve(CADability.GeoObject.ICurve,System.Double)">
            <summary>
            Returns the projection of the given curve in 2D coordinates. Should only be used for curves 
            that are close to the surface.
            </summary>
            <param name="curve"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.Intersect(CADability.GeoObject.ICurve,CADability.BoundingRect,CADability.GeoPoint[]@,CADability.GeoPoint2D[]@,System.Double[]@)">
            <summary>
            Returns the intersection of the provided <paramref name="curve"/> with this surface. 
            The result may be empty.
            </summary>
            <param name="curve">The curve to be intersected with</param>
            <param name="ips">Resulting 3d intersection points</param>
            <param name="uvOnFaces">u/v values of the intersection points on this surface</param>
            <param name="uOnCurve3Ds">u parameter of intersection points on the curve</param>
        </member>
        <member name="M:CADability.GeoObject.ISurface.Intersect(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect)">
            <summary>
            Returns the intersection curves between this surface and the provided other surface.
            Both surfaces are bound by rectangles.
            </summary>
            <param name="thisBounds">Bounds for this surface</param>
            <param name="other">Other surface</param>
            <param name="otherBounds">Bounds of other surface</param>
            <returns>Array of intersection curves</returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.ReverseOrientation">
            <summary>
            Reverses the orientation of this surface. The normal vector will point to the other side after this operation.
            The returned <see cref="T:CADability.ModOp2D"/> determins how (u,v) coordinates of the parameter space have to be 
            transformed to define the same 3d point.
            </summary>
            <returns>Transformation of the parameter space</returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.SameGeometry(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect,System.Double,CADability.ModOp2D@)">
            <summary>
            Returns true if this surface and the other surface are geometrically identical, i.e. describe the same surface
            in 3D space. The may have a different u/v system. The returned <paramref name="firstToSecond"/> contains
            the ModOp to convert from the u/v system of the first surface to the second surface.
            </summary>
            <param name="thisBounds">Bounds for this surface</param>
            <param name="other">Other surface</param>
            <param name="otherBounds">Bounds of other surface</param>
            <param name="precision">Required precision</param>
            <param name="firstToSecond">Transformation between different u/v systems</param>
            <returns>True if the surfaces are geometrically equal</returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.GetOffsetSurface(System.Double)">
            <summary>
            Returns a surface that is "parallel" to this surface, i.e. each point on this surface corresponds a 
            point on the returned surface that has the same (u,v) coordinates and has the 3d coordinates oft the
            point plus offset*Normal at this point
            </summary>
            <param name="offset">Offset to this surface</param>
            <returns>The offset surface</returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.GetNaturalBounds(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Returns the natural bounds of the surface. The returned values may be infinite
            </summary>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
        </member>
        <member name="M:CADability.GeoObject.ISurface.HitTest(CADability.BoundingCube,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Checks whether this surface restricted by the provided parameters interferes with the provided cube.
            </summary>
            <param name="cube">Bounding cube for the test</param>
            <param name="umin">Minimum for the u parameter</param>
            <param name="umax">Maximum for the u parameter</param>
            <param name="vmin">Minimum for the v parameter</param>
            <param name="vmax">Maximum for the v parameter</param>
            <returns>true if the cube and the surface interfere</returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.HitTest(CADability.BoundingCube,CADability.GeoPoint2D@)">
            <summary>
            Returns true, if this surface interferes with the provided cube. If this is the case
            uv will contain a point (in the parameter system of the surface) which is inside the cube
            </summary>
        </member>
        <member name="P:CADability.GeoObject.ISurface.Oriented">
            <summary>
            Returns true, if this surface divides the space into two parts. If the surfaces is Oriented 
            <see cref="M:CADability.GeoObject.ISurface.Orientation(CADability.GeoPoint)"/> returns a valid result
            </summary>
        </member>
        <member name="M:CADability.GeoObject.ISurface.Orientation(CADability.GeoPoint)">
            <summary>
            Returns the orientation of the provided point. The sign of the result may be used to distinguish
            between inside and outside.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.GetExtrema">
            <summary>
            Returns an array of points in parametric space where there are extrema in direction of x-, y- or z-axis.
            The normal vector in a extremum is parallel to one of the axis and the surface has a relative maximum or
            minimum in this direction.
            </summary>
            <returns>s.a.</returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.GetPatchExtent(CADability.BoundingRect,System.Boolean)">
            <summary>
            Returns the extent of a patch of the surface clipped rectangular in the 2d parameter space
            </summary>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.FixedU(System.Double,System.Double,System.Double)">
            <summary>
            Returns a curve where the u parameter of this surface is fixed and the v parameter starts a vmin and ends at vmax
            </summary>
            <param name="u"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.FixedV(System.Double,System.Double,System.Double)">
            <summary>
            Returns a curve where the v parameter of this surface is fixed and the u parameter starts a umin and ends at umax
            </summary>
            <param name="v"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.SetBounds(CADability.BoundingRect)">
            <summary>
            Mostly used internally
            </summary>
            <param name="boundingRect"></param>
        </member>
        <member name="M:CADability.GeoObject.ISurface.PerpendicularFoot(CADability.GeoPoint)">
            <summary>
            Returns a list of perpendicular foot points of the surface. The list may be empty
            </summary>
            <param name="fromHere">Source point for the perpendicular foot</param>
            <returns>Array of footpoints, may be empty</returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.GetNonPeriodicSurface(CADability.Shapes.Border)">
            <summary>
            If this surface is periodic in u or v or both return a nonperiodic surface
            which describes the same geometric surface but with a differen parametric system.
            </summary>
            <param name="maxOutline">Maximum area in which the definition must be valid</param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.GetPatchHull(CADability.BoundingRect,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@)">
            <summary>
            Returns a parallelepiped (a prism with parallelograms) defined by the parameters <paramref name="loc"/>,
            <paramref name="dir1"/>, <paramref name="dir2"/>, <paramref name="dir3"/> which completeley covers or encloses
            the patch of the surface defined by the <paramref name="uvpatch"/>. There are obviously many solutions
            to this problem but a parallelepiped with minimum volume would be preferred. This method is used
            to optimate intersection algorithms.
            </summary>
            <param name="uvpatch">The patch of the surface in parametric space</param>
            <param name="loc">One vertex of the result</param>
            <param name="dir1">One of the three vectors of the parallelepiped</param>
            <param name="dir2">One of the three vectors of the parallelepiped</param>
            <param name="dir3">One of the three vectors of the parallelepiped</param>
        </member>
        <member name="P:CADability.GeoObject.ISurface.IsRuled">
            <summary>
            returns wheather the surface is linear in u or v direction
            </summary>
        </member>
        <member name="M:CADability.GeoObject.ISurface.MaxDist(CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoPoint2D@)">
            <summary>
            used internally. the maximum distance of the 3d curve, formed by the uv-line from sp to ep, to the 3d-line from PointAt(sp) to PointAt(ep)
            </summary>
            <param name="sp"></param>
            <param name="ep"></param>
            <param name="surface"></param>
            <param name="mp">The uv point where this distance occurres</param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.Intersect(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect,CADability.GeoPoint)">
            <summary>
            Returns the intersection curves between this surface and the provided other surface.
            Both surfaces are bound by rectangles.
            </summary>
            <param name="thisBounds">Bounds for this surface</param>
            <param name="other">Other surface</param>
            <param name="otherBounds">Bounds of other surface</param>
            <returns>Array of intersection curves</returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.GetDualSurfaceCurves(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect,System.Collections.Generic.List{CADability.GeoPoint},System.Collections.Generic.List{System.Tuple{System.Double,System.Double,System.Double,System.Double}})">
            <summary>
            Returns intersectionCurves 
            </summary>
            <param name="bounds1"></param>
            <param name="surface2"></param>
            <param name="bounds2"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.GetSelfIntersections(CADability.BoundingRect)">
            <summary>
            Returns a List of self intersection curves in the u/v system
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.GetTouchingPoints(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect)">
            <summary>
            Returns a list of points where the surfaces touch each other (where the surfaces are tangential)
            </summary>
            <param name="thisBounds"></param>
            <param name="other"></param>
            <param name="otherBounds"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.GetCanonicalForm(System.Double,System.Nullable{CADability.BoundingRect})">
            <summary>
            Returns a simpler form of this surface: SurfaceOfLinearExtrusion might be a cylinder, NURBS might be a sphere etc.
            Returns null, if there is no simpler form
            </summary>
            <param name="precision">maximal allowed deviation of the new surface</param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.GetExtremePositions(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect,System.Collections.Generic.List{System.Tuple{System.Double,System.Double,System.Double,System.Double}}@)">
            <summary>
            Find positions in the uv system, where the connection of the points are perpendicular on both surfaces. the resulting list <paramref name="extremePositions"/> may be 
            only partially filled, the missing uv values may be double.NaN, because this is what we need in most cases.
            </summary>
            <param name="thisBounds"></param>
            <param name="other"></param>
            <param name="otherBounds"></param>
            <param name="extremePositions"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.GetExtremePositions(CADability.BoundingRect,CADability.GeoObject.ICurve,System.Collections.Generic.List{System.Tuple{System.Double,System.Double,System.Double}}@)">
            <summary>
            Find positions on the surface and on the curve where the connection of these points are perpendicular to the surface and to the curve
            </summary>
            <param name="domain">valid area for the surface</param>
            <param name="curve3D">the curve</param>
            <param name="positions">the positions found: first two doubles are u,v on the surface, third is u on the curve</param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.GetDistance(CADability.GeoPoint)">
            <summary>
            Returns the distance of the provided point <paramref name="p"/> to the (unlimited) surface.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.IsExtruded(CADability.GeoVector)">
            <summary>
            returns true, if the provided direction can be interpreted as an extrusion direction of the surface
            </summary>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurface.GetContextMenuForParametrics(CADability.IFrame,CADability.GeoObject.Face)">
            <summary>
            Returns a context menu to change certain parameters of the surface of a face
            </summary>
            <param name="frame"></param>
            <param name="face"></param>
            <returns></returns>
        </member>
        <member name="T:CADability.GeoObject.ISurfacePlaneIntersection">
            <summary>
            Soll von Fl√§chen implementiert werden, deren Schnitte mit Ebenen einfach sind (Linien, Ellipsen) um numerisch iterierte
            L√∂sungen zu vermeiden
            </summary>
        </member>
        <member name="T:CADability.GeoObject.ISurfaceOfRevolution">
            <summary>
            Interface of a surface rotating in u direction. Should be implemented by all surfaces, which can be looked at this was
            </summary>
        </member>
        <member name="P:CADability.GeoObject.ISurfaceOfRevolution.Axis">
            <summary>
            The axis for the revolution
            </summary>
        </member>
        <member name="P:CADability.GeoObject.ISurfaceOfRevolution.Curve">
            <summary>
            The curve, that is rotated
            </summary>
        </member>
        <member name="T:CADability.GeoObject.ISurfaceOfExtrusion">
            <summary>
            Interface of an extrusion surface. All surfaces, that can be interpreted as an extrusion should implement this interface
            </summary>
        </member>
        <member name="P:CADability.GeoObject.ISurfaceOfExtrusion.ExtrusionDirectionIsV">
            <summary>
            the direction of extrusion is the v-parameter of the surface (when false, it is the u-parameter)
            </summary>
        </member>
        <member name="T:CADability.GeoObject.ISurfaceImpl">
            <summary>
            Internal helper class for <see cref="T:CADability.GeoObject.ISurface"/> implementation.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.CurveToHelper(CADability.Curve2D.ICurve2D)">
            <summary>
            Kann sein, dass der Helper nicht den selben ParameterSpace hat wie das ISurface Objekt.
            z.B. eine verzerrte Ebene geht halt in opencascade nicht. 
            Schlimmer noch bei verzerrten Kreisen (Zylinder, Kegel, Torus, Kugel, extrusion): dort kann man
            die Oberfl√§che zwar exakt mit NURBS ann√§hern, aber die Kurven sind i.a. nicht mehr linear auf
            der NURBS-Fl√§che verzerrt. Dort muss man die Kurven vollkommen neu erzeugen
            ACHTUNG!! immer erst Helper (get) aufrufen und dann GetHelperCurve, denn in Helper wird oft erst
            die Modop oder andere Daten f√ºr GetHelperCurve berechnet.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.FixedU(System.Double,System.Double,System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.FixedU(System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="u"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.FixedV(System.Double,System.Double,System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.FixedV(System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="u"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.GetModified(CADability.ModOp)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.GetModified(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.Make3dCurve(CADability.Curve2D.ICurve2D)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.Make3dCurve(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="curve2d"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.GetNormal(CADability.GeoPoint2D)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.GetNormal(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.PositionOf(CADability.GeoPoint)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.PositionOf(CADability.GeoPoint)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.DerivationAt(CADability.GeoPoint2D,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.DerivationAt(CADability.GeoPoint2D,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@)"/>
            </summary>
            <param name="uv"></param>
            <param name="location"></param>
            <param name="du"></param>
            <param name="dv"></param>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.Derivation2At(CADability.GeoPoint2D,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.Derivation2At(CADability.GeoPoint2D,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@)"/>
            </summary>
            <param name="uv"></param>
            <param name="location"></param>
            <param name="du"></param>
            <param name="dv"></param>
            <param name="duu"></param>
            <param name="dvv"></param>
            <param name="duv"></param>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.GetPlaneIntersection(CADability.GeoObject.PlaneSurface,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.GetPlaneIntersection(CADability.GeoObject.PlaneSurface,System.Double,System.Double,System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="pl"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.GetLineIntersection(CADability.GeoPoint,CADability.GeoVector)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.GetLineIntersection(CADability.GeoPoint,CADability.GeoVector)"/>
            </summary>
            <param name="startPoint"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.GetSafeParameterSteps(System.Double,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.GetSafeParameterSteps(System.Double,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)"/>
            </summary>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="intu"></param>
            <param name="intv"></param>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.GetTangentCurves(CADability.GeoVector,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.GetTangentCurves(CADability.GeoVector,System.Double,System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="direction"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.IsVanishingProjection(CADability.Projection,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.IsVanishingProjection(CADability.Projection,System.Double,System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="p"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.GetUSingularities">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.GetUSingularities"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.GetVSingularities">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.GetVSingularities"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.MakeFace(CADability.Shapes.SimpleShape)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.MakeFace(CADability.Shapes.SimpleShape)"/>
            </summary>
            <param name="simpleShape"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.GetZMinMax(CADability.Projection,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.GetZMinMax(CADability.Projection,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)"/>
            </summary>
            <param name="p"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="zMin"></param>
            <param name="zMax"></param>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.MakeCanonicalForm">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.MakeCanonicalForm"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.Clone">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.Modify(CADability.ModOp)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.Modify(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.CopyData(CADability.GeoObject.ISurface)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.CopyData(CADability.GeoObject.ISurface)"/>
            </summary>
            <param name="CopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.Approximate(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.Approximate(System.Double,System.Double,System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.GetProjectedCurve(CADability.GeoObject.ICurve,System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.GetProjectedCurve(CADability.GeoObject.ICurve,System.Double)"/>
            </summary>
            <param name="curve"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.Intersect(CADability.GeoObject.ICurve,CADability.BoundingRect,CADability.GeoPoint[]@,CADability.GeoPoint2D[]@,System.Double[]@)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.Intersect(CADability.GeoObject.ICurve,CADability.BoundingRect,CADability.GeoPoint[]@,CADability.GeoPoint2D[]@,System.Double[]@)"/>
            </summary>
            <param name="curve"></param>
            <param name="uvExtent"></param>
            <param name="ips"></param>
            <param name="uvOnFaces"></param>
            <param name="uOnCurve3Ds"></param>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.Intersect(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.Intersect(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect)"/>
            </summary>
            <param name="thisBounds"></param>
            <param name="other"></param>
            <param name="otherBounds"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.ReverseOrientation">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.ReverseOrientation"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.SameGeometry(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect,System.Double,CADability.ModOp2D@)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.SameGeometry(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect,System.Double,CADability.ModOp2D@)"/>
            </summary>
            <param name="thisBounds"></param>
            <param name="other"></param>
            <param name="otherBounds"></param>
            <param name="precision"></param>
            <param name="firstToSecond"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.GetOffsetSurface(System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.GetOffsetSurface(System.Double)"/>
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.GetNaturalBounds(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.GetNaturalBounds(System.Double@,System.Double@,System.Double@,System.Double@)"/>
            </summary>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.HitTest(CADability.BoundingCube,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.HitTest(CADability.BoundingCube,System.Double,System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="cube"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.HitTest(CADability.BoundingCube,CADability.GeoPoint2D@)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.HitTest(CADability.BoundingCube,CADability.GeoPoint2D@)"/>
            </summary>
            <param name="cube"></param>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.Orientation(CADability.GeoPoint)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.Orientation(CADability.GeoPoint)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.GetExtrema">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.GetExtrema"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.GetPatchExtent(CADability.BoundingRect,System.Boolean)">
            <summary>
            Implements <see cref="!:CADability.GeoObject.ISurface.GetPatchExtent (BoundingRect)"/>
            </summary>
            <param name="uvPatch"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.GetPolynomialParameters">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.GetPolynomialParameters"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.SetBounds(CADability.BoundingRect)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.SetBounds(CADability.BoundingRect)"/>
            </summary>
            <param name="boundingRect"></param>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.PerpendicularFoot(CADability.GeoPoint)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.PerpendicularFoot(CADability.GeoPoint)"/>
            </summary>
            <param name="fromHere"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.HasDiscontinuousDerivative(CADability.Curve2D.ICurve2D[]@)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.HasDiscontinuousDerivative(CADability.Curve2D.ICurve2D[]@)"/>
            </summary>
            <param name="discontinuities"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.GetNonPeriodicSurface(CADability.Shapes.Border)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.GetNonPeriodicSurface(CADability.Shapes.Border)"/>
            </summary>
            <param name="maxOutline"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ISurfaceImpl.GetPatchHull(CADability.BoundingRect,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.GetPatchHull(CADability.BoundingRect,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@)"/>
            </summary>
            <param name="uvpatch"></param>
            <param name="loc"></param>
            <param name="dir1"></param>
            <param name="dir2"></param>
            <param name="dir3"></param>
        </member>
        <member name="T:CADability.GeoObject.BoxedSurface">
            <summary>
            Ein Klasse, die ein Surface Objekt mit W√ºrfeln einh√ºllt: Jeder Patch hat einen BoundingCube. Alle BoundingCubes
            sind in einem OctTree enthalten. Wenn ein W√ºrfelchen verkleinert werden muss, dann wird es aus dem
            OctTree entfernt und die kleinen werden eingef√ºgt. Die W√ºrfelchen k√∂nnen sich √ºberlappen
            </summary>
        </member>
        <member name="M:CADability.GeoObject.BoxedSurface.HitTest(CADability.BoundingCube,CADability.GeoPoint2D@)">
            <summary>
            Stellt fest, ob die Fl√§che von dem BoundingCube getroffen wird und wenn ja liefert es einen inneren Fl√§chenpunkt
            zur√ºck. Der OctTree wird bei deiser Gelegenheit u.U. verfeinert
            </summary>
            <param name="test"></param>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="T:CADability.GeoObject.BoxedSurfaceEx">
            <summary>
            Ein Klasse, die ein Surface Objekt mit W√ºrfeln einh√ºllt: Jeder Patch hat einen BoundingCube. Alle BoundingCubes
            sind in einem OctTree enthalten. Wenn ein W√ºrfelchen verkleinert werden muss, dann wird es aus dem
            OctTree entfernt und die kleinen werden eingef√ºgt. Die W√ºrfelchen k√∂nnen sich √ºberlappen
            </summary>
        </member>
        <member name="M:CADability.GeoObject.BoxedSurfaceEx.ParEpi.PositionOf(CADability.GeoPoint,CADability.GeoObject.ISurface)">
            <summary>
            Fast calculation for a starting position for a PositionOf for the provided surface and a 3d point p3d, of which the position is queried.
            Uses a weak reference to a matrix, which is calculated on the first call or when it has been claimed by GC
            </summary>
            <param name="p3d"></param>
            <param name="surface"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.BoxedSurfaceEx.HitTest(CADability.BoundingCube,CADability.GeoPoint2D@)">
            <summary>
            Determins, whether the surface is hit by the provided bounding cube, and if so returns an arbitrary point of the surface.
            Problem: we would need several points, if there are more disjunct surface segments which interfere with the cube
            </summary>
            <param name="test"></param>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.BoxedSurfaceEx.findMaxPlaneDist(CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoVector,CADability.GeoPoint2D@)">
            <summary>
            Finde die Stelle mit maximalen oder minimalen Abstand der Kurve (gegeben durch die Strecke [sp, ep] in uv) zu der gegebenen Ebene (norm)
            Die Ebene geht gew√∂hnlich durch die beiden Punkte bei sp und ep, dann gibt es immer ein dazwischenliegendes Maximum.
            </summary>
            <param name="sp"></param>
            <param name="ep"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.BoxedSurfaceEx.findMaxPlaneDist(CADability.GeoPoint2D,System.Double,CADability.GeoVector,CADability.GeoPoint2D@)">
            <summary>
            Newton Verfahren zum Finden eines Maximums f√ºr eine gegebene Richtung, von einem (u,v) Punkt ausgehend
            Es wird ein Polynom 2. Grades in u und v in diesem Punkt erzeugt, dessen 1. und 2. Ableitungen mit der Fl√§che √ºbereinstimmen, das also die Fl√§che in diesem Punkt approximiert.
            F√ºr dieses Polynom kann einfach das maximum in diese Richtung gefunden werden (2 lineare Gleichungen, so dass diru und dirv senkrecht zu gegebenen Rictung stehen)
            Dieser (u,v) Punkt wird auf die Fl√§che √ºbertragen f√ºr den n√§chsten Iterationsschritt. 
            </summary>
            <param name="startpos"></param>
            <param name="normal"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.BoxedSurfaceEx.PositionOf(CADability.GeoPoint,CADability.GeoObject.BoxedSurfaceEx.ParEpi,CADability.GeoPoint2D@,System.Double@)">
            <summary>
            Newton approximation of footpoint of p3d on this path of the surface.
            </summary>
            <param name="p3d"></param>
            <param name="found"></param>
            <param name="res"></param>
            <returns></returns>
        </member>
        <member name="T:CADability.GeoObject.SurfaceOfLinearExtrusion">
            <summary>
            Surface defined by a 3d curve and a direction. A point at (u,v) of the surface is defined
            by the point of the curve at parameter u plus v*direction. It is the surface that is generated
            by the curve moved along the direction. The curve may not have the direction as a tangential
            vector. Also the curve is defined in the interval [0,1], the parameterspace of this curve may also
            be defined by a startParameter and an endParameter. 
            </summary>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfLinearExtrusion.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfLinearExtrusion.PointAt(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.PointAt(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfLinearExtrusion.PositionOf(CADability.GeoPoint)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.PositionOf(CADability.GeoPoint)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfLinearExtrusion.UDirection(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.UDirection(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfLinearExtrusion.VDirection(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.VDirection(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfLinearExtrusion.GetNormal(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetNormal(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfLinearExtrusion.GetZMinMax(CADability.Projection,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetZMinMax(CADability.Projection,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)"/>
            </summary>
            <param name="p"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="zMin"></param>
            <param name="zMax"></param>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfLinearExtrusion.Make3dCurve(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Make3dCurve(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="curve2d"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfLinearExtrusion.CopyData(CADability.GeoObject.ISurface)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.CopyData(CADability.GeoObject.ISurface)"/>
            </summary>
            <param name="CopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfLinearExtrusion.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Modify(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfLinearExtrusion.GetModified(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetModified(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfLinearExtrusion.HitTest(CADability.BoundingCube,CADability.GeoPoint2D@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.HitTest(CADability.BoundingCube,CADability.GeoPoint2D@)"/>
            </summary>
            <param name="bc"></param>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfLinearExtrusion.ReverseOrientation">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.ReverseOrientation"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfLinearExtrusion.GetLineIntersection(CADability.GeoPoint,CADability.GeoVector)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetLineIntersection(CADability.GeoPoint,CADability.GeoVector)"/>
            </summary>
            <param name="startPoint"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfLinearExtrusion.GetPlaneIntersection(CADability.GeoObject.PlaneSurface,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetPlaneIntersection(CADability.GeoObject.PlaneSurface,System.Double,System.Double,System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="pl"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfLinearExtrusion.GetSafeParameterSteps(System.Double,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetSafeParameterSteps(System.Double,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)"/>
            </summary>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="intu"></param>
            <param name="intv"></param>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfLinearExtrusion.FixedU(System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.FixedU(System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="u"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfLinearExtrusion.FixedV(System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.FixedV(System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="v"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfLinearExtrusion.SameGeometry(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect,System.Double,CADability.ModOp2D@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.SameGeometry(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect,System.Double,CADability.ModOp2D@)"/>
            </summary>
            <param name="thisBounds"></param>
            <param name="other"></param>
            <param name="otherBounds"></param>
            <param name="precision"></param>
            <param name="firstToSecond"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfLinearExtrusion.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="P:CADability.GeoObject.SurfaceOfRevolution.Location">
            <summary>
            Returns the location of the axis of revolution
            </summary>
        </member>
        <member name="P:CADability.GeoObject.SurfaceOfRevolution.Axis">
            <summary>
            Returns the direction of the axis of revolution
            </summary>
        </member>
        <member name="P:CADability.GeoObject.SurfaceOfRevolution.XAxis">
            <summary>
            Returns the 0 position of the revolution
            </summary>
        </member>
        <member name="P:CADability.GeoObject.SurfaceOfRevolution.BasisCurve">
            <summary>
            Returns the curve that is rotated to form this surface
            </summary>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.PointAt(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.PointAt(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.PositionOf(CADability.GeoPoint)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.PositionOf(CADability.GeoPoint)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.UDirection(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.UDirection(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.VDirection(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.VDirection(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.GetNormal(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetNormal(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.GetZMinMax(CADability.Projection,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetZMinMax(CADability.Projection,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)"/>
            </summary>
            <param name="p"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="zMin"></param>
            <param name="zMax"></param>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.Make3dCurve(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Make3dCurve(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="curve2d"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.GetPlaneIntersection(CADability.GeoObject.PlaneSurface,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetPlaneIntersection(CADability.GeoObject.PlaneSurface,System.Double,System.Double,System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="pl"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Modify(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.GetModified(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetModified(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.CopyData(CADability.GeoObject.ISurface)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.CopyData(CADability.GeoObject.ISurface)"/>
            </summary>
            <param name="CopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.HyperbolaHelp.Clone">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.HyperbolaHelp.Copy(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Copy(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="toCopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.HyperbolaHelp.Split(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Split(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.HyperbolaHelp.PointAt(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.PointAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.HyperbolaHelp.PositionOf(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.PositionOf(CADability.GeoPoint2D)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.HyperbolaHelp.DirectionAt(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.DirectionAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.Hyperbola.Clone">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.Hyperbola.Copy(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Copy(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="toCopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.Hyperbola.Split(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.Split(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.Hyperbola.PointAt(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.PointAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.Hyperbola.PositionOf(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.PositionOf(CADability.GeoPoint2D)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.Hyperbola.DirectionAt(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.Curve2D.GeneralCurve2D.DirectionAt(System.Double)"/>
            </summary>
            <param name="Position"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.GetLineIntersection(CADability.GeoPoint,CADability.GeoVector)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetLineIntersection(CADability.GeoPoint,CADability.GeoVector)"/>
            </summary>
            <param name="startPoint"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.Intersect(CADability.GeoObject.ICurve,CADability.BoundingRect,CADability.GeoPoint[]@,CADability.GeoPoint2D[]@,System.Double[]@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Intersect(CADability.GeoObject.ICurve,CADability.BoundingRect,CADability.GeoPoint[]@,CADability.GeoPoint2D[]@,System.Double[]@)"/>
            </summary>
            <param name="curve"></param>
            <param name="uvExtent"></param>
            <param name="ips"></param>
            <param name="uvOnFaces"></param>
            <param name="uOnCurve3Ds"></param>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.Orientation(CADability.GeoPoint)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Orientation(CADability.GeoPoint)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.HitTest(CADability.BoundingCube,CADability.GeoPoint2D@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.HitTest(CADability.BoundingCube,CADability.GeoPoint2D@)"/>
            </summary>
            <param name="bc"></param>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.ReverseOrientation">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.ReverseOrientation"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.FixedU(System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.FixedU(System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="u"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.FixedV(System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.FixedV(System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="v"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.GetSafeParameterSteps(System.Double,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetSafeParameterSteps(System.Double,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)"/>
            </summary>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="intu"></param>
            <param name="intv"></param>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.SameGeometry(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect,System.Double,CADability.ModOp2D@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.SameGeometry(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect,System.Double,CADability.ModOp2D@)"/>
            </summary>
            <param name="thisBounds"></param>
            <param name="other"></param>
            <param name="otherBounds"></param>
            <param name="precision"></param>
            <param name="firstToSecond"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.SurfaceOfRevolution.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="P:CADability.GeoObject.ShowPropertyFont.Flags">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.ShowPropertyText.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="M:CADability.GeoObject.ShowPropertyText.Removed(CADability.UserInterface.IPropertyTreeView)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Removed(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="M:CADability.GeoObject.ShowPropertyText.Opened(System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Opened(System.Boolean)"/>
            </summary>
            <param name="IsOpen"></param>
        </member>
        <member name="P:CADability.GeoObject.ShowPropertyText.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="M:CADability.GeoObject.ShowPropertyText.ReloadProperties">
            <summary>
            Implements <see cref="M:CADability.IDisplayHotSpots.ReloadProperties"/>
            </summary>
        </member>
        <member name="M:CADability.GeoObject.ShowPropertyText.OnCommand(System.String)">
            <summary>
            Implements <see cref="M:CADability.UserInterface.ICommandHandler.OnCommand(System.String)"/>
            </summary>
            <param name="MenuId"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ShowPropertyText.OnUpdateCommand(System.String,CADability.UserInterface.CommandState)">
            <summary>
            Implements <see cref="M:CADability.UserInterface.ICommandHandler.OnUpdateCommand(System.String,CADability.UserInterface.CommandState)"/>
            </summary>
            <param name="MenuId"></param>
            <param name="CommandState"></param>
            <returns></returns>
        </member>
        <member name="T:CADability.GeoObject.Text">
            <summary>
            Simple Text object, Implements <see cref="T:CADability.GeoObject.IGeoObject"/>.
            </summary>
        </member>
        <member name="T:CADability.GeoObject.Text.AlignMode">
            <summary>
            Vertical alignement of the text.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.Text.AlignMode.Baseline">
            <summary>
            <see cref="P:CADability.GeoObject.Text.Location"/> specifies the position of the baseline of the text.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.Text.AlignMode.Bottom">
            <summary>
            <see cref="P:CADability.GeoObject.Text.Location"/> specifies the bottom position of the textbox.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.Text.AlignMode.Top">
            <summary>
            <see cref="P:CADability.GeoObject.Text.Location"/> specifies the top position of the textbox.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.Text.AlignMode.Center">
            <summary>
            <see cref="P:CADability.GeoObject.Text.Location"/> specifies the center position of the textbox.
            </summary>
        </member>
        <member name="T:CADability.GeoObject.Text.LineAlignMode">
            <summary>
            Horizontal alignement of the text
            </summary>
        </member>
        <member name="F:CADability.GeoObject.Text.LineAlignMode.Left">
            <summary>
            <see cref="P:CADability.GeoObject.Text.Location"/> specifies the left position of the textbox.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.Text.LineAlignMode.Center">
            <summary>
            <see cref="P:CADability.GeoObject.Text.Location"/> specifies the horizontal center position of the textbox.
            </summary>
        </member>
        <member name="F:CADability.GeoObject.Text.LineAlignMode.Right">
            <summary>
            <see cref="P:CADability.GeoObject.Text.Location"/> specifies the right position of the textbox.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Text.SetBounds(CADability.GeoPoint,CADability.GeoPoint,CADability.GeoPoint)">
            <summary>
            Modifies the direction, size and aspect ratio of the text so that the text will fit
            inside the parallelogram defined by the provided parameters.
            </summary>
            <param name="ll">Point for the lower left position of the text</param>
            <param name="lr">Point for the lower right position of the text</param>
            <param name="ul">Point for the upper left position of the text</param>
        </member>
        <member name="M:CADability.GeoObject.Text.GetOutline">
            <summary>
            Returns a list of objects that define the outline (and holes) of this text. The global setting "Font.Precision"
            defines the precision of the outline, if the precision is 3 (fine) then splines can occur in the outline.
            If the precision is 1 or 2 (raw, middle) the splines are approximated.
            </summary>
            <returns>List of curves describing the outline of this text object</returns>
        </member>
        <member name="M:CADability.GeoObject.Text.GetShapes">
            <summary>
            Returns the shapes of all characters of this text. The characters are appropriatly spaced, but the text size and glyphdirection is not taken into account
            </summary>
            <returns></returns>
        </member>
        <member name="P:CADability.GeoObject.Text.Alignment">
            <summary>
            Sets or gets the horizontal (or in direction of <see cref="P:CADability.GeoObject.Text.LineDirection"/>) alignement of the text.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Text.LineAlignment">
            <summary>
            Sets or gets the vertical alignement of the text.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Text.LineDirection">
            <summary>
            Gets or sets the line direction of the text. Default is <see cref="F:CADability.GeoVector.XAxis"/>. Setting the line
            direction does not modify the <see cref="P:CADability.GeoObject.Text.GlyphDirection"/> of the text, so you usually will have to change both.
            It also affects the aspect ratio of the text, which is defined by the length of the line direction
            and the length of the glyph direction. To simply rotate a text better use <see cref="M:CADability.GeoObject.IGeoObject.Modify(CADability.ModOp)"/>
            with a <see cref="M:CADability.ModOp.Rotate(System.Int32,CADability.SweepAngle)"/> rotation.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Text.GlyphDirection">
            <summary>
            Gets or sets the direction of the vertical character parts. This direction is usually perpendicular to the
            <see cref="P:CADability.GeoObject.Text.LineDirection"/>, but can be modified to produce italic characters of any angle.
            The <see cref="P:CADability.GeoObject.Text.Italic"/> property in contrary uses the typefont italic capabilities which are more sophisticated.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Text.Location">
            <summary>
            Gets or sets the location of the text. The value of this point is interpreted according to the values of the
            <see cref="P:CADability.GeoObject.Text.Alignment"/>and <see cref="P:CADability.GeoObject.Text.LineAlignment"/> properties.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Text.Bold">
            <summary>
            Gets or sets the bold property of the text font.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Text.Italic">
            <summary>
            Gets or sets the italic property of the text font.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Text.Underline">
            <summary>
            Gets or sets the underline property of the text font.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Text.Strikeout">
            <summary>
            Gets or sets the strikeout property of the text font.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Text.TextString">
            <summary>
            Gets or sets the text string that is displayed with this object.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Text.Font">
            <summary>
            Gets or sets the font used for this text object
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Text.TextSize">
            <summary>
            Gets or sets the size of this text object.
            </summary>
        </member>
        <member name="P:CADability.GeoObject.Text.GlyphAngle">
            <summary>
            Gets or sets the angle of the characters vertical direction in respect to the horizontal direction.
            The default value is 90¬∞, different angles create different italic fonts.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Text.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Text.CopyGeometry(CADability.GeoObject.IGeoObject)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.CopyGeometry(CADability.GeoObject.IGeoObject)"/>
            </summary>
            <param name="ToCopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.Text.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Modify(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.GeoObject.Text.GetShowProperties(CADability.IFrame)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetShowProperties(CADability.IFrame)"/>
            </summary>
            <param name="Frame"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Text.GetAttributeProperties(CADability.IFrame)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetAttributeProperties(CADability.IFrame)"/>
            </summary>
            <param name="Frame"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Text.GetExtent(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Text.GetBoundingCube">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetBoundingCube"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Text.PrePaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PrePaintTo3D(CADability.IPaintTo3D)"/>
            </summary>
            <param name="paintTo3D"></param>
        </member>
        <member name="M:CADability.GeoObject.Text.PaintTo3DList(CADability.IPaintTo3D,CADability.GeoObject.ICategorizedDislayLists)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3DList(CADability.IPaintTo3D,CADability.GeoObject.ICategorizedDislayLists)"/>
            </summary>
            <param name="paintTo3D"></param>
            <param name="lists"></param>
        </member>
        <member name="M:CADability.GeoObject.Text.PaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3D(CADability.IPaintTo3D)"/>
            </summary>
            <param name="paintTo3D"></param>
        </member>
        <member name="M:CADability.GeoObject.Text.PrepareDisplayList(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PrepareDisplayList(System.Double)"/>
            </summary>
            <param name="precision"></param>
        </member>
        <member name="M:CADability.GeoObject.Text.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Text.GetExtent(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(System.Double)"/>
            </summary>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Text.HitTest(CADability.BoundingCube@,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.BoundingCube@,System.Double)"/>
            </summary>
            <param name="cube"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Text.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)"/>
            </summary>
            <param name="projection"></param>
            <param name="rect"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Text.HitTest(CADability.Projection.PickArea,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection.PickArea,System.Boolean)"/>
            </summary>
            <param name="area"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Text.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)"/>
            </summary>
            <param name="fromHere"></param>
            <param name="direction"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Text.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.GeoObject.Text.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.GeoObject.ToroidalSurface">
            <summary>
            A toroidal surface which implements <see cref="T:CADability.GeoObject.ISurface"/>. The surface represents a torus in space.
            It is defined by its position in space (three directions) and two radii. The u parameter describes
            the "big" circles around the main axis, the v parameter describes the "small" circles.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.ToroidalSurface.PointAt(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.PointAt(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ToroidalSurface.PositionOf(CADability.GeoPoint)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.PositionOf(CADability.GeoPoint)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ToroidalSurface.GetZMinMax(CADability.Projection,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetZMinMax(CADability.Projection,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)"/>
            </summary>
            <param name="p"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="zMin"></param>
            <param name="zMax"></param>
        </member>
        <member name="M:CADability.GeoObject.ToroidalSurface.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ToroidalSurface.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Modify(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.GeoObject.ToroidalSurface.GetModified(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetModified(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ToroidalSurface.GetTangentCurves(CADability.GeoVector,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetTangentCurves(CADability.GeoVector,System.Double,System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="direction"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ToroidalSurface.UDirection(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.UDirection(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ToroidalSurface.VDirection(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.VDirection(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ToroidalSurface.GetNormal(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetNormal(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ToroidalSurface.Make3dCurve(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Make3dCurve(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="curve2d"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ToroidalSurface.FixedU(System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.FixedU(System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="u"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ToroidalSurface.FixedV(System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.FixedV(System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="v"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ToroidalSurface.GetLineIntersection(CADability.GeoPoint,CADability.GeoVector)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetLineIntersection(CADability.GeoPoint,CADability.GeoVector)"/>
            </summary>
            <param name="startPoint"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ToroidalSurface.GetPlaneIntersection(CADability.GeoObject.PlaneSurface,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetPlaneIntersection(CADability.GeoObject.PlaneSurface,System.Double,System.Double,System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="pl"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ToroidalSurface.Intersect(CADability.GeoObject.ICurve,CADability.BoundingRect,CADability.GeoPoint[]@,CADability.GeoPoint2D[]@,System.Double[]@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Intersect(CADability.GeoObject.ICurve,CADability.BoundingRect,CADability.GeoPoint[]@,CADability.GeoPoint2D[]@,System.Double[]@)"/>
            </summary>
            <param name="curve"></param>
            <param name="uvExtent"></param>
            <param name="ips"></param>
            <param name="uvOnFaces"></param>
            <param name="uOnCurve3Ds"></param>
        </member>
        <member name="M:CADability.GeoObject.ToroidalSurface.CopyData(CADability.GeoObject.ISurface)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.CopyData(CADability.GeoObject.ISurface)"/>
            </summary>
            <param name="CopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.ToroidalSurface.GetExtrema">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetExtrema"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ToroidalSurface.GetProjectedCurve(CADability.GeoObject.ICurve,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetProjectedCurve(CADability.GeoObject.ICurve,System.Double)"/>
            </summary>
            <param name="curve"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ToroidalSurface.Orientation(CADability.GeoPoint)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Orientation(CADability.GeoPoint)"/>
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ToroidalSurface.ReverseOrientation">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.ReverseOrientation"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ToroidalSurface.HitTest(CADability.BoundingCube,CADability.GeoPoint2D@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.HitTest(CADability.BoundingCube,CADability.GeoPoint2D@)"/>
            </summary>
            <param name="bc"></param>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ToroidalSurface.GetSaveUSteps">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetSaveUSteps"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ToroidalSurface.GetSaveVSteps">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetSaveVSteps"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ToroidalSurface.SameGeometry(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect,System.Double,CADability.ModOp2D@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.SameGeometry(CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect,System.Double,CADability.ModOp2D@)"/>
            </summary>
            <param name="thisBounds"></param>
            <param name="other"></param>
            <param name="otherBounds"></param>
            <param name="precision"></param>
            <param name="firstToSecond"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.ToroidalSurface.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="T:CADability.GeoObject.UnscaledGeoObject">
            <summary>
            A <see cref="T:CADability.GeoObject.IGeoObject">GeoObject</see> which always appears in the same size in a view. It is not scaled when the view is zoomed.
            These objects can not be kept in displaylists and hence have a poor performance when used in high numbers.
            The objects rotate with the view when viewed from different directions. 
            The <see cref="P:CADability.GeoObject.UnscaledGeoObject.Location"/> specifies the position of the origin (GeoPoint(0,0,0)) of the referenced GeoObject.
            Usually you would center the referenced object at the origin so this object will be centered at the <see cref="P:CADability.GeoObject.UnscaledGeoObject.Location"/>.
            In contrast to the <see cref="T:CADability.GeoObject.Icon"/> object, which always shows its face to the viewer and is much faster, 
            because it can be kept in the display list.
            Since this object does not have a well defined size in world coordinates, it is only pickable or selectable
            at its insertion point. The size of the object is assumed in device units (pixels)
            The Layer of this object will be taken into account for the objects visibility, not the layer of the 
            referenced object.
            <remarks>The use of this object is not recommended because it has a poor performance in both display and selection.
            Consider using <see cref="T:CADability.GeoObject.Icon"/> instead.</remarks>
            </summary>
        </member>
        <member name="T:CADability.GeoObject.UnscaledGeoObject.ConstructionDelegate">
            <summary>
            Delegate for the construction of a UnscaledGeoObject.
            </summary>
            <returns>A UnscaledGeoObject or UnscaledGeoObject derived class</returns>
        </member>
        <member name="F:CADability.GeoObject.UnscaledGeoObject.Constructor">
            <summary>
            Provide a delegate here if you want you UnscaledGeoObject derived class to be 
            created each time CADability creates a UnscaledGeoObject.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.UnscaledGeoObject.Construct">
            <summary>
            The only way to create a UnscaledGeoObject. There are no public constructors for the UnscaledGeoObject to assure
            that this is the only way to construct a UnscaledGeoObject.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CADability.GeoObject.UnscaledGeoObject.Location">
            <summary>
            The world coordinates location of this object
            </summary>
        </member>
        <member name="P:CADability.GeoObject.UnscaledGeoObject.GeoObject">
            <summary>
            The GeoObject to be displayed. This can be any kind of GeoObject, Text and Bitmap are often used.
            The object must be in a coordinate space where the Origin will be transferred to the <see cref="P:CADability.GeoObject.UnscaledGeoObject.Location"/>.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.UnscaledGeoObject.RealHitTest(CADability.Projection.PickArea,System.Boolean)">
            <summary>
            While the normal <see cref="M:CADability.GeoObject.UnscaledGeoObject.HitTest(CADability.Projection.PickArea,System.Boolean)">HitTest</see> only checkes the <see cref="P:CADability.GeoObject.UnscaledGeoObject.Location"/> of the object
            this method checks the hittest of the object expanded according to the projection in this <paramref name="area"/>
            </summary>
            <param name="area">Pick area to check</param>
            <param name="onlyInside">true, if the whole object must reside inside the pickarea, false if overlapping will suffice</param>
            <returns>true when a hit is recognized</returns>
        </member>
        <member name="M:CADability.GeoObject.UnscaledGeoObject.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObject.Modify(CADability.ModOp)"/>. Must be implemented by each GeoObject.
            No default implementation.
            </summary>
            <param name="m">the modification</param>
        </member>
        <member name="M:CADability.GeoObject.UnscaledGeoObject.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObject.Clone"/>. Must be implemented by each GeoObject. No default implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.UnscaledGeoObject.CopyGeometry(CADability.GeoObject.IGeoObject)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.CopyGeometry(CADability.GeoObject.IGeoObject)"/>
            </summary>
            <param name="ToCopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.UnscaledGeoObject.GetBoundingCube">
            <summary>
            Implements <see cref="M:CADability.GeoObject.IGeoObject.GetBoundingCube"/> abstract.
            Must be overridden.
            </summary>
            <returns>the bounding cube</returns>
        </member>
        <member name="M:CADability.GeoObject.UnscaledGeoObject.GetShowProperties(CADability.IFrame)">
            <summary>
            Should be overridden and return a <see cref="T:CADability.UserInterface.IShowProperty"/> derived object
            that handles the display and modification of the properties of the IGeoObject derived object.
            Default implementation return null.
            </summary>
            <param name="Frame"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.UnscaledGeoObject.PaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3D(CADability.IPaintTo3D)"/>
            </summary>
            <param name="paintTo3D"></param>
        </member>
        <member name="M:CADability.GeoObject.UnscaledGeoObject.PrepareDisplayList(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PrepareDisplayList(System.Double)"/>
            </summary>
            <param name="precision"></param>
        </member>
        <member name="M:CADability.GeoObject.UnscaledGeoObject.PrePaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PrePaintTo3D(CADability.IPaintTo3D)"/>
            </summary>
            <param name="paintTo3D"></param>
        </member>
        <member name="M:CADability.GeoObject.UnscaledGeoObject.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.UnscaledGeoObject.GetExtent(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(System.Double)"/>
            </summary>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.UnscaledGeoObject.GetExtent(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.UnscaledGeoObject.HitTest(CADability.BoundingCube@,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.BoundingCube@,System.Double)"/>
            </summary>
            <param name="cube"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.UnscaledGeoObject.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)"/>
            </summary>
            <param name="projection"></param>
            <param name="rect"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.UnscaledGeoObject.HitTest(CADability.Projection.PickArea,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection.PickArea,System.Boolean)"/>
            </summary>
            <param name="area"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.UnscaledGeoObject.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)"/>
            </summary>
            <param name="fromHere"></param>
            <param name="direction"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.UnscaledGeoObject.PaintTo3DList(CADability.IPaintTo3D,CADability.GeoObject.ICategorizedDislayLists)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3DList(CADability.IPaintTo3D,CADability.GeoObject.ICategorizedDislayLists)"/>
            </summary>
            <param name="paintTo3D"></param>
            <param name="lists"></param>
        </member>
        <member name="M:CADability.GeoObject.UnscaledGeoObject.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements ISerializable.GetObjectData. Saves <see cref="T:CADability.UserData"/>, <see cref="!:Layer"/> and <see cref="!:Style"/>.
            All other properties of the GeoObject must be saved by the derived class. don't forget
            to call the base implementation
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="P:CADability.GeoObject.ShowPropertyUnscaledGeoObject.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="T:CADability.GeoObject.Icon">
            <summary>
            A GeoObject that displays an icon at a given position. The icon will always face the viewer
            and will not be scaled. The icon appears with a small offset in direction to the viewer, so it will not be covered
            by a face whith which it coincides.
            </summary>
        </member>
        <member name="T:CADability.GeoObject.Icon.ConstructionDelegate">
            <summary>
            Delegate for the construction of a Icon.
            </summary>
            <returns>A Icon or Icon derived class</returns>
        </member>
        <member name="F:CADability.GeoObject.Icon.Constructor">
            <summary>
            Provide a delegate here if you want you Icon derived class to be 
            created each time CADability creates a Icon.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Icon.Construct">
            <summary>
            The only way to create a Icon. There are no public constructors for the Icon to assure
            that this is the only way to construct a Icon.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CADability.GeoObject.Icon.ConstructedDelegate">
            <summary>
            Definition of the <see cref="E:CADability.GeoObject.Icon.Constructed"/> event
            </summary>
            <param name="justConstructed">The Icon that was just constructed</param>
        </member>
        <member name="E:CADability.GeoObject.Icon.Constructed">
            <summary>
            Event beeing raised when a Icon object has been created.
            </summary>
        </member>
        <member name="M:CADability.GeoObject.Icon.Set(System.Drawing.Bitmap,CADability.GeoPoint,System.Int32,System.Int32)">
            <summary>
            Sets the Data of the UnscaledIcon.
            </summary>
            <param name="bitmap">The icon to be displayed</param>
            <param name="location">Position where the icon will be displayed</param>
            <param name="offsetx">X-Position in the icon where location is applied</param>
            <param name="offsety">Y-Position in the icon where location is applied. (0,0) is lower left of the icon</param>
        </member>
        <member name="M:CADability.GeoObject.Icon.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Modify(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.GeoObject.Icon.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Icon.CopyGeometry(CADability.GeoObject.IGeoObject)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.CopyGeometry(CADability.GeoObject.IGeoObject)"/>
            </summary>
            <param name="ToCopyFrom"></param>
        </member>
        <member name="M:CADability.GeoObject.Icon.GetExtent(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Icon.GetBoundingCube">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetBoundingCube"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Icon.PaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3D(CADability.IPaintTo3D)"/>
            </summary>
            <param name="paintTo3D"></param>
        </member>
        <member name="M:CADability.GeoObject.Icon.PrePaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PrePaintTo3D(CADability.IPaintTo3D)"/>
            </summary>
            <param name="paintTo3D"></param>
        </member>
        <member name="M:CADability.GeoObject.Icon.PrepareDisplayList(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PrepareDisplayList(System.Double)"/>
            </summary>
            <param name="precision"></param>
        </member>
        <member name="M:CADability.GeoObject.Icon.PaintTo3DList(CADability.IPaintTo3D,CADability.GeoObject.ICategorizedDislayLists)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3DList(CADability.IPaintTo3D,CADability.GeoObject.ICategorizedDislayLists)"/>
            </summary>
            <param name="paintTo3D"></param>
            <param name="lists"></param>
        </member>
        <member name="M:CADability.GeoObject.Icon.GetShowProperties(CADability.IFrame)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetShowProperties(CADability.IFrame)"/>
            </summary>
            <param name="Frame"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Icon.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetQuadTreeItem(CADability.Projection,CADability.GeoObject.ExtentPrecision)"/>
            </summary>
            <param name="projection"></param>
            <param name="extentPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Icon.GetExtent(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(System.Double)"/>
            </summary>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Icon.HitTest(CADability.BoundingCube@,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.BoundingCube@,System.Double)"/>
            </summary>
            <param name="cube"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Icon.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)"/>
            </summary>
            <param name="projection"></param>
            <param name="rect"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Icon.HitTest(CADability.Projection.PickArea,System.Boolean)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.HitTest(CADability.Projection.PickArea,System.Boolean)"/>
            </summary>
            <param name="area"></param>
            <param name="onlyInside"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoObject.Icon.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)"/>
            </summary>
            <param name="fromHere"></param>
            <param name="direction"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="P:CADability.GeoObject.ShowPropertyUnscaledIcon.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="T:CADability.Shapes.Border">
            <summary>
            A simple border composed of one ore more ICurve2D objects.
            A Border is always invariant, i.e. you annot change it (like System.String).
            If a border is closed, then it is oriented counterclockwise. A border may be
            produced by the BorderBuilder object (or by its constructors).
            </summary>
        </member>
        <member name="M:CADability.Shapes.Border.#ctor(CADability.Curve2D.ICurve2D[])">
            <summary>
            Constructs a Border from a list of ICurve2D objects. The objects must be in the
            correct order and must be continous, i.e. EndPoint of ICurve2D[i] must be
            equal to Startpoint of ICurve2D[i+1]. Equality refers to Precision.IsEqual().
            It will be checked automatically, whether the border is closed and if so,
            it will be oriented counterclockwise.
            </summary>
            <param name="segments">list of curves to make the border</param>
        </member>
        <member name="M:CADability.Shapes.Border.#ctor(CADability.Curve2D.ICurve2D[],System.Boolean,System.Boolean)">
            <summary>
            Create a border with the provided segments assumed to be in correct order and orientation. If <paramref name="forceConnected"/>
            is true, the border will be closed.
            </summary>
            <param name="segments">The oriented and ordered segments</param>
            <param name="forceConnected">True: border will be closed even if segments aren't connected at the end</param>
        </member>
        <member name="M:CADability.Shapes.Border.FromUnorientedList(CADability.Curve2D.ICurve2D[],System.Boolean)">
            <summary>
            segments enth√§lt die Kurven zwar in richtiger Reohenfolge doch u.U. in falscher Richtung.
            Hier wird also vor dem Erzeugen der Border ggf. umorientiert
            </summary>
            <param name="segments"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Shapes.Border.FromOrientedList(CADability.Curve2D.ICurve2D[],System.Boolean)">
            <summary>
            F√ºr BrepIntersection brauchen wir unver√§nderte Orientierung und einen entsprechenden "Innen-/Au√üen-begriff"
            </summary>
            <param name="segments"></param>
            <param name="keepOrientation"></param>
            <returns></returns>
        </member>
        <member name="T:CADability.Shapes.Border.Position">
            <summary>
            Position of a point or boundingrectangle relative to a border.
            Inside: the point or rectangle is completely inside the border,
            Outside: the point or rectangle is completely outside the border,
            OnCurve: the point or rectangle is on the outline of the border.
            </summary>
        </member>
        <member name="M:CADability.Shapes.Border.GetPosition(CADability.BoundingRect)">
            <summary>
            Returns the <see cref="T:CADability.Shapes.Border.Position"/> of the given Point relative to this Border.
            If the outline of the border interferes with a square around p (width and height
            is 2*precision), the result will be OnCurve.
            </summary>
            <param name="p">The Point to test</param>
            <param name="precision">The "radius" (half width) of a square centered at p</param>
            <returns>Inside, Outside or OnCurve (on the outline of this border)</returns>
        </member>
        <member name="M:CADability.Shapes.Border.GetPosition(CADability.GeoPoint2D)">
            <summary>
            Returns the <see cref="T:CADability.Shapes.Border.Position"/> of the given Point relative to this Border.
            </summary>
            <param name="p">The Point to test</param>
            <returns>Inside, Outside or OnCurve (on the outline of this border)</returns>
        </member>
        <member name="M:CADability.Shapes.Border.IsInside(CADability.Curve2D.ICurve2D[],CADability.GeoPoint2D)">
            <summary>
            Returnes true, when the provided point is inside the loop of curves.
            When the curves are oriented clockwise, true means outside (the hole)
            </summary>
            <param name="curves"></param>
            <param name="toTest"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Shapes.Border.GetIntersectionPoints(CADability.Curve2D.ICurve2D)">
            <summary>
            Returns a list of all intersectionpoints of this border with the given curve.
            Some intersectionpoints may be found twice, if the Curve passes through a vertex
            of this border. The par1 member of the intersectionpoint is the parameter
            of this border (0.0&lt;=par1&lt;=this.Count) the par2 member is the parameter
            of the curve (0.0&lt;=par1&lt;=1.0).
            </summary>
            <param name="IntersectWith">curve to intersect this border with</param>
            <returns>list of intersection points</returns>
        </member>
        <member name="M:CADability.Shapes.Border.Split(System.Double[])">
            <summary>
            Returns an array of Border objects by breaking this border at the given positions.
            Parameter must be an ordered list of double values. Each value must be greater 0.0
            and less the number of iCurve2D objects in this Border.
            </summary>
            <param name="Parameter"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Shapes.Border.Split(System.Double[],CADability.GeoPoint2D[],System.Double[])">
            <summary>
            Identisch mit Split weiter oben, jedoch werden die Punkte noch nachgebessert durch die gegebenen GeoPoint2D
            </summary>
            <param name="Parameter"></param>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Shapes.Border.GetParameter(CADability.GeoPoint2D)">
            <summary>
            Liefert den Parameter des Punktes p auf den Bahnkurven des Borders. F√ºr jede
            Kurve durchl√§uft der Parameter Werte von 0.0 (Startpunkt) bis 1.0 (Endpunkt)
            Das Ergebnis dieser Methode ist dieser Parameter + Index der betreffenden Kurve.
            </summary>
            <param name="p">Punkt, zu dem der Parameter gesucht ist, muss auf dem Rand liegen</param>
            <returns>der Parameter</returns>
        </member>
        <member name="M:CADability.Shapes.Border.op_Addition(CADability.Shapes.Border,CADability.Shapes.Border)">
            <summary>
            Concatenates two border objects. Both borders must be open (not closed) and
            the endpoint of the first border must be equal to the startpoint of the second 
            border (as defined by Precision.IsEqual).
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Shapes.Border.GetParallel(System.Double,System.Boolean,System.Double,System.Double)">
            <summary>
            Yields a set of borders that are parallel to this border with a given distance. Positive
            distance yields a border to the right side (or outside if closed) of this border, negative
            to the left side or inside. In some cases there is no soltuion (e.g. an inside parallel
            border of a closed border must have a distance less than half of the diameter of the border)
            In other cases there may be a set of solutions, e.g. if the border is not convex.
            </summary>
            <param name="dist">the distance of the desired parallel border</param>
            <returns>array of parallel borders (maybe empty)</returns>
        </member>
        <member name="M:CADability.Shapes.Border.RemoveSmallSegments(System.Double)">
            <summary>
            Removes small segments which are smaller than <paramref name="minLength"/> and connects the remaining segments.
            </summary>
            <param name="minLength">Segments smaller than this value are beeing removed</param>
        </member>
        <member name="M:CADability.Shapes.Border.AsPath">
            <summary>
            Returns this Border as a <see cref="T:CADability.Curve2D.Path2D"/> object. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Shapes.Border.DistanceAtDirection(CADability.Shapes.Border,CADability.GeoVector2D)">
            <summary>
            Calculates the distance between this Border and the <paramref name="other"/> Border respecting the given direction <paramref name="dir"/>.
            Or in other words: how far can you move this Border in the direction dir until it touches the other border.
            The result may be double.MaxValue, which means they will never touch each other or negative, if you would have to move this
            border in the opposite direction of dir.
            </summary>
            <param name="other">The border to meassure the distance to</param>
            <param name="dir">Direction for the distance</param>
            <returns>Distance</returns>
        </member>
        <member name="M:CADability.Shapes.Border.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Shapes.Border.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="M:CADability.Shapes.Border.GetOrthoIntersection(System.Boolean,System.Double,System.Double)">
            <summary>
            returns triples: x or y of intersectionPoint, parameter on border, intersection angle
            </summary>
            <param name="hor"></param>
            <param name="xy"></param>
            <returns></returns>
        </member>
        <member name="T:CADability.Shapes.BorderBuilder">
            <summary>
            Klasse zum Erzeugen von Border Objekten.
            </summary>
        </member>
        <member name="M:CADability.Shapes.BorderBuilder.AddSegment(CADability.Curve2D.ICurve2D)">
            <summary>
            F√ºgt das im Parameter gegebene Segment zu. ACHTUNG: die Methode <see cref="M:CADability.Shapes.BorderBuilder.BuildBorder(System.Boolean)"/> BuildBorder
            dreht dieses Segment m√∂glicherweise um. Wenn das nicht passieren darf, dann hier mit
            Clone arbeiten!
            </summary>
            <param name="ToAdd">zuzuf√ºgendes Segment</param>
            <returns></returns>
        </member>
        <member name="T:CADability.Shapes.BorderQuadTree.quad">
            <summary>
            F√ºr das Integer Koordinatensystem. Das hat den Zweck, Hash-Tabellen f√ºr horizontale und vertikale Schnitte zu erm√∂glichen
            und exakt gleiche Ergebnisse f√ºr die gemeinsame Seite eines Quadrates zu liefern, egal aus welchem Quadrat man rechnet.
            Die Breite der Quadrate ist imme eine Zweierpotenz. x, y und w sind immer positiv
            </summary>
        </member>
        <member name="T:CADability.Shapes.BorderQuadTree.Node">
            <summary>
            Ein Quadrat des Quadtrees, wenn nicht unterteilt, dann enth√§lt es von jedem Border nur ein Segment mit definierten Eintritts und Austrittspunkt.
            Tangentiale Schnitte sind nicht erlaubt, dann muss der ganze Quadtree anders positioniert werden.
            Enth√§lt maximal einen Schnittpunkt der beiden Border.
            
            Integer Koordinatensystem: so kann man einfache Hash-Tabellen machen, in denen f√ºr horizontale und vertikale Linien die Schnittpunkte erfasst werden
            </summary>
        </member>
        <member name="M:CADability.Shapes.BorderQuadTree.Node.Init">
            <summary>
            F√ºgt die beiden Border in diesen Quadranten ein. Wenn es ein Problem gibt (tangentiale Schitte, Schnittpunkt der Border genau auf der Kante) dann wird false geliefet.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Shapes.BorderQuadTree.Node.setInside(System.Boolean,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Setzt die fullInsideBdr1/2 f√ºr Quadrate, die die betreffende Border nicht enthalten
            </summary>
            <param name="border1"></param>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="v3"></param>
        </member>
        <member name="M:CADability.Shapes.BorderQuadTree.Node.collectIntervals(CADability.Shapes.BorderQuadTree.interval,CADability.Shapes.BorderQuadTree.interval,CADability.Shapes.BorderQuadTree.op)">
            <summary>
            Sammelt die f√ºr die gegebene Operation relevanten Abschnitte der beiden Borders zusammen
            </summary>
            <param name="bdr1parts"></param>
            <param name="bdr2parts"></param>
            <param name="op"></param>
        </member>
        <member name="T:CADability.Shapes.Joint">
            <summary>
            Ein Verbindungspunkt. Die Kurve curve startet oder endet hier. Findet Verwendung
            im Cluster, der i.A. aus mehreren solchen Verbindungspunkten besteht.
            </summary>
        </member>
        <member name="T:CADability.Shapes.Cluster">
            <summary>
            Ein oder mehrere Joints, die sehr end beisammenliegen und als identische Punkte
            betrachtet werden.
            </summary>
        </member>
        <member name="T:CADability.Shapes.CurveGraph">
            <summary>
            INTERN:
            Dient zum Erzeugen von Border und SimpleShape/CompoundShape aus einer Liste von
            ICurve2D. Es werden keine Schnittpunkte betrachtet, die m√ºssten zuvor erzeugt und
            die ICurve2D Objekte gesplittet werden.
            </summary>
        </member>
        <member name="T:CADability.Shapes.SimpleShape">
            <summary>
            A simply connected 2d shape. It consists of a <see cref="T:CADability.Shapes.Border"/> outline and 0 or more holes.
            The holes don't overlap (disjunct) and reside totally inside the outline.
            </summary>
        </member>
        <member name="M:CADability.Shapes.SimpleShape.#ctor(CADability.Shapes.Border,CADability.Shapes.Border[])">
            <summary>
            Constructs a simple shape by specifying the <paramref name="outline"/> and any number of <paramref name="holes"/>.
            </summary>
            <param name="outline">The outline</param>
            <param name="holes">The holes</param>
        </member>
        <member name="M:CADability.Shapes.SimpleShape.#ctor(CADability.Shapes.Border)">
            <summary>
            Constructs a simple shape by specifying the <paramref name="outline"/> 
            </summary>
            <param name="outline">The outline</param>
        </member>
        <member name="M:CADability.Shapes.SimpleShape.Clone">
            <summary>
            Returns a clone (deep copy) of this simple shape
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="P:CADability.Shapes.SimpleShape.Outline">
            <summary>
            Gets the outline of this simple shape. Do not modify the border because this shape might become invalid.
            To obtain a good performance the outline of this simple shape is returned, not a clone.
            </summary>
        </member>
        <member name="P:CADability.Shapes.SimpleShape.NumHoles">
            <summary>
            Gets the number of holes in this simple shape.
            </summary>
        </member>
        <member name="M:CADability.Shapes.SimpleShape.Hole(System.Int32)">
            <summary>
            Gets the hole with the specified index. The original border is returned. Do not modify this or the simple shape might become invalid.
            If you need to modify it, make a clone first.
            </summary>
            <param name="Index"></param>
            <returns></returns>
        </member>
        <member name="P:CADability.Shapes.SimpleShape.Holes">
            <summary>
            Returns all holes of this simple shape in an array. You may modify the array since it is a clone of the holes array in this object.
            But you may not modify the individual holes.
            </summary>
        </member>
        <member name="P:CADability.Shapes.SimpleShape.Area">
            <summary>
            Returns the area of this simple shape.
            </summary>
        </member>
        <member name="P:CADability.Shapes.SimpleShape.Empty">
            <summary>
            Returns true, if the Area of this shape is 0.0
            </summary>
        </member>
        <member name="M:CADability.Shapes.SimpleShape.Contains(CADability.GeoPoint2D,System.Boolean)">
            <summary>
            Tests whether the provided point is contained in this simple shape.
            </summary>
            <param name="p">The point to be examined</param>
            <param name="acceptOnCurve">true: accept points on the border as inside points, false: return true only for points totally inside this shape</param>
            <returns>true if the point is contained, false otherwise</returns>
        </member>
        <member name="M:CADability.Shapes.SimpleShape.Split(CADability.Shapes.Border)">
            <summary>
            Returns a CompoundShape consisting of several SimpleShapes that touch each other.
            This SimpleShape is cut along the open Border <paramref name="ToSplitWith"/> into
            several subshapes.
            </summary>
            <param name="ToSplitWith">The curve to cut with (open Border)</param>
            <returns>Splitted shape</returns>
        </member>
        <member name="M:CADability.Shapes.SimpleShape.Shrink(System.Double)">
            <summary>
            Shrinks this simple shape by the given amount. note that the result is a <see cref="T:CADability.Shapes.CompoundShape"/>
            which is composed of multiple simple shapes.
            </summary>
            <param name="d">Amount to shrink, if negative <see cref="M:CADability.Shapes.SimpleShape.Expand(System.Double)"/> will be called</param>
            <returns>The resulting shape (may be empty)</returns>
        </member>
        <member name="M:CADability.Shapes.SimpleShape.Expand(System.Double)">
            <summary>
            Expands this simple shape by the given amount. note that the result is a <see cref="T:CADability.Shapes.CompoundShape"/>
            which is composed of multiple simple shapes.
            </summary>
            <param name="d">Amount to expand, if negative <see cref="M:CADability.Shapes.SimpleShape.Shrink(System.Double)"/> will be called</param>
            <returns>The resulting shape</returns>
        </member>
        <member name="M:CADability.Shapes.SimpleShape.Intersect(CADability.Shapes.SimpleShape,CADability.Shapes.SimpleShape)">
            <summary>
            Returns the intersection (common parts, overlapping area) of two simple shapes. 
            </summary>
            <param name="Part1">First shape</param>
            <param name="Part2">Second shape</param>
            <returns>The resulting shape (may be empty)</returns>
        </member>
        <member name="M:CADability.Shapes.SimpleShape.Unite(CADability.Shapes.SimpleShape,CADability.Shapes.SimpleShape)">
            <summary>
            Returns the union of two simple shapes. 
            </summary>
            <param name="Part1">First shape</param>
            <param name="Part2">Second shape</param>
            <returns>The resulting shape (may be empty)</returns>
        </member>
        <member name="M:CADability.Shapes.SimpleShape.Subtract(CADability.Shapes.SimpleShape,CADability.Shapes.SimpleShape)">
            <summary>
            Returns the subtraction of <paramref name="Part1"/> minus <paramref name="Part2"/>, i.e. all parts that belont to Part1
            but not to Part2.
            </summary>
            <param name="Part1">Shape to be subtracted from</param>
            <param name="Part2">Shape that is subtracted</param>
            <returns>The resulting shape (may be empty)</returns>
        </member>
        <member name="T:CADability.Shapes.SimpleShape.Position">
            <summary>
            Relative position of two shapes
            </summary>
        </member>
        <member name="F:CADability.Shapes.SimpleShape.Position.disjunct">
            <summary>
            Disjunct (non overlapping)
            </summary>
        </member>
        <member name="F:CADability.Shapes.SimpleShape.Position.intersecting">
            <summary>
            Intersecting, overlapping, but not including
            </summary>
        </member>
        <member name="F:CADability.Shapes.SimpleShape.Position.firstcontainscecond">
            <summary>
            First shape totally covers second shape
            </summary>
        </member>
        <member name="F:CADability.Shapes.SimpleShape.Position.secondcontainsfirst">
            <summary>
            Second shape totally covers first shape
            </summary>
        </member>
        <member name="F:CADability.Shapes.SimpleShape.Position.identical">
            <summary>
            The two shapes are identical
            </summary>
        </member>
        <member name="M:CADability.Shapes.SimpleShape.GetPosition(CADability.Shapes.CompoundShape,CADability.Shapes.CompoundShape)">
            <summary>
            Checks the relative position of two shapes to each other. The order of the parameters is important for the result.
            </summary>
            <param name="cs1">First shape</param>
            <param name="cs2">Second shape</param>
            <returns>The position</returns>
        </member>
        <member name="M:CADability.Shapes.SimpleShape.GetPosition(CADability.Shapes.SimpleShape,CADability.Shapes.SimpleShape)">
            <summary>
            Checks the relative position of two shapes to each other. The order of the parameters is important for the result.
            </summary>
            <param name="s1">First shape</param>
            <param name="s2">Second shape</param>
            <returns>The position</returns>
        </member>
        <member name="M:CADability.Shapes.SimpleShape.Project(CADability.Plane,CADability.Plane)">
            <summary>
            The 2d-simple shape is assumed to reside in plane "fromPlane". It will be projected
            perpendicular onto the plane "toPlane". If the planes are perpendicular, the result
            will be am empty shape.
            </summary>
            <param name="fromPlane">the containing plane</param>
            <param name="toPlane">the projection plane</param>
            <returns>the projected shape</returns>
        </member>
        <member name="M:CADability.Shapes.SimpleShape.GetModified(CADability.ModOp2D)">
            <summary>
            Returns a modified shape of this shape. This shape remains unchanged.
            </summary>
            <param name="m">Modification by which this shape is modified</param>
            <returns></returns>
        </member>
        <member name="M:CADability.Shapes.SimpleShape.GetExtent">
            <summary>
            Returns the extent of this shape, i.e. the size of the horizontally adjusted rectangle that encloses it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Shapes.SimpleShape.HitTest(CADability.BoundingRect@)">
            <summary>
            Checks whether this shape and the provided rectangle overlap
            </summary>
            <param name="Rect"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Shapes.SimpleShape.Clip(CADability.Curve2D.ICurve2D,System.Boolean)">
            <summary>
            Clips the provided curve by this shape. Either the inner parts or the parts outside of this shape are returned.
            </summary>
            <param name="toClip">Curve to be clipped</param>
            <param name="returnInsideParts">true: return inside parts, false: return outside parts</param>
            <returns>the clipped curves</returns>
        </member>
        <member name="M:CADability.Shapes.SimpleShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Shapes.SimpleShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="M:CADability.Shapes.SimpleShape.MakePaths(CADability.Plane)">
            <summary>
            Converts the outline and the holes of this shape into <see cref="T:CADability.GeoObject.Path"/> objects.
            </summary>
            <param name="plane">Plane in 3D space where the shape is located</param>
            <returns>The resulting path(s)</returns>
        </member>
        <member name="T:CADability.Shapes.CompoundShape">
            <summary>
            A 2d shape composed by multiple <see cref="T:CADability.Shapes.SimpleShape"/> objects.
            All simple shapes are disjoint. 
            </summary>
        </member>
        <member name="M:CADability.Shapes.CompoundShape.#ctor">
            <summary>
            Constructs an empty shape
            </summary>
        </member>
        <member name="M:CADability.Shapes.CompoundShape.#ctor(CADability.Shapes.SimpleShape[])">
            <summary>
            Constructs a compund shape from one or many simple shapes. The simple shapes must be non overlapping
            <note>If you are not sure, whether</note>
            </summary>
            <param name="simpleShapes">the simple shapes</param>
        </member>
        <member name="M:CADability.Shapes.CompoundShape.Split(CADability.Shapes.Border)">
            <summary>
            Das im Parameter gegebene Objekt muss eine offene Kurve sein, die dieses CompoundShape
            Objekt durchschneidet. Das Ergebniss ist ein CompoundShape, was aus mehreren SimpleShapes
            besteht, die durch das Durchschneiden entstanden sind.
            </summary>
            <param name="ToSplitWith"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Shapes.CompoundShape.CreateFromList(CADability.Curve2D.ICurve2D[],System.Double)">
            <summary>
            Creates a CompundShape from the curves in this list. Assumes the curves are connected. The outer hull is returned.
            </summary>
            <param name="curves2d">The curves</param>
            <param name="maxGap">Maximum gap between curves</param>
            <returns>The shape</returns>
        </member>
        <member name="M:CADability.Shapes.CompoundShape.CreateFromList(CADability.GeoObject.GeoObjectList,System.Double,CADability.Plane@)">
            <summary>
            Creates a CompundShape from the objects in the list. The objects must reside in a common plane.
            </summary>
            <param name="TheObjects">The objects to be connected to a shape</param>
            <param name="maxGap">Maximum gap between curves</param>
            <param name="plane">The common plane and the location of the shape in 3d space</param>
            <returns>The shape, may be null if no shape could be created</returns>
        </member>
        <member name="M:CADability.Shapes.CompoundShape.CreateFromList(CADability.GeoObject.GeoObjectList,CADability.GeoPoint,System.Boolean,System.Boolean,System.Double,CADability.Plane@)">
            <summary>
            Creates a CompundShape from the objects in the list. The objects must reside in a common plane.
            Only the shape that encloses the inner point is created. If <paramref name="excludeHoles"/> is true,
            The resulting shape may contain holes.
            </summary>
            <param name="TheObjects">The curves to make the shape from</param>
            <param name="innerPoint">The inner point to define which shape is to be created</param>
            <param name="connected">True: the curves are already connected (faster performance), false: the curves may overlap or intersect</param>
            <param name="excludeHoles">True: exclude all holes that are inside the outer shape, false: return only the outer shape</param>
            <param name="maxGap">Maximum gap between curves</param>
            <param name="plane">The common plane and the location of the shape in 3d space</param>
            <returns>The shape or null, if no appropriate shape found</returns>
        </member>
        <member name="M:CADability.Shapes.CompoundShape.CreateFromConnectedList(CADability.GeoObject.GeoObjectList,CADability.Plane,CADability.GeoPoint2D,System.Double,CADability.Actions.ConstrHatchInside.HatchMode)">
            <summary>
            Creates a CompundShape from the objects in the list. The objects must reside in a common plane.
            The objects must reside in the provided <paramref name="plane"/>. The <paramref name="innerPoint"/> defines
            a point which must be inside the shape. The <paramref name="mode"/> gives more control about the desired result.
            </summary>
            <param name="TheObjects">The objects (curves) that build the shape</param>
            <param name="plane">The plane, in which the objects reside</param>
            <param name="innerPoint">the inner point which acts as a seed to define the shape</param>
            <param name="maxGap">The maiximum allowable gap between curves to still consider them as connected.</param>
            <param name="mode">The mode, <see cref="T:CADability.Actions.ConstrHatchInside.HatchMode"/></param>
            <returns>The shape or null, if no appropriate shape found</returns>
        </member>
        <member name="P:CADability.Shapes.CompoundShape.SimpleShapes">
            <summary>
            Returns the array of SimpleShape, which define this CompoundShape. In many cases, there is only one SimpleShape.
            </summary>
        </member>
        <member name="M:CADability.Shapes.CompoundShape.Project(CADability.Plane,CADability.Plane)">
            <summary>
            The 2d-compund shape is assumed to reside in plane "fromPlane". It will be projected
            perpendicular onto the plane "toPlane". If the planes are perpendicular, the result
            will be am empty shape
            </summary>
            <param name="fromPlane">the containing plane</param>
            <param name="toPlane">the projection plane</param>
            <returns>the projected shape</returns>
        </member>
        <member name="M:CADability.Shapes.CompoundShape.op_Subtraction(CADability.Shapes.CompoundShape,CADability.Shapes.CompoundShape)">
            <summary>
            Returns the difference of the two CompoundShapes s1 and s2 (s1-s2). 
            The result may be empty. 
            </summary>
            <param name="s1">first operand</param>
            <param name="s2">second operand</param>
            <returns>difference</returns>
        </member>
        <member name="M:CADability.Shapes.CompoundShape.MakeFaces(CADability.Plane)">
            <summary>
            Returns planar faces, one for each contained <see cref="T:CADability.Shapes.SimpleShape"/>.
            </summary>
            <param name="plane">Plane where to construct the faces</param>
            <returns>Array of faces</returns>
        </member>
        <member name="M:CADability.Shapes.CompoundShape.MakePaths(CADability.Plane)">
            <summary>
            Converts the shape to one or more <see cref="T:CADability.GeoObject.Path"/> objects according to the provided plane.
            </summary>
            <param name="plane">Plane in 3D space where the shape should be located</param>
            <returns>The resulting path(s)</returns>
        </member>
        <member name="M:CADability.Shapes.CompoundShape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Shapes.CompoundShape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.BoundingCube">
            <summary>
            Represents a bounding cuboid, that is an extent in 3 dimensions
            </summary>
        </member>
        <member name="P:CADability.BoundingCube.Points">
            <summary>
            Gets an array of the 8 vertices of this cube
            </summary>
        </member>
        <member name="P:CADability.BoundingCube.LineNumbers">
            <summary>
            Gets an array[12,2] of pairs of point indizes defining the 12 edges
            of this cube. Indizes are to the <see cref="P:CADability.BoundingCube.Points"/>
            </summary>
        </member>
        <member name="P:CADability.BoundingCube.Lines">
            <summary>
            Gets the 12 edges of the cube as a GeoPoint[12, 2] array
            </summary>
        </member>
        <member name="M:CADability.BoundingCube.GetSides">
            <summary>
            Returns 6 planar faces, the faces of this cube
            </summary>
            <returns>the faces</returns>
        </member>
        <member name="M:CADability.BoundingCube.GetSolid">
            <summary>
            Returns a solid cube as a <see cref="T:CADability.GeoObject.Solid"/>.
            </summary>
            <returns>the solid</returns>
        </member>
        <member name="M:CADability.BoundingCube.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a BoundingCube from minimum and maximum values
            </summary>
            <param name="Xmin">Minimum in x-direction</param>
            <param name="Xmax">Maximum in x-direction</param>
            <param name="Ymin">Minimum in y-direction</param>
            <param name="Ymax">Maximum in y-direction</param>
            <param name="Zmin">Minimum in z-direction</param>
            <param name="Zmax">Maximum in z-direction</param>
        </member>
        <member name="M:CADability.BoundingCube.#ctor(CADability.GeoPoint,System.Double)">
            <summary>
            Constructs a equal sided BoundingCube from a center point and a "radius" (half width)
            </summary>
            <param name="center">Center point</param>
            <param name="halfSize">Half of the width</param>
        </member>
        <member name="M:CADability.BoundingCube.#ctor(CADability.GeoPoint[])">
            <summary>
            Constructs a BoundingCube, that encloses all given points
            </summary>
            <param name="p">points to enclose</param>
        </member>
        <member name="M:CADability.BoundingCube.MinMax(CADability.GeoPoint)">
            <summary>
            Makes this BoundingCube include the provided point. You can start with an <see cref="P:CADability.BoundingCube.EmptyBoundingCube"/>
            </summary>
            <param name="p">Point to be included</param>
        </member>
        <member name="M:CADability.BoundingCube.MinMax(CADability.BoundingCube)">
            <summary>
            Makes this BoundingCube include the provided BoundingCube. You can start with an <see cref="P:CADability.BoundingCube.EmptyBoundingCube"/>
            </summary>
            <param name="b">Cube to be included</param>
        </member>
        <member name="F:CADability.BoundingCube.UnitBoundingCube">
            <summary>
            BoundingCube defining the interval [0,1] in all directions
            </summary>
        </member>
        <member name="P:CADability.BoundingCube.EmptyBoundingCube">
            <summary>
            Empty BoundingCube. Defined by the special values <see cref="F:System.Double.MinValue"/> and <see cref="F:System.Double.MaxValue"/>.
            Often used with the <see cref="M:CADability.BoundingCube.MinMax(CADability.GeoPoint)"/> or <see cref="M:CADability.BoundingCube.MinMax(CADability.BoundingCube)"/> Methods.
            </summary>
        </member>
        <member name="P:CADability.BoundingCube.InfiniteBoundingCube">
            <summary>
            Infinite BoundingCube. Ranging from <see cref="F:System.Double.MinValue"/> to <see cref="F:System.Double.MaxValue"/>.
            </summary>
        </member>
        <member name="M:CADability.BoundingCube.Disjoint(CADability.BoundingCube,CADability.BoundingCube)">
            <summary>
            Returns true if the two cubes are disjoint (do not overlap and do not touch)
            </summary>
            <param name="b1">First cube</param>
            <param name="b2">Second cube</param>
            <returns>true if disjoint</returns>
        </member>
        <member name="P:CADability.BoundingCube.Size">
            <summary>
            Gets the sum of width, height and deepth
            </summary>
        </member>
        <member name="P:CADability.BoundingCube.Volume">
            <summary>
            Gets the product of width, height and deepth
            </summary>
        </member>
        <member name="P:CADability.BoundingCube.MaxSide">
            <summary>
            Gets the length of the maximum side
            </summary>
        </member>
        <member name="P:CADability.BoundingCube.XDiff">
            <summary>
            Gets the extension in x direction
            </summary>
        </member>
        <member name="P:CADability.BoundingCube.YDiff">
            <summary>
            Gets the extension in y direction
            </summary>
        </member>
        <member name="P:CADability.BoundingCube.ZDiff">
            <summary>
            Gets the extension in z direction
            </summary>
        </member>
        <member name="M:CADability.BoundingCube.GetCenter">
            <summary>
            Returns the center of this BoundingCube
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.BoundingCube.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.BoundingCube.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="M:CADability.BoundingCube.Expand(System.Double)">
            <summary>
            Expands the bounding cube by the given value in all directions.
            </summary>
            <param name="w">offset to expand with</param>
        </member>
        <member name="M:CADability.BoundingCube.Modify(CADability.ModOp)">
            <summary>
            Modifies this cube according to the provided modification.
            If this modification contains a rotation the resulting cube will contain the 
            rotated original cube. BoundingCubes are always axis aligned.
            </summary>
            <param name="m">Modification</param>
        </member>
        <member name="P:CADability.BoundingCube.IsEmpty">
            <summary>
            Returns <c>true</c> if this is the special empty cube
            </summary>
        </member>
        <member name="M:CADability.BoundingCube.Contains(CADability.BoundingCube)">
            <summary>
            Returns <c>true</c> if this cube contains the provided cube. (&lt;= will be checked)
            </summary>
            <param name="extn">Cube to be checked</param>
            <returns><c>true</c> if there is containment</returns>
        </member>
        <member name="M:CADability.BoundingCube.Contains(CADability.GeoPoint)">
            <summary>
            Returns true if this cube contains the provided point. (&lt;= will be checked)
            </summary>
            <param name="p">The Point</param>
            <returns><c>true</c> if there is containment</returns>
        </member>
        <member name="M:CADability.BoundingCube.Contains(CADability.GeoPoint,System.Double)">
            <summary>
            Returns true if this cube contains the provided point.
            Points within the cube extended by <paramref name="prec"/>ision
            will also be accepted.
            </summary>
            <param name="p">The Point</param>
            <returns><c>true</c> if there is containment</returns>
        </member>
        <member name="M:CADability.BoundingCube.GetExtent(CADability.Projection)">
            <summary>
            Returns the extent of the projected BoundingCube
            </summary>
            <param name="pr">the projection</param>
            <returns>the resulting 2-dimensional extent</returns>
        </member>
        <member name="M:CADability.BoundingCube.Interferes(CADability.Plane)">
            <summary>
            Returns true if the given plane intersects the this bounding cube. Returns false otherwise.
            </summary>
            <param name="plane">The plane to test with</param>
            <returns>true if intersection</returns>
        </member>
        <member name="M:CADability.BoundingCube.Interferes(CADability.GeoPoint,CADability.GeoVector,System.Double,System.Boolean)">
            <summary>
            Returns true if the given line intersects the this bounding cube. Returns false otherwise.
            </summary>
            <param name="start">Startpoint of the line</param>
            <param name="dir">Direction of the line</param>
            <param name="maxdist">Maximum allowable distance from the line</param>
            <param name="onlyForward">Set to true, if only the positive ray should be cinsidered</param>
            <returns></returns>
        </member>
        <member name="M:CADability.BoundingCube.Interferes(CADability.GeoPoint@,CADability.GeoPoint@)">
            <summary>
            Returns true if the given line segment intersects the this bounding cube. Returns false otherwise.
            </summary>
            <param name="start">Start point of the line</param>
            <param name="end">End point of the line</param>
            <returns>True if intersection</returns>
        </member>
        <member name="M:CADability.BoundingCube.Interferes(CADability.GeoPoint[])">
            <summary>
            Checks the interference of this cube with the provided polyline. The array of <paramref name="points"/>
            defines a polyline connecting consecutive points.
            </summary>
            <param name="points">The polyline</param>
            <returns><c>true</c> when some part of the polyline interferes with this cube</returns>
        </member>
        <member name="M:CADability.BoundingCube.Interferes(CADability.GeoPoint@,CADability.GeoPoint@,CADability.GeoPoint@)">
            <summary>
            Returns true when the triangle defined by <paramref name="tri1"/>, <paramref name="tri2"/> and <paramref name="tri3"/>
            (including the inside of the triangle) and this BoundingCube interfere.
            </summary>
            <param name="tri1">First point of triangle</param>
            <param name="tri2">Second point of triangle</param>
            <param name="tri3">Third point of triangle</param>
            <returns>true if interference, false otherwise</returns>
        </member>
        <member name="M:CADability.BoundingCube.Interferes(CADability.GeoPoint,CADability.GeoPoint,CADability.GeoPoint,CADability.GeoPoint)">
            <summary>
            Returns true if the provided tetraeder (given by the four points tetra1..tetra4) and this
            BoundingCube interfere
            </summary>
            <param name="tetra1">1st tetraeder vertex</param>
            <param name="tetra2">2nd tetraeder vertex</param>
            <param name="tetra3">3rd tetraeder vertex</param>
            <param name="tetra4">4th tetraeder vertex</param>
            <returns>True if objects interfere</returns>
        </member>
        <member name="M:CADability.BoundingCube.Interferes(CADability.Projection,CADability.BoundingRect)">
            <summary>
            Returns true, if the provided rectangle <paramref name="rect"/> and this BoundingCube interfere with the provided <paramref name="projection"/>.
            </summary>
            <param name="projection">The projection</param>
            <param name="rect">The rectangle</param>
            <returns>ture if interference, false otherwise</returns>
        </member>
        <member name="M:CADability.BoundingCube.Interferes(CADability.Projection.PickArea)">
            <summary>
            Checks the interference of this cube with the provided <paramref name="area"/>. The pickarea
            is either a rectangular prism of infinite length or a frustum.
            </summary>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.BoundingCube.Interferes(CADability.GeoPoint[],System.Int32[])">
            <summary>
            Checks the interference of this cube with the provided triangles. The triangles are defined
            by three points each. Each triple of indices in <paramref name="triangleIndex"/> defines one
            triangle. Not only the edges of the triangle are checked but also the inner surface.
            </summary>
            <param name="trianglePoint">Array of vertives of the triangles</param>
            <param name="triangleIndex">Indices to <paramref name="trianglePoint"/>, each triple defines one triangle</param>
            <returns><c>true</c> if any of the provides triangles interferes with this cube</returns>
        </member>
        <member name="M:CADability.BoundingCube.Interferes(CADability.GeoPoint,CADability.GeoVector,CADability.GeoVector,CADability.GeoVector)">
            <summary>
            Checks the interference of this cube with the provided parallelepiped (the affine projection of a cube)
            </summary>
            <param name="loc"></param>
            <param name="dirx"></param>
            <param name="diry"></param>
            <param name="dirz"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.BoundingCube.Interferes(CADability.BoundingCube)">
            <summary>
            Checks the interference of this cube with the other provided cube
            </summary>
            <param name="bc">the other cube to test with</param>
            <returns>true if the two cubes interfere (overlap)</returns>
        </member>
        <member name="M:CADability.BoundingCube.ClipLine(CADability.GeoPoint@,CADability.GeoPoint@)">
            <summary>
            Clips the provided line (defined by <paramref name="start"/> and <paramref name="end"/>) by this cube.
            Returns true if the line interferes with this boundingcube, modifies the start and endpoint in the parameters if clipping occures
            </summary>
            <param name="start">Startpoint of the line, may be changed upon return</param>
            <param name="end">Endpoint of the line, may be changed upon return</param>
            <returns>true if the line and this cube interfere</returns>
        </member>
        <member name="M:CADability.BoundingCube.IsOnBounds(CADability.GeoPoint,System.Double)">
            <summary>
            Tests whether the provided point <paramref name="toTest"/> falls on the bounds of this
            cube with respect to <paramref name="precision"/>.
            </summary>
            <param name="toTest">Point to test</param>
            <param name="precision">Precision for the test</param>
            <returns>True if on bounds, false otherwise</returns>
        </member>
        <member name="M:CADability.BoundingCube.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CADability.BoundingCube.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CADability.BoundingRect">
            <summary>
            BoundingRect is an axis oriented rectangle or a 2-dimensional bounding box. It is implemented as a "struct" (value type)
            so assignements always make a copy.
            </summary>
        </member>
        <member name="M:CADability.BoundingRect.#ctor(CADability.GeoPoint2D,System.Double,System.Double)">
            <summary>
            Creates a new BoundingRect with the provided center, half width and half height
            </summary>
            <param name="Center">Center of the BoundingRect</param>
            <param name="HalfWidth">Half width</param>
            <param name="HalfHeight">Half height</param>
        </member>
        <member name="M:CADability.BoundingRect.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new BoundingRect with the provided limits.
            </summary>
            <param name="Left">Left limit</param>
            <param name="Bottom">Bottom limit</param>
            <param name="Right"></param>
            <param name="Top"></param>
        </member>
        <member name="M:CADability.BoundingRect.#ctor(CADability.GeoPoint2D[])">
            <summary>
            Creates a new BoundingRect which contains the provided points
            </summary>
            <param name="p">List of points to define the rectangle</param>
        </member>
        <member name="M:CADability.BoundingRect.#ctor(System.Drawing.Rectangle)">
            <summary>
            Creates a new BoundingRect from the provided System.Drawing.rectangle
            </summary>
            <param name="r">das gegebene Rechteck</param>
        </member>
        <member name="M:CADability.BoundingRect.#ctor(CADability.BoundingRect)">
            <summary>
            Copy constructor
            </summary>
            <param name="r"></param>
        </member>
        <member name="F:CADability.BoundingRect.EmptyBoundingRect">
            <summary>
            Returns an empty BoundingRect which is convenient as a start for the <see cref="M:CADability.BoundingRect.MinMax(CADability.GeoPoint2D)"/> method.
            </summary>
        </member>
        <member name="P:CADability.BoundingRect.UnitBoundingRect">
            <summary>
            Returns an BoundingRect form 0 to 1 in both directions
            </summary>
        </member>
        <member name="M:CADability.BoundingRect.MakeEmpty">
            <summary>
            Makes this BoundingRect an empty BoundingRect
            </summary>
        </member>
        <member name="M:CADability.BoundingRect.IsEmpty">
            <summary>
            Returns true, if this BoundingRect is empty.
            </summary>
            <returns>true, if empty.</returns>
        </member>
        <member name="P:CADability.BoundingRect.IsInfinite">
            <summary>
            Returns true if the BoundingRect is infinite. I.e. left and bottom equal Double.MinValue 
            and right and top equal Double.MaxValue 
            </summary>
        </member>
        <member name="M:CADability.BoundingRect.MinMax(CADability.GeoPoint2D)">
            <summary>
            Adapts the size of this bounding rectangle to include the provided point.
            </summary>
            <param name="p">Point to be included</param>
        </member>
        <member name="M:CADability.BoundingRect.MinMax(CADability.GeoPoint2D[])">
            <summary>
            Adapts the size of this bounding rectangle to include the provided points.
            </summary>
            <param name="p">Points to be included</param>
        </member>
        <member name="T:CADability.BoundingRect.Position">
            <summary>
            The location of a point relative to a bounding rectangle
            </summary>
        </member>
        <member name="F:CADability.BoundingRect.Position.inside">
            <summary>
            The point is inside the rectangle
            </summary>
        </member>
        <member name="F:CADability.BoundingRect.Position.outside">
            <summary>
            The point is outside the rectangle
            </summary>
        </member>
        <member name="F:CADability.BoundingRect.Position.onframe">
            <summary>
            The point resides on one of the bounding lines
            </summary>
        </member>
        <member name="M:CADability.BoundingRect.GetPosition(CADability.GeoPoint2D,System.Double)">
            <summary>
            Returns the position of the provided point with a given precision
            </summary>
            <param name="p">The point to test</param>
            <param name="frameWidth">The precision: if the distance to a bounding line is smaller 
            than this value, the point is considered as <see cref="F:CADability.BoundingRect.Position.onframe"/></param>
            <returns>The position of the point</returns>
        </member>
        <member name="M:CADability.BoundingRect.MinMax(CADability.BoundingRect)">
            <summary>
            Adapts the size of this bounding rectangle to include the provided rectangle.
            </summary>
            <param name="r">Rectangle to be included</param>
        </member>
        <member name="M:CADability.BoundingRect.GetCenter">
            <summary>
            Returns the center of the rectangle
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.BoundingRect.GetLowerLeft">
            <summary>
            Returns the lower left point of the rectangle
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.BoundingRect.GetUpperLeft">
            <summary>
            Returns the upper left point of the rectangle
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.BoundingRect.GetMiddleLeft">
            <summary>
            Returns the center of the left line of the rectangle
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.BoundingRect.GetMiddleRight">
            <summary>
            Returns the center of the right line of the rectangle
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.BoundingRect.GetLowerMiddle">
            <summary>
            Returns the center of the bottom line of the rectangle
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.BoundingRect.GetUpperMiddle">
            <summary>
            Returns the center of the upper line of the rectangle
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.BoundingRect.GetLowerRight">
            <summary>
            Returns the lower right point of the rectangle
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.BoundingRect.GetUpperRight">
            <summary>
            Returns the upper right point of the rectangle
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.BoundingRect.Inflate(System.Double)">
            <summary>
            Inflates the rectangle by the provided value which may also be negative (for shrinking)
            </summary>
            <param name="d">Value for infaltion</param>
        </member>
        <member name="M:CADability.BoundingRect.InflateRelative(System.Double)">
            <summary>
            Inflates the rectangle by a factor relative to its <see cref="P:CADability.BoundingRect.Size"/>.
            </summary>
            <param name="factor"></param>
        </member>
        <member name="M:CADability.BoundingRect.Inflate(System.Double,System.Double)">
            <summary>
            Inflates the rectangle with different values in width an height
            </summary>
            <param name="width">Inflation of the width</param>
            <param name="height">Inflation of the height</param>
        </member>
        <member name="M:CADability.BoundingRect.Modify(CADability.ModOp2D)">
            <summary>
            Modifies the rectangle by the provided <see cref="T:CADability.ModOp2D"/>. The resulting rectangle contains the modified
            vertices of this rectangle
            </summary>
            <param name="m">Modification to use</param>
        </member>
        <member name="M:CADability.BoundingRect.Move(CADability.GeoVector2D)">
            <summary>
            Moves the rectangle by the provided offset
            </summary>
            <param name="offset">Offset to move</param>
        </member>
        <member name="M:CADability.BoundingRect.op_LessThan(CADability.BoundingRect,CADability.BoundingRect)">
            <summary>
            Determins whether r1 is contained in r2.
            </summary>
            <param name="r1">Left operand</param>
            <param name="r2">Right operand</param>
            <returns>true, if r1 is contained in r2.</returns>
        </member>
        <member name="M:CADability.BoundingRect.op_GreaterThan(CADability.BoundingRect,CADability.BoundingRect)">
            <summary>
            Determins whether r2 is contained in r1.
            </summary>
            <param name="r1">Left operand</param>
            <param name="r2">Right operand</param>
            <returns>true, if r2 is contained in r1.</returns>
        </member>
        <member name="M:CADability.BoundingRect.op_LessThan(CADability.GeoPoint2D,CADability.BoundingRect)">
            <summary>
            Determins whether the provided point is contained in the provided rectangle
            </summary>
            <param name="p">The point to test</param>
            <param name="r">The rectangle to test with</param>
            <returns>true if contained</returns>
        </member>
        <member name="M:CADability.BoundingRect.op_GreaterThan(CADability.GeoPoint2D,CADability.BoundingRect)">
            <summary>
            Determins whether the provided point is outside of the provided ractangle
            </summary>
            <param name="p">The point to test</param>
            <param name="r">The rectangle to test with</param>
            <returns>true if outside</returns>
        </member>
        <member name="M:CADability.BoundingRect.op_LessThanOrEqual(CADability.BoundingRect,CADability.BoundingRect)">
            <summary>
            Determins whether r1 is contained in r2. It may also contact one ore multiple sides of the rectangle.
            </summary>
            <param name="r1">Left operand</param>
            <param name="r2">Right operand</param>
            <returns>true, if r1 is contained in r2.</returns>
        </member>
        <member name="M:CADability.BoundingRect.op_GreaterThanOrEqual(CADability.BoundingRect,CADability.BoundingRect)">
            <summary>
            Determins whether r2 is contained in r1. It may also contact one ore multiple sides of the rectangle.
            </summary>
            <param name="r1">Left operand</param>
            <param name="r2">Right operand</param>
            <returns>true, if r2 is contained in r1.</returns>
        </member>
        <member name="M:CADability.BoundingRect.op_LessThanOrEqual(CADability.GeoPoint2D,CADability.BoundingRect)">
            <summary>
            Determins whether the provided point is contained in the provided rectangle. It may also reside on one
            of the bounding lines.
            </summary>
            <param name="p">The point to test</param>
            <param name="r">The rectangle to test with</param>
            <returns>true if contained</returns>
        </member>
        <member name="M:CADability.BoundingRect.op_GreaterThanOrEqual(CADability.GeoPoint2D,CADability.BoundingRect)">
            <summary>
            Determins whether the provided point is outside of the provided ractangle. It may also reside on one
            of the bounding lines.
            </summary>
            <param name="p">The point to test</param>
            <param name="r">The rectangle to test with</param>
            <returns>true if outside</returns>
        </member>
        <member name="M:CADability.BoundingRect.Disjoint(CADability.BoundingRect,CADability.BoundingRect)">
            <summary>
            Returns true if the two rectangles are disjoint (do not overlap)
            </summary>
            <param name="b1">First rectangle</param>
            <param name="b2">Second rectangle</param>
            <returns>true if disjoint</returns>
        </member>
        <member name="P:CADability.BoundingRect.Width">
            <value>
            The width of the rectangle
            </value>
        </member>
        <member name="P:CADability.BoundingRect.Height">
            <value>
            The height of the rectangle
            </value>
        </member>
        <member name="M:CADability.BoundingRect.op_Multiply(CADability.BoundingRect,System.Double)">
            <summary>
            Returns a rectangle which is scaled by the provided factor. The center remaines fixed.
            </summary>
            <param name="rect">The initial rectangle</param>
            <param name="Factor">The scalingfactor</param>
            <returns>the scaled rectangle</returns>
        </member>
        <member name="M:CADability.BoundingRect.op_Addition(CADability.BoundingRect,System.Double)">
            <summary>
            Returns an inflated or deflated rectangle
            </summary>
            <param name="rect">The initial rectangle</param>
            <param name="offset">The offset for the inflation (may be negaitve)</param>
            <returns>The inflated rectangle</returns>
        </member>
        <member name="M:CADability.BoundingRect.op_Explicit(CADability.BoundingRect)~System.Drawing.Rectangle">
            <summary>
            Typecast to a System.Drawing.Rectangle
            </summary>
            <param name="r">The initial rectangle</param>
            <returns>The casted rectangle</returns>
        </member>
        <member name="M:CADability.BoundingRect.ToBorder">
            <summary>
            Returns a <see cref="T:CADability.Shapes.Border"/> that consists of the four lines of this ractangle.
            </summary>
            <returns>The border</returns>
        </member>
        <member name="M:CADability.BoundingRect.Interferes(CADability.BoundingRect@)">
            <summary>
            Returns true, when this rectangle and the provided rect overlap
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.BoundingRect.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.BoundingRect.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="M:CADability.BoundingRect.IsClose(CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Checks, whether the x difference of the twop points is less tah width*1e-6 and the y difference is less than height*1e-6.
            This is a good check for identity of points on the uv system of surfaces
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.BoundingRect.PointAt(System.Double)">
            <summary>
            Returns a point on the bound of the rectangle going from lower left (parameter 0.0) counterclockwise (lower right is at parameter 1.0)
            back to lower left (at parameter 4.0)
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.BoundingRect.PositionOf(CADability.GeoPoint2D)">
            <summary>
            Returns the position of the point p, which is assumed to be on the bound of this rectangle.
            0 is lower left, 1 is lower right and so on
            </summary>
            <param name="p">the point to check</param>
            <returns>the parameter which is between 0 and 4</returns>
        </member>
        <member name="M:CADability.BoundingRect.GetLines(System.Double,System.Double)">
            <summary>
            Returns vertices of lines going from v1 to v2 (in the meaning of PointAt)
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.BRepOperationOld.Result">
            <summary>
            Liefert die Vereinigung der beiden Shells. Das k√∂nnen mehrere Shells sein, denn es kann eine innere H√∂hlung entstehen.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.BRepOperationOld.Intersect(CADability.GeoPoint@)">
            <summary>
            Checks whether the two shells intersect each other
            </summary>
            <returns></returns>
        </member>
        <member name="T:CADability.CollisionDetection">
            <summary>
            Preliminary
            </summary>
        </member>
        <member name="M:CADability.CollisionDetection.#ctor(CADability.GeoObject.Shell,CADability.GeoObject.Shell)">
            <summary>
            Preliminary
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
        </member>
        <member name="M:CADability.CollisionDetection.GetResultOld(System.Double,CADability.GeoPoint@)">
            <summary>
            Preliminary
            </summary>
            <param name="precision"></param>
            <param name="collisionPoint"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.BRepOperation.createEdgeFaceIntersections">
            <summary>
            Collect intersections between edges of one shell and faces of the other shell (and vice versa)
            setting edgesToSplit, intersectionVertices and facesToIntersectionVertices 
            </summary>
        </member>
        <member name="M:CADability.BRepOperation.combineVertices">
            <summary>
            Combine all vertices of both shells and the intersection vertices
            </summary>
        </member>
        <member name="M:CADability.BRepOperation.#ctor(CADability.GeoObject.Shell,CADability.Plane)">
            <summary>
            Prepare a brep operation for splitting a (closed) shell with a plane. Or for returning the compound shapes on the specified plane.
            Here we assume that "toSplit" is properly oriented and han no periodic faces (no seams)
            </summary>
            <param name="toSplit">the shell to split (must be closed)</param>
            <param name="splitBy">the plane to split by</param>
        </member>
        <member name="T:CADability.BRepOperation.EdgeInfo">
            <summary>
            Beschreibt ein Objekt, welches an Edge h√§ngt und f√ºr alle m√∂glichen Zusatzinfos bez√ºglich der Edge w√§hrend der BRepOperation verwendet werden kann
            Damit kann man die umst√§ndliche Speicherung von Extras per UserData umgehen, und ist schneller.
            </summary>
        </member>
        <member name="T:CADability.BRepOperation.UniqueDoubleReverseDictionary`1">
            <summary>
            A dictionary with keys of type double, which manages adding same key entries by incrementing the key until the value can be added
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CADability.BRepOperation.DifferenceDeprecated(CADability.GeoObject.Face,CADability.GeoObject.Face,CADability.ModOp2D,System.Boolean)">
            <summary>
            Make the difference face1 - face2 (which can be any number of faces, including none) and distribute the intersection edges of face1
            to the resulting faces
            </summary>
            <param name="face1"></param>
            <param name="face2"></param>
            <param name="secondToFirst"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.BRepOperation.Difference(CADability.GeoObject.Face,CADability.GeoObject.Face,CADability.ModOp2D,System.Boolean)">
            <summary>
            Make the difference face1 - face2 (which can be any number of faces, including none) and distribute the intersection edges of face1
            to the resulting faces
            </summary>
            <param name="face1"></param>
            <param name="face2"></param>
            <param name="secondToFirst"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.BRepOperation.SortLoopsTopologically(System.Collections.Generic.List{System.Collections.Generic.List{CADability.Edge}},CADability.GeoObject.Face)">
            <summary>
            Sort the set of loops into a dictionary, so that all dictionary entries have a positive loop (ccw, outline) as a key and all negative loops
            (cw, hole), which are located inside this outline, as value. All in respect to the provided face.
            </summary>
            <param name="loops"></param>
            <param name="face"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.BRepOperation.GetLoops(Wintellect.PowerCollections.Set{CADability.Edge},CADability.GeoObject.Face)">
            <summary>
            Takes a set of edges and tries to connect them to closed loops. 
            </summary>
            <param name="workingSet">work on this set, which will be emptied</param>
            <param name="face">orientation in respect to this face</param>
            <returns></returns>
        </member>
        <member name="M:CADability.BRepOperation.SameConnection(System.Collections.Generic.List{CADability.Edge},System.Collections.Generic.List{CADability.Edge},CADability.GeoObject.Face,System.Double)">
            <summary>
            Check whether the two lists of (connected) edges describe the same (geometric) path.
            </summary>
            <param name="con1"></param>
            <param name="con2"></param>
            <param name="onThisFace"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.BRepOperation.extractConnectedFaces(Wintellect.PowerCollections.Set{CADability.GeoObject.Face},CADability.GeoObject.Face)">
            <summary>
            Return all the faces, which are directely or indirectely connected to "startWith" from the set "allFaces"
            Also remove thos found faces from "allfaces"
            </summary>
            <param name="allFaces"></param>
            <param name="startWith"></param>
            <param name="result"></param>
        </member>
        <member name="M:CADability.BRepOperation.GetOverlappingFaces(CADability.GeoObject.Face[]@,CADability.GeoObject.Face[]@,CADability.ModOp2D[]@)">
            <summary>
            Liefert die Vereinigung der beiden Shells. Das k√∂nnen mehrere Shells sein, denn es kann eine innere H√∂hlung entstehen.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.BRepOperation.Intersect(CADability.GeoPoint@)">
            <summary>
            Checks whether the two shells intersect each other
            </summary>
            <returns></returns>
        </member>
        <member name="T:CADability.BRepRoundEdges">
            <summary>
            Analog zu Border, jedoch nicht zwangsweise linksrum orientiert.
            Als innen wird alles betrachtet, was links von den Kurven liegt, also auch inverse Border m√∂glich, die ein Loch im Unendlichen darstellen.
            Unver√§nderlich!
            </summary>
        </member>
        <member name="M:CADability.BRepRoundEdges.RoundEdge(CADability.Edge,System.Double,CADability.Curve2D.ICurve2D[]@,CADability.Curve2D.ICurve2D[]@,CADability.Curve2D.ICurve2D[]@,CADability.Curve2D.ICurve2D[]@,System.Boolean,System.Boolean)">
            <summary>
            Returns a surface, which rounds the two faces of the provided edge with the given radius. The surface is correct oriented
            Also returns the two 2d curves on primary and secondary face of the edge, which define the tangential touching curve of the surface
            to the two faces. The orientation of the 2d curves is ccw, but the closing bounds at the open sides of the surfaces
            are not created.
            The surface returned is composed by up to 5 surfaces, which can be connected. The middle surface [2] is actually tangential to
            both surfaces of the edge. surfacee [1] is tangential to only one of the two surfaces, the other surface does not exist here.
            surface [0] is a cylindrical extension to exceed the faces by at least "radius" length. surface [3] and [4] are analogous
            at the end of the edge. If the rounding surface is a simple surface (cylindrical, toroidal) all segments are returned as one
            surface at index 2.
            </summary>
            <param name="etr"></param>
            <param name="edgeOnPrimary"></param>
            <param name="edgeOnSecondary"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.BRepRoundEdges.ExtrudeArc(CADability.GeoObject.ICurve,CADability.GeoVector,CADability.GeoVector,System.Double)">
            <summary>
            Create a surface by moving an arc or circle along the provided curve. If the curve is a line or an circular arc,
            we get a cylindrical or toriodal surface, otherwise a GeneralSweptCurve is created.
            </summary>
            <param name="along"></param>
            <param name="startDir"></param>
            <param name="endDir"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.BRepSelfIntersection.#ctor(CADability.GeoObject.Shell,CADability.GeoObject.Shell,System.Double)">
            <summary>
            Remove all parts of the self intersecting shell, which are closer than offset to the original shell
            </summary>
            <param name="shell"></param>
            <param name="original"></param>
            <param name="offset"></param>
        </member>
        <member name="M:CADability.BRepSelfIntersection.createEdgeFaceIntersections">
            <summary>
            Erzeuge die Schnitte zwischen Edges und Faces von verschiedenen shells.
            edgesToSplit, intersectionVertices und facesToIntersectionVertices werden gesetzt
            </summary>
        </member>
        <member name="T:CADability.ClipRect">
            <summary>
            Mit dieser Klasse werden primitive Clip-Funktionen abgehandelt.
            </summary>
        </member>
        <member name="M:CADability.ClipRect.ClipLine(CADability.GeoPoint2D@,CADability.GeoPoint2D@)">
            <summary>
            Ver√§ndert die durch die beiden gegebenen Punkte gegebene Linie so, dass sie
            vom Clip-Rechteck geklippt wird. 
            </summary>
            <param name="p1">Startpunkt der Linie</param>
            <param name="p2">Endpunkt der Linie</param>
            <returns>true, wenn etwas von der Linie sichtbar bleibt</returns>
        </member>
        <member name="M:CADability.ClipRect.LineHitTest(CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Testet, ob die durch die beiden Punkte gegebene Linie von dem Rechteck ber√ºhrt wird.
            </summary>
            <param name="p1">Startpunkt der Linie</param>
            <param name="p2">Endpunkt der Linie</param>
            <returns>true, wenn die Linie ber√ºhrt wird</returns>
        </member>
        <member name="T:CADability.ColorSetting">
            <summary>
            ColorSetting is intended for objects to be used in <see cref="T:CADability.Settings"/>. It provides a <see cref="P:CADability.ColorSetting.Color"/>
            with the <see cref="T:CADability.UserInterface.IShowProperty"/> interface.
            </summary>
        </member>
        <member name="M:CADability.ColorSetting.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.ColorSetting.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.CoordSysException">
            <summary>
            Exception thrown by constructors of <see cref="T:CADability.CoordSys"/> indication a failure
            </summary>
        </member>
        <member name="T:CADability.CoordSysException.tExceptionType">
            <summary>
            Enumeration of different causes of this exception
            </summary>
        </member>
        <member name="F:CADability.CoordSysException.ExceptionType">
            <summary>
            Cause of this exception
            </summary>
        </member>
        <member name="T:CADability.CoordSys">
            <summary>
            Rechtwinkliges, rechtsh√§ndiges Koordinatensystem. Normierte Einheitsvektoren?
            </summary>
        </member>
        <member name="M:CADability.CoordSys.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.IDrive">
            <summary>
            Methods and properties common to all drive objects
            </summary>
        </member>
        <member name="P:CADability.IDrive.DependsOn">
            <summary>
            Defines an other drive this drive depends on. The movement of the driven objects is
            the accumulated by all drives that prepend this drive. If DependsOn is null, then this
            drive is absoulte to the fixed world
            </summary>
        </member>
        <member name="P:CADability.IDrive.Position">
            <summary>
            Gets or sets the current position of the driven objects. 
            </summary>
        </member>
        <member name="P:CADability.IDrive.Movement">
            <summary>
            Returns the modification that has to be applied to the objects moved by this drive
            to calculate the current position of the objects. This depends on the <see cref="P:CADability.IDrive.Position"/> that
            has been set before (the current position). The modification does not take into account that this drive
            depends on another drive.
            </summary>
        </member>
        <member name="T:CADability.CurveDrive">
            <summary>
            Describes a movement along a curve (which may be any path or simple curve like a line)
            </summary>
        </member>
        <member name="M:CADability.CurveDrive.#ctor(CADability.GeoObject.ICurve,System.Double)">
            <summary>
            Defines a CurveDrive providing the curve for the movement and the object beeing moved.
            The currentPosition describes the position of the object as it is defined in the model
            relative to the startpoint of the curve. It must be between 0.0 and the 
            <see cref="P:CADability.GeoObject.ICurve.Length">length</see> of the curve.
            </summary>
            <param name="along">Curve for the movement</param>
            <param name="toMove">Object beeing moved</param>
            <param name="currentPosition">Current position of the object</param>
        </member>
        <member name="P:CADability.CurveDrive.Tangential">
            <summary>
            Gets or sets the tangential movement property. If true, the orientation of the driven 
            objects will follow the tangent of the curve, if false, the orientation of the driven 
            objects will stay fixed in space.
            </summary>
        </member>
        <member name="M:CADability.CurveDrive.RuledSurface(CADability.CurveDrive,CADability.CurveDrive)">
            <summary>
            Returns a <see cref="T:CADability.GeoObject.Shell"/> composed of connected faces that describes the ruled surface
            which is described by a line synchronously connecting the two CurveDrives.
            </summary>
            <param name="wire1">First wire</param>
            <param name="wire2">Second wire</param>
            <returns>Shell describing the ruled surface</returns>
        </member>
        <member name="P:CADability.CurveDrive.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="P:CADability.CurveDrive.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.CurveDrive.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.CurveDrive.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.CurveDrive.LabelChanged(System.String)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.LabelChanged(System.String)"/>
            </summary>
            <param name="NewText"></param>
        </member>
        <member name="M:CADability.CurveDrive.Refresh">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Refresh"/>
            </summary>
        </member>
        <member name="P:CADability.DualCurveDrive.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="P:CADability.DualCurveDrive.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.DualCurveDrive.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.DualCurveDrive.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.DualCurveDrive.LabelChanged(System.String)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.LabelChanged(System.String)"/>
            </summary>
            <param name="NewText"></param>
        </member>
        <member name="M:CADability.DualCurveDrive.Refresh">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Refresh"/>
            </summary>
        </member>
        <member name="T:CADability.AxisDrive">
            <summary>
            Describes a rotation around an axis.
            </summary>
        </member>
        <member name="M:CADability.AxisDrive.#ctor(CADability.GeoPoint,CADability.GeoVector,System.Double)">
            <summary>
            Defines a AxisDrive object. The axis and the driven objects must be provided. The 
            position is meassured in radians.
            </summary>
            <param name="location">Location of the axis</param>
            <param name="direction">Direction of the axis</param>
            <param name="currentPosition">Current position of the object</param>
            <param name="toRotate">Objects to rotate</param>
        </member>
        <member name="P:CADability.AxisDrive.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="P:CADability.AxisDrive.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.AxisDrive.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.AxisDrive.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.AxisDrive.LabelChanged(System.String)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.LabelChanged(System.String)"/>
            </summary>
            <param name="NewText"></param>
        </member>
        <member name="M:CADability.AxisDrive.Refresh">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Refresh"/>
            </summary>
        </member>
        <member name="P:CADability.ShowPropertyDrives.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="P:CADability.ShowPropertyDrives.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.ShowPropertyDrives.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.ShowPropertyDrives.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.CurveDriveCurveProperty.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="P:CADability.CurveDriveCurveProperty.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.CurveDriveCurveProperty.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.CurveDriveCurveProperty.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.CurveDriveCurveProperty.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="M:CADability.CurveDriveCurveProperty.Removed(CADability.UserInterface.IPropertyTreeView)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Removed(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="P:CADability.AxisDriveCurveProperty.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="P:CADability.AxisDriveCurveProperty.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.AxisDriveCurveProperty.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.AxisDriveCurveProperty.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.AxisDriveCurveProperty.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="M:CADability.AxisDriveCurveProperty.Removed(CADability.UserInterface.IPropertyTreeView)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Removed(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="M:CADability.Curve2DAspect.Get3DCurve(CADability.GeoObject.ISurface)">
            <summary>
            Liefert die 3D Kurve zu diesem Objekt, wenn die Surface stimmt. Bestimmt bei geklippten Objekten
            die Start- und Endpunkte im 3D. Ansonsten ist es identisch mit der 3D Kurve
            </summary>
            <param name="onThisSurface"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Curve2DAspect.GetFused(CADability.Curve2D.ICurve2D,System.Double)">
            <summary>
            Implements <see cref="M:CADability.Curve2D.ICurve2D.GetFused(CADability.Curve2D.ICurve2D,System.Double)"/>
            </summary>
            <param name="toFuseWith"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="T:CADability.ProjectedCurve">
            <summary>
            A 2d curve as a projection of a 3d curve onto a surface. Sometimes it is easier to calculate points in 3d than in 2d. Then we use this as a more
            exact for of the curve than we get, when we approximate the curve in 2d.
            </summary>
        </member>
        <member name="M:CADability.ProjectedCurve.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.DXF.Import">
            <summary>
            Imports a DXF file, converts it to a project
            </summary>
        </member>
        <member name="M:CADability.DXF.Import.#ctor(System.String)">
            <summary>
            Create the Import instance. The document is beeing read and converted to netDXF objects.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="P:CADability.DXF.Import.Project">
            <summary>
            creates and returns the project
            </summary>
        </member>
        <member name="T:CADability.EdgeReference">
            <summary>
            Mit dieser Klasse kann eine ICurve2D in einem Border verwurstet werden, also z.B. gesplittet werden
            und man wei√ü imme noch aus welcher Edge es kommt.
            </summary>
        </member>
        <member name="T:CADability.StepEdgeDescriptor">
            <summary>
            Describes an edge as imported from a step file. The edge may be decomposed into multiple edges for CADability faces
            in case of periodic faces.
            </summary>
        </member>
        <member name="T:CADability.Edge">
            <summary>
            Edge is a abstract description of an egde on a <see cref="T:CADability.GeoObject.Face"/>. An Edge may belong to one or two faces.
            Edges don't exist without faces (use <see cref="T:CADability.GeoObject.IGeoObject"/> and <see cref="T:CADability.GeoObject.ICurve"/>derived classes for
            simple 3d curves). The Edge is defined in several ways, which are overdetermined and therfore must always
            be in a consistent state: It is the pur 3-dimensional curve, an <see cref="T:CADability.GeoObject.ICurve"/>, and on each Face
            the edge is defined as a 2-dimensional curve on the surface (see <see cref="P:CADability.GeoObject.Face.Surface"/>), which has 
            a 2-dimensional (u/v) coordinate system (parametric space).
            The Edge may be an outer or an inner edge on each face or some curve on the inside of a face (typically an
            outlining curve for a certain <see cref="T:CADability.Projection"/>). The edge may not be outside of a face.
            </summary>
        </member>
        <member name="T:CADability.Edge.EdgeKind">
            <summary>
            Kind of the edge
            </summary>
        </member>
        <member name="F:CADability.Edge.EdgeKind.unknown">
            <summary>
            Kind has not yet been determined
            </summary>
        </member>
        <member name="F:CADability.Edge.EdgeKind.projectionTangent">
            <summary>
            An edge that is only used as a projection aid. It is the outline (contour, silhouette) of
            a face, not a real edge of a face
            </summary>
        </member>
        <member name="F:CADability.Edge.EdgeKind.singleOutline">
            <summary>
            An edge that appears only on a single face and describes the outline of that face
            </summary>
        </member>
        <member name="F:CADability.Edge.EdgeKind.doubleSharp">
            <summary>
            An edge that connects two faces and represents a sharp bend
            </summary>
        </member>
        <member name="F:CADability.Edge.EdgeKind.doubleSoft">
            <summary>
            An edge that connects two faces and represents a tangential (soft) transition
            </summary>
        </member>
        <member name="F:CADability.Edge.EdgeKind.periodic">
            <summary>
            An edge that connects a single periodic face
            </summary>
        </member>
        <member name="F:CADability.Edge.EdgeKind.excluded">
            <summary>
            used internally for BRepIntersection
            </summary>
        </member>
        <member name="M:CADability.Edge.StartVertex(CADability.GeoObject.Face)">
            <summary>
            Returns the start vertex in the direction of the edge on the provided face
            </summary>
            <param name="onThisFace">The face that specifies the orientation</param>
            <returns>The requested vertex</returns>
        </member>
        <member name="M:CADability.Edge.#ctor(CADability.GeoObject.IGeoObject,CADability.GeoObject.ICurve)">
            <summary>
            INTERNAL: partial construction, must be completed by SetFace
            </summary>
            <param name="owner"></param>
            <param name="curve3d"></param>
        </member>
        <member name="M:CADability.Edge.#ctor(CADability.GeoObject.IGeoObject,CADability.GeoObject.ICurve,CADability.GeoObject.Face,CADability.Curve2D.ICurve2D,System.Boolean,CADability.GeoObject.Face,CADability.Curve2D.ICurve2D,System.Boolean)">
            <summary>
            Creates an edge which is the edge of two connected faces.
            </summary>
            <param name="curve3d">the 3-dimensional curve</param>
            <param name="primaryFace">first face</param>
            <param name="curveOnPrimaryFace">2-d curve on first face</param>
            <param name="secondaryFace">seconsd face</param>
            <param name="curveOnSecondaryFace">2-d curve on second face</param>
        </member>
        <member name="M:CADability.Edge.#ctor(CADability.GeoObject.IGeoObject,CADability.GeoObject.ICurve,CADability.GeoObject.Face,CADability.Curve2D.ICurve2D,System.Boolean)">
            <summary>
            Creates an edge which is the edge of two connected faces.
            </summary>
            <param name="curve3d">the 3-dimensional curve</param>
            <param name="primaryFace">first face</param>
            <param name="curveOnPrimaryFace">2-d curve on first face</param>
        </member>
        <member name="P:CADability.Edge.Curve3D">
            <summary>
            Gets the 3D curve of this edge. Dont modify this curve or the edge will be in an inconsistent state.
            </summary>
        </member>
        <member name="M:CADability.Edge.IsCongruent">
            <summary>
            Return true, wenn 2d and 3d curves have the same start- and endpoints
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Edge.UseVertices(Wintellect.PowerCollections.Set{CADability.Vertex},System.Double)">
            <summary>
            Use the vertices in the provided Set. If the endpoints of the curve don't coincide with one of the vertices, create a new one and add it to the set.
            </summary>
            <param name="toUse"></param>
        </member>
        <member name="M:CADability.Edge.Curve2D(CADability.GeoObject.Face)">
            <summary>
            Returns the 2-dimensional curve of this edge in the u/v system of the surface of the given face.
            If this is not an edge on the given face, null will be returned.
            </summary>
            <param name="onThisFace">on this face</param>
            <returns>the 2-dimensional curve</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CADability.Edge.Curve2D(CADability.GeoObject.Face,CADability.Curve2D.ICurve2D[])" -->
        <member name="M:CADability.Edge.Clone">
            <summary>
            Returns a new edge whith a clone of the 3d curve, but null references to <see cref="P:CADability.Edge.PrimaryFace"/> and <see cref="P:CADability.Edge.SecondaryFace"/>.
            </summary>
            <returns>Copy of this edge</returns>
        </member>
        <member name="M:CADability.Edge.Forward(CADability.GeoObject.Face)">
            <summary>
            Checks the orientation of this edge. The curve of this edge (<see cref="P:CADability.Edge.Curve3D"/>) has a 
            orientation (<see cref="!:ICurve3D.StartPoint"/> and <see cref="!:ICurve3D.EndPoint"/>). The corresponding 2d curves on the face are also oriented,
            so that seen from the outside the 2d curves are oriented counterclockwise. If the 3d curve orientation is the same as the 2d orientation on the
            provided face <paramref name="onThisFace"/>, then true is returned, otherwise false is returned.
            </summary>
            <param name="onThisFace">Face, on which the orientation of the 3d curve is checked.</param>
            <returns>true, if forward oriented, false otherwise</returns>
        </member>
        <member name="M:CADability.Edge.CheckSplit(CADability.Edge)">
            <summary>
            Stellt fest, ob diese Edge teil einer anderen Edge ist. Das das √ºber geometrische Eigenschaften l√§uft
            ist bl√∂d, denn man k√∂nnte es besser beim Erzeugen (Face.Split) bestimmen, ist aber dort sehr umst√§ndlich
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Edge.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the constructor for deserialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:CADability.Edge.ReplaceOrAddFace(CADability.GeoObject.Face,CADability.GeoObject.Face)">
            <summary>
            Replace the face "toReplace" by "replaceWith". If "toReplace" is neither primary nor secondary face of this edge, "replaceWith" will be used as 
            primary or secondary face, whichever is free (==null)
            </summary>
            <param name="toReplace"></param>
            <param name="replaceWith"></param>
        </member>
        <member name="M:CADability.Edge.IsGeometricallyEqual(CADability.Edge,CADability.Edge,System.Boolean,System.Boolean,System.Double)">
            <summary>
            Stellt fest, ob die beiden geometrisch identisch sind. Die Endpunkte sind meist schon getestet,
            die Richtung kann auch eine Rolle spielen.
            </summary>
            <param name="e1"></param>
            <param name="e2"></param>
            <param name="vertexTested"></param>
            <param name="forward"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Edge.MergeWith(CADability.Edge)">
            <summary>
            Both edges must have only a primary face set (secondaryFace==null). The provided edge "ce" is merged (fused) with this one.
            "ce" will not be usable furthermore.
            </summary>
            <param name="ce"></param>
        </member>
        <member name="M:CADability.Edge.OtherFace(CADability.GeoObject.Face)">
            <summary>
            Returns the other face, which contains this edge. If there is no such face, null will be returned.
            </summary>
            <param name="thisFace">one of the faces of this edge</param>
            <returns>the other face</returns>
        </member>
        <member name="M:CADability.Edge.FindLoop(Wintellect.PowerCollections.Set{CADability.Edge},CADability.GeoObject.Face)">
            <summary>
            Find a loop (closed list of connected edges) starting with this edges and using edges from the provided (available) set.
            </summary>
            <param name="available"></param>
            <param name="onThisFace"></param>
            <returns></returns>
        </member>
        <member name="T:CADability.EllipseFitData">
            <summary>
            aus https://github.com/seisgo/EllipseFit
            </summary>
        </member>
        <member name="M:CADability.EllipseFitData.alge2geom">
            @brief alge2geom:    algebraic parameters to geometric parameters
            @ref:    https://en.wikipedia.org/wiki/Ellipse#In_analytic_geometry
                     http:homepages.inf.ed.ac.uk/rbf/CVonline/LOCAL_COPIES/FITZGIBBON/ELLIPSE/
            @note:   The calculation of phi refer to wikipedia is not correct,
                     refer to Bob Fisher's matlab program.
                     What's more, the calculated geometric parameters can't back to
                     initial algebraic parameters from geom2alge();
        </member>
        <member name="M:CADability.EllipseFitData.geom2alge">
            @brief geom2alge:    geometric parameters to algebraic parameters
            @ref:    https://en.wikipedia.org/wiki/Ellipse#In_analytic_geometry
        </member>
        <member name="M:CADability.DirectEllipseFit.solveGeneralEigens(System.Collections.Generic.List{System.Collections.Generic.List{System.Double}},System.Collections.Generic.List{System.Collections.Generic.List{System.Double}},System.Collections.Generic.List{System.Collections.Generic.List{System.Double}})">
            @brief solveGeneralEigens:   Solve generalized eigensystem
            @note        For real eiginsystem solving.
            @param sMtrx:    6*6 square matrix in this application
            @param cMtrx:    6*6 square matrix in this application
            @param eigVV:    eigenvalues and eigenvectors, 6*7 matrix
            @return  success or failure status
        </member>
        <member name="M:CADability.DirectEllipseFit.calcEllipsePara(System.Collections.Generic.List{System.Collections.Generic.List{System.Double}})">
            @brief calcEllipsePara:  calculate ellipse parameter form eigen information
            @param eigVV:    eigenvalues and eigenvectors
            @return ellipse parameter
        </member>
        <member name="T:CADability.ExportToWebGl">
            <summary>
            Export a Model as a WebGl based html file.
            </summary>
        </member>
        <member name="P:CADability.ExportToWebGl.GenData.MemSeg.elt">
            <summary>
            Liste von Indizes in das VertexArray vtx.
            Wie diese Indizes zu verwenden sind, also tripel f√ºr Dreiecke, Paare f√ºr Linien u.s.w.
            entscheiden die Intervalle tri, lin, pnt, edg
            </summary>
        </member>
        <member name="P:CADability.ExportToWebGl.Precision">
            <summary>
            Precision for triangulation of Faces and approximation of curves to polylines.
            If no value is provided the precision will be 1/1000 of the model extend
            </summary>
        </member>
        <member name="P:CADability.ExportToWebGl.UserDataAsName">
            <summary>
            Use the value of this UserData as the name property of the object (as shown in the HTML ControlCenter)
            </summary>
        </member>
        <member name="P:CADability.ExportToWebGl.IgnoreUserData">
            <summary>
            A list of keys for UserData which will be ignored (for display in the HTML ControlCenter).
            IgnoreUserData and UseOnlyUserData are mutually exclusive.
            </summary>
        </member>
        <member name="P:CADability.ExportToWebGl.UseOnlyUserData">
            <summary>
            A list of keys for UserData which will be used (for display in the HTML ControlCenter).
            IgnoreUserData and UseOnlyUserData are mutually exclusive.
            </summary>
        </member>
        <member name="F:CADability.ExportToWebGl.HtmlTemplatePath">
            <summary>
            Location of the template html file. If no value is provided the file "CADability.WebGl.html" in the CADability installation directory will be used
            </summary>
        </member>
        <member name="F:CADability.ExportToWebGl.InitialProjectionDirection">
            <summary>
            A initial direction for the projection may be specified.
            </summary>
        </member>
        <member name="M:CADability.ExportToWebGl.#ctor(CADability.Model)">
            <summary>
            Create the ExportToWebGl class with the model to be exported
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.ExportToWebGl.WriteToFile(System.String)">
            <summary>
            Write the resulting html file to the provided location.
            </summary>
            <param name="outPath"></param>
            <returns>true on success</returns>
        </member>
        <member name="T:CADability.FFT">
             Performs an in-place complex FFT.
            
             Released under the MIT License
            
             Copyright (c) 2010 Gerald T. Beauregard
            
             Permission is hereby granted, free of charge, to any person obtaining a copy
             of this software and associated documentation files (the "Software"), to
             deal in the Software without restriction, including without limitation the
             rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
             sell copies of the Software, and to permit persons to whom the Software is
             furnished to do so, subject to the following conditions:
            
             The above copyright notice and this permission notice shall be included in
             all copies or substantial portions of the Software.
            
             THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
             IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
             FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
             AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
             LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
             FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
             IN THE SOFTWARE.
        </member>
        <member name="M:CADability.FFT.#ctor">
            
        </member>
        <member name="M:CADability.FFT.init(System.UInt32)">
             Initialize class to perform FFT of specified size.
            
             @param   logN    Log2 of FFT length. e.g. for 512 pt FFT, logN = 9.
        </member>
        <member name="M:CADability.FFT.run(System.Double[],System.Double[],System.Boolean)">
             Performs in-place complex FFT.
            
             @param   xRe     Real part of input/output
             @param   xIm     Imaginary part of input/output
             @param   inverse If true, do an inverse FFT
        </member>
        <member name="M:CADability.FFT.BitReverse(System.UInt32,System.UInt32)">
             Do bit reversal of specified number of places of an int
             For example, 1101 bit-reversed is 1011
            
             @param   x       Number to be bit-reverse.
             @param   numBits Number of bits in the number.
        </member>
        <member name="T:CADability.IFinishDeserialization">
            <summary>
            [Deprecated], 
            Implement this interface to receive the "DeserializationDone" callback after
            the object is deserialized. To receive this callback you also hav to add your
            object to the appropriate list by doing the following on the Constructor
            (SerializationInfo info, StreamingContext context): <code>
            FinishDeserialization fd = context.Context as FinishDeserialization;
            if (fd!=null) fd.Add(this);
            </code>
            </summary>
        </member>
        <member name="M:CADability.IFinishDeserialization.DeserializationDone(System.Object[])">
            <summary>
            Will be called after deserialization is done
            </summary>
        </member>
        <member name="T:CADability.FinishDeserialization">
            <summary>
            [Deprecated], 
            Container for objects that need a callback after deserialization.
            These objects must implement <see cref="T:CADability.IFinishDeserialization"/>
            </summary>
        </member>
        <member name="M:CADability.FinishDeserialization.#ctor">
            <summary>
            Creates an empty list.
            </summary>
        </member>
        <member name="M:CADability.FinishDeserialization.Add(CADability.IFinishDeserialization,System.Object[])">
            <summary>
            Add an object to the list.
            </summary>
            <param name="toAdd">The object to add</param>
        </member>
        <member name="M:CADability.FinishDeserialization.AddToContext(System.Runtime.Serialization.StreamingContext,CADability.IFinishDeserialization,System.Object[])">
            <summary>
            Each Object that implements IFinishDeserialization calls this in its
            Constructor(SerializationInfo info, StreamingContext context), to make sure
            its IFinishDeserialization.DeserializationDone after Deserialisation is done.
            </summary>
            <param name="context"></param>
            <param name="ToAdd"></param>
            <param name="data">additional data which is supplied at the call to DeserializationDone</param>
        </member>
        <member name="M:CADability.FinishDeserialization.DeserializationDone">
            <summary>
            Calls "DeserializationDone" for all the objects in the list.
            </summary>
        </member>
        <member name="T:CADability.ActiveFrame">
            <summary>
            This class provides access to the current active frame (IFrame) object.
            It is typically the one and only SingleDocumentFrame in the application but
            may be different in future, when there will be a MultiDocumenFrame.
            </summary>
        </member>
        <member name="F:CADability.ActiveFrame.Frame">
            <summary>
            Gets the currently active frame (IFrame), may be null
            </summary>
        </member>
        <member name="T:CADability.ProcessContextMenuDelegate">
            <summary>
            Delegate definition for <see cref="E:CADability.IFrame.ProcessContextMenuEvent"/>, which is raised when a context menu is about to be executed.
            </summary>
            <param name="target">The commandhandler, to which this command is targeted</param>
            <param name="MenuId">The menuid of the command (see MenuResource.xml)</param>
            <param name="Processed">Set to true, if you have processed this command and no further action is required, leave unmodified if CADability should process this command</param>
        </member>
        <member name="T:CADability.UpdateContextMenuDelegate">
            <summary>
            Delegate definition for <see cref="E:CADability.IFrame.UpdateContextMenuEvent"/>, which is raised, when a context menu is about to be displayed.
            </summary>
            <param name="target">The commandhandler, to which this command is targeted</param>
            <param name="MenuId">The menuid of the command (see MenuResource.xml)</param>
            <param name="CommandState">Yu can modify the Enabled and Checked properties of the CommandState</param>
            <param name="Processed">Set to true, when you have provided "Enabled" and "Checked" properties</param>
        </member>
        <member name="T:CADability.ProcessCommandDelegate">
            <summary>
            Delegate definition for <see cref="E:CADability.IFrame.ProcessCommandEvent"/>, which is raised when the user
            selects a menu command from the main menu.
            </summary>
            <param name="MenuId">The menuid of the command (see MenuResource.xml)</param>
            <param name="Processed">Set to true, if you have processed this command and no further action is required, leave unmodified if CADability should process this command</param>
        </member>
        <member name="T:CADability.UpdateCommandDelegate">
            <summary>
            
            </summary>
            <param name="MenuId"></param>
            <param name="CommandState"></param>
            <param name="Processed"></param>
        </member>
        <member name="P:CADability.IFrame.ActiveView">
            <summary>
            Returns the currently active view
            </summary>
        </member>
        <member name="P:CADability.IFrame.AllViews">
            <summary>
            Returns an array of all views currently open in the frame
            </summary>
        </member>
        <member name="P:CADability.IFrame.CommandHandler">
            <summary>
            Update and execute menus with this command handler
            </summary>
        </member>
        <member name="P:CADability.IFrame.Project">
            <summary>
            Returns the project that is open in this frame
            </summary>
        </member>
        <member name="M:CADability.IFrame.SetAction(CADability.Actions.Action)">
            <summary>
            Starts the provided action. The currently active action will either be aborted or
            pushed down on the action stack until the provided action terminates.
            </summary>
            <param name="Action"></param>
        </member>
        <member name="M:CADability.IFrame.RemoveActiveAction">
            <summary>
            Removes the active action froom the action stack. Usually actions terminate themselves
            by calling <see cref="M:CADability.Actions.Action.RemoveThisAction"/>.
            </summary>
        </member>
        <member name="P:CADability.IFrame.ActiveAction">
            <summary>
            Returns the currently active action. Call <see cref="M:CADability.Actions.Action.GetID"/> to find out more about 
            that action.
            </summary>
        </member>
        <member name="P:CADability.IFrame.CurrentMenuId">
            <summary>
            Returns the menu id of the currently running action
            </summary>
        </member>
        <member name="P:CADability.IFrame.SnapMode">
            <summary>
            Gets or sets the current <see cref="T:CADability.GeoObject.SnapPointFinder.SnapModes"/>
            </summary>
        </member>
        <member name="E:CADability.IFrame.ProcessCommandEvent">
            <summary>
            Provide a event handler if you want to be notified on command routed through this frame or to
            execute command handlers for some routed commands-
            </summary>
        </member>
        <member name="E:CADability.IFrame.UpdateCommandEvent">
            <summary>
            Provide a event handler if you want to control the appearnce of commands in the menu or toolbar 
            (set the enabled and check flags).
            </summary>
        </member>
        <member name="E:CADability.IFrame.ProjectClosedEvent">
            <summary>
            Provide a event handler if you want to be notified when a project is beeing closed.
            </summary>
        </member>
        <member name="E:CADability.IFrame.ProjectOpenedEvent">
            <summary>
            Provide a event handler if you want to be notified when a project is opened.
            </summary>
        </member>
        <member name="E:CADability.IFrame.ViewsChangedEvent">
            <summary>
            Provide a event handler if you want to be notified when new views are created or views are closed.
            </summary>
        </member>
        <member name="E:CADability.IFrame.ProcessContextMenuEvent">
            <summary>
            Provide a event handler if you want to be notified on contex menue commands routed through this frame or to
            execute command handlers for some routed commands-
            </summary>
        </member>
        <member name="E:CADability.IFrame.UpdateContextMenuEvent">
            <summary>
            Provide a event handler if you want to control the appearance of commands in a context the menu 
            (set the enabled and check flags).
            </summary>
        </member>
        <member name="M:CADability.IFrame.ShowPropertyDisplay(System.String)">
            <summary>
            Brings the property page with the <paramref name="Name"/> to front (in the tab control)
            </summary>
            <param name="Name"></param>
        </member>
        <member name="M:CADability.IFrame.GetActivePropertyDisplay">
            <summary>
            Returtns the name of the currently selected property page of the control center
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.IFrame.AssureModelView">
            <summary>
            If the <see cref="P:CADability.IFrame.ActiveView"/> is not a <see cref="T:CADability.ModelView"/> then the first ModelView of the current <see cref="P:CADability.IFrame.Project"/> will be displayed
            </summary>
        </member>
        <member name="M:CADability.IFrame.SetControlCenterFocus(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sets the focus to a given entry in a given tabpage of the controlcenter.
            The names of the standard tabpgaes are:
            "Action","Project","Global","View","Symbol". If resourceId is null
            only the specified tabpage is selected.
            </summary>
            <param name="tabPageName">Name of a tabpage</param>
            <param name="resourceId">resource id of an entry or null</param>
            <param name="openEntry">the subentries of this entry should be opened</param>
            <param name="popupCOntextMenu">the context menu of this entry should be displayed</param>
        </member>
        <member name="M:CADability.IFrame.GetSetting(System.String)">
            <summary>
            Gets the <see cref="T:CADability.Settings"/> for the provided <paramref name="Name"/>. First the <see cref="P:CADability.IFrame.Project"/>s settings are 
            checked, if it is not defined there, the global settings will be queried.
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.IFrame.GetBooleanSetting(System.String,System.Boolean)">
            <summary>
            Gets the boolen setting for the <paramref name="Name"/>. If not found <paramref name="Default"/> will be returned.
            <seealso cref="M:CADability.IFrame.GetSetting(System.String)"/>
            </summary>
            <param name="Name"></param>
            <param name="Default"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.IFrame.GetDoubleSetting(System.String,System.Double)">
            <summary>
            Gets the double setting for the <paramref name="Name"/>. If not found <paramref name="Default"/> will be returned.
            <seealso cref="M:CADability.IFrame.GetSetting(System.String)"/>
            </summary>
            <param name="Name"></param>
            <param name="Default"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.IFrame.GetIntSetting(System.String,System.Int32)">
            <summary>
            Gets the integer  setting for the <paramref name="Name"/>. If not found <paramref name="Default"/> will be returned.
            <seealso cref="M:CADability.IFrame.GetSetting(System.String)"/>
            </summary>
            <param name="Name"></param>
            <param name="Default"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.IFrame.GetColorSetting(System.String,System.Drawing.Color)">
            <summary>
            Gets the color setting for the <paramref name="Name"/>. If not found <paramref name="Default"/> will be returned.
            <seealso cref="M:CADability.IFrame.GetSetting(System.String)"/>
            </summary>
            <param name="Name"></param>
            <param name="Default"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.IFrame.GetStringSetting(System.String,System.String)">
            <summary>
            Gets the string setting for the <paramref name="Name"/>. If not found <paramref name="Default"/> will be returned.
            <seealso cref="M:CADability.IFrame.GetSetting(System.String)"/>
            </summary>
            <param name="Name"></param>
            <param name="Default"></param>
            <returns></returns>
        </member>
        <member name="E:CADability.IFrame.SettingChangedEvent">
            <summary>
            Register here to get notified when a setting has changed
            </summary>
        </member>
        <member name="P:CADability.IFrame.SolidModellingMode">
            <summary>
            When <see cref="T:CADability.GeoObject.Solid"/> objects get inserted into a model, this is how it will be handeled
            </summary>
        </member>
        <member name="P:CADability.IFrame.SelectedObjects">
            <summary>
            Gets or sets the selected objects. There must be no other action running when this
            property is used. If there is another action running, nothing will be set and the get
            property returns null
            </summary>
        </member>
        <member name="E:CADability.IFrame.ControlCenterCreatedEvent">
            <summary>
            This event will raised when the ControlCenter has been created. You can use the method ControlCenter.HideEntry
            to suppress entries in the ControlCenter
            </summary>
        </member>
        <member name="E:CADability.IFrame.ActionStartedEvent">
            <summary>
            Notification that a <see cref="T:CADability.Actions.Action"/> started
            </summary>
        </member>
        <member name="E:CADability.IFrame.ActionTerminatedEvent">
            <summary>
            Notification that a <see cref="T:CADability.Actions.Action"/> terminated
            </summary>
        </member>
        <member name="T:CADability.FrameImpl">
            <summary>
            A standard implementation of the IFrame interface, used by CadFrame and the old SingleDocumentFrame
            </summary>
        </member>
        <member name="P:CADability.FrameImpl.CommandHandler">
            <summary>
            Returns the <see cref="T:CADability.UserInterface.ICommandHandler">CommandHandler</see> of this frame. All menu and toolbar commands
            are routed through this command handler. If the tollbars and menus of CADability are used no action has to
            be taken. If you use your own menues or toolbars call <see cref="M:CADability.UserInterface.ICommandHandler.OnCommand(System.String)"/> and
            <see cref="M:CADability.UserInterface.ICommandHandler.OnUpdateCommand(System.String,CADability.UserInterface.CommandState)"/> for all commands concerning CADability.
            </summary>
        </member>
        <member name="P:CADability.FrameImpl.Project">
            <summary>
            Gets or sets the project handles in this farme
            </summary>
        </member>
        <member name="M:CADability.FrameImpl.SetAction(CADability.Actions.Action)">
            <summary>
            Implements <see cref="M:CADability.IFrame.SetAction(CADability.Actions.Action)"/>.
            </summary>
            <param name="Action"></param>
        </member>
        <member name="M:CADability.FrameImpl.RemoveActiveAction">
            <summary>
            Implements <see cref="M:CADability.IFrame.RemoveActiveAction"/>.
            </summary>
        </member>
        <member name="P:CADability.FrameImpl.ActiveAction">
            <summary>
            Implements <see cref="P:CADability.IFrame.ActiveAction"/>.
            </summary>
        </member>
        <member name="M:CADability.FrameImpl.SetProjectProperties">
            <summary>
            Refreshes the properties in the propertypage
            </summary>
        </member>
        <member name="M:CADability.FrameImpl.FindView(System.String)">
            <summary>
            Find a View with the provided name.
            </summary>
            <param name="name">name of the View</param>
            <returns>The View, if found, null otherwise</returns>
        </member>
        <member name="M:CADability.FrameImpl.GenerateNewProject">
            <summary>
            Generates a new project, saves the current project if necessary and sets the
            new project as the current project.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CADability.FrameImpl.SnapMode">
            <summary>
            The snapping mode for mouse movements when interactively constructing objects
            </summary>
        </member>
        <member name="M:CADability.GaussNewtonMinimizer.Solve(System.Double[],System.Int32,System.Double,System.Double,System.Double@,System.Int32@,System.Double[]@)">
            <summary>
            Solves the Gauss Newton approximation with the given <paramref name="startParameters"/> and the error function and Jacobi matrix as specified in the constructor.
            Returns the result in <paramref name="parameters"/> and returns true, if the error function of the result is less than <paramref name="errorTolerance"/>. 
            The iteration doesn't stop when <paramref name="errorTolerance"/> is reached, but goes on until no more improvement of the result ocurres.
            </summary>
            <param name="startParameters">start parameters</param>
            <param name="maxIterations">maximum number of iterations</param>
            <param name="updateLengthTolerance">not used</param>
            <param name="errorTolerance">maximum error for positiv result</param>
            <param name="minError">effective error</param>
            <param name="numIterations">number of iterations used</param>
            <param name="parameters">resulting parameters</param>
            <returns></returns>
        </member>
        <member name="M:CADability.GaussNewtonMinimizer.LineFit(CADability.IArray{CADability.GeoPoint},System.Double,CADability.GeoPoint@,CADability.GeoVector@)">
            <summary>
            Calculates the closest line approximating the provided <paramref name="points"/>.
            </summary>
            <param name="points">Points to be approximated by the line</param>
            <param name="location">Location of the line</param>
            <param name="direction">direction of the line</param>
            <returns>maximum distance to the line</returns>
        </member>
        <member name="M:CADability.GaussNewtonMinimizer.LineConnection(CADability.GeoPoint,CADability.GeoVector,CADability.GeoPoint,CADability.GeoVector,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            p1,d1 and p2,d2 define two lines. Find a point on each line (s1,s2) so that the connection of these two points has the angle a1 to the first and a2 to the second line. 
            a1 and a2 are provided as cosinus of the angles
            </summary>
            <param name="p1"></param>
            <param name="d1"></param>
            <param name="p2"></param>
            <param name="d2"></param>
            <param name="a1"></param>
            <param name="a2"></param>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GaussNewtonMinimizer.SurfaceExtrema(CADability.GeoObject.ISurface,CADability.BoundingRect,CADability.GeoObject.ISurface,CADability.BoundingRect,CADability.GeoPoint2D@,CADability.GeoPoint2D@)">
            <summary>
            Calculates a uv points on each provided surface, so that the connection of the two points is perpendicular to the surfaces at these points.
            Starts a GaussNewton approximation in the center of the provided parameter bounds
            </summary>
            <param name="surface1"></param>
            <param name="bounds1"></param>
            <param name="surface2"></param>
            <param name="bounds2"></param>
            <param name="uv1"></param>
            <param name="uv2"></param>
            <returns></returns>
        </member>
        <member name="E:CADability.GDI2DView.MouseMove">
            <summary>
            Provide an event handler for the mouse move message here if you want to manipulate the mouse input to this ModelView
            </summary>
        </member>
        <member name="E:CADability.GDI2DView.MouseDown">
            <summary>
            Provide an event handler for the mouse down message here if you want to manipulate the mouse input to this ModelView
            </summary>
        </member>
        <member name="E:CADability.GDI2DView.MouseUp">
            <summary>
            Provide an event handler for the mouse up message here if you want to manipulate the mouse input to this ModelView
            </summary>
        </member>
        <member name="E:CADability.GDI2DView.MouseWheel">
            <summary>
            Provide an event handler for the mouse wheel message here if you want to manipulate the mouse input to this ModelView
            </summary>
        </member>
        <member name="E:CADability.GDI2DView.MouseDoubleClick">
            <summary>
            Provide an event handler for the mouse double click message here if you want to manipulate the mouse input to this ModelView
            </summary>
        </member>
        <member name="M:CADability.GDI2DView.#ctor(CADability.Project,CADability.Model,CADability.IFrame)">
            <summary>
            Creates a new AnimatedView object. In oder to display this view on the screen you need to add this view to a
            <see cref="!:SingleDocumentFrame"/> and set it as the <see cref="!:SingleDocumentFrame.ActiveView"/>.
            </summary>
            <param name="project">The project that contains the lists of all schedules (if needed)</param>
            <param name="model">The model that is displayed and contains the list of all drives</param>
            <param name="frame">The frame which is the context of this view</param>
        </member>
        <member name="P:CADability.GDI2DView.ThinLinesOnly">
            <summary>
            Use only thin lines for display
            </summary>
        </member>
        <member name="P:CADability.GDI2DView.DeferRefresh">
            <summary>
            If set to true, any updates to the model will be ignored until set to false
            </summary>
        </member>
        <member name="P:CADability.GDI2DView.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="M:CADability.GDI2DView.LabelChanged(System.String)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.LabelChanged(System.String)"/>
            </summary>
            <param name="NewText"></param>
        </member>
        <member name="P:CADability.GDI2DView.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.GDI2DView.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.GDI2DView.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.GDI2DView.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="M:CADability.GDI2DView.Removed(CADability.UserInterface.IPropertyTreeView)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Removed(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="M:CADability.GDI2DView.ZoomToModelExtent(System.Double)">
            <summary>
            Zooms to the extend of the model. The projection direction is not changed.
            </summary>
            <param name="factor"></param>
        </member>
        <member name="T:CADability.DidModifyDelegate">
            <summary>
            Prototyp f√ºr die Mitteilung von √Ñnderungen. Die Zeichnung verwendet es f√ºr
            das IsModified Flag, welches gesetzt wird, wenn von irgendwo (GeoObjekte, Listen)
            dieser event kommt
            </summary>
        </member>
        <member name="T:CADability.INotifyModification">
            <summary>
            Objekte, die dieses Interface implementieren, rufen bei relevanten Ver√§nderungen
            DidModifyDelegate auf.
            </summary>
        </member>
        <member name="T:CADability.RemovingFromListEventArgs">
            <summary>
            Used as a parameter in the event <see cref="T:CADability.RemovingFromListDelegate"/>.
            When handling an appropriate event, you can prevent the object beeing removed from the list.
            </summary>
        </member>
        <member name="F:CADability.RemovingFromListEventArgs.List">
            <summary>
            The list from which the object is going to be removed.
            </summary>
        </member>
        <member name="F:CADability.RemovingFromListEventArgs.Item">
            <summary>
            The object that is going to be removed.
            </summary>
        </member>
        <member name="F:CADability.RemovingFromListEventArgs.Refuse">
            <summary>
            Set this to true if you want to prevent the object to be removed.
            </summary>
        </member>
        <member name="F:CADability.RemovingFromListEventArgs.Name">
            <summary>
            Name of the Item.
            </summary>
        </member>
        <member name="F:CADability.RemovingFromListEventArgs.ResourceID">
            <summary>
            Resource ID for errormessages that will be displayed in <see cref="M:CADability.RemovingFromListEventArgs.ItemIsUsed"/>.
            ResourceID+".ItemIsUsed" is the formattable string like "Item with the name {0} is used. Do you want to remove it anyway".
            ResourceID+".Label" is used for the Title of the message.
            </summary>
        </member>
        <member name="M:CADability.RemovingFromListEventArgs.#ctor(System.Object,System.Object,System.String,System.String)">
            <summary>
            Creates an RemovingFromListEventArgs object.
            </summary>
            <param name="List">The List, from which the object is going to be removed</param>
            <param name="Item">The object that is going to be removed</param>
        </member>
        <member name="M:CADability.RemovingFromListEventArgs.ItemIsUsed">
            <summary>
            Displays a massage telling the user that the item is still in use
            and asks the user whether the item should be removed anyway.
            </summary>
        </member>
        <member name="M:CADability.RemovingFromListEventArgs.DontRemoveLastItem">
            <summary>
            Displays a massage telling the user that the last item cannot be removed
            </summary>
        </member>
        <member name="T:CADability.RemovingFromListDelegate">
            <summary>
            List objects (e.g. <see cref="!:HatchStylelist"/>) raise this event, when an
            object is going to be removed. You may prevent this by setting the <see cref="F:CADability.RemovingFromListEventArgs.Refuse"/>
            member in <see cref="T:CADability.RemovingFromListEventArgs"/> to true.
            </summary>
        </member>
        <member name="T:CADability.INamedAttribute">
            <summary>
            All Attributes for IGeoObject objects (e.g. Layer) are identified by name. 
            They all implement this interface
            </summary>
        </member>
        <member name="P:CADability.INamedAttribute.Name">
            <summary>
            The unique name of the attribute
            </summary>
        </member>
        <member name="P:CADability.INamedAttribute.Parent">
            <summary>
            The list that contains this attribute (may also be null)
            </summary>
        </member>
        <member name="M:CADability.INamedAttribute.GetSelectionProperty(System.String,CADability.Project,CADability.GeoObject.GeoObjectList)">
            <summary>
            Gets a selection property to select an appropriate attribute from a list. 
            The current attribute can be retrieved by calling IGeoObject.GetNamedAttribute(key) and set by
            calling IGeoObject.SetNamedAttribute(key, newValue). List list of available properties should be retreived
            for the project by calling IAttributeListContainer.GetList(key).
            </summary>
            <param name="key">The unique key of the attribute</param>
            <param name="project">The project that contains the attributeList</param>
            <param name="geoObject">The object that keeps the attribute</param>
            <returns></returns>
        </member>
        <member name="T:CADability.GeneralSweptCurve">
            <summary>
            A general surface defined by a curve which is swept along a curve
            The u parameter moves along the curve "toSweep", the v parameter moves along the curve "along"
            </summary>
        </member>
        <member name="M:CADability.GeneralSweptCurve.GetProjectedCurveAlongV(CADability.GeoObject.ICurve)">
            <summary>
            Retruns the projected curve. The curve "toProject" goes in direction of v, i.e. for each v there is 
            a value for u. It starts at v=0.0 and ends at v=1.0 - or reverse. The curve "toSweep" of this surface must be planar.
            </summary>
            <param name="toProject"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeneralSweptCurve.FixedU(System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.FixedU(System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="u"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeneralSweptCurve.FixedV(System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.FixedV(System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="u"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.GeneralSweptCurve.GetModified(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetModified(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="T:CADability.Geometry">
            <summary>
            The class Geometry only contains static methods to solve some basic
            geometric tasks.
            </summary>
        </member>
        <member name="T:CADability.Geometry.GeometryException">
            <summary>
            ApplicationException derived exception class for methods in
            class <see cref="T:CADability.Geometry"/>.
            </summary>
        </member>
        <member name="M:CADability.Geometry.GeometryException.#ctor(System.String)">
            <summary>
            Constrcts a GeometryException (see ApplicationException)
            </summary>
            <param name="Message">Error message</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CADability.Geometry.sqr(System.Double)" -->
        <!-- Badly formed XML comment ignored for member "M:CADability.Geometry.sign(System.Double,System.Double)" -->
        <!-- Badly formed XML comment ignored for member "M:CADability.Geometry.quadgl(System.Double,System.Double,System.Double,System.Double@,System.Double@)" -->
        <!-- Badly formed XML comment ignored for member "M:CADability.Geometry.ragbq(System.Double,System.Double,System.Double,System.Double[])" -->
        <!-- Badly formed XML comment ignored for member "M:CADability.Geometry.ragle3(System.Double,System.Double,System.Double,System.Double,System.Double[])" -->
        <!-- Badly formed XML comment ignored for member "M:CADability.Geometry.ragle4(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double[],System.Boolean)" -->
        <member name="M:CADability.Geometry.FindSegmentsSolutionQuad(System.Double,System.Double,System.Double,System.Double,System.Double,System.Collections.Generic.List{System.Double},System.Double[])">
            <summary>
            L√∂sung f√ºr eine Gleichung 4. Grades, wobei jeweils zwischen gegebenen Segmentgrenzen eine L√∂sung sein muss
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <param name="e"></param>
            <param name="segments"></param>
            <param name="x"></param>
        </member>
        <member name="M:CADability.Geometry.lingl(System.Double[0:,0:],System.Double[],System.Double[])">
            <summary>
            L√∂st das lineare Gleichungssystem a*x=b
            </summary>
            <param name="a">Matrix der Konstanten</param>
            <param name="b">Ergebnisvektor der Gleichung</param>
            <param name="x">L√∂sungsvektor</param>
            <returns>true, linear unabh√§ngig, d.h. wenn eine L√∂sung gefunden werden konnte</returns>
        </member>
        <member name="M:CADability.Geometry.LinePar(CADability.GeoPoint2D,CADability.GeoVector2D,CADability.GeoPoint2D)">
            <summary>
            Liefert den Parameter des gegebenen Punktes auf der gegebenen Linie
            </summary>
            <param name="sp">Startpunkt der Linie</param>
            <param name="dir">Richtung der Linie</param>
            <param name="p">zu testender Punkt</param>
            <returns>der Parameter, z.B. 0.0==StartPunkt</returns>
        </member>
        <member name="M:CADability.Geometry.IntersectLL(CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoPoint2D@)">
            <summary>
            Calculates the intersectionpoint of two lines in 2d. The intersection point may be in any
            extension of the two lines.
            </summary>
            <param name="StartPoint1">Startpoint of the first line</param>
            <param name="EndPoint1">Endpoint of the first line</param>
            <param name="StartPoint2">Startpoint of the second line</param>
            <param name="EndPoint2">Endpoint of the second line</param>
            <param name="IntersectionPoint">the intersection point</param>
            <returns>true, if there is an intersection point, otherwise false </returns>
        </member>
        <member name="M:CADability.Geometry.IntersectLL(CADability.GeoPoint2D,CADability.GeoVector2D,CADability.GeoPoint2D,CADability.GeoVector2D,CADability.GeoPoint2D@)">
            <summary>
            Calculates the intersectionpoint of two lines in 2d.
            </summary>
            <param name="StartPoint1">Startpoint of the first line</param>
            <param name="dir1">Direction  of the first line</param>
            <param name="StartPoint2">Startpoint of the second line</param>
            <param name="dir2">Direction of the second line</param>
            <param name="IntersectionPoint">the intersection point</param>
            <returns>true, if there is an intersection point, otherwise false </returns>
        </member>
        <member name="M:CADability.Geometry.Dist(CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Returns the distance of the two 2d points.
            </summary>
            <param name="FirstPoint">1. point</param>
            <param name="SecondPoint">2. point</param>
            <returns>distance</returns>
        </member>
        <member name="M:CADability.Geometry.Dist(CADability.GeoPoint,CADability.GeoPoint)">
            <summary>
            Returns the distance of the two 3d points.
            </summary>
            <param name="FirstPoint">1. point</param>
            <param name="SecondPoint">2. point</param>
            <returns>distance</returns>
        </member>
        <member name="M:CADability.Geometry.DistLL(CADability.GeoPoint,CADability.GeoVector,CADability.GeoPoint,CADability.GeoVector,System.Double@,System.Double@)">
            <summary>
            Calculates the minimal distance between two lines and the parameter on the lines where the minimal
            distance occures. If the lines are parallel, the parameters will be double.MaxValue.
            The point <paramref name="l1Start"/> + <paramref name="par1"/>*<paramref name="l1Dir"/> is closest
            to the second line, and the point <paramref name="l2Start"/> + <paramref name="par2"/>*<paramref name="l2Dir"/> is closest
            to the first line.
            </summary>
            <param name="l1Start">Startpoint of the first line</param>
            <param name="l1Dir">Direction of the first line</param>
            <param name="l2Start">Startpoint of the second line</param>
            <param name="l2Dir">Direction of the second line</param>
            <param name="par1">Parameter on the first line</param>
            <param name="par2">Parameter on the second line</param>
            <returns>Minimal distance</returns>
        </member>
        <member name="M:CADability.Geometry.IntersectLL(CADability.GeoPoint,CADability.GeoVector,CADability.GeoPoint,CADability.GeoVector)">
            <summary>
            intersectionpoint of two lines in 3D. This should only be called when the two lines share a common plane. If not, the result will be in the middle
            of the closest connection of the two points. If the lines are parallel a GeometryException will be thrown.
            </summary>
            <param name="l1Start">Startpoint of first line</param>
            <param name="l1Dir">Direction of first line</param>
            <param name="l2Start">Startpoint of second line</param>
            <param name="l2Dir">Direction of second line</param>
            <returns></returns>
        </member>
        <member name="M:CADability.Geometry.OnLeftSide(CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoVector2D)">
            <summary>
            Checks whether the point P is on the left side of the line given by lstart and ldir.
            If the point lies exactly on the line, the result is false. There is no precision or epsilon test.
            <seealso cref="T:CADability.Precision"/>
            </summary>
            <param name="P">The point to test</param>
            <param name="lstart">Startpoint of the line</param>
            <param name="ldir">Direction of the line</param>
            <returns>true, if P is on the left side, false otherwise</returns>
        </member>
        <member name="M:CADability.Geometry.OnSameSide(CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Returns true, if p1 an p2 are on the same side of the line given by p3 and p4. Also returns
            true if one of the two points p1 and p2 coincide with the line (p3,p4)
            </summary>
            <param name="p1">first testpoint</param>
            <param name="p2">second testpoint</param>
            <param name="p3">first linepoint</param>
            <param name="p4">second linepoint</param>
            <returns>true if on the same side</returns>
        </member>
        <member name="M:CADability.Geometry.SegmentIntersection(CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Returns true, if the two line segments given by (p0,p1) and (p2,p3) have a common intersection. The intersection
            point is noct calculated. This Method is intended as a fast check for intersection or not. Returns true, if 
            one segment starts or ends on the other segment. 
            </summary>
            <param name="p0">first line startpoint</param>
            <param name="p1">first line endpoint</param>
            <param name="p2">second line startpoint</param>
            <param name="p3">second line endpoint</param>
            <returns>true if segment intersection</returns>
        </member>
        <member name="M:CADability.Geometry.SegmentInnerIntersection(CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Same as <see cref="M:CADability.Geometry.SegmentIntersection(CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoPoint2D)"/>, but returns true only if the intersection happens in the inside of
            the two segments, not at the endpoints
            </summary>
            <param name="p0">first line startpoint</param>
            <param name="p1">first line endpoint</param>
            <param name="p2">second line startpoint</param>
            <param name="p3">second line endpoint</param>
            <returns>true if segment intersection</returns>
        </member>
        <member name="M:CADability.Geometry.DistPL(CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoVector2D)">
            <summary>
            Returns the distance of a point from a line (2d). This might also be negative
            </summary>
            <param name="P">the point</param>
            <param name="lstart">startpoint of the line</param>
            <param name="ldir">direction of the line</param>
            <returns>distance</returns>
        </member>
        <member name="M:CADability.Geometry.DistPL(CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Returns the distance of a point from a line (2d), the distance is positive when the point is on the left side of the
            line, negative on the right side.
            </summary>
            <param name="P">the point</param>
            <param name="lstart">startpoint of the line</param>
            <param name="lend">endpoint of the line</param>
            <returns>distance</returns>
        </member>
        <member name="M:CADability.Geometry.DistPL(CADability.GeoPoint,CADability.GeoPoint,CADability.GeoPoint)">
            <summary>
            Returns the distance of a point from a line (3d)
            </summary>
            <param name="P">the point</param>
            <param name="lstart">startpoint of the line</param>
            <param name="lend">endpoint of the line</param>
            <returns>distance</returns>
        </member>
        <member name="M:CADability.Geometry.DistPL(CADability.GeoPoint,CADability.GeoPoint,CADability.GeoVector)">
            <summary>
            Returns the distance of a point from a line (3d)
            </summary>
            <param name="P">the point</param>
            <param name="lstart">startpoint of the line</param>
            <param name="ldir">direction of the line</param>
            <returns>distance</returns>
        </member>
        <member name="M:CADability.Geometry.DropPL(CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Returns the perpendicular foot point of point p on the line (lstart,lend)
            </summary>
            <param name="P">the source point</param>
            <param name="lstart">startpoint of the line</param>
            <param name="lend">endpoint of the line</param>
            <returns>footpoint</returns>
        </member>
        <member name="M:CADability.Geometry.DropPL(CADability.GeoPoint,CADability.GeoPoint,CADability.GeoPoint)">
            <summary>
            Returns the perpendicular foot point of point p on the line (s,e)
            </summary>
            <param name="P">The source point</param>
            <param name="s">Startpoint of the line</param>
            <param name="e">Endpoint of the line</param>
            <returns>Footpoint</returns>
        </member>
        <member name="M:CADability.Geometry.DropPL(CADability.GeoPoint,CADability.GeoPoint,CADability.GeoVector)">
            <summary>
            Returns the perpendicular foot point of point p on the line through s
            with direction v
            </summary>
            <param name="P">The source point</param>
            <param name="s">Startpoint of the line</param>
            <param name="v">Direction of the line</param>
            <returns>Footpoint</returns>
        </member>
        <member name="M:CADability.Geometry.DropPL(CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoVector2D)">
            <summary>
            Returns the perpendicular foot point of point p on the line through s
            with direction v
            </summary>
            <param name="P">The source point</param>
            <param name="s">Startpoint of the line</param>
            <param name="v">Direction of the line</param>
            <returns>Footpoint</returns>
        </member>
        <member name="M:CADability.Geometry.IntersectCC(CADability.GeoPoint2D,System.Double,CADability.GeoPoint2D,System.Double)">
            <summary>
            Returns the intersection points of two circles in 2d.
            The result may contain 0 to 2 points.
            </summary>
            <param name="center1">center of the first cricle</param>
            <param name="radius1">radius of the first circle</param>
            <param name="center2">center of the second cricle</param>
            <param name="radius2">radius of the second circle</param>
            <returns>intersctione points</returns>
        </member>
        <member name="M:CADability.Geometry.IntersectLC(CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoPoint2D,System.Double)">
            <summary>
            Returns the intersection points of a circle and a line in 2d.
            The result may contain 0 to 2 points.
            </summary>
            <param name="lstart">startpoint of the line</param>
            <param name="lend">endpoint of the line</param>
            <param name="center">center of the cricle</param>
            <param name="radius">radius of the circle</param>
            <returns>intersctione points</returns>
        </member>
        <member name="M:CADability.Geometry.IntersectLC(CADability.GeoPoint2D,CADability.GeoVector2D,CADability.GeoPoint2D,System.Double)">
            <summary>
            Returns the intersection points of a circle and a line in 2d.
            The result may contain 0 to 2 points.
            </summary>
            <param name="lstart">point of the line</param>
            <param name="lend">direction of the line</param>
            <param name="center">center of the cricle</param>
            <param name="radius">radius of the circle</param>
            <returns>intersctione points</returns>
        </member>
        <member name="M:CADability.Geometry.PrincipalAxis(CADability.GeoPoint2D,CADability.GeoVector2D,CADability.GeoVector2D,CADability.GeoVector2D@,CADability.GeoVector2D@,CADability.GeoPoint2D@,CADability.GeoPoint2D@,CADability.GeoPoint2D@,CADability.GeoPoint2D@,System.Boolean)">
            <summary>
            Calculates the principal axis (major and minor axis) of an ellipse
            given by its center and two arbitrary axis. Also calculates the 4 extrema 
            of the ellipse.
            </summary>
            <param name="center">Center of the Ellipse</param>
            <param name="axis1">First arbitrary axis</param>
            <param name="axis2">Second arbitrary axis</param>
            <param name="majorAxis">resulting major axis</param>
            <param name="minorAxis">resulting minor axis</param>
            <param name="left">resulting left extremum</param>
            <param name="right">resulting right extremum</param>
            <param name="bottom">resulting bottom extremum</param>
            <param name="top">resulting top extremum</param>
        </member>
        <member name="M:CADability.Geometry.AxisThroughTriangle(CADability.GeoPoint,CADability.GeoVector,CADability.GeoPoint,CADability.GeoPoint,CADability.GeoPoint)">
            <summary>
            Determins wheather an axis, defined by location and direction, goes through a triangle.
            The axis is infinite in both directions.
            </summary>
            <param name="axisLoc">Point on the axis</param>
            <param name="axisDir">Direction of the axis</param>
            <param name="t1">1. point of the triangle</param>
            <param name="t2">2. point of the triangle</param>
            <param name="t3">3. point of the triangle</param>
            <returns>true, if the axis passes through the triangle, false otherwise</returns>
        </member>
        <member name="M:CADability.Geometry.BeamThroughTriangle(CADability.GeoPoint,CADability.GeoVector,CADability.GeoPoint,CADability.GeoPoint,CADability.GeoPoint)">
            <summary>
            Determins wheather a beam, defined by location and direction, goes through a triangle.
            The beam starts at <paramref name="axisLoc"/> and extends in direction <paramref name="axisDir"/>. 
            Only the forward direction is checked.
            </summary>
            <param name="axisLoc">Startpoint of the beam</param>
            <param name="axisDir">Direction of the beam</param>
            <param name="t1">1. point of the triangle</param>
            <param name="t2">2. point of the triangle</param>
            <param name="t3">3. point of the triangle</param>
            <returns>true, if the beam passes through the triangle, false otherwise</returns>
        </member>
        <member name="M:CADability.Geometry.InnerIntersection(CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Returns true if the line segments p1->p2 and p3->p4 have an inner intersection, i.e. an intersection point inside
            the bounds of the line segment. Returns false otherwise, returns false if the intersection point coincides with
            one of the two lines
            </summary>
            <param name="p1">startpoint of the first line segment</param>
            <param name="p2">endpoint of the first line segment</param>
            <param name="p3">startpoint of the second line segment</param>
            <param name="p4">endpoint of the second line segment</param>
            <returns></returns>
        </member>
        <member name="M:CADability.Geometry.DistancePointEllipse(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32@,System.Double@,System.Double@)">
            <summary>
            Abstand Punkt Ellipse f√ºr ungederhte Ellipse mit x-Achse gr√∂√üer y-Achse aus
            http://www.geometrictools.com/Documentation/DistancePointToEllipse2.pdf
            kommt i.A. mit wenigen Iterationsschritten aus (maximal 7 bis jetzt gesehen
            </summary>
            <param name="dU"></param>
            <param name="dV"></param>
            <param name="dA"></param>
            <param name="dB"></param>
            <param name="dEpsilon"></param>
            <param name="iMax"></param>
            <param name="riIFinal"></param>
            <param name="rdX"></param>
            <param name="rdY"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Geometry.CircleFit(CADability.GeoPoint2D[],CADability.GeoPoint2D@,System.Double@)">
            <summary>
            tries to find a center and radius for a circle which best fits to the provided points
            </summary>
            <param name="points">points to fit</param>
            <param name="center">center of the circle</param>
            <param name="radius">radius of the circle</param>
            <returns>maximum error</returns>
        </member>
        <member name="M:CADability.Geometry.ReBase(CADability.GeoVector,CADability.GeoVector,CADability.GeoVector,CADability.GeoVector)">
            <summary>
            Computes the vector <paramref name="toRebase"/> in the base given by <paramref name="sysDirx"/>, <paramref name="sysDiry"/> and <paramref name="sysDirz"/>.
            </summary>
            <param name="toRebase"></param>
            <param name="sysDirx"></param>
            <param name="sysDiry"></param>
            <param name="sysDirz"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Geometry.PolynomialRoots(System.Double[])">
            <summary>
            Finds all real roots of a polynomial of arbitrary degree. The first coefficient is the one with the highest degree.
            Uses the Jenkins‚ÄìTraub algorithm.
            </summary>
            <param name="coeff">coefficients of the polynom</param>
            <returns>the roots</returns>
        </member>
        <member name="M:CADability.Geometry.AxisThrouoghFourLines(CADability.GeoPoint[],CADability.GeoVector[],CADability.GeoPoint[]@,CADability.GeoVector[]@)">
            <summary>
            Find one ore more axis (point and direction) passing through the 4 provided lines given by p and v.
            the provided lines should be pairwise non planar
            </summary>
            <param name="p"></param>
            <param name="v"></param>
            <param name="axisPnt"></param>
            <param name="axisDir"></param>
            <returns>true if a solution could be found</returns>
        </member>
        <member name="T:CADability.GeoPoint">
            <summary>
            A 3-dimensional point with double components. The components are directly accesible
            to achieve maximum speed.
            <note>
            <para>Keep in mind that this is a value type. Passing a value type as a (non ref) parameter and changing it's value
            inside the invoked method leaves the original unchanged.
            </para>
            </note>
            </summary>
        </member>
        <member name="F:CADability.GeoPoint.x">
            <summary>
            x-component
            </summary>
        </member>
        <member name="F:CADability.GeoPoint.y">
            <summary>
            y-component
            </summary>
        </member>
        <member name="F:CADability.GeoPoint.z">
            <summary>
            z-component
            </summary>
        </member>
        <member name="M:CADability.GeoPoint.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a new GeoPoint with given x and y components, z-component will be 0.0
            </summary>
            <param name="x">x-component</param>
            <param name="y">y-component</param>
        </member>
        <member name="M:CADability.GeoPoint.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new GeoPoint with given x, y and z components.
            </summary>
            <param name="x">x-component</param>
            <param name="y">y-component</param>
            <param name="z">z-component</param>
        </member>
        <member name="M:CADability.GeoPoint.#ctor(CADability.GeoPoint2D)">
            <summary>
            Creates a GeoPoint with the z-coordinate 0.0 and x,y set to p.x,p.y
            </summary>
            <param name="p">two dimensional point in the x/y Plane</param>
        </member>
        <member name="M:CADability.GeoPoint.#ctor(CADability.GeoPoint,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new GeoPoint as on offset from an existing GeoPoint.
            </summary>
            <param name="StartWith">from here</param>
            <param name="OffsetX">x-offset</param>
            <param name="OffsetY">y-offset</param>
            <param name="OffsetZ">z-offset</param>
        </member>
        <member name="M:CADability.GeoPoint.#ctor(CADability.GeoPoint,CADability.GeoPoint)">
            <summary>
            Constructs a new GeoPoint in the middle between two other GeoPoints
            </summary>
            <param name="p1">first point</param>
            <param name="p2">second point</param>
        </member>
        <member name="M:CADability.GeoPoint.#ctor(CADability.GeoPoint[])">
            <summary>
            Constructs a ne GeoPoint at the geometric middle of the provided points
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:CADability.GeoPoint.Distance(CADability.GeoPoint)">
            <summary>
            Returns the distance from this point to the given point.
            </summary>
            <param name="To">target point</param>
            <returns>distance</returns>
        </member>
        <member name="M:CADability.GeoPoint.op_Equality(CADability.GeoPoint,CADability.GeoPoint)">
            <summary>
            Determins whether two GeoPoints are exactly equal. Use <see cref="M:CADability.Precision.IsEqual(CADability.GeoPoint,CADability.GeoPoint)"/>
            if you need more control over precision.
            </summary>
            <param name="p1">first point</param>
            <param name="p2">secont point</param>
            <returns>true if equal</returns>
        </member>
        <member name="M:CADability.GeoPoint.op_Inequality(CADability.GeoPoint,CADability.GeoPoint)">
            <summary>
            Determins whether two GeoPoints are not equal. Use <see cref="M:CADability.Precision.IsEqual(CADability.GeoPoint,CADability.GeoPoint)"/>
            if you need more control over precision.
            </summary>
            <param name="p1">first point</param>
            <param name="p2">secont point</param>
            <returns>true if not equal</returns>
        </member>
        <member name="M:CADability.GeoPoint.op_Subtraction(CADability.GeoPoint,CADability.GeoPoint)">
            <summary>
            Returns the vector that points from p1 to p2.
            </summary>
            <param name="p1">first point</param>
            <param name="p2">secont point</param>
            <returns>the vector</returns>
        </member>
        <member name="M:CADability.GeoPoint.op_Addition(CADability.GeoPoint,CADability.GeoVector)">
            <summary>
            Adds a vector (offset) to a GeoPoint
            </summary>
            <param name="p">the point</param>
            <param name="v">the vector</param>
            <returns>offset point</returns>
        </member>
        <member name="M:CADability.GeoPoint.op_Subtraction(CADability.GeoPoint,CADability.GeoVector)">
            <summary>
            Subtracts a vector (offset) from a GeoPoint
            </summary>
            <param name="p">the point</param>
            <param name="v">the vector</param>
            <returns>offset point</returns>
        </member>
        <member name="M:CADability.GeoPoint.op_BitwiseOr(CADability.GeoPoint,CADability.GeoPoint)">
            <summary>
            Returns the distance of the two points
            </summary>
            <param name="p1">first point</param>
            <param name="p2">second point</param>
            <returns>the distance</returns>
        </member>
        <member name="P:CADability.GeoPoint.Origin">
            <summary>
            returns the origin, same as new GeoPoint(0.0,0.0,0.0);
            </summary>
        </member>
        <member name="P:CADability.GeoPoint.Invalid">
            <summary>
            returns new GeoPoint(NaN, NaN, NaN);
            </summary>
        </member>
        <member name="M:CADability.GeoPoint.Equals(System.Object)">
            <summary>
            Overrides object.Equals
            </summary>
            <param name="o">object to compare with</param>
            <returns>true if equal</returns>
        </member>
        <member name="M:CADability.GeoPoint.GetHashCode">
            <summary>
            Overrides object.GetHashCode()
            </summary>
            <returns>hashcode</returns>
        </member>
        <member name="M:CADability.GeoPoint.ToString">
            <summary>
            Overrides object.ToString()
            </summary>
            <returns>x.ToString()+", "+y.ToString()+", "+z.ToString()</returns>
        </member>
        <member name="M:CADability.GeoPoint.ToPointF(CADability.ModOp)">
            <summary>
            Returns this point modified by <see cref="T:CADability.ModOp"/> m as a System.Drawing.PointF
            </summary>
            <param name="m">modify by</param>
            <returns>modified point</returns>
        </member>
        <member name="M:CADability.GeoPoint.To2D">
            <summary>
            returns a 2-dimensional point by ommiting the z-component.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoPoint.ToVector">
            <summary>
            Returns the vector that points from the origin to this point
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.GeoPoint.Center(CADability.GeoPoint[])">
            <summary>
            Creates a new GeoPoint at the center of the points provided in the parameter list.
            </summary>
            <param name="p">List of points</param>
            <returns>The geometric center of p</returns>
        </member>
        <member name="M:CADability.GeoPoint.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for ISerializable
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:CADability.GeoVectorException">
            <summary>
            ApplicationException thrown by some <see cref="T:CADability.GeoVector"/> operations.
            </summary>
        </member>
        <member name="T:CADability.GeoVectorException.tExceptionType">
            <summary>
            Type of exception.
            </summary>
        </member>
        <member name="F:CADability.GeoVectorException.tExceptionType.NullVector">
            <summary>
            a null vector was involved in an operation that cannot deal with a null vector.
            </summary>
        </member>
        <member name="F:CADability.GeoVectorException.ExceptionType">
            <summary>
            Type of exception.
            </summary>
        </member>
        <member name="T:CADability.GeoVector">
            <summary>
            A 3-dimensional vector with double x,y and z components. The vector is not necessary normalized.
            <alert class="caution">
            Keep in mind that this is a value type. Passing a value type as a (non ref) parameter and changing it's value
            inside the invoked method leaves the original unchanged.
            </alert>
            </summary>
        </member>
        <member name="F:CADability.GeoVector.x">
            <summary>
            x-component
            </summary>
        </member>
        <member name="F:CADability.GeoVector.y">
            <summary>
            y-component
            </summary>
        </member>
        <member name="F:CADability.GeoVector.z">
            <summary>
            z-component
            </summary>
        </member>
        <member name="M:CADability.GeoVector.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new GeoVector with the given components
            </summary>
            <param name="x">x-component</param>
            <param name="y">y-component</param>
            <param name="z">z-component</param>
        </member>
        <member name="M:CADability.GeoVector.#ctor(CADability.GeoVector2D)">
            <summary>
            Constructs a new GeoVector from a 2d vector assumed in the xy plane
            </summary>
        </member>
        <member name="M:CADability.GeoVector.#ctor(CADability.GeoPoint,CADability.GeoPoint)">
            <summary>
            Constructs a new GeoVector which points from the  StartPoint to the EndPoint.
            </summary>
            <param name="StartPoint">from here</param>
            <param name="EndPoint">to here</param>
        </member>
        <member name="M:CADability.GeoVector.#ctor(CADability.Angle,CADability.Angle)">
            <summary>
            Constructs a new GeoVector with the given angles a longitude and latitude.
            The resulting GeoVector is normed.
            </summary>
            <param name="longitude"></param>
            <param name="latitude"></param>
        </member>
        <member name="M:CADability.GeoVector.IsNullVector">
            <summary>
            Returns true, if this vector is exactly the nullvector. Use <see cref="M:CADability.Precision.IsNullVector(CADability.GeoVector)"/>
            if you need more control over precision.
            </summary>
            <returns>true if nullvector</returns>
        </member>
        <member name="M:CADability.GeoVector.IsPerpendicular(CADability.GeoVector)">
            <summary>
            Determins whether this vector and the othe vector are perpendicular. Use <see cref="M:CADability.Precision.IsPerpendicular(CADability.GeoVector,CADability.GeoVector,System.Boolean)"/>
            if you need more control over precision.
            </summary>
            <param name="other">other vector</param>
            <returns>true if perpendicular</returns>
        </member>
        <member name="M:CADability.GeoVector.op_ExclusiveOr(CADability.GeoVector,CADability.GeoVector)">
            <summary>
            Cross product of the to vectors.
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>Cross product</returns>
        </member>
        <member name="M:CADability.GeoVector.op_UnaryNegation(CADability.GeoVector)">
            <summary>
            Reverses the driection of the given vector
            </summary>
            <param name="v">vector to reverse</param>
            <returns>reversed vector</returns>
        </member>
        <member name="M:CADability.GeoVector.op_Equality(CADability.GeoVector,CADability.GeoVector)">
            <summary>
            Determins whether the given vectors are exactly equal. Use <see cref="M:CADability.Precision.SameDirection(CADability.GeoVector,CADability.GeoVector,System.Boolean)"/>
            if you need more control over precision.
            </summary>
            <param name="v1">first operand</param>
            <param name="v2">second operand</param>
            <returns>true if equal</returns>
        </member>
        <member name="M:CADability.GeoVector.op_Inequality(CADability.GeoVector,CADability.GeoVector)">
            <summary>
            Determins whether the given vectors are not exactly equal. Use <see cref="M:CADability.Precision.SameDirection(CADability.GeoVector,CADability.GeoVector,System.Boolean)"/>
            if you need more control over precision.
            </summary>
            <param name="v1">first operand</param>
            <param name="v2">second operand</param>
            <returns>true if not equal</returns>
        </member>
        <member name="M:CADability.GeoVector.Equals(System.Object)">
            <summary>
            Overrides object.Equals.
            </summary>
            <param name="obj">object to compare with</param>
            <returns>true if exactly equal</returns>
        </member>
        <member name="M:CADability.GeoVector.GetHashCode">
            <summary>
            Overrides object.GetHashCode
            </summary>
            <returns>the hashcode</returns>
        </member>
        <member name="M:CADability.GeoVector.op_Multiply(CADability.GeoVector,CADability.GeoVector)">
            <summary>
            Calculates the scalar product (dot product, inner product) of the
            two given vectors
            </summary>
            <param name="v1">first vector</param>
            <param name="v2">second vector</param>
            <returns>the scalar product</returns>
        </member>
        <member name="M:CADability.GeoVector.op_Multiply(System.Double,CADability.GeoVector)">
            <summary>
            Scales the given vector by the given double
            </summary>
            <param name="d">factor</param>
            <param name="v">vector</param>
            <returns>scaled vector</returns>
        </member>
        <member name="M:CADability.GeoVector.op_Division(CADability.GeoVector,System.Double)">
            <summary>
            Divides the given gevcor by the given double value.
            </summary>
            <param name="v">vector</param>
            <param name="d">divider</param>
            <returns>scaled vector</returns>
        </member>
        <member name="M:CADability.GeoVector.op_Addition(CADability.GeoVector,CADability.GeoVector)">
            <summary>
            Adds the two vectors.
            </summary>
            <param name="v1">first vector</param>
            <param name="v2">second vector</param>
            <returns>sum</returns>
        </member>
        <member name="M:CADability.GeoVector.op_Subtraction(CADability.GeoVector,CADability.GeoVector)">
            <summary>
            Subtracts the second vector from the first vector
            </summary>
            <param name="v1">first vector</param>
            <param name="v2">second vector</param>
            <returns>difference</returns>
        </member>
        <member name="M:CADability.GeoVector.Cos(CADability.GeoVector,CADability.GeoVector)">
            <summary>
            Returns the cosine of the angle between the two vectors. Throws an arithmetic exception if any of the vectors
            is the nullvector.
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>Cosine of the inner angle</returns>
        </member>
        <member name="F:CADability.GeoVector.XAxis">
            <summary>
            The x-axis, same as new GeoVector(1.0,0.0,0.0);
            </summary>
        </member>
        <member name="F:CADability.GeoVector.YAxis">
            <summary>
            The y-axis, same as new GeoVector(0.0,1.0,0.0);
            </summary>
        </member>
        <member name="F:CADability.GeoVector.ZAxis">
            <summary>
            The z-axis, same as new GeoVector(0.0,0.0,1.0);
            </summary>
        </member>
        <member name="P:CADability.GeoVector.Invalid">
            <summary>
            An invalid GeoVector (NaN,NaN,NaN)
            </summary>
        </member>
        <member name="F:CADability.GeoVector.NullVector">
            <summary>
            The nullvector, same as new GeoVector(0.0,0.0,0.0);
            </summary>
        </member>
        <member name="F:CADability.GeoVector.MainAxis">
            <summary>
            Gut zum Iterieren √ºber alle Achsen
            </summary>
        </member>
        <member name="P:CADability.GeoVector.Length">
            <summary>
            Returns the length of this vector.
            </summary>
        </member>
        <member name="M:CADability.GeoVector.Norm">
            <summary>
            Normalizes this vector. After this operation the vector will have the <see cref="P:CADability.GeoVector.Length"/> 1.0
            Throws a <see cref="T:CADability.GeoVectorException"/> if the vector is the nullvector.
            </summary>
        </member>
        <member name="M:CADability.GeoVector.Reverse">
            <summary>
             Reverses this vector.
            </summary>
        </member>
        <member name="M:CADability.GeoVector.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.GeoVector.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="M:CADability.GeoVector.To2D">
            <summary>
            Returns the coresponding 2d vector by omitting the z coordinate
            </summary>
            <returns>the coresponding 2d vector</returns>
        </member>
        <member name="M:CADability.GeoVector.Bisector(CADability.GeoVector,CADability.GeoVector)">
            <summary>
            Returns the bisector vector of the two provided vectors. The result will be normalized (length = 1)
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>The bisector</returns>
        </member>
        <member name="T:CADability.Axis">
            <summary>
            An axis given by a location and a direction. There is no orientation for an
            x-direction or y-direction. If you need that use <see cref="T:CADability.CoordSys"/>
            <alert class="caution">
            Keep in mind that this is a value type. Passing a value type as a (non ref) parameter and changing it's value
            inside the invoked method leaves the original unchanged.
            </alert>
            </summary>
        </member>
        <member name="F:CADability.Axis.Location">
            <summary>
            An arbitrary location of the axis
            </summary>
        </member>
        <member name="F:CADability.Axis.Direction">
            <summary>
            The direction of the axis
            </summary>
        </member>
        <member name="M:CADability.Axis.#ctor(CADability.GeoPoint,CADability.GeoPoint)">
            <summary>
            Creates a new axis from two points
            </summary>
            <param name="StartPoint">startpoint</param>
            <param name="EndPoint">direction point</param>
        </member>
        <member name="M:CADability.Axis.#ctor(CADability.GeoPoint,CADability.GeoVector)">
            <summary>
            Creates a new axis from a location and a direction
            </summary>
            <param name="location">location</param>
            <param name="direction">direction</param>
        </member>
        <member name="M:CADability.Axis.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Axis.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.GeoPoint2D">
            <summary>
            A 2-dimensional point with double x and y components.
            <alert class="caution">
            Keep in mind that this is a value type. Passing a value type as a (non ref) parameter and changing it's value
            inside the invoked method leaves the original unchanged.
            </alert>
            </summary>
        </member>
        <member name="F:CADability.GeoPoint2D.x">
            <summary>
            x-component
            </summary>
        </member>
        <member name="F:CADability.GeoPoint2D.y">
            <summary>
            y-component
            </summary>
        </member>
        <member name="M:CADability.GeoPoint2D.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new GeoPoint2D with the given components
            </summary>
            <param name="x">x-component</param>
            <param name="y">y-component</param>
        </member>
        <member name="M:CADability.GeoPoint2D.#ctor(CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Creates a new GeoPoint2D in the middle of the two given points
            </summary>
            <param name="p1">first point</param>
            <param name="p2">second point</param>
        </member>
        <member name="M:CADability.GeoPoint2D.#ctor(CADability.GeoPoint2D,System.Double,System.Double)">
            <summary>
            Creates a new GeoPoint2D at the specified offset to the provided GeoPoint2D <paramref name="p"/>
            </summary>
            <param name="p">Original point</param>
            <param name="x">Offset in x</param>
            <param name="y">Offset in y</param>
        </member>
        <member name="M:CADability.GeoPoint2D.#ctor(CADability.GeoPoint2D,System.Double,CADability.Angle)">
            <summary>
            Creates a new GeoPoint2D at the specified offset to the provided GeoPoint2D <paramref name="c"/>
            </summary>
            <param name="c">Original point</param>
            <param name="d">Distance to the original point</param>
            <param name="a">Angle to the original point</param>
        </member>
        <member name="M:CADability.GeoPoint2D.#ctor(CADability.GeoPoint2D[])">
            <summary>
            Constructs a ne GeoPoint at the geometric middle of the provided points
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:CADability.GeoPoint2D.ToVector">
            <summary>
            Returns a 2d vector that points to this point from the origin
            </summary>
            <returns>The 2d vector</returns>
        </member>
        <member name="M:CADability.GeoPoint2D.IsLeftOf(CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Returns true, if this point is left of the given line.
            </summary>
            <param name="from">Startpoint of the line</param>
            <param name="to">Endpoint of the line</param>
            <returns>true if left</returns>
        </member>
        <member name="M:CADability.GeoPoint2D.op_Addition(CADability.GeoPoint2D,CADability.GeoVector2D)">
            <summary>
            Returns the 2D point which is the offset of <paramref name="v"/> from <paramref name="p"/>.
            </summary>
            <param name="p">Original point</param>
            <param name="v">Offset</param>
            <returns>The offset point</returns>
        </member>
        <member name="M:CADability.GeoPoint2D.op_BitwiseOr(CADability.GeoPoint2D,CADability.GeoPoint2D)">
            <summary>
            Returns the distance of the two points
            </summary>
            <param name="p1">first point</param>
            <param name="p2">second point</param>
            <returns>the distance</returns>
        </member>
        <member name="M:CADability.GeoPoint2D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.GeoPoint2D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.GeoVector2D">
            <summary>
            A two dimensional vector with double x and y components.
            <alert class="caution">
            Keep in mind that this is a value type. Passing a value type as a (non ref) parameter and changing it's value
            inside the invoked method leaves the original unchanged.
            </alert>
            </summary>
        </member>
        <member name="P:CADability.GeoVector2D.IsHorizontal">
            <summary>
            Simple test, whether the vector is more horizontal than vertical
            </summary>
        </member>
        <member name="M:CADability.GeoVector2D.Cos(CADability.GeoVector2D,CADability.GeoVector2D)">
            <summary>
            Returns the cosine of the angle between the two vectors. Throws an arithmetic exception if any of the vectors
            is the nullvector.
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>Cosine of the inner angle</returns>
        </member>
        <member name="M:CADability.GeoVector2D.IsNullVector">
            <summary>
            Returns true, if this vector is exactly the nullvector. Use <see cref="M:CADability.Precision.IsNullVector(CADability.GeoVector)"/>
            if you need more control over precision.
            </summary>
            <returns>true if nullvector</returns>
        </member>
        <member name="M:CADability.GeoVector2D.Area(CADability.GeoVector2D,CADability.GeoVector2D)">
            <summary>
            Returns the area of the parallelgram defined by the two vectors. The result will be positive
            if the sweepdirection from <paramref name="from"/> to <paramref name="to"/> is counterclockwise
            otherwise it will be negative. If you need the angle of the triangle devide the result by 2.0
            </summary>
            <param name="from">First vector</param>
            <param name="to">Second vector</param>
            <returns>the area</returns>
        </member>
        <member name="M:CADability.GeoVector2D.Orientation(CADability.GeoVector2D,CADability.GeoVector2D)">
            <summary>
            Returns a positive value if the second vector turns to the left relative to the direction of the first vector,
            a negative value if it turns to the right and 0.0 if the vectors are parallel. The value is the length of the corssproduct
            of the two vectors in 3D or the area of the paralleogram build by the two vectors.
            </summary>
            <param name="v1">First vector</param>
            <param name="v2">Second vector</param>
            <returns>The orientation</returns>
        </member>
        <member name="M:CADability.GeoVector2D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.GeoVector2D.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.Grid">
            <summary>
            The Grid settings, used only in class <see cref="T:CADability.Projection"/>.
            </summary>
        </member>
        <member name="P:CADability.Grid.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.Grid.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.Grid.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.Grid.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="M:CADability.Grid.Removed(CADability.UserInterface.IPropertyTreeView)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Removed(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView">the IPropertyTreeView from which it was removed</param>
        </member>
        <member name="M:CADability.Grid.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Grid.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="M:CADability.Hlp.GetClosest``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Get the closest object. What "closest" means is defined by the parameter <paramref name="distance"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="allObjects">the collection of objects to examine</param>
            <param name="distance">the distance function to be evaluated</param>
            <returns>the closest object or a default object (which is null for classes)</returns>
        </member>
        <member name="T:CADability.IDisplayHotSpots">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.IHotSpot">
            <summary>
            Interface implemented by HotSpots. 
            </summary>
        </member>
        <member name="M:CADability.IHotSpot.GetHotspotPosition">
            <summary>
            Gets the position of the HotSpot
            </summary>
            <returns>The position in the world coordinate system</returns>
        </member>
        <member name="P:CADability.IHotSpot.IsSelected">
            <summary>
            Sets or gets the selection state of a hotspot
            </summary>
        </member>
        <member name="M:CADability.IHotSpot.StartDrag(CADability.IFrame)">
            <summary>
            Called when the user starts dragging a hotspot, i.e. the left mouse button
            is pushed while the mouse position leaves the hotspot square.
            </summary>
        </member>
        <member name="M:CADability.IHotSpot.GetInfoText(CADability.UserInterface.InfoLevelMode)">
            <summary>
            Returns the info text to be displayed in the <see cref="!:InfoPopup"/>.
            </summary>
            <param name="Level">Requested info level (simple info or detailed info)</param>
            <returns>The info string</returns>
        </member>
        <member name="P:CADability.IHotSpot.Hidden">
            <summary>
            A hotspot may be hidden if the respective property is readonly
            </summary>
        </member>
        <member name="T:CADability.StepEdgeCollection">
            <summary>
            A collection of edges created in the course of reading a step file. Its purpose is to use the same edge for the
            use on the second face. And also to determin, when an edge had to be splitted into parts durng the import, to keep
            faces connected to the same edges.
            Find edge corresponding to two vertices and a 3d curve. There might be more than one edge connecting two vertices, that is
            why we need the curve. And the edge may have been splitted into two ore more subedges (as a result to periodic faces/surfaces)
            </summary>
        </member>
        <member name="T:CADability.InfoReader">
            <summary>
            Encapsulates the SerializationInfo.GetInfo function
            </summary>
        </member>
        <member name="M:CADability.InfoReader.Read(System.Runtime.Serialization.SerializationInfo,System.String,System.Type)">
            <summary>
            Reads the requested object. Returns null if the object cannot be read.
            Calls info.GetValue(key,type).
            </summary>
            <param name="info">the SerializationInfo object</param>
            <param name="key">the name of the object</param>
            <param name="type">the type of the requested object</param>
            <returns>the object or null</returns>
        </member>
        <member name="M:CADability.InfoReader.ReadOrCreate(System.Runtime.Serialization.SerializationInfo,System.String,System.Type,System.Object[])">
            <summary>
            Reads or creates the requested object.
            Calls info.GetValue(key,type).
            If the object cannot be read, this method tries to invoke a constructor for the
            object with the given parameters. If the constructor invokation fails null will be returned.
            </summary>
            <param name="info">the SerializationInfo object</param>
            <param name="key">the name of the object</param>
            <param name="type">the type of the requested object</param>
            <param name="args">parameters for the constructor</param>
            <returns>the read or created object</returns>
        </member>
        <member name="T:CADability.InterpolatedDualSurfaceCurve">
            <summary>
            Internal: ein Kante, gegeben durch zwei Oberfl√§chen und ein Array von 3d/2d/2d Punkten
            </summary>
        </member>
        <member name="M:CADability.InterpolatedDualSurfaceCurve.GetBoundingCube">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetBoundingCube"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.InterpolatedDualSurfaceCurve.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Modify(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.InterpolatedDualSurfaceCurve.GetExtent(System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.GetExtent(System.Double)"/>
            </summary>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.InterpolatedDualSurfaceCurve.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)"/>
            </summary>
            <param name="fromHere"></param>
            <param name="direction"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.InterpolatedDualSurfaceCurve.PaintTo3D(CADability.IPaintTo3D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.PaintTo3D(CADability.IPaintTo3D)"/>
            </summary>
            <param name="paintTo3D"></param>
        </member>
        <member name="M:CADability.InterpolatedDualSurfaceCurve.CopyGeometry(CADability.GeoObject.IGeoObject)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.CopyGeometry(CADability.GeoObject.IGeoObject)"/>
            </summary>
            <param name="ToCopyFrom"></param>
        </member>
        <member name="M:CADability.InterpolatedDualSurfaceCurve.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.JsonSerialize.FormattingStreamWriter">
            <summary>
            Force the StreamWriter to write numbers with InvariantInfo
            </summary>
        </member>
        <member name="T:CADability.JsonSerialize.Tokenizer">
            <summary>
            Read JSON files token by token
            </summary>
        </member>
        <member name="T:CADability.JsonSerialize.JsonDict">
            <summary>
            Actually a Json object: a dictionary of string->value pairs, where the value is either a string, boolean, null or List&lt;object&gt; (list of objects).
            Numbers are kept as strings, because it depends on their usage, whether they will be parsed as double, int, long, ulong, byte etc.
            </summary>
        </member>
        <member name="T:CADability.Layout">
            <summary>
            A Layout defines the placement of one or more patches on a
            paper. A patch is the projection of a model into the two dimensional space with respect to scaling, projection direction,
            visibility of layers etc. 
            A Layout can be viewed with the LayoutView and can be printed.
            </summary>
        </member>
        <member name="F:CADability.Layout.pageSettings">
            <summary>
            The printer settings.
            </summary>
        </member>
        <member name="M:CADability.Layout.#ctor(CADability.Project)">
            <summary>
            Creates an empty Layout
            </summary>
            <param name="project">The <see cref="T:CADability.Project"/> containing the layout</param>
        </member>
        <member name="M:CADability.Layout.AddPatch(CADability.Model,CADability.Projection,CADability.Shapes.Border)">
            <summary>
            Adds a "patch" to the layout. A patch is a a model with a certain
            projection placed on a section of the layout. The projection includes
            the placement of the model inside the section and the scaling.
            </summary>
            <param name="model">The model for the patch</param>
            <param name="projection">the projection for the model</param>
            <param name="area">The area on the layout</param>
        </member>
        <member name="M:CADability.Layout.RemovePatch(System.Int32)">
            <summary>
            Removes the patch with the given index
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:CADability.Layout.PatchCount">
            <summary>
            Returns the number of the patches
            </summary>
        </member>
        <member name="M:CADability.Layout.GetPatch(System.Int32,CADability.Model@,CADability.Projection@,CADability.Shapes.Border@)">
            <summary>
            Returns the data that describe the patch with the given index.
            </summary>
            <param name="index">Index of the patch</param>
            <param name="model">The model for the patch</param>
            <param name="projection">the projection for the model</param>
            <param name="area">The area on the layout</param>
        </member>
        <member name="M:CADability.Layout.SetPatch(System.Int32,CADability.Model,CADability.Projection,CADability.Shapes.Border)">
            <summary>
            Changes the data of the patch with the given index.
            </summary>
            <param name="index">Index of the patch</param>
            <param name="model">The model for the patch</param>
            <param name="projection">the projection for the model</param>
            <param name="area">The area on the layout</param>
        </member>
        <member name="T:CADability.Layout.HorizontalCenter">
            <summary>
            Horizontal positioning
            </summary>
        </member>
        <member name="T:CADability.Layout.VerticalCenter">
            <summary>
            Vertical positioning
            </summary>
        </member>
        <member name="M:CADability.Layout.CenterPatch(System.Int32,System.Double,CADability.Layout.HorizontalCenter,CADability.Layout.VerticalCenter)">
            <summary>
            Centers the patch with the given index according to the horizontal and vertical 
            center mode. If scale is 0.0 the current scaling remains unchanged.
            </summary>
            <param name="index">index of the patch</param>
            <param name="scale">scaling factor or 0.0</param>
            <param name="hor">horizontal position mode</param>
            <param name="ver">vertical position mode</param>
        </member>
        <member name="M:CADability.Layout.MovePatch(System.Int32,System.Double,System.Double)">
            <summary>
            Places the patch on the paper leaving the scalinfactor unchanged. The parameters 
            specify the position of the model origin on the paper.
            </summary>
            <param name="xPos">horizontal position of the origin</param>
            <param name="yPos">vertical position of the origin</param>
        </member>
        <member name="M:CADability.Layout.AddVisibleLayer(System.Int32,CADability.Attribute.Layer)">
            <summary>
            Marks the given Layer as visible in the context of this ProjectedModel.
            </summary>
            <param name="l">The layer</param>
        </member>
        <member name="M:CADability.Layout.RemoveVisibleLayer(System.Int32,CADability.Attribute.Layer)">
            <summary>
            Marks the given Layer as invisible in the context of this ProjectedModel.
            </summary>
            <param name="l">The layer</param>
        </member>
        <member name="M:CADability.Layout.IsLayerVisible(System.Int32,CADability.Attribute.Layer)">
            <summary>
            Determins whether the given <see cref="T:CADability.Attribute.Layer"/> is marked visible in the context of this ProjectedModel.
            </summary>
            <param name="l">The layer</param>
        </member>
        <member name="P:CADability.Layout.PaperWidth">
            <summary>
            Gets or sets the width of the total layout area. When printing the layout this 
            is assumed to be in mm
            </summary>
        </member>
        <member name="P:CADability.Layout.PaperHeight">
            <summary>
            Gets or sets the height of the total layout area. When printing the layout this 
            is assumed to be in mm
            </summary>
        </member>
        <member name="P:CADability.Layout.Name">
            <summary>
            Gets or sets the name of the layout.
            </summary>
        </member>
        <member name="M:CADability.Layout.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Used by deserialization.
            </summary>
            <param name="info">see ISerializable</param>
            <param name="context">see ISerializable</param>
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="T:CADability.LayoutPatch">
            <summary>
            Darstellung eines Patches als ShowProperty
            </summary>
        </member>
        <member name="M:CADability.LayoutPatch.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="M:CADability.LayoutPatch.Removed(CADability.UserInterface.IPropertyTreeView)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Removed(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView">the IPropertyTreeView from which it was removed</param>
        </member>
        <member name="P:CADability.LayoutPatch.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="P:CADability.LayoutPatch.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.LayoutPatch.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="M:CADability.LayoutPatch.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.LayoutView">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.LayoutView.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="M:CADability.LayoutView.Removed(CADability.UserInterface.IPropertyTreeView)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Removed(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView">the IPropertyTreeView from which it was removed</param>
        </member>
        <member name="P:CADability.LayoutView.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="M:CADability.LayoutView.LabelChanged(System.String)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.LabelChanged(System.String)"/>
            </summary>
            <param name="NewText"></param>
        </member>
        <member name="P:CADability.LayoutView.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.LayoutView.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.LayoutView.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="T:CADability.PickMode">
            <summary>
            How objects are selected or picked
            </summary>
        </member>
        <member name="F:CADability.PickMode.normal">
            <summary>
            Return one or more top level GeoObjects
            </summary>
        </member>
        <member name="F:CADability.PickMode.single">
            <summary>
            Return only one (the topmost according to the view) GeoObject
            </summary>
        </member>
        <member name="F:CADability.PickMode.onlyEdges">
            <summary>
            Return only edges of faces, shells or solids
            </summary>
        </member>
        <member name="F:CADability.PickMode.onlyFaces">
            <summary>
            Return only faces which are either top level GeoObjects or parts of shells or solids
            </summary>
        </member>
        <member name="F:CADability.PickMode.singleEdge">
            <summary>
            Return only a single edge, which is closest to the viewer
            </summary>
        </member>
        <member name="F:CADability.PickMode.singleFace">
            <summary>
            Return only a single face, which is closest to the viewer
            </summary>
        </member>
        <member name="F:CADability.PickMode.children">
            <summary>
            Return GeoObjects at the lowest level
            </summary>
        </member>
        <member name="F:CADability.PickMode.blockchildren">
            <summary>
            If a block is selected return only the selected GeoObjects at the lowest level
            </summary>
        </member>
        <member name="F:CADability.PickMode.singleChild">
            <summary>
            If a block is selected return only the selected GeoObjects at the highest level below the block
            </summary>
        </member>
        <member name="T:CADability.Model">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Model.Units">
            <summary>
            Units
            </summary>
        </member>
        <member name="F:CADability.Model.Units.millimeter">
            <summary>
            Model units are millimeters
            </summary>
        </member>
        <member name="F:CADability.Model.Units.cenitmeter">
            <summary>
            Model units are cenitmeters
            </summary>
        </member>
        <member name="F:CADability.Model.Units.meter">
            <summary>
            Model units are meters
            </summary>
        </member>
        <member name="F:CADability.Model.Units.kilometer">
            <summary>
            Model units are kilometers
            </summary>
        </member>
        <member name="F:CADability.Model.Units.inch">
            <summary>
            Model units are inches
            </summary>
        </member>
        <member name="F:CADability.Model.Units.foot">
            <summary>
            Model units are foot
            </summary>
        </member>
        <member name="T:CADability.Model.ImportingObjectsDelegate">
            <summary>
            Delegate definition for the <see cref="E:CADability.Model.ImportingObjectsEvent"/>. The handler may modify <paramref name="importedObjects"/>
            </summary>
            <param name="importedObjects">List of objects beeing imported</param>
            <param name="fileName">Name of imported file</param>
        </member>
        <member name="T:CADability.Model.AddingGeoObject">
            <summary>
            Delegate definition for the <see cref="E:CADability.Model.AddingGeoObjectEvent"/>. Setting <paramref name="cancel"/> to true prevents
            the object beeing added to the model.
            </summary>
            <param name="go">Object to be added</param>
            <param name="cancel">Parameter to prevent the adding of the object</param>
        </member>
        <member name="T:CADability.Model.RemovingGeoObject">
            <summary>
            Delegate definition for the <see cref="E:CADability.Model.RemovingGeoObjectEvent"/>. Setting <paramref name="cancel"/> to true prevents
            the object beeing removed from the model.
            </summary>
            <param name="go">Object to be added</param>
            <param name="cancel">Parameter to prevent the adding of the object</param>
        </member>
        <member name="T:CADability.Model.GeoObjectAdded">
            <summary>
            Delegate definition for the <see cref="E:CADability.Model.GeoObjectAddedEvent"/>.
            </summary>
            <param name="go">GeoObject the has been added to the model</param>
        </member>
        <member name="T:CADability.Model.GeoObjectRemoved">
            <summary>
            Delegate definition for the <see cref="E:CADability.Model.GeoObjectRemovedEvent"/>.
            </summary>
            <param name="go">GeoObject that hes been removed from the model</param>
        </member>
        <member name="T:CADability.Model.AddingGeoObjects">
            <summary>
            Delegate definition for the <see cref="E:CADability.Model.AddingGeoObjectsEvent"/>.
            </summary>
            <param name="go">Array of objects beeing added</param>
        </member>
        <member name="T:CADability.Model.RemovingGeoObjects">
            <summary>
            Delegate definition for the <see cref="E:CADability.Model.RemovingGeoObjectsEvent"/>.
            </summary>
            <param name="go">Array of objects beeing removed</param>
        </member>
        <member name="T:CADability.Model.GeoObjectsAdded">
            <summary>
            Delegate definition for the <see cref="E:CADability.Model.GeoObjectsAddedEvent"/>.
            </summary>
            <param name="go">Array of objects that have been added</param>
        </member>
        <member name="T:CADability.Model.GeoObjectsRemoved">
            <summary>
            Delegate definition for the <see cref="E:CADability.Model.GeoObjectsRemovedEvent"/>.
            </summary>
            <param name="go">Array of objects that have been removed</param>
        </member>
        <member name="T:CADability.Model.ExtentChangedDelegate">
            <summary>
            Delegate definition for the <see cref="E:CADability.Model.ExtentChangedEvent"/>.
            </summary>
            <param name="newExtent">The new extend of the model</param>
        </member>
        <member name="T:CADability.Model.NameChangedDelegate">
            <summary>
            Delegate definition for the <see cref="E:CADability.Model.NameChangedEvent"/>.
            </summary>
            <param name="sender">Model which name has changed</param>
            <param name="newName">new name of the model</param>
        </member>
        <member name="E:CADability.Model.ImportingObjectsEvent">
            <summary>
            This event will be fired when objects imported from another file are added to the model.
            The event handler can modify the list of objects, e.g. add or remove objects or combine the objects to a <see cref="T:CADability.GeoObject.Block"/>.
            </summary>
        </member>
        <member name="E:CADability.Model.AddingGeoObjectEvent">
            <summary>
            This event will be fired before an object is added to this model. The event handler can prevent the object beeing added to the model
            </summary>
        </member>
        <member name="E:CADability.Model.RemovingGeoObjectEvent">
            <summary>
            This event will be fired before an object is removed from this model. The event handler can prevent the object beeing added to the model
            </summary>
        </member>
        <member name="E:CADability.Model.GeoObjectAddedEvent">
            <summary>
            This event will be fired when an object is added to this model.
            </summary>
        </member>
        <member name="E:CADability.Model.AddingGeoObjectsEvent">
            <summary>
            This event will be fired before multiple objects are beeing added. There is no sense in modifying
            the provided array of objects. There will be an additional call to <see cref="E:CADability.Model.AddingGeoObjectEvent"/> and <see cref="E:CADability.Model.GeoObjectAddedEvent"/>
            for each objects (where you can prevent the object beeing added) and a final call to <see cref="E:CADability.Model.GeoObjectsAddedEvent"/>.
            </summary>
        </member>
        <member name="E:CADability.Model.RemovingGeoObjectsEvent">
            <summary>
            This event will be fired before multiple objects are beeing removed. There is no sense in modifying
            the provided array of objects. There will be an additional call to <see cref="E:CADability.Model.RemovingGeoObjectEvent"/> and <see cref="E:CADability.Model.GeoObjectRemovedEvent"/>
            for each objects (where you can prevent the object beeing added) and a final call to <see cref="E:CADability.Model.GeoObjectsRemovedEvent"/>.
            </summary>
        </member>
        <member name="E:CADability.Model.GeoObjectsAddedEvent">
            <summary>
            This event will be fired after multiple GeoObjects have been added, <see cref="E:CADability.Model.AddingGeoObjectsEvent"/>
            has been fired before.
            </summary>
        </member>
        <member name="E:CADability.Model.GeoObjectRemovedEvent">
            <summary>
            This event will be fired when an object is removed from this model.
            </summary>
        </member>
        <member name="E:CADability.Model.GeoObjectsRemovedEvent">
            <summary>
            This event will be fired when removing multiple objects from this model is finished.
            </summary>
        </member>
        <member name="E:CADability.Model.GeoObjectWillChangeEvent">
            <summary>
            This event will be fired when an object contained in this model is about to change.
            </summary>
        </member>
        <member name="E:CADability.Model.GeoObjectDidChangeEvent">
            <summary>
            This event will be fired when an object contained in this model did change.
            </summary>
        </member>
        <member name="E:CADability.Model.ExtentChangedEvent">
            <summary>
            This event will be fired when objects have been added, removed or modified which resulted
            in a different extent (of the bounding box) of the model.
            </summary>
        </member>
        <member name="E:CADability.Model.NameChangedEvent">
            <summary>
            This event will be fired when the name of the model changed.
            </summary>
        </member>
        <member name="M:CADability.Model.#ctor">
            <summary>
            Creates an empty model.
            </summary>
        </member>
        <member name="P:CADability.Model.Name">
            <summary>
            The name of the model.
            </summary>
        </member>
        <member name="P:CADability.Model.NoSingleAddEvents">
            <summary>
            Set to true, if you don't want <see cref="E:CADability.Model.AddingGeoObjectEvent"/> rsp. <see cref="E:CADability.Model.GeoObjectAddedEvent"/> beeing fired
            after <see cref="E:CADability.Model.AddingGeoObjectsEvent"/> rsp. <see cref="E:CADability.Model.GeoObjectsAddedEvent"/> has been called. False is the default value.
            </summary>
        </member>
        <member name="P:CADability.Model.Undo">
            <summary>
            Gets or sets the undo-system. Usually this is the undosystem of the <see cref="T:CADability.Project"/>
            containing this model.
            </summary>
        </member>
        <member name="P:CADability.Model.OctTree">
            <summary>
            Access to the <see cref="P:CADability.Model.OctTree"/> containing all geometrical objects of the model. Do not modify the octtree to avoid inconsitencies
            between model and octtree. Use the octtree for fast access to the objects in the model from geometrical constraints.
            </summary>
        </member>
        <member name="M:CADability.Model.UniteSolid(CADability.GeoObject.Solid,System.Boolean)">
            <summary>
            Unites the given solid with all other solids in the model. If there are no
            other solids or the solid is disjoint with all other solids this solid will simply bee added.
            </summary>
            <param name="solid">the solid to unite</param>
            <param name="onlySameLayer">if true: check only with solids on the same layer</param>
        </member>
        <member name="M:CADability.Model.RemoveSolid(CADability.GeoObject.Solid,System.Boolean)">
            <summary>
            Removes the given solid from all other solids in the model. If there are no solids in the model
            or this solid is disjoint with all other solids in the model there will be no effect.
            </summary>
            <param name="solid">the solid to remove</param>
            <param name="onlySameLayer">if true: check only with solids on the same layer</param>
        </member>
        <member name="M:CADability.Model.Add(CADability.GeoObject.IGeoObject)">
            <summary>
            Adds an object to this model. If the model is beeing displayed the object will appear in the view 
            immediately.
            </summary>
            <param name="ObjectToAdd">The GeoObject to add</param>
        </member>
        <member name="M:CADability.Model.Add(CADability.GeoObject.GeoObjectList)">
            <summary>
            Adds multiple GeoObjects to this model.
            </summary>
            <param name="ListToAdd">List of the GeoObjects to add</param>
        </member>
        <member name="M:CADability.Model.Add(CADability.GeoObject.IGeoObject[])">
            <summary>
            Adds multiple GeoObjects to this model.
            </summary>
            <param name="ListToAdd">Array of the GeoObjects to add</param>
        </member>
        <member name="P:CADability.Model.Count">
            <summary>
            Returns the count of GeoObjects in this model.
            </summary>
        </member>
        <member name="M:CADability.Model.Remove(CADability.GeoObject.IGeoObject[])">
            <summary>
            Removes an array of GeoObjects from this model. Objects that dont belong to the model will be ignored.
            </summary>
            <param name="ToRemove">Array of geoObjects to remove</param>
        </member>
        <member name="M:CADability.Model.Remove(CADability.GeoObject.GeoObjectList)">
            <summary>
            Removes a list of GeoObjects from this model. Objects that dont belong to the model will be ignored.
            </summary>
            <param name="ToRemove">List of GeoObjects to be removed</param>
        </member>
        <member name="M:CADability.Model.Remove(CADability.GeoObject.IGeoObject)">
            <summary>
            Removes a GeoObject from the model. If the GeoObject doesnt belong to this model it will be ignored.
            </summary>
            <param name="ToRemove">GeoObject to remove</param>
        </member>
        <member name="M:CADability.Model.RemoveAll">
            <summary>
            Remove all objects from this model.
            </summary>
        </member>
        <member name="P:CADability.Model.Item(System.Int32)">
            <summary>
            Indexer to access the GeoObjects owned by this model by index.
            </summary>
            <param name="Index">Index of the required GeoObject</param>
            <returns></returns>
        </member>
        <member name="P:CADability.Model.AllObjects">
            <summary>
            Returns a list of all objects owned by this model. Removing or adding objects from or to the returned list doesn't remove or add
            the objects from or to the model. 
            </summary>
        </member>
        <member name="P:CADability.Model.Extent">
            <summary>
            Returns the extent of the model, i.e. a bounding cube enclosing all objects.
            </summary>
        </member>
        <member name="P:CADability.Model.MinExtend">
            <summary>
            A minimal extend of the Model. This will be the extend of the Model if the Model is empty.
            This is also used in other circumstances (e.g. dieplay of the grid)
            </summary>
        </member>
        <member name="M:CADability.Model.GetExtent(CADability.Projection)">
            <summary>
            Returns a 2 dimensional bounding rctangle enclosing the projection of all GeoObjects of the model.
            </summary>
            <param name="pr">The projection to be applied to the GeoObjects</param>
            <returns></returns>
        </member>
        <member name="T:CADability.Model.CalculateExtentForZoomTotalDelegate">
            <summary>
            Delegate definition for <see cref="E:CADability.Model.CalculateExtentForZoomTotalEvent"/>. If handeled must return the
            extent which is considered as the zoom total extent.
            Standard implementation will return <c>this.Extent.Project(pr)</c>
            </summary>
            <param name="m">The Model</param>
            <param name="pr">The Projection</param>
            <returns>The extent projected to 2D</returns>
        </member>
        <member name="P:CADability.Model.AllDrives">
            <summary>
            Returns the list of all <see cref="T:CADability.IDrive">dirves</see> of this model. Only used in connection with <see cref="T:CADability.AnimatedView"/>.
            </summary>
        </member>
        <member name="P:CADability.Model.AllSchedules">
            <summary>
            Returns the list of all <see cref="T:CADability.Schedule"/>s of this model. Only used in connection with <see cref="T:CADability.AnimatedView"/>.
            </summary>
        </member>
        <member name="M:CADability.Model.IsAttributeUsed(System.Object)">
            <summary>
            Determins whether an attribute (e.g. <see cref="T:CADability.Attribute.Layer"/>, <see cref="!:LineStyle"/>) is used by any GeoObjects of this model.
            </summary>
            <param name="Attribute">Attribut to test</param>
            <returns>True, if attribute is used, false otherwise.</returns>
        </member>
        <member name="M:CADability.Model.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="P:CADability.Model.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.Model.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>, 
            </summary>
        </member>
        <member name="M:CADability.Model.LabelChanged(System.String)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.LabelChanged(System.String)"/>
            </summary>
            <param name="NewText"></param>
        </member>
        <member name="P:CADability.Model.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.Model.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.Model.ClearDisplayLists">
            <summary>
            Deprecated, still public for legacy reasons.
            </summary>
        </member>
        <member name="M:CADability.Model.GetObjectsFromRect(CADability.BoundingRect,CADability.Projection,Wintellect.PowerCollections.Set{CADability.Attribute.Layer},CADability.PickMode,CADability.Attribute.FilterList)">
            <summary>
            Returns all objects of the model that are touched by the <paramref name="pickrect"/>, whos layers are in the 
            <paramref name="visibleLayers"/> set and which are accepted by the <paramref name="filterList"/>.
            </summary>
            <param name="pickrect">Area that specifies which objects are beeing tested</param>
            <param name="projection">The projection in which the pickrect is defined</param>
            <param name="visibleLayers">Set of layers which are visible (and hence should be used for the test)</param>
            <param name="pickMode">Single or multiple objects</param>
            <param name="filterList">List of conditions</param>
            <returns>List of objects that fulfill all conditions</returns>
        </member>
        <member name="M:CADability.Model.GetObjectsFromRect(CADability.Projection.PickArea,Wintellect.PowerCollections.Set{CADability.Attribute.Layer},CADability.PickMode,CADability.Attribute.FilterList,CADability.GeoObject.GeoObjectList)">
            <summary>
            Returns all objects of the model that are touched by the <paramref name="area"/>, whos layers are in the 
            <paramref name="visibleLayers"/> set and which are accepted by the <paramref name="filterList"/>.
            </summary>
            <param name="area">Area that specifies which objects are beeing tested</param>
            <param name="visibleLayers">Set of layers which are visible (and hence should be used for the test)</param>
            <param name="pickMode">Single or multiple objects</param>
            <param name="filterList">List of conditions</param>
            <param name="toAvoid">List of objects not to select</param>
            <returns>List of objects that fulfill all conditions</returns>
        </member>
        <member name="M:CADability.Model.GetObjectsFromBox(CADability.BoundingCube)">
            <summary>
            Returns all objects of the model that are inside ore close to the provided box.
            </summary>
            <param name="box">Box from which to seek objects</param>
            <returns>List of objects in or close to the box</returns>
        </member>
        <member name="M:CADability.Model.AdjustPoint(CADability.GeoObject.SnapPointFinder,CADability.Projection,Wintellect.PowerCollections.Set{CADability.Attribute.Layer})">
            <summary>
            Adjusts the point defined by <paramref name="spf"/> (<see cref="F:CADability.GeoObject.SnapPointFinder.SourcePoint"/> and <see cref="F:CADability.GeoObject.SnapPointFinder.Projection"/>)
            according to the settings of <paramref name="spf"/> (<see cref="T:CADability.GeoObject.SnapPointFinder.SnapModes"/> and other properties)
            by checking all objects in the <paramref name="visibleLayers"/>.
            As a result <see cref="F:CADability.GeoObject.SnapPointFinder.SnapPoint"/> and <see cref="F:CADability.GeoObject.SnapPointFinder.DidSnap"/> will be set.
            </summary>
            <param name="spf">Point to be adjusted and mode how to adjust</param>
            <param name="projection">Projection</param>
            <param name="visibleLayers">Visible layers to consider</param>
        </member>
        <member name="M:CADability.Model.AdjustPoint(CADability.GeoObject.SnapPointFinder,Wintellect.PowerCollections.Set{CADability.Attribute.Layer})">
            <summary>
            Searches for the best point in this model which corresponds to the mouse position and the
            active snap modes. Mouse position and snap modes are contained in the <paramref name="spf"/>
            parameter, where also the result is returned
            </summary>
            <param name="spf">SnapPointFinder class which contains the snap mode and the mouse position</param>
            <param name="visibleLayers">Layers to be included in the search</param>
        </member>
        <member name="T:CADability.ICondorViewInternal">
            <summary>
            Service f√ºr das CondorCtrl, um verschiedene Views (ModelView u.s.w.) darstellen
            zu k√∂nnen
            </summary>
        </member>
        <member name="T:CADability.MouseFilterDelegate">
            <summary>
            Filter mouse messages to the ModelView. return true, if you want to prevent further processing of the mouse message.
            </summary>
            <param name="sender">Object which issued the event</param>
            <param name="e">Event parameters forwarded</param>
            <returns>true: prevent further processing, false: let the sender process this event</returns>
        </member>
        <member name="T:CADability.ICanvas">
            <summary>
            Interface must be implemented by a view, which is hosted in a CadCanvas
            </summary>
        </member>
        <member name="P:CADability.ICanvas.Cursor">
            <summary>
            Sets the cursor defined by the provided id
            </summary>
        </member>
        <member name="P:CADability.ICanvas.PaintTo3D">
            <summary>
            Gets the paint interface to paint the canvas
            </summary>
        </member>
        <member name="M:CADability.ICanvas.ShowView(CADability.IView)">
            <summary>
            Show the provided view in this canvas.
            </summary>
            <param name="toShow"></param>
        </member>
        <member name="M:CADability.ICanvas.GetView">
            <summary>
            Returns the view, which is connected with this canvas
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.ICanvas.PointToClient(System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="mousePosition"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.ICanvas.ShowContextMenu(CADability.UserInterface.MenuWithHandler[],System.Drawing.Point,System.Action{System.Int32})">
            <summary>
            Shows the provided <paramref name="contextMenu"/> at the provided <paramref name="viewPosition"/> on this canvas
            </summary>
            <param name="contextMenu"></param>
            <param name="viewPosition"></param>
        </member>
        <member name="M:CADability.ICanvas.ShowToolTip(System.String)">
            <summary>
            Show a tooltip with the provided text.
            </summary>
            <param name="toDisplay">the text to show or null to hide the tooltip</param>
        </member>
        <member name="P:CADability.IView.PaintType">
            <summary>
            Currently we support two types "GDI" and "3D"
            </summary>
        </member>
        <member name="P:CADability.VisibleLayers.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.VisibleLayers.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="P:CADability.VisibleLayers.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.VisibleLayers.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.VisibleLayers.OnCommand(System.String)">
            <summary>
            Implements <see cref="M:CADability.UserInterface.ICommandHandler.OnCommand(System.String)"/>
            </summary>
            <param name="MenuId"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.VisibleLayers.OnUpdateCommand(System.String,CADability.UserInterface.CommandState)">
            <summary>
            Implements <see cref="M:CADability.UserInterface.ICommandHandler.OnUpdateCommand(System.String,CADability.UserInterface.CommandState)"/>
            </summary>
            <param name="MenuId"></param>
            <param name="CommandState"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.VisibleLayers.Refresh">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Refresh"/>
            </summary>
        </member>
        <member name="T:CADability.ModelView">
            <summary>
            The ModelView is the three-dimensional presentation of a single <see cref="P:CADability.ModelView.Model"/>.
            </summary>
        </member>
        <member name="T:CADability.ModelView.BackgroungTaskHandled">
            <summary>
            Which backgroung paint tasks were handled by the PrePaintBackground event (flags, combine with "|")
            </summary>
        </member>
        <member name="F:CADability.ModelView.BackgroungTaskHandled.Nothing">
            <summary>
            Nothing handled
            </summary>
        </member>
        <member name="F:CADability.ModelView.BackgroungTaskHandled.Grid">
            <summary>
            Grid was painted
            </summary>
        </member>
        <member name="F:CADability.ModelView.BackgroungTaskHandled.DrawingPlane">
            <summary>
            Drawingplane was painted
            </summary>
        </member>
        <member name="F:CADability.ModelView.BackgroungTaskHandled.CoordCross">
            <summary>
            Coordinate cross and arrows were painted
            </summary>
        </member>
        <member name="T:CADability.ModelView.PaintBackgroundDelegate">
            <summary>
            Delegate definition for background painting event. The painting of the coordinate cross and arrows, the grid and the DrawingPlane
            can be modified using this event
            </summary>
            <param name="paintToBackground">Painting engine</param>
            <param name="modelView">ModelView issuing the event</param>
            <param name="handled">Set flags to indicate which tasks were handled</param>
        </member>
        <member name="E:CADability.ModelView.PrePaintBackground">
            <summary>
            Event to modify backgroung painting
            </summary>
        </member>
        <member name="T:CADability.ModelView.ProjectionChangedDelegate">
            <summary>
            Delegate definition for notification of changes of the view position or direction
            </summary>
            <param name="modelView">Issuing ModelView</param>
            <param name="projection">the new projection</param>
        </member>
        <member name="E:CADability.ModelView.ProjectionChangedEvent">
            <summary>
            Event for notification of view position and direction changes
            </summary>
        </member>
        <member name="E:CADability.ModelView.MouseMove">
            <summary>
            Provide an event handler for the mouse move message here if you want to manipulate the mouse input to this ModelView
            </summary>
        </member>
        <member name="E:CADability.ModelView.MouseDown">
            <summary>
            Provide an event handler for the mouse down message here if you want to manipulate the mouse input to this ModelView
            </summary>
        </member>
        <member name="E:CADability.ModelView.MouseUp">
            <summary>
            Provide an event handler for the mouse up message here if you want to manipulate the mouse input to this ModelView
            </summary>
        </member>
        <member name="E:CADability.ModelView.MouseWheel">
            <summary>
            Provide an event handler for the mouse wheel message here if you want to manipulate the mouse input to this ModelView
            </summary>
        </member>
        <member name="E:CADability.ModelView.MouseDoubleClick">
            <summary>
            Provide an event handler for the mouse double click message here if you want to manipulate the mouse input to this ModelView
            </summary>
        </member>
        <member name="M:CADability.ModelView.SetDisplayPrecision(System.Double)">
            <summary>
            Sets the precision for the display of non linear entities (e.g. arcs). Choose a small value for high precision.
            </summary>
            <param name="precision">Maximum deviation from exact position</param>
        </member>
        <member name="M:CADability.ModelView.ZoomToRect(CADability.BoundingRect)">
            <summary>
            Implements <see cref="M:CADability.IView.ZoomToRect(CADability.BoundingRect)"/>
            </summary>
            <param name="visibleRect"></param>
        </member>
        <member name="M:CADability.ModelView.ZoomToModelExtent(System.Drawing.Rectangle,System.Double)">
            <summary>
            DEPRECATED, use <see cref="M:CADability.ModelView.ZoomTotal(System.Double)"/> instead.
            </summary>
            <param name="ClientRect"></param>
            <param name="Factor"></param>
        </member>
        <member name="M:CADability.ModelView.ZoomTotal(System.Drawing.Rectangle,System.Double)">
            <summary>
            DEPRECATED, use <see cref="M:CADability.ModelView.ZoomTotal(System.Double)"/> instead.
            </summary>
            <param name="ClientRect"></param>
            <param name="Factor"></param>
        </member>
        <member name="M:CADability.ModelView.ZoomTotal(System.Double)">
            <summary>
            Zoom to the extent of the displayed model. Use 1.1 as a factor to leave some small amound of border
            area blank. Use 1.0 to exactely fit into the window
            </summary>
            <param name="Factor">Additional scaling factor</param>
        </member>
        <member name="P:CADability.ModelView.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.ModelView.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="M:CADability.ModelView.LabelChanged(System.String)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.LabelChanged(System.String)"/>
            </summary>
            <param name="NewText"></param>
        </member>
        <member name="P:CADability.ModelView.ContextMenu">
            <summary>
            Overrides <see cref="!:IShowPropertyImpl.GetContextMenu"/>, 
            returns the context menu with the id "MenuId.ModelView".
            (see <see cref="!:MenuResource.LoadContextMenu"/>)
            </summary>
        </member>
        <member name="P:CADability.ModelView.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.ModelView.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.ModelView.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="M:CADability.ModelView.Removed(CADability.UserInterface.IPropertyTreeView)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Removed(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView">the IPropertyTreeView from which it was removed</param>
        </member>
        <member name="P:CADability.ModelView.AllowDrag">
            <summary>
            Gets or sets a flag which controls the dragging from this view, whether this view may be a source to DragAndDrop.
            </summary>
        </member>
        <member name="P:CADability.ModelView.AllowDrop">
            <summary>
            Gets or sets a flag which controls whether a dragged object may be dropped on this view.
            </summary>
        </member>
        <member name="P:CADability.ModelView.AllowContextMenu">
            <summary>
            Gets or sets a flag which controls the context menu when a right mouse click in this view happens.
            </summary>
        </member>
        <member name="M:CADability.ModelView.SetProjection(CADability.GeoVector,CADability.GeoPoint,System.Double)">
            <summary>
            Set the direction of the view, the center and the scaling factor
            </summary>
            <param name="direction">The direction</param>
            <param name="center">The center in worldcoordinates</param>
            <param name="scalingFactor">World units to pixel</param>
        </member>
        <member name="T:CADability.ModOpException">
            <summary>
            Exception class for modification operations
            </summary>
        </member>
        <member name="T:CADability.ModOpException.tExceptionType">
            <summary>
            ExceptionType
            </summary>
        </member>
        <member name="F:CADability.ModOpException.tExceptionType.InversionFailed">
            <summary>
            Inversion of a <see cref="T:CADability.ModOp"/> or <see cref="T:CADability.ModOp2D"/> failed
            </summary>
        </member>
        <member name="F:CADability.ModOpException.tExceptionType.InvalidParameter">
            <summary>
            Invalid parameter specified
            </summary>
        </member>
        <member name="F:CADability.ModOpException.ExceptionType">
            <summary>
            Type of exception
            </summary>
        </member>
        <member name="T:CADability.ModOpRef">
            <summary>
            Ein "Objekt-Wrapper" um die ModOp. Manchmal ist es sinnvoll in Klassen eine
            ModOp zu halten, die ggf. noch nicht berechnet, also null ist. Hierzu dient diese
            interne Klasse.
            </summary>
        </member>
        <member name="T:CADability.ModOp2D">
            <summary>
            A 2-dimensional modification operation implemented as a homogenous matix 3*2. You can apply
            such modificaion to <see cref="T:CADability.GeoVector2D"/> and <see cref="T:CADability.GeoPoint2D"/> points or to <see cref="!:ICurve2D"/>
            implementing objects.
            </summary>
        </member>
        <member name="P:CADability.ModOp2D.Matrix">
            <summary>
            Gets or sets the 3*2 Matrix that defines this mmodification
            </summary>
        </member>
        <member name="M:CADability.ModOp2D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a modification according to the given coefficients 
            </summary>
            <param name="Matrix00"></param>
            <param name="Matrix01"></param>
            <param name="Matrix02"></param>
            <param name="Matrix10"></param>
            <param name="Matrix11"></param>
            <param name="Matrix12"></param>
        </member>
        <member name="M:CADability.ModOp2D.#ctor(CADability.GeoVector2D,CADability.GeoVector2D,CADability.GeoPoint2D)">
            <summary>
            A modification, that transforms the x-axis to v1, the y-axis to v2 and the origin to loc
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="loc"></param>
        </member>
        <member name="M:CADability.ModOp2D.GetInverse">
            <summary>
            Returns the inverse of this modification. 
            </summary>
            <returns>inverse</returns>
        </member>
        <member name="P:CADability.ModOp2D.Determinant">
            <summary>
            Gets the determinant of this modification
            </summary>
        </member>
        <member name="P:CADability.ModOp2D.Factor">
            <summary>
            Returns the scaling factor of this modification
            </summary>
        </member>
        <member name="P:CADability.ModOp2D.IsIdentity">
            <summary>
            Returns true, if this modification is the identity.
            </summary>
        </member>
        <member name="P:CADability.ModOp2D.Identity">
            <summary>
            Creates a modification which is the identity
            </summary>
        </member>
        <member name="P:CADability.ModOp2D.Null">
            <summary>
            Creates a modification which is null, i.e. no valid ModOp2D
            </summary>
        </member>
        <member name="M:CADability.ModOp2D.Translate(System.Double,System.Double)">
            <summary>
            Creates a translation
            </summary>
            <param name="dx">x-offset</param>
            <param name="dy">y-offset</param>
            <returns>resulting modification</returns>
        </member>
        <member name="M:CADability.ModOp2D.Translate(CADability.GeoVector2D)">
            <summary>
            Creates a translation
            </summary>
            <param name="offset">offset vector</param>
            <returns>resulting modification</returns>
        </member>
        <member name="M:CADability.ModOp2D.Rotate(CADability.GeoPoint2D,CADability.SweepAngle)">
            <summary>
            Creates a rotation about a fixpoint
            </summary>
            <param name="Center">the fixpoint</param>
            <param name="Rotation">the rotation angle</param>
            <returns>resulting modification</returns>
        </member>
        <member name="M:CADability.ModOp2D.Rotate(CADability.SweepAngle)">
            <summary>
            Creates a rotation about the origin
            </summary>
            <param name="Rotation">the rotation angle</param>
            <returns>resulting modification</returns>
        </member>
        <member name="M:CADability.ModOp2D.Fit(CADability.GeoVector2D[],CADability.GeoVector2D[])">
            <summary>
            Constructs a modification, that transforms the src vectors to the dst vectors.
            The length of src and dst must be 2. The resulting modification is any kind of an affinity, that 
            projects the src vectors to the dst vectors. The origin (0,0) remains fixed.
            </summary>
            <param name="src">source vectors</param>
            <param name="dst">destination vectors</param>
            <returns>resulting transformation</returns>
        </member>
        <member name="M:CADability.ModOp2D.Fit(CADability.GeoPoint2D[],CADability.GeoPoint2D[],System.Boolean)">
            <summary>
            Constructs a modification, that transforms the Src points to the Dst points.
            The length of Src and Dst must be equal and less than 4. If the length is
            1, the resulting ModOp is a translation, if the length is 2, the parameter
            DoScale decides whether the resulting ModOp is a translation and rotation 
            (DoScale==false) or translation, rotation and scaling (DoScale==true).
            If the length is 3, the resulting modification is any kind of an affinity, that 
            projects the src points to the dst points. 
            </summary>
            <param name="Src">source points</param>
            <param name="Dst">destination points</param>
            <param name="DoScale">scaling if two point pairs are given</param>
            <returns>resulting transformation</returns>
        </member>
        <member name="M:CADability.ModOp2D.op_Multiply(CADability.ModOp2D,CADability.ModOp2D)">
            <summary>
            Combines two modification into one modification. If two modifications have to be applied to
            several <see cref="T:CADability.GeoPoint2D"/>s or <see cref="T:CADability.GeoVector2D"/>s 
            it is faster to use the combination.
            </summary>
            <param name="lhs">second modification</param>
            <param name="rhs">first modification</param>
            <returns>the combination</returns>
        </member>
        <member name="M:CADability.ModOp2D.op_Multiply(CADability.ModOp2D,CADability.GeoPoint2D)">
            <summary>
            Modifies the given point by this modification.
            </summary>
            <param name="m">modification</param>
            <param name="p">point</param>
            <returns>modified point</returns>
        </member>
        <member name="M:CADability.ModOp2D.op_Multiply(CADability.ModOp2D,CADability.GeoVector2D)">
            <summary>
            Modifies the given vector by this modification
            </summary>
            <param name="m">modification</param>
            <param name="v">vector</param>
            <returns>modified vector</returns>
        </member>
        <member name="M:CADability.ModOp2D.op_Multiply(CADability.ModOp2D,System.Double)">
            <summary>
            Multiplies the double value by the scaling factor of this modification
            </summary>
            <param name="m">modification</param>
            <param name="d">input value</param>
            <returns>modified value</returns>
        </member>
        <member name="M:CADability.ModOp2D.XYPart(CADability.ModOp)">
            <summary>
            Returns a 2d ModOp which represents the 2d part of a 3d ModOp. 
            </summary>
            <param name="m">3d ModOp</param>
            <returns>2d ModOp</returns>
        </member>
        <member name="M:CADability.ModOp2D.PlaneToplane(CADability.Plane,CADability.Plane)">
            <summary>
            Returns a 2d modification, that transforms from the coordinate system of the first
            plane to the coordinate system of the second plane. If the planes ar not coincident,
            the first plane is projected onto the second plane.
            </summary>
            <param name="FromPlane">Source plane</param>
            <param name="ToPlane">Destination plane</param>
            <returns>See above</returns>
        </member>
        <member name="P:CADability.ModOp2D.Matrix2D">
            <value>
            Returns the <see cref="T:System.Drawing.Drawing2D.Matrix"/> object equivalent to this
            modification.
            </value>
        </member>
        <member name="M:CADability.ModOp2D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="T:CADability.Matrix4">
            <summary>
            Homogenuos matrix for 3 dimensions, i.e. 4x4 matrix. Mainly used for perspective views.
            </summary>
        </member>
        <member name="M:CADability.Matrix4.op_Multiply(CADability.Matrix4,CADability.GeoPoint)">
            <summary>
            Modifies the given point by this modification.
            </summary>
            <param name="m">modification</param>
            <param name="p">point</param>
            <returns>modified point</returns>
        </member>
        <member name="T:CADability.ModOp">
            <summary>
            A 3-dimensional modification operation implemented as a homogenous matrix 4*3.
            You can apply such a modification to <see cref="T:CADability.GeoPoint"/>s or <see cref="T:CADability.GeoVector"/>s
            or you can use it for GeoObjects <see cref="M:CADability.GeoObject.IGeoObject.Modify(CADability.ModOp)"/>.
            If you want to move, rotate, scale reflect or generally modify a GeoObject you will need this class.
            Use the static methods to create ModOps that do a required modification (like <see cref="M:CADability.ModOp.Rotate(System.Int32,CADability.SweepAngle)"/>, <see cref="M:CADability.ModOp.Translate(System.Double,System.Double,System.Double)"/> etc.
            </summary>
        </member>
        <member name="F:CADability.ModOp.Matrix00">
            <summary>
            Die homogene Matrix, die die Modifikationsoperation darstellt.
            Sie hat drei Zeilen und vier Spalten. Die vierte Zeile h√§tte immer
            den Wert (0,0,0,1) und wird nicht in den Daten dargestellt.
            </summary>
        </member>
        <member name="F:CADability.ModOp.Matrix01">
            <summary>
            Die homogene Matrix, die die Modifikationsoperation darstellt.
            Sie hat drei Zeilen und vier Spalten. Die vierte Zeile h√§tte immer
            den Wert (0,0,0,1) und wird nicht in den Daten dargestellt.
            </summary>
        </member>
        <member name="F:CADability.ModOp.Matrix02">
            <summary>
            Die homogene Matrix, die die Modifikationsoperation darstellt.
            Sie hat drei Zeilen und vier Spalten. Die vierte Zeile h√§tte immer
            den Wert (0,0,0,1) und wird nicht in den Daten dargestellt.
            </summary>
        </member>
        <member name="F:CADability.ModOp.Matrix03">
            <summary>
            Die homogene Matrix, die die Modifikationsoperation darstellt.
            Sie hat drei Zeilen und vier Spalten. Die vierte Zeile h√§tte immer
            den Wert (0,0,0,1) und wird nicht in den Daten dargestellt.
            </summary>
        </member>
        <member name="F:CADability.ModOp.Matrix10">
            <summary>
            Die homogene Matrix, die die Modifikationsoperation darstellt.
            Sie hat drei Zeilen und vier Spalten. Die vierte Zeile h√§tte immer
            den Wert (0,0,0,1) und wird nicht in den Daten dargestellt.
            </summary>
        </member>
        <member name="F:CADability.ModOp.Matrix11">
            <summary>
            Die homogene Matrix, die die Modifikationsoperation darstellt.
            Sie hat drei Zeilen und vier Spalten. Die vierte Zeile h√§tte immer
            den Wert (0,0,0,1) und wird nicht in den Daten dargestellt.
            </summary>
        </member>
        <member name="F:CADability.ModOp.Matrix12">
            <summary>
            Die homogene Matrix, die die Modifikationsoperation darstellt.
            Sie hat drei Zeilen und vier Spalten. Die vierte Zeile h√§tte immer
            den Wert (0,0,0,1) und wird nicht in den Daten dargestellt.
            </summary>
        </member>
        <member name="F:CADability.ModOp.Matrix13">
            <summary>
            Die homogene Matrix, die die Modifikationsoperation darstellt.
            Sie hat drei Zeilen und vier Spalten. Die vierte Zeile h√§tte immer
            den Wert (0,0,0,1) und wird nicht in den Daten dargestellt.
            </summary>
        </member>
        <member name="F:CADability.ModOp.Matrix20">
            <summary>
            Die homogene Matrix, die die Modifikationsoperation darstellt.
            Sie hat drei Zeilen und vier Spalten. Die vierte Zeile h√§tte immer
            den Wert (0,0,0,1) und wird nicht in den Daten dargestellt.
            </summary>
        </member>
        <member name="F:CADability.ModOp.Matrix21">
            <summary>
            Die homogene Matrix, die die Modifikationsoperation darstellt.
            Sie hat drei Zeilen und vier Spalten. Die vierte Zeile h√§tte immer
            den Wert (0,0,0,1) und wird nicht in den Daten dargestellt.
            </summary>
        </member>
        <member name="F:CADability.ModOp.Matrix22">
            <summary>
            Die homogene Matrix, die die Modifikationsoperation darstellt.
            Sie hat drei Zeilen und vier Spalten. Die vierte Zeile h√§tte immer
            den Wert (0,0,0,1) und wird nicht in den Daten dargestellt.
            </summary>
        </member>
        <member name="F:CADability.ModOp.Matrix23">
            <summary>
            Die homogene Matrix, die die Modifikationsoperation darstellt.
            Sie hat drei Zeilen und vier Spalten. Die vierte Zeile h√§tte immer
            den Wert (0,0,0,1) und wird nicht in den Daten dargestellt.
            </summary>
        </member>
        <member name="T:CADability.ModOp.ModificationMode">
            <summary>
            Kind of operation
            </summary>
        </member>
        <member name="F:CADability.ModOp.ModificationMode.Identity">
            <summary>
            Identity: leaves everything unchanged
            </summary>
        </member>
        <member name="F:CADability.ModOp.ModificationMode.Rotation">
            <summary>
            Rotation: rotation about an axis
            </summary>
        </member>
        <member name="F:CADability.ModOp.ModificationMode.Translation">
            <summary>
            Translation: moves <see cref="T:CADability.GeoPoint"/>s, leaves <see cref="T:CADability.GeoVector"/>s unchanged,
            </summary>
        </member>
        <member name="F:CADability.ModOp.ModificationMode.PntMirror">
            <summary>
            PntMirror: reflection about a point,
            </summary>
        </member>
        <member name="F:CADability.ModOp.ModificationMode.Ax1Mirror">
            <summary>
            Ax1Mirror: reflection about an axis,
            </summary>
        </member>
        <member name="F:CADability.ModOp.ModificationMode.Ax2Mirror">
            <summary>
            Ax2Mirror: reflection at a plane,
            </summary>
        </member>
        <member name="F:CADability.ModOp.ModificationMode.Scale">
            <summary>
            Scale: scaling,
            </summary>
        </member>
        <member name="F:CADability.ModOp.ModificationMode.CompoundTrsf">
            <summary>
            CompoundTrsf: combination of the modes mentioned before
            </summary>
        </member>
        <member name="F:CADability.ModOp.ModificationMode.Other">
            <summary>
            Other: distortion
            </summary>
        </member>
        <member name="P:CADability.ModOp.Mode">
            <summary>
            Gets the kind of operation this ModOp performs.
            </summary>
        </member>
        <member name="P:CADability.ModOp.Factor">
            <summary>
            Gets the scaling factor if appropriate
            </summary>
        </member>
        <member name="P:CADability.ModOp.Matrix">
            <summary>
            Gets or sets the Matrix that defines this mmodification
            </summary>
        </member>
        <member name="M:CADability.ModOp.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a modification according to the given coefficients 
            </summary>
            <param name="m00"></param>
            <param name="m01"></param>
            <param name="m02"></param>
            <param name="m03"></param>
            <param name="m10"></param>
            <param name="m11"></param>
            <param name="m12"></param>
            <param name="m13"></param>
            <param name="m20"></param>
            <param name="m21"></param>
            <param name="m22"></param>
            <param name="m23"></param>
        </member>
        <member name="P:CADability.ModOp.Identity">
            <summary>
            Creates a modification that leaves everything unchanged.
            </summary>
        </member>
        <member name="P:CADability.ModOp.Null">
            <summary>
            Creates a modification that makes everythin to 0
            </summary>
        </member>
        <member name="M:CADability.ModOp.Project(CADability.GeoPoint)">
            <summary>
            Modifies the given 3 dimensional point and returns the 2d point, omitting the z-coordinate
            </summary>
            <param name="p">the point to project</param>
            <returns>resulting 2d point</returns>
        </member>
        <member name="M:CADability.ModOp.Project(CADability.GeoVector)">
            <summary>
            Modifies the given 3 dimensional vector and returns the 2d vector, omitting the z-coordinate
            </summary>
            <param name="p">the vector to project</param>
            <returns>the resulting vector</returns>
        </member>
        <member name="M:CADability.ModOp.Transform(CADability.CoordSys,CADability.CoordSys)">
            <summary>
            Constructs a ModOp, that maps the Src coordinate system to the Dst coordinate system
            </summary>
            <param name="Src">source coordinate system</param>
            <param name="Dst">destination coordinate system</param>
            <returns>resulting transformation</returns>
        </member>
        <member name="M:CADability.ModOp.Translate(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a ModOp, that performs a translation by the given offsets
            </summary>
            <param name="dx">offset in direction of the x-axis</param>
            <param name="dy">offset in direction of the y-axis</param>
            <param name="dz">offset in direction of the z-axis</param>
            <returns>resulting transformation</returns>
        </member>
        <member name="M:CADability.ModOp.Translate(CADability.GeoVector)">
            <summary>
            Constructs a ModOp, that performs a translation by the given offset vector
            </summary>
            <param name="offset">offset vector</param>
            <returns>resulting transformation</returns>
        </member>
        <member name="M:CADability.ModOp.Rotate(CADability.GeoVector,CADability.SweepAngle)">
            <summary>
            Creates a modification that performs a rotation about an axis through the origina
            </summary>
            <param name="Axis">direction of the axis</param>
            <param name="Rotation">rotation angle</param>
            <returns>the resulting modification</returns>
        </member>
        <member name="M:CADability.ModOp.Rotate(CADability.GeoPoint,CADability.GeoVector,CADability.SweepAngle)">
            <summary>
            Creates a modification that performs a rotation about an axis through the given point
            </summary>
            <param name="FixPoint">point on the axis</param>
            <param name="Axis">direction of the axis</param>
            <param name="Rotation">rotation angle</param>
            <returns>the resulting modification</returns>
        </member>
        <member name="M:CADability.ModOp.Rotate(CADability.GeoPoint,CADability.GeoVector,CADability.GeoVector)">
            <summary>
            Creates a rotation around the fixpoint that moves the vector <paramref name="from"/> to the vector <paramref name="to"/>.
            </summary>
            <param name="FixPoint">Fixpoint for the rotation</param>
            <param name="from">Source vector</param>
            <param name="to">Destination vector</param>
            <returns>The modification that performs the rotation</returns>
        </member>
        <member name="M:CADability.ModOp.Scale(System.Double)">
            <summary>
            Creates a modification that performs a scaling about the origin
            </summary>
            <param name="Factor">scaling factor</param>
            <returns>the resulting modification</returns>
        </member>
        <member name="M:CADability.ModOp.Scale(CADability.GeoPoint,System.Double)">
            <summary>
            Creates a modification that performs a scaling about a given point
            </summary>
            <param name="FixPoint">fixpoint for the scaling</param>
            <param name="Factor">scaling factor</param>
            <returns>the resulting modification</returns>
        </member>
        <member name="M:CADability.ModOp.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Creates a modification that performs a scaling with different factors
            in x,y and z direction
            </summary>
            <param name="FactorX">scaling in the direction of the x-axis</param>
            <param name="FactorY">scaling in the direction of the y-axis</param>
            <param name="FactorZ">scaling in the direction of the z-axis</param>
            <returns>the resulting modification</returns>
        </member>
        <member name="M:CADability.ModOp.Scale(CADability.GeoVector,System.Double)">
            <summary>
            Creates a modification that performs a scaling in a given direction
            </summary>
            <param name="Factor">scaling factor for the given direction</param>
            <param name="Direction">direction for the scaling</param>
            <returns>the resulting modification</returns>
        </member>
        <member name="M:CADability.ModOp.Scale(CADability.GeoPoint,CADability.GeoVector,System.Double)">
            <summary>
            Creates a modification that performs a scaling in a given direction with a fixpoint
            </summary>
            <param name="Factor">scaling factor for the given direction</param>
            <param name="Direction">direction for the scaling</param>
            <param name="FixPoint">fixpoint for the scaling</param>
            <returns>the resulting modification</returns>
        </member>
        <member name="M:CADability.ModOp.ReflectPlane">
            <summary>
            Constructs a ModOp, that performs a reflection about the y/z plane
            </summary>
            <returns>resulting transformation</returns>
        </member>
        <member name="M:CADability.ModOp.ReflectPlane(CADability.Plane)">
            <summary>
            Constructs a ModOp, that performs a reflection about the given plane
            </summary>
            <param name="pln">plane for reflection</param>
            <returns>resulting transformation</returns>
        </member>
        <member name="M:CADability.ModOp.ReflectPoint(CADability.GeoPoint)">
            <summary>
            Constructs a ModOp, that performs a reflection about the given point
            </summary>
            <param name="pln">point for reflection</param>
            <returns>resulting transformation</returns>
        </member>
        <member name="M:CADability.ModOp.Fit(CADability.GeoPoint[],CADability.GeoPoint[],System.Boolean)">
            <summary>
            Constructs a ModOp, that transforms the Src points to the Dst points.
            The length of Src and Dst must be equal and less than 5. If the length is
            1, the resulting ModOp is a translation, if the length is 2, the parameter
            DoScale decides whether the resulting ModOp is a translation and rotation 
            (DoScale==false) or translation, rotation and scaling (DoScale==true).
            If the length is 3 or 4, the resulting ModOp is any kind of an affinity, that 
            projects the src points to the dst points. 
            </summary>
            <param name="Src">source points</param>
            <param name="Dst">destination points</param>
            <param name="DoScale">scaling if two point pairs are given</param>
            <returns>resulting transformation</returns>
        </member>
        <member name="M:CADability.ModOp.op_Multiply(CADability.ModOp,CADability.ModOp)">
            <summary>
            Combines two modification into one modification. If two modifications have to be applied to
            several <see cref="T:CADability.GeoPoint"/>s or <see cref="T:CADability.GeoVector"/>s or to <see cref="!:IGeoObject"/>s
            it is faster to use the combination.
            </summary>
            <param name="lhs">second modification</param>
            <param name="rhs">first modification</param>
            <returns>the combination</returns>
        </member>
        <member name="M:CADability.ModOp.GetInverse">
            <summary>
            Returns the inverse of this modification. 
            </summary>
            <returns>inverse</returns>
        </member>
        <member name="P:CADability.ModOp.Determinant">
            <summary>
            Returns the determinant of the matrix of this modification.
            </summary>
        </member>
        <member name="P:CADability.ModOp.Oriented">
            <summary>
            Gets the orientation of this ModOp. True means orientation is preserved (e.g. lefthanded yields lefthanded), false
            means orientation is reversed (lefthanded yields righthanded and vice versa) when this ModOp is applied to vectors.
            </summary>
        </member>
        <member name="P:CADability.ModOp.IsOrthogonal">
            <summary>
            Returns true if orthogonal vectors stay orthogonal after transformation and no scaling is performed
            </summary>
        </member>
        <member name="P:CADability.ModOp.IsIsogonal">
            <summary>
            Same as <see cref="P:CADability.ModOp.IsOrthogonal"/> but with scaling allowed
            </summary>
        </member>
        <member name="P:CADability.ModOp.IsNull">
            <summary>
            Returns true for ModOps that are 0.0 in all components. Uninitialized ModOp objects will return true.
            Usually used for a test, whether it has been initialized, since a 0 ModOp shouldn't occur in normal circumstances.
            </summary>
        </member>
        <member name="P:CADability.ModOp.Translation">
            <summary>
            Returns the translation vector of this ModOp
            </summary>
        </member>
        <member name="M:CADability.ModOp.op_Multiply(CADability.ModOp,CADability.GeoPoint)">
            <summary>
            Modifies the given point by this modification.
            </summary>
            <param name="m">modification</param>
            <param name="p">point</param>
            <returns>modified point</returns>
        </member>
        <member name="M:CADability.ModOp.op_Multiply(CADability.ModOp,CADability.GeoPoint2D)">
            <summary>
            Modifies the given 2d point by this modification. The point is assumed in the x/y plane
            </summary>
            <param name="m">modification</param>
            <param name="p">point</param>
            <returns>modified point</returns>
        </member>
        <member name="M:CADability.ModOp.op_Multiply(CADability.ModOp,CADability.GeoVector)">
            <summary>
            Modifies the given vector by this modification
            </summary>
            <param name="m">modification</param>
            <param name="v">vector</param>
            <returns>modified vector</returns>
        </member>
        <member name="M:CADability.ModOp.op_Multiply(CADability.ModOp,CADability.GeoVector2D)">
            <summary>
            Modifies the given 2d vector by this modification, The vector is assumed in the x/y plane
            </summary>
            <param name="m">modification</param>
            <param name="v">vector</param>
            <returns>modified vector</returns>
        </member>
        <member name="M:CADability.ModOp.op_Multiply(CADability.ModOp,System.Double)">
            <summary>
            Multiplies the double value by the scaling factor of this modification
            </summary>
            <param name="m">modification</param>
            <param name="d">input value</param>
            <returns>modified value</returns>
        </member>
        <member name="M:CADability.ModOp.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="T:CADability.MultipleChoiceSetting">
            <summary>
            Wrappes an int value. The value represents a choice of severel predefined choices.
            It represents a setting defined by a <see cref="!:SettingName"/> and a <see cref="!:Selected"/> value.
            Ths setting can be displayed and modified in the control center. 
            It is represented as a combo box. The label left of the combo box is given
            by the resourceId <see cref="M:CADability.UserInterface.StringTable.GetString(System.String,CADability.UserInterface.StringTable.Category)"/>, the values are
            </summary>
        </member>
        <member name="M:CADability.MultipleChoiceSetting.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.MultipleChoiceSetting.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.NameAlreadyExistsException">
            <summary>
            Bei der Namens√§nderung eines Objektes (z.B. Layer, Farbe u.s.w.) tritt diese
            Exception auf, wenn eine nach Namen sortierte Liste (z.B. LayerList) 
            ein Objekt mit diesen Namen bereits enth√§lt. Diese Exception wird in CONDOR
            bei Namens√§nderungen abgefangen und der alte Name wird wieder gesetzt.
            
            </summary>
        </member>
        <member name="F:CADability.NameAlreadyExistsException.NewName">
            <summary>
            Der neue Name, der versucht wurde zu setzen
            </summary>
        </member>
        <member name="F:CADability.NameAlreadyExistsException.OldName">
            <summary>
            Der alte Name, so wie er in Ordnung war
            </summary>
        </member>
        <member name="F:CADability.NameAlreadyExistsException.ContainingList">
            <summary>
            Die Liste, die das Objekt enth√§lt, und die bereits ein objekt mit neuem Namen enth√§lt
            </summary>
        </member>
        <member name="F:CADability.NameAlreadyExistsException.OffendingObject">
            <summary>
            Das Objekt (z.B. Layer), welches den Versto√ü ausgel√∂st hat
            </summary>
        </member>
        <member name="T:CADability.NamedValuesProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:CADability.NamedValuesProperty.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.NamedValuesProperty.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="P:CADability.NamedValuesProperty.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.NamedValuesProperty.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.NamedValuesProperty.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="F:CADability.NDimTree`1.Node.subNode">
            <summary>
            the subnodes, may be null. Also individual indizes may be null.
            The number of sub nodes is 2^dimension, the indexing follows the rule from <see cref="M:CADability.NDimTree`1.Node.SubNodeIndex(System.Boolean[])"/>.
            </summary>
        </member>
        <member name="F:CADability.NDimTree`1.Node.objects">
            <summary>
            Set of <see cref="!:INDimTreeInsertable"/> objects in this NDimTree
            This set is the contents of the leaf of the tree. If it is null, the tree has been subdevided and subTree containst the branches.
            Implemented as a set, because it is faster to unite with another set
            </summary>
        </member>
        <member name="F:CADability.NDimTree`1.Node.parent">
            <summary>
            Back reference to the parent node.
            </summary>
        </member>
        <member name="F:CADability.NDimTree`1.Node.root">
            <summary>
            Back reference to the root.
            </summary>
        </member>
        <member name="F:CADability.NDimTree`1.Node.deepth">
            <summary>
            Deepth of this node in the tree
            </summary>
        </member>
        <member name="M:CADability.NDimTree`1.Node.SubNodeIndex(System.Boolean[])">
            <summary>
            Returns the index of the sub node, where <paramref name="upperPart"/> is true, if the upper part of this dimension is requested.
            </summary>
            <param name="upperPart">denotes whether the upper (or lower) part of a certain dimension index is requested</param>
            <returns></returns>
        </member>
        <member name="M:CADability.NDimTree`1.Node.Split(System.Int32)">
            <summary>
            Split this node. Usually an empty node at the beginning, but fully implemented
            </summary>
            <param name="numLevels"></param>
        </member>
        <member name="M:CADability.NDimTree`1.SplitNode(CADability.NDimTree{`0}.Node,`0)">
            <summary>
            Criterion whether to split a node when it contains too many leaves. The default implemenation yield a dynamically balanced
            tree which allows more leaves in deeper nodes.
            </summary>
            <param name="node">The node beeing checked</param>
            <param name="objectToAdd">The object beeing added</param>
            <returns>true, if node should be splitted, false otherwise</returns>
        </member>
        <member name="M:CADability.NDimTree`1.MakeSubNodes(CADability.NDimTree{`0}.Node)">
            <summary>
            Creates the sub nodes for the provided node, which is about to be splitted.
            The standard implementation devides the extent of the node in half for each dimension and creates 2^dimension new nodes
            with the appropriate extents set. Override this method if you want the extent to be unevenly splitted or if you want
            to return fewer sub-nodes, which don't fill the eintire extent (because some part of the extent will not be used). No sub-node
            may exceed the extent of it's parent node.
            </summary>
            <param name="node">The node, which is to be splitted</param>
            <returns>Array of sub-nodes</returns>
        </member>
        <member name="M:CADability.NDimTree`1.AddObject(`0)">
            <summary>
            Add the provided object to the tree. This may split some nodes and cause calls to the method of other objects already in the tree.
            </summary>
            <param name="objectToAdd">Object beeing added</param>
        </member>
        <member name="M:CADability.VertexCloudToPlanes.GetBestPlanes">
            <summary>
            Gets the best set of vertices first, not so good sets later. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.EdgeCloudToPlanes.GetBestPlanes">
            <summary>
            Gets the best set of vertices first, not so good sets later. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:CADability.Nurbs">
            <summary>
            Diese Klasse bildet die NURBS Funktionalit√§t aus OpenCascade nach.
            Vielleicht wird mal mehr draus...
            </summary>
        </member>
        <member name="M:CADability.Nurbs.FindSpan(System.Int32,System.Int32,System.Double,System.Double[])">
            <summary>
            NURBS Buch S. 68,
            knot (U) ist der flache Knotenvektor (mit Wiederholungen)
            n ist noch nicht ganz klar, aber hat mit der L√§nge des Knotenvectors zu tun
            </summary>
            <param name="n"></param>
            <param name="degree"></param>
            <param name="u"></param>
            <param name="knot"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Nurbs.BasisFuns(System.Int32,System.Double,System.Int32,System.Double[],System.Double[]@)">
            <summary>
            NURBS Buch S. 70.
            Hier ein Versuch mit unsafe, wg fixed bzw. stackalloc
            Das muss noch genauer ausgemessen werden, was es an Verbesserung bringt...
            </summary>
        </member>
        <member name="M:CADability.Nurbs.CurvePoint(System.Int32,System.Double[],CADability.Pole[],System.Double,CADability.Pole)">
            <summary>
            NURBS Buch S. 124
            </summary>
        </member>
        <member name="T:CADability.GeoPoint2DH">
            <summary>
            Interner homogener 2D Punkt f√ºr die Verwendung in Nurbs&lt;T, C&gt;
            </summary>
        </member>
        <member name="T:CADability.GeoPointH">
            <summary>
            Interner homogener Punkt f√ºr die Verwendung in Nurbs&lt;T, C&gt;
            </summary>
        </member>
        <member name="T:CADability.Nurbs`2">
            <summary>
            Implementiert nach "The NURBS Book" (Piegl, Tiller) und nach Ideen aus
            http://www.codeproject.com/csharp/genericnumerics.asp
            Helferklasse f√ºr 2 und 3 dimensionale NURBS Kurven und f√ºr Nurbsfl√§chen rational oder nicht rational.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="C"></typeparam>
        </member>
        <member name="M:CADability.Nurbs`2.CurveDerivCpts(CADability.Indexer{`0},System.Double[],System.Int32,System.Int32)">
            <summary>
            Calculates the control points of the derived curves up to maxderiv
            </summary>
            <param name="pls"></param>
            <param name="knots"></param>
            <param name="degree"></param>
            <param name="maxderiv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Nurbs`2.FixedU(System.Double)">
            <summary>
            Returns a nurbs curve of a surface with fixed u parameter. The type of the poles of the returned curve is the same 
            as the type of poles of the surface (rational/nonrational)
            </summary>
            <param name="u">Fixed u parameter</param>
            <returns>the nurbs curve</returns>
        </member>
        <member name="M:CADability.Nurbs`2.FixedV(System.Double)">
            <summary>
            Returns a nurbs curve of a surface with fixed v parameter. The type of the poles of the returned curve is the same 
            as the type of poles of the surface (rational/nonrational)
            </summary>
            <param name="u">Fixed v parameter</param>
            <returns>the nurbs curve</returns>
        </member>
        <member name="M:CADability.Nurbs`2.Clone(`0[])">
            <summary>
            Return a clone with modified poles. degree and knot remain unmodified.
            </summary>
            <param name="poles">a set of poles, must be the same size as this.poles</param>
            <returns>the clone</returns>
        </member>
        <member name="M:CADability.IOctTreeInsertable.GetExtent(System.Double)">
            <summary>
            Gets the 3-dimensional extent of an object
            </summary>
            <param name="precision">Precision of the test</param>
            <returns>The minmax cube</returns>
        </member>
        <member name="M:CADability.IOctTreeInsertable.HitTest(CADability.BoundingCube@,System.Double)">
            <summary>
            Tests whether an object is touched by the provided cube
            </summary>
            <param name="cube">To test with</param>
            <param name="precision">Required precision</param>
            <returns>true if the object strikes the cube</returns>
        </member>
        <member name="M:CADability.IOctTreeInsertable.HitTest(CADability.Projection,CADability.BoundingRect,System.Boolean)">
            <summary>
            Tests whether an object is inside or touched by the rectangle when projected with the 
            provided projection
            </summary>
            <param name="projection">The projection for the test</param>
            <param name="rect">The rectangle to test the position</param>
            <param name="onlyInside">true: the object must be totaly inside the rectangle, false: 
            the object must be totaly or partially inside the rectangle</param>
            <returns>true when the test succeedes, false otherwise</returns>
        </member>
        <member name="M:CADability.IOctTreeInsertable.HitTest(CADability.Projection.PickArea,System.Boolean)">
            <summary>
            Tests whether an object is inside or touched by the provided area
            </summary>
            <param name="projection">The projection for the test</param>
            <param name="area">The area to check for</param>
            <param name="onlyInside">true: the object must be totaly inside the area, false: 
            the object must be totaly or partially inside the area</param>
            <returns>true when the test succeedes, false otherwise</returns>
        </member>
        <member name="M:CADability.IOctTreeInsertable.Position(CADability.GeoPoint,CADability.GeoVector,System.Double)">
            <summary>
            Returns the smallest parameter value (l) where the provided line hits the object so that the point
            <paramref name="fromHere"/> + l * <paramref name="direction"/> is on or close to the object. The result may be negative.
            Return double.MaxValue if there is no such point.
            </summary>
            <param name="fromHere">Startpoint of the line</param>
            <param name="direction">Direction of the line</param>
            <param name="precision">Precision for the test</param>
            <returns>Position on the line</returns>
        </member>
        <member name="T:CADability.OctTree`1">
            <summary>
            Generic class to privide fast access to <see cref="T:CADability.IOctTreeInsertable"/> implementing objects.
            </summary>
            <typeparam name="T">The generic type, must implement <see cref="T:CADability.IOctTreeInsertable"/></typeparam>
        </member>
        <member name="F:CADability.OctTree`1.precision">
            <summary>
            The precision of this octtree
            </summary>
        </member>
        <member name="F:CADability.OctTree`1.node">
            <summary>
            The root <see cref="T:CADability.OctTree`1.Node`1"/> of this octtree
            </summary>
        </member>
        <member name="T:CADability.OctTree`1.Node`1">
            <summary>
            Definition of a node of this octtree.
            </summary>
            <typeparam name="TT">The generic type, is the same type as the enclosing OctTree type</typeparam>
        </member>
        <member name="F:CADability.OctTree`1.Node`1.ppp">
            <summary>
            the subtrees, may be null
            </summary>
        </member>
        <member name="F:CADability.OctTree`1.Node`1.mpp">
            <summary>
            the subtrees, may be null
            </summary>
        </member>
        <member name="F:CADability.OctTree`1.Node`1.pmp">
            <summary>
            the subtrees, may be null
            </summary>
        </member>
        <member name="F:CADability.OctTree`1.Node`1.mmp">
            <summary>
            the subtrees, may be null
            </summary>
        </member>
        <member name="F:CADability.OctTree`1.Node`1.ppm">
            <summary>
            the subtrees, may be null
            </summary>
        </member>
        <member name="F:CADability.OctTree`1.Node`1.mpm">
            <summary>
            the subtrees, may be null
            </summary>
        </member>
        <member name="F:CADability.OctTree`1.Node`1.pmm">
            <summary>
            the subtrees, may be null
            </summary>
        </member>
        <member name="F:CADability.OctTree`1.Node`1.mmm">
            <summary>
            the subtrees, may be null
            </summary>
        </member>
        <member name="F:CADability.OctTree`1.Node`1.list">
            <summary>
            List of <see cref="T:CADability.IOctTreeInsertable"/> objects in this octtree
            </summary>
        </member>
        <member name="F:CADability.OctTree`1.Node`1.parent">
            <summary>
            Back reference to the parent node.
            </summary>
        </member>
        <member name="F:CADability.OctTree`1.Node`1.root">
            <summary>
            Back reference to the root.
            </summary>
        </member>
        <member name="F:CADability.OctTree`1.Node`1.deepth">
            <summary>
            Deepth of this node in the tree
            </summary>
        </member>
        <member name="F:CADability.OctTree`1.Node`1.center">
            <summary>
            Center of the cube definig this node.
            </summary>
        </member>
        <member name="F:CADability.OctTree`1.Node`1.size">
            <summary>
            "Radius" (half width) of the cube defining this node
            </summary>
        </member>
        <member name="F:CADability.OctTree`1.Node`1.cube">
            <summary>
            Cube defining this node
            </summary>
        </member>
        <member name="F:CADability.OctTree`1.Node`1.extension">
            <summary>
            Derived OctTrees may use this for whatever they need it
            </summary>
        </member>
        <member name="T:CADability.OctTree`1.SplitTestFunction">
            <summary>
            Constructs an octtree providing an initial size and a precision
            </summary>
            <param name="ext">Initial size of the tree. Objects beeng added later may exceed this cube</param>
            <param name="precision">Precision, used internally</param>
        </member>
        <member name="M:CADability.OctTree`1.AddObject(`0)">
            <summary>
            Add the provided object to the tree. This may split some nodes and cause calls to the method of other objects already in the tree.
            </summary>
            <param name="objectToAdd">Object beeing added</param>
        </member>
        <member name="M:CADability.OctTree`1.RemoveObject(`0)">
            <summary>
            Remove object from the tree
            </summary>
            <param name="objectToRemove">object to bee removed</param>
        </member>
        <member name="M:CADability.OctTree`1.GetObjectsFromLine(CADability.GeoPoint,CADability.GeoVector,System.Double)">
            <summary>
            Returns an array of objects which contains all objects that are close to the provided line. It may also contain some objects
            that have a greater distance than <paramref name="maxdist"/> to the line.
            </summary>
            <param name="start">Starting point of the line</param>
            <param name="dir">Direction of the line</param>
            <param name="maxdist">Maximum distance to the line</param>
            <returns>Array of all objects which match the criterion</returns>
        </member>
        <member name="M:CADability.OctTree`1.GetObjectsFromRect(CADability.Projection,CADability.BoundingRect,System.Boolean)">
            <summary>
            Returns an array of all objects that interfere with the provided rectangle in repect to the provided <see cref="T:CADability.Projection"/>. 
            It may also contain some objects which don't interfere but are close to the rectangle, if <paramref name="onlyInside"/> is false.
            </summary>
            <param name="projection">The projection</param>
            <param name="rect">The rectangle, usually from a selection</param>
            <param name="onlyInside">If true, only objects completely inside the rectangle are returned</param>
            <returns>Array of all objects which match the criterion</returns>
        </member>
        <member name="M:CADability.OctTree`1.GetObjectsFromRect(CADability.Projection.PickArea,System.Boolean)">
            <summary>
            Returns an array of all objects that interfere with the provided <see cref="!:PickArea"/>. If <paramref name="onlyInside"/> is true
            only objects inside the frustum or box of the <paramref name="area"/> are returned, otherwise there may also be objects
            that are aoutside this area.
            </summary>
            <param name="area">the frustum or box defining the selection</param>
            <param name="onlyInside">True to only return objects completely inside the area</param>
            <returns>Array of all objects which match the criterion</returns>
        </member>
        <member name="M:CADability.OctTree`1.GetObjectsFromBox(CADability.BoundingCube)">
            <summary>
            Returns all objects that interfere or are close to the provided box.
            </summary>
            <param name="box">Box for the selection</param>
            <returns>Array of all objects which match the criterion</returns>
        </member>
        <member name="M:CADability.OctTree`1.GetObjectsFromBox(CADability.BoundingCube,CADability.OctTree{`0}.Filter)">
            <summary>
            Returns all objects that interfere or are close to the provided box and accepted by the <paramref name="filter"/>.
            </summary>
            <param name="box">Box specifying the selection</param>
            <param name="filter">Filter restriction the result</param>
            <returns>Array of all objects which match the criterion</returns>
        </member>
        <member name="M:CADability.OctTree`1.GetNodesFromBox(CADability.BoundingCube,CADability.OctTree{`0}.FilterNode)">
            <summary>
            Returns all nodes of this tree that interfere with the provided box and pass the filter test.
            </summary>
            <param name="box">Restricting box</param>
            <param name="filter">Additional filter (may be null)</param>
            <returns>All nodes which match the criterion</returns>
        </member>
        <member name="M:CADability.OctTree`1.GetObjectsFromPoint(CADability.GeoPoint)">
            <summary>
            Returns all objects that are close to the provided point.
            </summary>
            <param name="p">Point for selection</param>
            <returns>Array of all objects which match the criterion</returns>
        </member>
        <member name="M:CADability.OctTree`1.GetObjectsFromPlane(CADability.Plane)">
            <summary>
            Returns all objects that are close to the provided plane
            </summary>
            <param name="plane">Plne for selection</param>
            <returns>All objects close to the plane</returns>
        </member>
        <member name="M:CADability.OctTree`1.GetObjectsCloseTo(CADability.IOctTreeInsertable)">
            <summary>
            Returns all objects that are close to the provided object.
            </summary>
            <param name="closeToThis">Object which neighbours are searched</param>
            <returns>All objects close to <paramref name="closeToThis"/></returns>
        </member>
        <member name="P:CADability.OctTree`1.Extend">
            <summary>
            returns the extend of the root node.
            </summary>
        </member>
        <member name="P:CADability.OctTree`1.IsEmpty">
            <summary>
            Returns true if the tree is empty
            </summary>
        </member>
        <member name="M:CADability.OctTree`1.GetNodesCloseTo(CADability.IOctTreeInsertable)">
            <summary>
            Returns all nodes close to the provided object.
            </summary>
            <param name="closeToThis">Object for selection</param>
            <returns>All nodes interfering with the provided object</returns>
        </member>
        <member name="M:CADability.OctTree`1.FindNode(CADability.GeoPoint)">
            <summary>
            Find the node containing the provided point.
            </summary>
            <param name="center">the point</param>
            <returns>the node or null if outside</returns>
        </member>
        <member name="M:CADability.OctTree`1.FindExactNode(CADability.BoundingCube)">
            <summary>
            Find the node which corresponds exactely to the provided boundingcube
            </summary>
            <param name="bc"></param>
            <returns></returns>
        </member>
        <member name="T:CADability.OctTree`1.Side">
            <summary>
            Enumeration of the 6 sides of a cube.
            </summary>
        </member>
        <member name="T:CADability.OctTree`1.Filter">
            <summary>
            Delegate definition of a filtering method restricting <see cref="T:CADability.IOctTreeInsertable"/> objects.
            </summary>
            <param name="toCheck">The object beeing checked</param>
            <returns>true if accepted, false if rejected</returns>
        </member>
        <member name="T:CADability.OctTree`1.FilterNode">
            <summary>
            Delegate definition of a filtering method restricting <see cref="!:Node"/>s.
            </summary>
            <param name="toCheck">The node beeing checked</param>
            <returns>true if accepted, false if rejected</returns>
        </member>
        <member name="M:CADability.OctTree`1.GetNeighbours(CADability.OctTree{`0}.Node{`0},CADability.OctTree{`0}.Filter)">
            <summary>
            Returns all neighbours to the provided node. The result is sortet in a 2-dimensional array where the first
            index defines the side according to <see cref="T:CADability.OctTree`1.Side"/>.
            </summary>
            <param name="node">The node which neighbours are requested</param>
            <param name="filter">A optinal filter or null if unfiltered</param>
            <returns>The neighbours</returns>
        </member>
        <member name="M:CADability.OctTree`1.GetNeighbourNodes(CADability.OctTree{`0}.Node{`0},CADability.OctTree{`0}.FilterNode)">
            <summary>
            Returns all neighbour nodes to the provided node. The result is sortet in a 2-dimensional array where the first
            index defines the side according to <see cref="T:CADability.OctTree`1.Side"/>.
            </summary>
            <param name="node">The node which neighbours are requested</param>
            <param name="filter">A optinal filter or null if unfiltered</param>
            <returns>The neighbour nodes</returns>
        </member>
        <member name="P:CADability.OctTree`1.Leaves">
            <summary>
            Iterator that iterates over all leaves of the tree
            </summary>
        </member>
        <member name="M:CADability.OctTree`1.SplitNode(CADability.OctTree{`0}.Node{`0},`0)">
            <summary>
            Criterion whether to split a node when it contains too many leaves. The default implemenation yield a dynamically balanced
            tree which allows more leaves in deeper nodes.
            </summary>
            <param name="node">The node beeing checked</param>
            <param name="objectToAdd">The object beeing added</param>
            <returns>true, if node should be splitted, false otherwise</returns>
        </member>
        <member name="F:CADability.Kernel.KERNEL_NATIVE_LIBRARY">
            <summary>
                Specifies Kernel32's native library archive.
            </summary>
            <remarks>
                Specifies kernel32.dll for Windows.
            </remarks>
        </member>
        <member name="F:CADability.Kernel.CALLING_CONVENTION">
            <summary>
                Specifies the calling convention.
            </summary>
            <remarks>
                Specifies <see cref="F:System.Runtime.InteropServices.CallingConvention.StdCall" />.
            </remarks>
        </member>
        <member name="T:CADability.Kernel.MEMORYSTATUS">
            <summary>
                <para>
                    The <b>MEMORYSTATUS</b> structure contains information about the current state
                    of both physical and virtual memory.
                </para>
                <para>
                    The <see cref="M:CADability.Kernel.GlobalMemoryStatus(CADability.Kernel.MEMORYSTATUS@)" /> function stores information in a
                    <b>MEMORYSTATUS</b> structure.
                </para>
            </summary>
            <remarks>
                <para>
                    <b>MEMORYSTATUS</b> reflects the state of memory at the time of the call.  It
                    reflects the size of the paging file at that time.  The operating system can
                    enlarge the paging file up to the maximum size set by the administrator.
                </para>
                <para>
                    On computers with more than 4 GB of memory, the <b>MEMORYSTATUS</b> structure
                    can return incorrect information.  Windows reports a value of -1 to indicate
                    an overflow, while Windows NT reports a value that is the real amount of
                    memory, modulo 4 GB.  If your application is at risk for this behavior, use
                    the <b>GlobalMemoryStatusEx</b> function instead of the
                    <see cref="M:CADability.Kernel.GlobalMemoryStatus(CADability.Kernel.MEMORYSTATUS@)" /> function.
                </para>
            </remarks>
            <seealso cref="M:CADability.Kernel.GlobalMemoryStatus(CADability.Kernel.MEMORYSTATUS@)" />
        </member>
        <member name="F:CADability.Kernel.MEMORYSTATUS.Length">
            <summary>
                Size of the <b>MEMORYSTATUS</b> data structure, in bytes.  You do not need to
                set this member before calling the <see cref="M:CADability.Kernel.GlobalMemoryStatus(CADability.Kernel.MEMORYSTATUS@)" /> function;
                the function sets it.
            </summary>
        </member>
        <member name="F:CADability.Kernel.MEMORYSTATUS.MemoryLoad">
            <summary>
                <para>
                    Approximate percentage of total physical memory that is in use.
                </para>
                <para>
                    <b>Windows NT:</b>  Percentage of approximately the last 1000 pages of
                    physical memory that is in use.
                </para>
            </summary>
        </member>
        <member name="F:CADability.Kernel.MEMORYSTATUS.TotalPhys">
            <summary>
                Total size of physical memory, in bytes.
            </summary>
        </member>
        <member name="F:CADability.Kernel.MEMORYSTATUS.AvailPhys">
            <summary>
                Size of physical memory available, in bytes.
            </summary>
        </member>
        <member name="F:CADability.Kernel.MEMORYSTATUS.TotalPageFile">
            <summary>
                Size of the committed memory limit, in bytes.
            </summary>
        </member>
        <member name="F:CADability.Kernel.MEMORYSTATUS.AvailPageFile">
            <summary>
                Size of available memory to commit, in bytes.
            </summary>
        </member>
        <member name="F:CADability.Kernel.MEMORYSTATUS.TotalVirtual">
            <summary>
                Total size of the user mode portion of the virtual address space of the
                calling process, in bytes.
            </summary>
        </member>
        <member name="F:CADability.Kernel.MEMORYSTATUS.AvailVirtual">
            <summary>
                Size of unreserved and uncommitted memory in the user mode portion of the
                virtual address space of the calling process, in bytes.
            </summary>
        </member>
        <member name="T:CADability.Kernel.SYSTEM_INFO">
            <summary>
                The <b>SYSTEM_INFO</b> structure contains information about the current computer
                system.  This includes the architecture and type of the processor, the number of
                processors in the system, the page size, and other such information.
            </summary>
            <seealso cref="M:CADability.Kernel.GetSystemInfo(CADability.Kernel.SYSTEM_INFO@)" />
            <seealso cref="T:CADability.Kernel.SYSTEM_INFO_UNION" />
        </member>
        <member name="F:CADability.Kernel.SYSTEM_INFO.SystemInfoUnion">
            <summary>
                Union for the OemId, ProcessorArchitecture, and Reserved fields of the
                SYSTEM_INFO structure.  See <see cref="T:CADability.Kernel.SYSTEM_INFO_UNION" />.
            </summary>
        </member>
        <member name="F:CADability.Kernel.SYSTEM_INFO.PageSize">
            <summary>
                Page size and the granularity of page protection and commitment.  This is the
                page size used by the <b>VirtualAlloc</b> function.
            </summary>
        </member>
        <member name="F:CADability.Kernel.SYSTEM_INFO.MinimumApplicationAddress">
            <summary>
                Pointer to the lowest memory address accessible to applications and
                dynamic-link libraries (DLLs).
            </summary>
        </member>
        <member name="F:CADability.Kernel.SYSTEM_INFO.MaximumApplicationAddress">
            <summary>
                Pointer to the highest memory address accessible to applications and DLLs.
            </summary>
        </member>
        <member name="F:CADability.Kernel.SYSTEM_INFO.ActiveProcessorMask">
            <summary>
                Mask representing the set of processors configured into the system.  Bit 0 is
                processor 0; bit 31 is processor 31.
            </summary>
        </member>
        <member name="F:CADability.Kernel.SYSTEM_INFO.NumberOfProcessors">
            <summary>
                Number of processors in the system.
            </summary>
        </member>
        <member name="F:CADability.Kernel.SYSTEM_INFO.ProcessorType">
            <summary>
                <para>
                    An obsolete member that is retained for compatibility with Windows NT 3.5
                    and earlier.  Use the <i>SystemInfoUnion.ProcessorArchitecture</i>,
                    <i>ProcessorLevel</i>, and <i>ProcessorRevision</i> members to determine
                    the type of processor.
                </para>
                <para>
                    <b>Windows Me/98/95:</b>  Specifies the type of processor in the system.
                    This member is one of the following values:
                </para>
                <para>
                    <see cref="!:WinNt.PROCESSOR_INTEL_386" />
                </para>
                <para>
                    <see cref="!:WinNt.PROCESSOR_INTEL_486" />
                </para>
                <para>
                    <see cref="!:WinNt.PROCESSOR_INTEL_PENTIUM" />
                </para>
            </summary>
        </member>
        <member name="F:CADability.Kernel.SYSTEM_INFO.AllocationGranularity">
            <summary>
                Granularity with which virtual memory is allocated.  For example, a
                <b>VirtualAlloc</b> request to allocate 1 byte will reserve an address space
                of <i>AllocationGranularity</i> bytes.  This value was hard coded as 64K in
                the past, but other hardware architectures may require different values.
            </summary>
        </member>
        <member name="F:CADability.Kernel.SYSTEM_INFO.ProcessorLevel">
            <summary>
                <para>
                    System's architecture-dependent processor level.  It should be used only
                    for display purposes.  To determine the feature set of a processor, use
                    the <see cref="M:CADability.Kernel.IsProcessorFeaturePresent(System.Int32)" /> function.
                </para>
                <para>
                    If <i>SystemInfoUnion.ProcessorArchitecture</i> is
                    <see cref="!:WinNt.PROCESSOR_ARCHITECTURE_INTEL" />, <i>ProcessorLevel</i>
                    is defined by the CPU vendor.
                </para>
                <para>
                    If <i>SystemInfoUnion.ProcessorArchitecture</i> is
                    <see cref="!:WinNt.PROCESSOR_ARCHITECTURE_IA64" />, <i>ProcessorLevel</i> is
                    set to 1.
                </para>
                <para>
                    If <i>SystemInfoUnion.ProcessorArchitecture</i> is
                    <see cref="!:WinNt.PROCESSOR_ARCHITECTURE_MIPS" />, <i>ProcessorLevel</i> is
                    of the form 00xx, where xx is an 8-bit implementation number (bits 8-15 of
                    the PRId register).  The member can be the following value:
                </para>
                <para>
                    <list type="table">
                        <listheader>
                            <term>Value</term>
                            <description>Description</description>
                        </listheader>
                        <item>
                            <term>0004</term>
                            <description>MIPS R4000</description>
                        </item>
                    </list>
                </para>
                <para>
                    If <i>SystemInfoUnion.ProcessorArchitecture</i> is
                    <see cref="!:WinNt.PROCESSOR_ARCHITECTURE_ALPHA" />, <i>ProcessorLevel</i>
                    is of the form xxxx, where xxxx is a 16-bit processor version number (the
                    low-order 16 bits of a version number from the firmware).  The member can
                    be one of the following values:
                </para>
                <para>
                    <list type="table">
                        <listheader>
                            <term>Value</term>
                            <description>Description</description>
                        </listheader>
                        <item>
                            <term>21064</term>
                            <description>Alpha 21064</description>
                        </item>
                        <item>
                            <term>21066</term>
                            <description>Alpha 21066</description>
                        </item>
                        <item>
                            <term>21164</term>
                            <description>Alpha 21164</description>
                        </item>
                    </list>
                </para>
                <para>
                    If <i>SystemInfoUnion.ProcessorArchitecture</i> is
                    <see cref="!:WinNt.PROCESSOR_ARCHITECTURE_PPC" />, <i>ProcessorLevel</i> is
                    of the form xxxx, where xxxx is a 16-bit processor version number (the
                    high-order 16 bits of the Processor Version Register).  The member can be
                    one of the following values:
                </para>
                <para>
                    <list type="table">
                        <listheader>
                            <term>Value</term>
                            <description>Description</description>
                        </listheader>
                        <item>
                            <term>1</term>
                            <description>PPC 601</description>
                        </item>
                        <item>
                            <term>3</term>
                            <description>PPC 603</description>
                        </item>
                        <item>
                            <term>4</term>
                            <description>PPC 604</description>
                        </item>
                        <item>
                            <term>6</term>
                            <description>PPC 603+</description>
                        </item>
                        <item>
                            <term>9</term>
                            <description>PPC 604+</description>
                        </item>
                        <item>
                            <term>20</term>
                            <description>PPC 620</description>
                        </item>
                    </list>
                </para>
            </summary>
        </member>
        <member name="F:CADability.Kernel.SYSTEM_INFO.ProcessorRevision">
            <summary>
                <para>
                    Architecture-dependent processor revision.  The following table shows how
                    the revision value is assembled for each type of processor architecture:
                </para>
                <para>
                    <list type="table">
                        <listheader>
                            <term>Processor</term>
                            <description>Description</description>
                        </listheader>
                        <item>
                            <term>Intel 80386 or 80486</term>
                            <description>
                                <para>
                                    A value of the form xxyz.
                                </para>
                                <para>
                                    If xx is equal to 0xFF, y - 0xA is the model number, and
                                    z is the stepping identifier.  For example, an Intel
                                    80486-D0 system returns 0xFFD0.
                                </para>
                                <para>
                                    If xx is not equal to 0xFF, xx + 'A' is the stepping
                                    letter and yz is the minor stepping.
                                </para>
                            </description>
                        </item>
                        <item>
                            <term>Intel Pentium, Cyrix, or NextGen 586</term>
                            <description>
                                <para>
                                    A value of the form xxyy, where xx is the model number and
                                    yy is the stepping.  Display this value of 0x0201 as
                                    follows:
                                </para>
                                <para>
                                    Model xx, Stepping yy.
                                </para>
                            </description>
                        </item>
                        <item>
                            <term>MIPS</term>
                            <description>
                                A value of the form 00xx, where xx is the 8-bit revision
                                number of the processor (the low-order 8 bits of the
                                PRId register).
                            </description>
                        </item>
                        <item>
                            <term>ALPHA</term>
                            <description>
                                <para>
                                    A value of the form xxyy, where xxyy is the low-order 16
                                    bits of the processor revision number from the firmware.
                                    Display this value as follows:
                                </para>
                                <para>
                                    Model A+xx, Pass yy.
                                </para>
                            </description>
                        </item>
                        <item>
                            <term>PPC</term>
                            <description>
                                <para>
                                    A value of the form xxyy, where xxyy is the low-order 16
                                    bits of the processor version register.  Display this
                                    value as follows:
                                </para>
                                <para>
                                    xx.yy.
                                </para>
                            </description>
                        </item>
                    </list>
                </para>
            </summary>
        </member>
        <member name="T:CADability.Kernel.SYSTEM_INFO_UNION">
            <summary>
                Union for the OemId, ProcessorArchitecture, and Reserved fields of the
                <see cref="T:CADability.Kernel.SYSTEM_INFO" /> structure.
            </summary>
            <seealso cref="T:CADability.Kernel.SYSTEM_INFO" />
        </member>
        <member name="F:CADability.Kernel.SYSTEM_INFO_UNION.OemId">
            <summary>
                <para>
                    An obsolete member that is retained for compatibility with Windows NT 3.5
                    and earlier.  New applications should use the <i>ProcessorArchitecture</i>
                    branch of the union.
                </para>
                <para>
                    <b>Windows Me/98/95:</b>  The system always sets this member to zero, the
                    value defined for <see cref="!:WinNt.PROCESSOR_ARCHITECTURE_INTEL" />.
                </para>
            </summary>
        </member>
        <member name="F:CADability.Kernel.SYSTEM_INFO_UNION.ProcessorArchitecture">
            <summary>
                <para>
                    System's processor architecture.  This value can be one of the following
                    values:
                </para>
                <para>
                    <see cref="!:WinNt.PROCESSOR_ARCHITECTURE_UNKNOWN" />
                </para>
                <para>
                    <see cref="!:WinNt.PROCESSOR_ARCHITECTURE_INTEL" />
                </para>
                <para>
                    <b>Windows NT 3.51:</b>  <see cref="!:WinNt.PROCESSOR_ARCHITECTURE_MIPS" />
                </para>
                <para>
                    <b>Windows NT 4.0 and earlier:</b>
                    <see cref="!:WinNt.PROCESSOR_ARCHITECTURE_ALPHA" />
                </para>
                <para>
                    <b>Windows NT 4.0 and earlier:</b>
                    <see cref="!:WinNt.PROCESSOR_ARCHITECTURE_PPC" />
                </para>
                <para>
                    <b>64-bit Windows:</b>  <see cref="!:WinNt.PROCESSOR_ARCHITECTURE_IA64" />,
                    <see cref="!:WinNt.PROCESSOR_ARCHITECTURE_IA32_ON_WIN64" />,
                    <see cref="!:WinNt.PROCESSOR_ARCHITECTURE_AMD64" />
                </para>
            </summary>
        </member>
        <member name="F:CADability.Kernel.SYSTEM_INFO_UNION.Reserved">
            <summary>
                Reserved for future use.
            </summary>
        </member>
        <member name="M:CADability.Kernel.#ctor">
            <summary>
                Prevents instantiation.
            </summary>
        </member>
        <member name="M:CADability.Kernel.Beep(System.Int32,System.Int32)">
            <summary>
                The <b>Beep</b> function generates simple tones on the speaker.  The function is
                synchronous; it does not return control to its caller until the sound finishes.
            </summary>
            <param name="frequency">
                <para>
                    Frequency of the sound, in hertz.  This parameter must be in the range
                    37 through 32,767 (0x25 through 0x7FFF).
                </para>
                <para>
                    <b>Windows 95/98/Me:</b>  The <b>Beep</b> function ignores this parameter.
                </para>
            </param>
            <param name="duration">
                <para>
                    Duration of the sound, in milliseconds.
                </para>
                <para>
                    <b>Windows 95/98/Me:</b>  The <b>Beep</b> function ignores this parameter.
                </para>
            </param>
            <returns>
                <para>
                    If the function succeeds, the return value is true.
                </para>
                <para>
                    If the function fails, the return value is false.  To get extended error
                    information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />.
                </para>
            </returns>
            <remarks>
                <para>
                    <b>Terminal Services:</b>  The beep is redirected to the client.
                </para>
                <para>
                    <b>Windows 95/98/Me:</b>  On computers with a sound card, the function
                    plays the default sound event.  On computers without a sound card, the
                    function plays the standard system beep.
                </para>
            </remarks>
        </member>
        <member name="M:CADability.Kernel.FreeLibrary(System.IntPtr)">
            <summary>
                The <b>FreeLibrary</b> function decrements the reference count of the loaded
                dynamic-link library (DLL).  When the reference count reaches zero, the module
                is unmapped from the address space of the calling process and the handle is no
                longer valid.
            </summary>
            <param name="moduleHandle">
                Handle to the loaded DLL module.  The <see cref="M:CADability.Kernel.LoadLibrary(System.String)" /> or
                <see cref="M:CADability.Kernel.GetModuleHandle(System.String)" /> function returns this handle.
            </param>
            <returns>
                <para>
                    If the function succeeds, the return value is true.
                </para>
                <para>
                    If the function fails, the return value is false.  To get extended error
                    information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />.
                </para>
            </returns>
            <remarks>
                <para>
                    Each process maintains a reference count for each loaded library module.  This
                    reference count is incremented each time <see cref="M:CADability.Kernel.LoadLibrary(System.String)" /> is called
                    and is decremented each time <b>FreeLibrary</b> is called.  A DLL module
                    loaded at process initialization due to load-time dynamic linking has a
                    reference count of one.  This count is incremented if the same module is
                    loaded by a call to <see cref="M:CADability.Kernel.LoadLibrary(System.String)" />.
                </para>
                <para>
                    Before unmapping a library module, the system enables the DLL to detach from
                    the process by calling the DLL's <b>DllMain</b> function, if it has one, with
                    the DLL_PROCESS_DETACH value.  Doing so gives the DLL an opportunity to clean
                    up resources allocated on behalf of the current process.  After the
                    entry-point function returns, the library module is removed from the address
                    space of the current process.
                </para>
                <para>
                    It is not safe to call <b>FreeLibrary</b> from <b>DllMain</b>.  For more
                    information, see the Remarks section in <b>DllMain</b>.
                </para>
                <para>
                    Calling <b>FreeLibrary</b> does not affect other processes using the same
                    library module.
                </para>
            </remarks>
            <seealso cref="M:CADability.Kernel.GetModuleHandle(System.String)" />
            <seealso cref="M:CADability.Kernel.LoadLibrary(System.String)" />
        </member>
        <member name="M:CADability.Kernel.GetDllDirectory(System.Int32,System.Text.StringBuilder)">
            <summary>
                The <b>GetDllDirectory</b> function retrieves the application-specific portion of
                the search path used to locate DLLs for the application.
            </summary>
            <param name="bufferLength">
                Size of the output buffer, in characters.
            </param>
            <param name="buffer">
                Pointer to a buffer that receives the application-specific portion of the search path.
            </param>
            <returns>
                <para>
                    If the function succeeds, the return value is the length of the string copied
                    to <i>buffer</i>, in characters, not including the terminating null character.
                    If the return value is greater than <i>bufferLength</i>, it specifies the size
                    of the buffer required for the path.
                </para>
                <para>
                    If the function fails, the return value is zero.  To get extended error
                    information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />.
                </para>
            </returns>
            <seealso cref="M:CADability.Kernel.SetDllDirectory(System.String)" />
        </member>
        <member name="M:CADability.Kernel.GetModuleFileName(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary>
                <para>
                    The <b>GetModuleFileName</b> function retrieves the fully qualified path for
                    the specified module.
                </para>
                <para>
                    To specify the process that contains the module, use the
                    <b>GetModuleFileNameEx</b> function.
                </para>
            </summary>
            <param name="module">
                Handle to the module whose path is being requested.  If this parameter is NULL,
                <b>GetModuleFileName</b> retrieves the path for the current module.
            </param>
            <param name="fileName">
                <para>
                    Pointer to a buffer that receives a null-terminated string that specifies the
                    fully-qualified path of the module.  If the length of the path exceeds the
                    size specified by the <i>size</i> parameter, the function succeeds and the
                    string is truncated to <i>size</i> characters and null terminated.
                </para>
                <para>
                    The path can have the prefix "\\?\", depending on how the module was loaded.
                </para>
            </param>
            <param name="size">
                Size of the <i>filename</i> buffer, in TCHARs.
            </param>
            <returns>
                <para>
                    If the function succeeds, the return value is the length of the string copied
                    to the buffer, in TCHARs.  If the buffer is too small to hold the module name,
                    the string is truncated to <i>size</i>, and the function returns <i>size</i>.
                </para>
                <para>
                    If the function fails, the return value is zero.  To get extended error
                    information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />.
                </para>
            </returns>
            <remarks>
                <para>
                    If a DLL is loaded in two processes, its file name in one process may differ
                    in case from its file name in the other process.
                </para>
                <para>
                    For the ANSI version of the function, the number of TCHARs is the number of
                    bytes; for the Unicode version, it is the number of characters.
                </para>
                <para>
                    <b>Windows Me/98/95:</b>  This function retrieves long file names when an
                    application's version number is greater than or equal to 4.00 and the long
                    file name is available.  Otherwise, it returns only 8.3 format file names.
                </para>
            </remarks>
            <seealso cref="M:CADability.Kernel.GetModuleHandle(System.String)" />
            <seealso cref="M:CADability.Kernel.LoadLibrary(System.String)" />
        </member>
        <member name="M:CADability.Kernel.GetModuleHandle(System.String)">
            <summary>
                <para>
                    The <b>GetModuleHandle</b> function retrieves a module handle for the
                    specified module if the file has been mapped into the address space of the
                    calling process.
                </para>
                <para>
                    To avoid the race conditions described in the Remarks section, use the
                    <b>GetModuleHandleEx</b> function.
                </para>
            </summary>
            <param name="moduleName">
                <para>
                    Pointer to a null-terminated string that contains the name of the module
                    (either a .dll or .exe file).  If the file name extension is omitted, the
                    default library extension .dll is appended.  The file name string can include
                    a trailing point character (.) to indicate that the module name has no
                    extension.  The string does not have to specify a path.  When specifying a
                    path, be sure to use backslashes (\), not forward slashes (/).  The name is
                    compared (case independently) to the names of modules currently mapped into
                    the address space of the calling process.
                </para>
                <para>
                    If this parameter is NULL, <b>GetModuleHandle</b> returns a handle to the
                    file used to create the calling process.
                </para>
            </param>
            <returns>
                <para>
                    If the function succeeds, the return value is a handle to the specified module
                    (IntPtr).
                </para>
                <para>
                    If the function fails, the return value is NULL (IntPtr.Zero).  To get
                    extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />.
                </para>
            </returns>
            <remarks>
                <para>
                    The returned handle is not global or inheritable.  It cannot be duplicated
                    or used by another process.
                </para>
                <para>
                    The <b>GetModuleHandle</b> function returns a handle to a mapped module
                    without incrementing its reference count.  Therefore, use care when passing
                    the handle to the <see cref="M:CADability.Kernel.FreeLibrary(System.IntPtr)" /> function, because doing so can
                    cause a DLL module to be unmapped prematurely.
                </para>
                <para>
                    This function must be used carefully in a multithreaded application.  There
                    is no guarantee that the module handle remains valid between the time this
                    function returns the handle and the time it is used.  For example, a thread
                    retrieves a module handle, but before it uses the handle, a second thread
                    frees the module.  If the system loads another module, it could reuse the
                    module handle that was recently freed.  Therefore, first thread would have
                    a handle to a module different than the one intended.
                </para>
            </remarks>
            <seealso cref="M:CADability.Kernel.FreeLibrary(System.IntPtr)" />
            <seealso cref="M:CADability.Kernel.GetModuleFileName(System.IntPtr,System.Text.StringBuilder,System.Int32)" />
        </member>
        <member name="M:CADability.Kernel.GetProcAddress(System.IntPtr,System.String)">
            <summary>
                The <b>GetProcAddress</b> function retrieves the address of an exported function
                or variable from the specified dynamic-link library (DLL).
            </summary>
            <param name="module">
                Handle to the DLL module that contains the function or variable.  The
                <see cref="M:CADability.Kernel.LoadLibrary(System.String)" /> or <see cref="M:CADability.Kernel.GetModuleHandle(System.String)" /> function returns
                this handle.
            </param>
            <param name="processName">
                Pointer to a null-terminated string that specifies the function or variable name,
                or the function's ordinal value.  If this parameter is an ordinal value, it must
                be in the low-order word; the high-order word must be zero.
            </param>
            <returns>
                <para>
                    If the function succeeds, the return value is the address of the exported
                    function or variable.
                </para>
                <para>
                    If the function fails, the return value is NULL (IntPtr.Zero).  To get
                    extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />.
                </para>
            </returns>
            <remarks>
                <para>
                    The spelling and case of a function name pointed to by <i>processName</i> must
                    be identical to that in the EXPORTS statement of the source DLL's
                    module-definition (.def) file.  The exported names of functions may differ
                    from the names you use when calling these functions in your code.  This
                    difference is hidden by macros used in the SDK header files.
                </para>
                <para>
                    The <i>processName</i> parameter can identify the DLL function by specifying
                    an ordinal value associated with the function in the EXPORTS statement.
                    <b>GetProcAddress</b> verifies that the specified ordinal is in the range 1
                    through the highest ordinal value exported in the .def file.  The function
                    then uses the ordinal as an index to read the function's address from a
                    function table.  If the .def file does not number the functions consecutively
                    from 1 to N (where N is the number of exported functions), an error can occur
                    where <b>GetProcAddress</b> returns an invalid, non-NULL address, even though
                    there is no function with the specified ordinal.
                </para>
                <para>
                    In cases where the function may not exist, the function should be specified by
                    name rather than by ordinal value.
                </para>
            </remarks>
            <seealso cref="M:CADability.Kernel.FreeLibrary(System.IntPtr)" />
            <seealso cref="M:CADability.Kernel.GetModuleHandle(System.String)" />
            <seealso cref="M:CADability.Kernel.LoadLibrary(System.String)" />
        </member>
        <member name="M:CADability.Kernel.GetProcessWorkingSetSize(System.IntPtr,System.Int32@,System.Int32@)">
            <summary>
                The <b>GetProcessWorkingSetSize</b> function retrieves the minimum and maximum
                working set sizes of the specified process.
            </summary>
            <param name="process">
                Handle to the process whose working set sizes will be obtained.  The handle must
                have the PROCESS_QUERY_INFORMATION access right.
            </param>
            <param name="minimumWorkingSetSize">
                Pointer to a variable that receives the minimum working set size of the specified
                process, in bytes.  The virtual memory manager attempts to keep at least this much
                memory resident in the process whenever the process is active.
            </param>
            <param name="maximumWorkingSetSize">
                Pointer to a variable that receives the maximum working set size of the specified
                process, in bytes.  The virtual memory manager attempts to keep no more than this
                much memory resident in the process whenever the process is active when memory is
                in short supply.
            </param>
            <returns>
                <para>
                    If the function succeeds, the return value is true.
                </para>
                <para>
                    If the function fails, the return value is false.  To get extended error
                    information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />.
                </para>
            </returns>
            <remarks>
                The "working set" of a process is the set of memory pages currently visible to
                the process in physical RAM memory.  These pages are resident and available for
                an application to use without triggering a page fault.  The minimum and maximum
                working set sizes affect the virtual memory paging behavior of a process.
            </remarks>
            <seealso cref="M:CADability.Kernel.SetProcessWorkingSetSize(System.IntPtr,System.Int32,System.Int32)" />
        </member>
        <member name="M:CADability.Kernel.GetSystemDirectory(System.Text.StringBuilder,System.Int32)">
            <summary>
                <para>
                    The <b>GetSystemDirectory</b> function retrieves the path of the system
                    directory.  The system directory contains system such files such as
                    dynamic-link libraries, drivers, and font files.
                </para>
                <para>
                    This function is provided primarily for compatibility.  Applications should
                    store code in the Program Files folder and persistent data in the Application
                    Data folder in the user's profile.
                </para>
            </summary>
            <param name="buffer">
                Pointer to the buffer to receive the null-terminated string containing the path.
                This path does not end with a backslash unless the system directory is the root
                directory.  For example, if the system directory is named Windows\System on drive
                C, the path of the system directory retrieved by this function is
                C:\Windows\System.
            </param>
            <param name="size">
                Maximum size of the buffer, in TCHARs.  This value should be set to at least
                MAX_PATH+1 to allow sufficient space for the path and the null terminator.
            </param>
            <returns>
                <para>
                    If the function succeeds, the return value is the length, in TCHARs, of the
                    string copied to the buffer, not including the terminating null character.  If
                    the length is greater than the size of the buffer, the return value is the
                    size of the buffer required to hold the path.
                </para>
                <para>
                    If the function fails, the return value is zero.  To get extended error
                    information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />.
                </para>
            </returns>
            <remarks>
                Applications should not create files in the system directory.  If the user is
                running a shared version of the operating system, the application does not have
                write access to the system directory.
            </remarks>
            <seealso cref="M:CADability.Kernel.GetWindowsDirectory(System.Text.StringBuilder,System.Int32)" />
        </member>
        <member name="M:CADability.Kernel.GetSystemInfo(CADability.Kernel.SYSTEM_INFO@)">
            <summary>
                <para>
                    The <b>GetSystemInfo</b> function returns information about the current
                    system.
                </para>
                <para>
                    To retrieve accurate information for a Win32-based application running on
                    WOW64, call the <b>GetNativeSystemInfo</b> function.
                </para>
            </summary>
            <param name="systemInfo">
                Pointer to a <see cref="T:CADability.Kernel.SYSTEM_INFO" /> structure that receives the information.
            </param>
            <seealso cref="T:CADability.Kernel.SYSTEM_INFO" />
        </member>
        <member name="M:CADability.Kernel.GetSystemWindowsDirectory(System.Text.StringBuilder,System.Int32)">
            <summary>
                The <b>GetSystemWindowsDirectory</b> function retrieves the path of the shared
                Windows directory on a multi-user system.
            </summary>
            <param name="buffer">
                Pointer to the buffer to receive a null-terminated string containing the path.
                This path does not end with a backslash unless the Windows directory is the root
                directory.  For example, if the Windows directory is named Windows on drive C,
                the path of the Windows directory retrieved by this function is C:\Windows.  If
                the system was installed in the root directory of drive C, the path retrieved
                is C:\.
            </param>
            <param name="size">
                Maximum size of the buffer specified by the <i>buffer</i> parameter, in TCHARs.
                This value should be set to at least MAX_PATH+1 to allow sufficient space for the
                path and the null-terminating character.
            </param>
            <returns>
                <para>
                    If the function succeeds, the return value is the length of the string copied
                    to the buffer, in TCHARs, not including the terminating null character.
                </para>
                <para>
                    If the length is greater than the size of the buffer, the return value is the
                    size of the buffer required to hold the path.
                </para>
                <para>
                    If the function fails, the return value is zero.  To get extended error
                    information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />.
                </para>
            </returns>
            <remarks>
                <para>
                    On a system that is running Terminal Server, each user has a unique Windows
                    directory.  The system Windows directory is shared by all users, so it is the
                    directory where an application should store initialization and help files that
                    apply to all users.
                </para>
                <para>
                    With Terminal Services, the <b>GetSystemWindowsDirectory</b> function
                    retrieves the path of the system Windows directory, while the
                    <see cref="M:CADability.Kernel.GetWindowsDirectory(System.Text.StringBuilder,System.Int32)" /> function retrieves the path of a Windows
                    directory that is private for each user.  On a single-user system,
                    <b>GetSystemWindowsDirectory</b> is the same as
                    <see cref="M:CADability.Kernel.GetWindowsDirectory(System.Text.StringBuilder,System.Int32)" />.
                </para>
                <para>
                    <b>Windows NT 4.0 Terminal Server Edition:</b>  To retrieve the shared
                    Windows directory, call <see cref="M:CADability.Kernel.GetSystemDirectory(System.Text.StringBuilder,System.Int32)" /> and trim the
                    "System32" element from the end of the returned path.
                </para>
            </remarks>
            <seealso cref="M:CADability.Kernel.GetWindowsDirectory(System.Text.StringBuilder,System.Int32)" />
        </member>
        <member name="M:CADability.Kernel.GetTickCount">
            <summary>
                The <b>GetTickCount</b> function retrieves the number of milliseconds that have
                elapsed since the system was started.  It is limited to the resolution of the
                system timer.  To obtain the system timer resolution, use the
                <b>GetSystemTimeAdjustment</b> function.
            </summary>
            <returns>
                The return value is the number of milliseconds that have elapsed since the system
                was started.
            </returns>
            <remarks>
                <para>
                    The elapsed time is stored as a DWORD value.  Therefore, the time will wrap
                    around to zero if the system is run continuously for 49.7 days.
                </para>
                <para>
                    If you need a higher resolution timer, use a multimedia timer or a
                    high-resolution timer.
                </para>
                <para>
                    To obtain the time elapsed since the computer was started, retrieve the System
                    Up Time counter in the performance data in the registry key
                    HKEY_PERFORMANCE_DATA.  The value returned is an 8-byte value.
                </para>
            </remarks>
        </member>
        <member name="M:CADability.Kernel.GetWindowsDirectory(System.Text.StringBuilder,System.Int32)">
            <summary>
                <para>
                    The <b>GetWindowsDirectory</b> function retrieves the path of the Windows
                    directory.  The Windows directory contains such files as applications,
                    initialization files, and help files.
                </para>
                <para>
                    This function is provided primarily for compatibility.  Applications should
                    store code in the Program Files folder and persistent data in the Application
                    Data folder in the user's profile.
                </para>
            </summary>
            <param name="buffer">
                Pointer to the buffer to receive the null-terminated string containing the path.
                This path does not end with a backslash unless the Windows directory is the root
                directory.  For example, if the Windows directory is named Windows on drive C, the
                path of the Windows directory retrieved by this function is C:\Windows.  If the
                system was installed in the root directory of drive C, the path retrieved is C:\.
            </param>
            <param name="size">
                Maximum size of the buffer specified by the <i>buffer</i> parameter, in TCHARs.
                This value should be set to MAX_PATH.
            </param>
            <returns>
                <para>
                    If the function succeeds, the return value is the length of the string copied
                    to the buffer, in TCHARs, not including the terminating null character.
                </para>
                <para>
                    If the length is greater than the size of the buffer, the return value is the
                    size of the buffer required to hold the path.
                </para>
                <para>
                    If the function fails, the return value is zero.  To get extended error
                    information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />.
                </para>
            </returns>
            <remarks>
                <para>
                    The Windows directory is the directory where an application should store
                    initialization and help files. If the user is running a shared version of the
                    system, the Windows directory is guaranteed to be private for each user.
                </para>
                <para>
                    If an application creates other files that it wants to store on a per-user
                    basis, it should place them in the directory specified by the HOMEPATH
                    environment variable.  This directory will be different for each user, if so
                    specified by an administrator, through the User Manager administrative tool.
                    HOMEPATH always specifies either the user's home directory, which is
                    guaranteed to be private for each user, or a default directory (for example,
                    C:\USERS\DEFAULT) where the user will have all access.
                </para>
                <para>
                    <b>Terminal Services:</b>  If the application is running in a Terminal
                    Services environment, each user has a unique Windows directory.  If an
                    application that is not Terminal-Services-aware calls this function, it
                    retrieves the path of the Windows directory on the client, not the Windows
                    directory on the server.
                </para>
            </remarks>
            <seealso cref="M:CADability.Kernel.GetSystemDirectory(System.Text.StringBuilder,System.Int32)" />
            <seealso cref="M:CADability.Kernel.GetSystemWindowsDirectory(System.Text.StringBuilder,System.Int32)" />
        </member>
        <member name="M:CADability.Kernel.GlobalMemoryStatus(CADability.Kernel.MEMORYSTATUS@)">
            <summary>
                <para>
                    The <b>GlobalMemoryStatus</b> function obtains information about the system's
                    current usage of both physical and virtual memory.
                </para>
                <para>
                    To obtain information about the extended portion of the virtual address space,
                    or if your application may run on computers with more than 4 GB of main
                    memory, use the <b>GlobalMemoryStatusEx</b> function.
                </para>
            </summary>
            <param name="buffer">
                Pointer to a <see cref="T:CADability.Kernel.MEMORYSTATUS" /> structure.  The <b>GlobalMemoryStatus</b>
                function stores information about current memory availability into this structure.
            </param>
            <remarks>
                <para>
                    You can use the <b>GlobalMemoryStatus</b> function to determine how much
                    memory your application can allocate without severely impacting other
                    applications.
                </para>
                <para>
                    The information returned by the <b>GlobalMemoryStatus</b> function is
                    volatile.  There is no guarantee that two sequential calls to this function
                    will return the same information.
                </para>
                <para>
                    On computers with more than 4 GB of memory, the <b>GlobalMemoryStatus</b>
                    function can return incorrect information.  Windows 2000 and later report a
                    value of -1 to indicate an overflow.  Earlier versions of Windows NT report a
                    value that is the real amount of memory, modulo 4 GB.  For this reason, use
                    the <b>GlobalMemoryStatusEx</b> function instead.
                </para>
                <para>
                    On Intel x86 computers with more than 2 GB and less than 4 GB of memory, the
                    <b>GlobalMemoryStatus</b> function will always return 2 GB in the
                    <see cref="F:CADability.Kernel.MEMORYSTATUS.TotalPhys" /> member of the
                    <see cref="T:CADability.Kernel.MEMORYSTATUS" /> structure.  Similarly, if the total available
                    memory is between 2 and 4 GB, the <see cref="F:CADability.Kernel.MEMORYSTATUS.AvailPhys" /> member
                    of the <see cref="T:CADability.Kernel.MEMORYSTATUS" /> structure will be rounded down to 2 GB.  If
                    the executable is linked using the /LARGEADDRESSWARE linker option, then the
                    <b>GlobalMemoryStatus</b> function will return the correct amount of physical
                    memory in both members.
                </para>
            </remarks>
            <seealso cref="T:CADability.Kernel.MEMORYSTATUS" />
        </member>
        <member name="M:CADability.Kernel.IsProcessorFeaturePresent(System.Int32)">
            <summary>
                The <b>IsProcessorFeaturePresent</b> function determines whether the specified
                processor feature is supported by the current computer.
            </summary>
            <param name="processorFeature">
                <para>
                    Processor feature to be tested.  This parameter can be one of the following
                    values:
                </para>
                <para>
                    <list type="table">
                        <listheader>
                            <term>Value</term>
                            <description>Description</description>
                        </listheader>
                        <item>
                            <term><see cref="!:WinNt.PF_3DNOW_INSTRUCTIONS_AVAILABLE" /></term>
                            <description>
                                The 3D-Now instruction set is available.
                            </description>
                        </item>
                        <item>
                            <term><see cref="!:WinNt.PF_COMPARE_EXCHANGE_DOUBLE" /></term>
                            <description>
                                The compare and exchange double operation is available (Pentium,
                                MIPS, and Alpha).
                            </description>
                        </item>
                        <item>
                            <term><see cref="!:WinNt.PF_FLOATING_POINT_EMULATED" /></term>
                            <description>
                                <para>
                                    Floating-point operations are emulated using a software
                                    emulator.
                                </para>
                                <para>
                                    This function returns true if floating-point operations are
                                    emulated; otherwise, it returns false.
                                </para>
                                <para>
                                    <b>Windows NT 4.0:</b>  This function returns false if
                                    floating-point operations are emulated; otherwise, it returns
                                    true.  This behavior is a bug that is fixed in later versions.
                                </para>
                            </description>
                        </item>
                        <item>
                            <term><see cref="!:WinNt.PF_FLOATING_POINT_PRECISION_ERRATA" /></term>
                            <description>
                                <b>Pentium:</b>  In rare circumstances, a floating-point precision
                                error can occur.
                            </description>
                        </item>
                        <item>
                            <term><see cref="!:WinNt.PF_MMX_INSTRUCTIONS_AVAILABLE" /></term>
                            <description>
                                The MMX instruction set is available.
                            </description>
                        </item>
                        <item>
                            <term><see cref="!:WinNt.PF_PAE_ENABLED" /></term>
                            <description>
                                The processor is PAE-enabled.
                            </description>
                        </item>
                        <item>
                            <term><see cref="!:WinNt.PF_RDTSC_INSTRUCTION_AVAILABLE" /></term>
                            <description>
                                The RDTSC instruction is available.
                            </description>
                        </item>
                        <item>
                            <term><see cref="!:WinNt.PF_XMMI_INSTRUCTIONS_AVAILABLE" /></term>
                            <description>
                                The SSE instruction set is available.
                            </description>
                        </item>
                        <item>
                            <term><see cref="!:WinNt.PF_XMMI64_INSTRUCTIONS_AVAILABLE" /></term>
                            <description>
                                The SSE2 instruction set is available.
                            </description>
                        </item>
                    </list>
                </para>
            </param>
            <returns>
                <para>
                    If the feature is supported, the return value is true.
                </para>
                <para>
                    If the feature is not supported, the return value is false.
                </para>
            </returns>
        </member>
        <member name="M:CADability.Kernel.LoadLibrary(System.String)">
            <summary>
                The <b>LoadLibrary</b> function maps the specified executable module into the
                address space of the calling process.
            </summary>
            <param name="fileName">
                <para>
                    Pointer to a null-terminated string that names the executable module (either
                    a .dll or .exe file).  The name specified is the file name of the module and
                    is not related to the name stored in the library module itself, as specified
                    by the LIBRARY keyword in the module-definition (.def) file.
                </para>
                <para>
                    If the string specifies a path but the file does not exist in the specified
                    directory, the function fails.  When specifying a path, be sure to use
                    backslashes (\), not forward slashes (/).
                </para>
                <para>
                    If the string does not specify a path, the function uses a standard search
                    strategy to find the file.  See the Remarks for more information.
                </para>
            </param>
            <returns>
                <para>
                    If the function succeeds, the return value is a handle to the module (IntPtr).
                </para>
                <para>
                    If the function fails, the return value is NULL (IntPtr.Zero).  To get
                    extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />.
                </para>
                <para>
                    <b>Windows Me/98/95:</b>  If you are using <b>LoadLibrary</b> to load a module
                    that contains a resource whose numeric identifier is greater than 0x7FFF,
                    <b>LoadLibrary</b> fails.  If you are attempting to load a 16-bit DLL directly
                    from 32-bit code, <b>LoadLibrary</b> fails.  If you are attempting to load a
                    DLL whose subsystem version is greater than 4.0, <b>LoadLibrary</b> fails.  If
                    your <b>DllMain</b> function tries to call the Unicode version of a function,
                    <b>LoadLibrary</b> fails.
                </para>
            </returns>
            <remarks>
                <para>
                    <b>LoadLibrary</b> can be used to map a DLL module and return a handle that
                    can be used in <see cref="M:CADability.Kernel.GetProcAddress(System.IntPtr,System.String)" /> to get the address of a DLL
                    function.  <b>LoadLibrary</b> can also be used to map other executable
                    modules.  For example, the function can specify an .exe file to get a
                    handle that can be used in <b>FindResource</b> or <b>LoadResource</b>.
                    However, do not use <b>LoadLibrary</b> to run an .exe file, use the
                    <b>CreateProcess</b> function.
                </para>
                <para>
                    If the module is a DLL not already mapped for the calling process, the system
                    calls the DLL's <b>DllMain</b> function with the DLL_PROCESS_ATTACH value.  If
                    the DLL's entry-point function does not return TRUE, <b>LoadLibrary</b> fails
                    and returns NULL.  (The system immediately calls your entry-point function
                    with DLL_PROCESS_DETACH and unloads the DLL.)
                </para>
                <para>
                    It is not safe to call <b>LoadLibrary</b> from <b>DllMain</b>.  For more
                    information, see the Remarks section in <b>DllMain</b>.
                </para>
                <para>
                    Module handles are not global or inheritable.  A call to <b>LoadLibrary</b> by
                    one process does not produce a handle that another process can use ‚Äî for
                    example, in calling <see cref="M:CADability.Kernel.GetProcAddress(System.IntPtr,System.String)" />.  The other process must
                    make its own call to <b>LoadLibrary</b> for the module before calling
                    <see cref="M:CADability.Kernel.GetProcAddress(System.IntPtr,System.String)" />.
                </para>
                <para>
                    If no file name extension is specified in the <i>fileName</i> parameter, the
                    default library extension .dll is appended.  However, the file name string
                    can include a trailing point character (.) to indicate that the module name
                    has no extension.  When no path is specified, the function searches for loaded
                    modules whose base name matches the base name of the module to be loaded.  If
                    the name matches, the load succeeds.  Otherwise, the function searches for the
                    file in the following sequence:
                </para>
                <para>
                    <list type="number">
                        <item>
                            <description>
                                The directory from which the application loaded.
                            </description>
                        </item>
                        <item>
                            <description>
                                The current directory.
                            </description>
                        </item>
                        <item>
                            <description>
                                The system directory.  Use the <see cref="M:CADability.Kernel.GetSystemDirectory(System.Text.StringBuilder,System.Int32)" />
                                function to get the path of this directory.
                            </description>
                        </item>
                        <item>
                            <description>
                                <para>
                                    The 16-bit system directory.  There is no function that
                                    obtains the path of this directory, but it is searched.
                                </para>
                                <para>
                                    <b>Windows Me/98/95:</b>  This directory does not exist.
                                </para>
                            </description>
                        </item>
                        <item>
                            <description>
                                The Windows directory.  Use the <see cref="M:CADability.Kernel.GetWindowsDirectory(System.Text.StringBuilder,System.Int32)" />
                                function to get the path of this directory.
                            </description>
                        </item>
                        <item>
                            <description>
                                The directories that are listed in the PATH environment variable.
                            </description>
                        </item>
                    </list>
                </para>
                <para>
                    <b>Windows Server 2003, Windows XP SP1:</b>  The default value of
                    HKLM\System\CurrentControlSet\Control\Session Manager\SafeDllSearchMode is 1
                    (current directory is searched after the system and Windows directories).
                </para>
                <para>
                    <b>Windows XP:</b>  If
                    HKLM\System\CurrentControlSet\Control\Session Manager\SafeDllSearchMode is 1,
                    the current directory is searched after the system and Windows directories,
                    but before the directories in the PATH environment variable.  The default
                    value is 0 (current directory is searched before the system and Windows
                    directories).
                </para>
                <para>
                    The first directory searched is the one directory containing the image file
                    used to create the calling process (for more information, see the
                    <b>CreateProcess</b> function).  Doing this allows private dynamic-link
                    library (DLL) files associated with a process to be found without adding the
                    process's installed directory to the PATH environment variable.
                </para>
                <para>
                    The search path can be altered using the <see cref="M:CADability.Kernel.SetDllDirectory(System.String)" />
                    function.  This solution is recommended instead of using
                    <b>SetCurrentDirectory</b> or hard-coding the full path to the DLL.
                </para>
                <para>
                    If a path is specified and there is a redirection file for the application,
                    the function searches for the module in the application's directory.  If the
                    module exists in the application's directory, the <b>LoadLibrary</b> function
                    ignores the specified path and loads the module from the application's
                    directory.  If the module does not exist in the application's directory,
                    <b>LoadLibrary</b> loads the module from the specified directory.
                </para>
            </remarks>
            <seealso cref="M:CADability.Kernel.FreeLibrary(System.IntPtr)" />
            <seealso cref="M:CADability.Kernel.GetProcAddress(System.IntPtr,System.String)" />
            <seealso cref="M:CADability.Kernel.GetSystemDirectory(System.Text.StringBuilder,System.Int32)" />
            <seealso cref="M:CADability.Kernel.GetWindowsDirectory(System.Text.StringBuilder,System.Int32)" />
            <seealso cref="M:CADability.Kernel.SetDllDirectory(System.String)" />
        </member>
        <member name="M:CADability.Kernel.QueryPerformanceCounter(System.Int64@)">
            <summary>
                The <b>QueryPerformanceCounter</b> function retrieves the current value of the
                high-resolution performance counter.
            </summary>
            <param name="performanceCount">
                Pointer to a variable that receives the current performance-counter value, in
                counts.
            </param>
            <returns>
                <para>
                    If the function succeeds, the return value is true.
                </para>
                <para>
                    If the function fails, the return value is false.  To get extended error
                    information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />.
                </para>
            </returns>
            <remarks>
                On a multiprocessor machine, it should not matter which processor is called.
                However, you can get different results on different processors due to bugs in the
                BIOS or the HAL.  To specify processor affinity for a thread, use the
                <b>SetThreadAffinityMask</b> function.
            </remarks>
            <seealso cref="M:CADability.Kernel.QueryPerformanceCounterFast(System.Int64@)" />
            <seealso cref="M:CADability.Kernel.QueryPerformanceFrequency(System.Int64@)" />
        </member>
        <member name="M:CADability.Kernel.QueryPerformanceCounterFast(System.Int64@)">
            <summary>
                The <b>QueryPerformanceCounterFast</b> function retrieves the current value of the
                high-resolution performance counter.
            </summary>
            <param name="performanceCount">
                Pointer to a variable that receives the current performance-counter value, in
                counts.
            </param>
            <returns>
                <para>
                    If the function succeeds, the return value is true.
                </para>
                <para>
                    If the function fails, the return value is false.
                </para>
            </returns>
            <remarks>
                <para>
                    This version of <see cref="M:CADability.Kernel.QueryPerformanceCounter(System.Int64@)" /> is slightly faster.  It
                    does not set the last Windows error.  Use with care.
                </para>
                <para>
                    On a multiprocessor machine, it should not matter which processor is called.
                    However, you can get different results on different processors due to bugs in
                    the BIOS or the HAL.  To specify processor affinity for a thread, use the
                    <b>SetThreadAffinityMask</b> function.
                </para>
            </remarks>
            <seealso cref="M:CADability.Kernel.QueryPerformanceCounter(System.Int64@)" />
            <seealso cref="M:CADability.Kernel.QueryPerformanceFrequency(System.Int64@)" />
        </member>
        <member name="M:CADability.Kernel.QueryPerformanceFrequency(System.Int64@)">
            <summary>
                The <b>QueryPerformanceFrequency</b> function retrieves the frequency of the
                high-resolution performance counter, if one exists.  The frequency cannot change
                while the system is running.
            </summary>
            <param name="frequency">
                Pointer to a variable that receives the current performance-counter frequency, in
                counts per second.  If the installed hardware does not support a high-resolution
                performance counter, this parameter can be zero.
            </param>
            <returns>
                <para>
                    If the installed hardware supports a high-resolution performance counter, the
                    return value is true.
                </para>
                <para>
                    If the function fails, the return value is false.  To get extended error
                    information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />.  For example, if
                    the installed hardware does not support a high-resolution performance counter,
                    the function fails.
                </para>
            </returns>
            <remarks>
                <b>Note</b>  The frequency of the high-resolution performance counter is not the
                processor speed.
            </remarks>
            <seealso cref="M:CADability.Kernel.QueryPerformanceCounter(System.Int64@)" />
        </member>
        <member name="M:CADability.Kernel.SetDllDirectory(System.String)">
            <summary>
                The <b>SetDllDirectory</b> function modifies the search path used to locate DLLs
                for the application.
            </summary>
            <param name="pathName">
                Pointer to a null-terminated string that specifies the directories to be added to
                the search path, separated by semicolons.  If this parameter is NULL, the default
                search path is used.
            </param>
            <returns>
                <para>
                    If the function succeeds, the return value is true.
                </para>
                <para>
                    If the function fails, the return value is false.  To get extended error
                    information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />.
                </para>
            </returns>
            <remarks>
                <para>
                    The <b>SetDllDirectory</b> function affects all subsequent calls to the
                    <see cref="M:CADability.Kernel.LoadLibrary(System.String)" /> and <b>LoadLibraryEx</b> functions.  After calling
                    <b>SetDllDirectory</b>, the DLL search path is:
                </para>
                <para>
                    <list type="number">
                        <item>
                            <description>
                                The directory from which the application loaded.
                            </description>
                        </item>
                        <item>
                            <description>
                                The directory specified by the <i>pathName</i> parameter.
                            </description>
                        </item>
                        <item>
                            <description>
                                The system directory.  Use the <see cref="M:CADability.Kernel.GetSystemDirectory(System.Text.StringBuilder,System.Int32)" />
                                function to get the path of this directory.  The name of this
                                directory is System32.
                            </description>
                        </item>
                        <item>
                            <description>
                                The 16-bit system directory.  There is no function that obtains
                                the path of this directory, but it is searched.  The name of this
                                directory is System.
                            </description>
                        </item>
                        <item>
                            <description>
                                The Windows directory.  Use the <see cref="M:CADability.Kernel.GetWindowsDirectory(System.Text.StringBuilder,System.Int32)" />
                                function to get the path of this directory.
                            </description>
                        </item>
                        <item>
                            <description>
                                The directories that are listed in the PATH environment variable.
                            </description>
                        </item>
                    </list>
                </para>
                <para>
                    To revert to the default search path used by <see cref="M:CADability.Kernel.LoadLibrary(System.String)" /> and
                    <b>LoadLibraryEx</b>, call <b>SetDllDirectory</b> with NULL.
                </para>
            </remarks>
            <seealso cref="M:CADability.Kernel.GetDllDirectory(System.Int32,System.Text.StringBuilder)" />
            <seealso cref="M:CADability.Kernel.GetSystemDirectory(System.Text.StringBuilder,System.Int32)" />
            <seealso cref="M:CADability.Kernel.GetWindowsDirectory(System.Text.StringBuilder,System.Int32)" />
            <seealso cref="M:CADability.Kernel.LoadLibrary(System.String)" />
        </member>
        <member name="M:CADability.Kernel.SetProcessWorkingSetSize(System.IntPtr,System.Int32,System.Int32)">
            <summary>
                The <b>SetProcessWorkingSetSize</b> function sets the minimum and maximum working
                set sizes for the specified process.
            </summary>
            <param name="process">
                <para>
                    Handle to the process whose working set sizes is to be set.
                </para>
                <para>
                    The handle must have the PROCESS_SET_QUOTA access right.
                </para>
            </param>
            <param name="minimumWorkingSetSize">
                <para>
                    Minimum working set size for the process, in bytes.  The virtual memory
                    manager attempts to keep at least this much memory resident in the
                    process whenever the process is active.
                </para>
                <para>
                    If both <i>minimumWorkingSetSize</i> and <i>maximumWorkingSetSize</i> have the
                    value -1, the function temporarily trims the working set of the specified
                    process to zero.  This essentially swaps the process out of physical RAM
                    memory.
                </para>
            </param>
            <param name="maximumWorkingSetSize">
                <para>
                    Maximum working set size for the process, in bytes.  The virtual memory
                    manager attempts to keep no more than this much memory resident in the
                    process whenever the process is active and memory is in short supply.
                </para>
                <para>
                    If both <i>minimumWorkingSetSize</i> and <i>maximumWorkingSetSize</i> have the
                    value -1, the function temporarily trims the working set of the specified
                    process to zero.  This essentially swaps the process out of physical RAM
                    memory.
                </para>
            </param>
            <returns>
                <para>
                    If the function succeeds, the return value is true.
                </para>
                <para>
                    If the function fails, the return value is false.  To get extended error
                    information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />.
                </para>
            </returns>
            <remarks>
                <para>
                    The working set of a process is the set of memory pages currently visible to
                    the process in physical RAM memory.  These pages are resident and available
                    for an application to use without triggering a page fault.  The minimum and
                    maximum working set sizes affect the virtual memory paging behavior of a
                    process.
                </para>
                <para>
                    The working set of the specified process can be emptied by specifying the
                    value -1 for both the minimum and maximum working set sizes.
                </para>
                <para>
                    If the values of either <i>minimumWorkingSetSize</i> or
                    <i>maximumWorkingSetSize</i> are greater than the process' current working
                    set sizes, the specified process must have the SE_INC_BASE_PRIORITY_NAME
                    privilege.  Users in the Administrators and Power Users groups generally
                    have this privilege.
                </para>
                <para>
                    The operating system allocates working set sizes on a first-come,
                    first-served basis.  For example, if an application successfully sets 40
                    megabytes as its minimum working set size on a 64-megabyte system, and a
                    second application requests a 40-megabyte working set size, the operating
                    system denies the second application's request.
                </para>
                <para>
                    Using the <b>SetProcessWorkingSetSize</b> function to set an application's
                    minimum and maximum working set sizes does not guarantee that the requested
                    memory will be reserved, or that it will remain resident at all times.  When
                    the application is idle, or a low-memory situation causes a demand for memory,
                    the operating system can reduce the application's working set.  An application
                    can use the <b>VirtualLock</b> function to lock ranges of the application's
                    virtual address space in memory; however, that can potentially degrade the
                    performance of the system.
                </para>
                <para>
                    When you increase the working set size of an application, you are taking away
                    physical memory from the rest of the system.  This can degrade the performance
                    of other applications and the system as a whole.  It can also lead to failures
                    of operations that require physical memory to be present; for example,
                    creating processes, threads, and kernel pool.  Thus, you must use the
                    <b>SetProcessWorkingSetSize</b> function carefully.  You must always consider
                    the performance of the whole system when you are designing an application.
                </para>
            </remarks>
            <seealso cref="M:CADability.Kernel.GetProcessWorkingSetSize(System.IntPtr,System.Int32@,System.Int32@)" />
        </member>
        <member name="T:CADability.Gl">
            <summary>
            OpenGL wrapper methods and constants. See OpenGL documentation for more information.
            </summary>
        </member>
        <member name="F:CADability.Glu.GLUnurbs.Data">
            <summary>
                Keeps the struct from being garbage collected prematurely.
            </summary>
        </member>
        <member name="F:CADability.Gdi.PFD_TYPE_RGBA">
            <summary>
                RGBA pixels.  Each pixel has four components in this order: red, green, blue,
                and alpha.
            </summary>
        </member>
        <member name="F:CADability.Gdi.PFD_TYPE_COLORINDEX">
            <summary>
                Color-index pixels.  Each pixel uses a color-index value.
            </summary>
        </member>
        <member name="F:CADability.Gdi.PFD_MAIN_PLANE">
            <summary>
                The layer is the main plane.
            </summary>
        </member>
        <member name="F:CADability.Gdi.PFD_DOUBLEBUFFER">
            <summary>
                <para>
                    The buffer is double-buffered.  This flag and <see cref="F:CADability.Gdi.PFD_SUPPORT_GDI" />
                    are mutually exclusive in the current generic implementation.
                </para>
            </summary>
        </member>
        <member name="F:CADability.Gdi.PFD_STEREO">
            <summary>
                <para>
                    The buffer is stereoscopic.  This flag is not supported in the current
                    generic implementation.
                </para>
            </summary>
        </member>
        <member name="F:CADability.Gdi.PFD_DRAW_TO_WINDOW">
            <summary>
                <para>
                    The buffer can draw to a window or device surface.
                </para>
            </summary>
        </member>
        <member name="F:CADability.Gdi.PFD_DRAW_TO_BITMAP">
            <summary>
                <para>
                    The buffer can draw to a memory bitmap.
                </para>
            </summary>
        </member>
        <member name="F:CADability.Gdi.PFD_SUPPORT_GDI">
            <summary>
                <para>
                    The buffer supports GDI drawing.  This flag and
                    <see cref="F:CADability.Gdi.PFD_DOUBLEBUFFER" /> are mutually exclusive in the current generic
                    implementation.
                </para>
            </summary>
        </member>
        <member name="F:CADability.Gdi.PFD_SUPPORT_OPENGL">
            <summary>
                <para>
                    The buffer supports OpenGL drawing.
                </para>
            </summary>
        </member>
        <member name="F:CADability.Gdi.PFD_GENERIC_FORMAT">
            <summary>
                <para>
                    The pixel format is supported by the GDI software implementation, which is
                    also known as the generic implementation.  If this bit is clear, the pixel
                    format is supported by a device driver or hardware.
                </para>
            </summary>
        </member>
        <member name="F:CADability.Gdi.PFD_NEED_PALETTE">
            <summary>
                <para>
                    The buffer uses RGBA pixels on a palette-managed device.  A logical palette
                    is required to achieve the best results for this pixel type.  Colors in the
                    palette should be specified according to the values of the <b>cRedBits</b>,
                    <b>cRedShift</b>, <b>cGreenBits</b>, <b>cGreenShift</b>, <b>cBluebits</b>,
                    and <b>cBlueShift</b> members.  The palette should be created and realized in
                    the device context before calling <see cref="M:CADability.Wgl.wglMakeCurrent(System.IntPtr,System.IntPtr)" />.
                </para>
            </summary>
        </member>
        <member name="F:CADability.Gdi.PFD_NEED_SYSTEM_PALETTE">
            <summary>
                <para>
                    Defined in the pixel format descriptors of hardware that supports one
                    hardware palette in 256-color mode only.  For such systems to use
                    hardware acceleration, the hardware palette must be in a fixed order
                    (for example, 3-3-2) when in RGBA mode or must match the logical palette
                    when in color-index mode.
                </para>
                <para>
                    When this flag is set, you must call <see cref="!:SetSystemPaletteUse" /> in
                    your program to force a one-to-one mapping of the logical palette and the
                    system palette.  If your OpenGL hardware supports multiple hardware palettes
                    and the device driver can allocate spare hardware palettes for OpenGL, this
                    flag is typically clear.
                </para>
                <para>
                    This flag is not set in the generic pixel formats.
                </para>
            </summary>
        </member>
        <member name="F:CADability.Gdi.PFD_SWAP_EXCHANGE">
            <summary>
                <para>
                    Specifies the content of the back buffer in the double-buffered main color
                    plane following a buffer swap.  Swapping the color buffers causes the
                    exchange of the back buffer's content with the front buffer's content.
                    Following the swap, the back buffer's content contains the front buffer's
                    content before the swap. <b>PFD_SWAP_EXCHANGE</b> is a hint only and might
                    not be provided by a driver.
                </para>
            </summary>
        </member>
        <member name="F:CADability.Gdi.PFD_SWAP_COPY">
            <summary>
                <para>
                    Specifies the content of the back buffer in the double-buffered main color
                    plane following a buffer swap.  Swapping the color buffers causes the content
                    of the back buffer to be copied to the front buffer.  The content of the back
                    buffer is not affected by the swap.  <b>PFD_SWAP_COPY</b> is a hint only and
                    might not be provided by a driver.
                </para>
            </summary>
        </member>
        <member name="F:CADability.Gdi.PFD_SWAP_LAYER_BUFFERS">
            <summary>
                <para>
                    Indicates whether a device can swap individual layer planes with pixel
                    formats that include double-buffered overlay or underlay planes.
                    Otherwise all layer planes are swapped together as a group.  When this
                    flag is set, <see cref="!:Wgl.wglSwapLayerBuffers" /> is supported.
                </para>
            </summary>
        </member>
        <member name="F:CADability.Gdi.PFD_GENERIC_ACCELERATED">
            <summary>
                <para>
                    The pixel format is supported by a device driver that accelerates the generic
                    implementation.  If this flag is clear and the
                    <see cref="F:CADability.Gdi.PFD_GENERIC_FORMAT" /> flag is set, the pixel format is supported
                    by the generic implementation only.
                </para>
            </summary>
        </member>
        <member name="F:CADability.Gdi.PFD_SUPPORT_DIRECTDRAW">
            <summary>
                <para>
                    The buffer supports DirectDraw drawing.
                </para>
            </summary>
        </member>
        <member name="F:CADability.Gdi.PIXELFORMATDESCRIPTOR.nSize">
            <summary>
            Specifies the size of this data structure. This value should be set to <c>sizeof(PIXELFORMATDESCRIPTOR)</c>.
            </summary>
        </member>
        <member name="F:CADability.Gdi.PIXELFORMATDESCRIPTOR.nVersion">
            <summary>
            Specifies the version of this data structure. This value should be set to 1.
            </summary>
        </member>
        <member name="F:CADability.Gdi.PIXELFORMATDESCRIPTOR.dwFlags">
            <summary>
            A set of bit flags that specify properties of the pixel buffer. The properties are generally not mutually exclusive;
            you can set any combination of bit flags, with the exceptions noted.
            </summary>
            <remarks>
                <para>The following bit flag constants are defined:</para>
                <list type="table">
            		<listheader>
            			<term>Value</term>
            			<description>Meaning</description>
            		</listheader>
            		<item>
            			<term>PFD_DRAW_TO_WINDOW</term>
            			<description>The buffer can draw to a window or device surface.</description>
            		</item>
            		<item>
            			<term>PFD_DRAW_TO_BITMAP</term>
            			<description>The buffer can draw to a memory bitmap.</description>
            		</item>
            		<item>
            			<term>PFD_SUPPORT_GDI</term>
            			<description>
            				The buffer supports GDI drawing. This flag and PFD_DOUBLEBUFFER are mutually exclusive
            				in the current generic implementation.
            			</description>
            		</item>
            		<item>
            			<term>PFD_SUPPORT_OPENGL</term>
            			<description>The buffer supports OpenGL drawing.</description>
            		</item>
            		<item>
            			<term>PFD_GENERIC_ACCELERATED</term>
            			<description>
            				The pixel format is supported by a device driver that accelerates the generic implementation.
            				If this flag is clear and the PFD_GENERIC_FORMAT flag is set, the pixel format is supported by
            				the generic implementation only.
            			</description>
            		</item>
            		<item>
            			<term>PFD_GENERIC_FORMAT</term>
            			<description>
            				The pixel format is supported by the GDI software implementation, which is also known as the
            				generic implementation. If this bit is clear, the pixel format is supported by a device
            				driver or hardware.
            			</description>
            		</item>
            		<item>
            			<term>PFD_NEED_PALETTE</term>
            			<description>
            				The buffer uses RGBA pixels on a palette-managed device. A logical palette is required to achieve
            				the best results for this pixel type. Colors in the palette should be specified according to the
            				values of the <b>cRedBits</b>, <b>cRedShift</b>, <b>cGreenBits</b>, <b>cGreenShift</b>,
            				<b>cBluebits</b>, and <b>cBlueShift</b> members. The palette should be created and realized in
            				the device context before calling <see cref="M:CADability.Wgl.wglMakeCurrent(System.IntPtr,System.IntPtr)" />.
            			</description>
            		</item>
            		<item>
            			<term>PFD_NEED_SYSTEM_PALETTE</term>
            			<description>
            				Defined in the pixel format descriptors of hardware that supports one hardware palette in
            				256-color mode only. For such systems to use hardware acceleration, the hardware palette must be in
            				a fixed order (for example, 3-3-2) when in RGBA mode or must match the logical palette when in
            				color-index mode.
            				
            				When this flag is set, you must call SetSystemPaletteUse in your program to force a one-to-one
            				mapping of the logical palette and the system palette. If your OpenGL hardware supports multiple
            				hardware palettes and the device driver can allocate spare hardware palettes for OpenGL, this
            				flag is typically clear.
            				
            				This flag is not set in the generic pixel formats.
            			</description>
            		</item>
            		<item>
            			<term>PFD_DOUBLEBUFFER</term>
            			<description>
            				The buffer is double-buffered. This flag and PFD_SUPPORT_GDI are mutually exclusive in the
            				current generic implementation.
            			</description>
            		</item>
            		<item>
            			<term>PFD_STEREO</term>
            			<description>
            				The buffer is stereoscopic. This flag is not supported in the current generic implementation.
            			</description>
            		</item>
            		<item>
            			<term>PFD_SWAP_LAYER_BUFFERS</term>
            			<description>
            				Indicates whether a device can swap individual layer planes with pixel formats that include
            				double-buffered overlay or underlay planes. Otherwise all layer planes are swapped together
            				as a group. When this flag is set, <b>wglSwapLayerBuffers</b> is supported.
            			</description>
            		</item>
            	</list>
            	<para>You can specify the following bit flags when calling <see cref="M:CADability.Gdi.ChoosePixelFormat(System.IntPtr,CADability.Gdi.PIXELFORMATDESCRIPTOR@)" />.</para>
            	<list type="table">
            		<listheader>
            			<term>Value</term>
            			<description>Meaning</description>
            		</listheader>
            		<item>
            			<term>PFD_DEPTH_DONTCARE</term>
            			<description>
            				The requested pixel format can either have or not have a depth buffer. To select
            				a pixel format without a depth buffer, you must specify this flag. The requested pixel format
            				can be with or without a depth buffer. Otherwise, only pixel formats with a depth buffer
            				are considered.
            			</description>
            		</item>
            		<item>
            			<term>PFD_DOUBLEBUFFER_DONTCARE</term>
            			<description>The requested pixel format can be either single- or double-buffered.</description>
            		</item>
            		<item>
            			<term>PFD_STEREO_DONTCARE</term>
            			<description>The requested pixel format can be either monoscopic or stereoscopic.</description>
            		</item>
            	</list>
            	<para>
            		With the <b>glAddSwapHintRectWIN</b> extension function, two new flags are included for the
            		<b>PIXELFORMATDESCRIPTOR</b> pixel format structure.
            	</para>
            	<list type="table">
            		<listheader>
            			<term>Value</term>
            			<description>Meaning</description>
            		</listheader>
            		<item>
            			<term>PFD_SWAP_COPY</term>
            			<description>
            				Specifies the content of the back buffer in the double-buffered main color plane following
            				a buffer swap. Swapping the color buffers causes the content of the back buffer to be copied
            				to the front buffer. The content of the back buffer is not affected by the swap. PFD_SWAP_COPY
            				is a hint only and might not be provided by a driver.
            			</description>
            		</item>
            		<item>
            			<term>PFD_SWAP_EXCHANGE</term>
            			<description>
            				Specifies the content of the back buffer in the double-buffered main color plane following a
            				buffer swap. Swapping the color buffers causes the exchange of the back buffer's content
            				with the front buffer's content. Following the swap, the back buffer's content contains the
            				front buffer's content before the swap. PFD_SWAP_EXCHANGE is a hint only and might not be
            				provided by a driver.
            			</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="F:CADability.Gdi.PIXELFORMATDESCRIPTOR.iPixelType">
            <summary>
            Specifies the type of pixel data. The following types are defined.
            </summary>
            <remarks>
            	<list type="table">
            		<listheader>
            			<term>Value</term>
            			<description>Meaning</description>
            		</listheader>
            		<item>
            			<term>PFD_TYPE_RGBA</term>
            			<description>
            				RGBA pixels. Each pixel has four components in this order: red, green, blue, and alpha.
            			</description>
            		</item>
            		<item>
            			<term>PFD_TYPE_COLORINDEX</term>
            			<description>Color-index pixels. Each pixel uses a color-index value.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="F:CADability.Gdi.PIXELFORMATDESCRIPTOR.cColorBits">
            <summary>
            Specifies the number of color bitplanes in each color buffer. For RGBA pixel types, it is the size
            of the color buffer, excluding the alpha bitplanes. For color-index pixels, it is the size of the
            color-index buffer.
            </summary>
        </member>
        <member name="F:CADability.Gdi.PIXELFORMATDESCRIPTOR.cRedBits">
            <summary>
            Specifies the number of red bitplanes in each RGBA color buffer.
            </summary>
        </member>
        <member name="F:CADability.Gdi.PIXELFORMATDESCRIPTOR.cRedShift">
            <summary>
            Specifies the shift count for red bitplanes in each RGBA color buffer.
            </summary>
        </member>
        <member name="F:CADability.Gdi.PIXELFORMATDESCRIPTOR.cGreenBits">
            <summary>
            Specifies the number of green bitplanes in each RGBA color buffer.
            </summary>
        </member>
        <member name="F:CADability.Gdi.PIXELFORMATDESCRIPTOR.cGreenShift">
            <summary>
            Specifies the shift count for green bitplanes in each RGBA color buffer.
            </summary>
        </member>
        <member name="F:CADability.Gdi.PIXELFORMATDESCRIPTOR.cBlueBits">
            <summary>
            Specifies the number of blue bitplanes in each RGBA color buffer.
            </summary>
        </member>
        <member name="F:CADability.Gdi.PIXELFORMATDESCRIPTOR.cBlueShift">
            <summary>
            Specifies the shift count for blue bitplanes in each RGBA color buffer.
            </summary>
        </member>
        <member name="F:CADability.Gdi.PIXELFORMATDESCRIPTOR.cAlphaBits">
            <summary>
            Specifies the number of alpha bitplanes in each RGBA color buffer. Alpha bitplanes are not supported.
            </summary>
        </member>
        <member name="F:CADability.Gdi.PIXELFORMATDESCRIPTOR.cAlphaShift">
            <summary>
            Specifies the shift count for alpha bitplanes in each RGBA color buffer. Alpha bitplanes are not supported.
            </summary>
        </member>
        <member name="F:CADability.Gdi.PIXELFORMATDESCRIPTOR.cAccumBits">
            <summary>
            Specifies the total number of bitplanes in the accumulation buffer.
            </summary>
        </member>
        <member name="F:CADability.Gdi.PIXELFORMATDESCRIPTOR.cAccumRedBits">
            <summary>
            Specifies the number of red bitplanes in the accumulation buffer.
            </summary>
        </member>
        <member name="F:CADability.Gdi.PIXELFORMATDESCRIPTOR.cAccumGreenBits">
            <summary>
            Specifies the number of green bitplanes in the accumulation buffer.
            </summary>
        </member>
        <member name="F:CADability.Gdi.PIXELFORMATDESCRIPTOR.cAccumBlueBits">
            <summary>
            Specifies the number of blue bitplanes in the accumulation buffer.
            </summary>
        </member>
        <member name="F:CADability.Gdi.PIXELFORMATDESCRIPTOR.cAccumAlphaBits">
            <summary>
            Specifies the number of alpha bitplanes in the accumulation buffer.
            </summary>
        </member>
        <member name="F:CADability.Gdi.PIXELFORMATDESCRIPTOR.cDepthBits">
            <summary>
            Specifies the depth of the depth (z-axis) buffer.
            </summary>
        </member>
        <member name="F:CADability.Gdi.PIXELFORMATDESCRIPTOR.cStencilBits">
            <summary>
            Specifies the depth of the stencil buffer.
            </summary>
        </member>
        <member name="F:CADability.Gdi.PIXELFORMATDESCRIPTOR.cAuxBuffers">
            <summary>
            Specifies the number of auxiliary buffers. Auxiliary buffers are not supported.
            </summary>
        </member>
        <member name="F:CADability.Gdi.PIXELFORMATDESCRIPTOR.iLayerType">
            <summary>
            Ignored. Earlier implementations of OpenGL used this member, but it is no longer used.
            </summary>
            <remarks>Specifies the type of layer.</remarks>
        </member>
        <member name="F:CADability.Gdi.PIXELFORMATDESCRIPTOR.bReserved">
            <summary>
            Specifies the number of overlay and underlay planes. Bits 0 through 3 specify up to 15 overlay planes and
            bits 4 through 7 specify up to 15 underlay planes.
            </summary>
        </member>
        <member name="F:CADability.Gdi.PIXELFORMATDESCRIPTOR.dwLayerMask">
            <summary>
            Ignored. Earlier implementations of OpenGL used this member, but it is no longer used.
            </summary>
            <remarks>
            	Specifies the layer mask. The layer mask is used in conjunction with the visible mask to determine
            	if one layer overlays another.
            </remarks>
        </member>
        <member name="F:CADability.Gdi.PIXELFORMATDESCRIPTOR.dwVisibleMask">
            <summary>
            Specifies the transparent color or index of an underlay plane. When the pixel type is RGBA, <b>dwVisibleMask</b>
            is a transparent RGB color value. When the pixel type is color index, it is a transparent index value.
            </summary>
        </member>
        <member name="F:CADability.Gdi.PIXELFORMATDESCRIPTOR.dwDamageMask">
            <summary>
            Ignored. Earlier implementations of OpenGL used this member, but it is no longer used.
            </summary>
            <remarks>
            	Specifies whether more than one pixel format shares the same frame buffer. If the result of the bitwise
            	AND of the damage masks between two pixel formats is nonzero, then they share the same buffers.
            </remarks>
        </member>
        <member name="F:CADability.Gdi.POINTFLOAT.X">
            <summary>
            Specifies the horizontal (x) coordinate of a point.
            </summary>
        </member>
        <member name="F:CADability.Gdi.POINTFLOAT.Y">
            <summary>
            Specifies the vertical (y) coordinate of a point.
            </summary>
        </member>
        <member name="F:CADability.Gdi.GLYPHMETRICSFLOAT.gmfBlackBoxX">
            <summary>
            Specifies the width of the smallest rectangle (the glyph's black box) that completely encloses the glyph.
            </summary>
        </member>
        <member name="F:CADability.Gdi.GLYPHMETRICSFLOAT.gmfBlackBoxY">
            <summary>
            Specifies the height of the smallest rectangle (the glyph's black box) that completely encloses the glyph.
            </summary>
        </member>
        <member name="F:CADability.Gdi.GLYPHMETRICSFLOAT.gmfptGlyphOrigin">
            <summary>
            Specifies the x and y coordinates of the upper-left corner of the smallest rectangle that completely encloses the glyph.
            </summary>
        </member>
        <member name="F:CADability.Gdi.GLYPHMETRICSFLOAT.gmfCellIncX">
            <summary>
            Specifies the horizontal distance from the origin of the current character cell to the origin of the next character cell.
            </summary>
        </member>
        <member name="F:CADability.Gdi.GLYPHMETRICSFLOAT.gmfCellIncY">
            <summary>
            Specifies the vertical distance from the origin of the current character cell to the origin of the next character cell.
            </summary>
        </member>
        <member name="T:CADability.PaintBuffer">
            <summary>
            Klasse, die die Darstellung auf dem Bildschirm realisiert.
            Die Klasse h√§lt (z.Z.) 4 Bitmaps, die nacheinander und transparent
            in das Fenster (genauer in das Graphics Objekt des Parameters e beim 
            Aufruf von Compose) kopiert werden. F√ºr jedes Bitmap gibt es ein eigenes
            "Invalid" Rechteck bzw. Region. Der Ablauf ist wie folgt:
            1. irgend etwas √§ndert sich (z.B das Raster, die Markierung, ein 
            geometrisches Objekt u.s.w.). Das muss zur Folge haben, dass InvalidateXxx
            f√ºr den entsprechenden Aspekt (z.B. InvalidateDrawing f√ºr die 
            geometrischen Objekte, InvalidateSelect f√ºr die Markierung) aufgerufen 
            wird. Die Invalid-Bereiche werden f√ºr die einzelnen Aspekte akkumuliert.
            Irgendwann erfolgt der Aufruf von Compose (gew√∂hnlich ausgel√∂st durch den 
            Paint Event des Controls)Dort versucht nun diese Klasse das Bild neu 
            zusammenzusetzten. Ist der Invalid-Bereich eines Aspektes leer, dann ist
            das zugeh√∂rige Bitmap aktuell, d.h. kann so verwendet werden. Wenn nicht,
            so muss der Bereich neu gezeichnet werden. Compose l√∂st den RepaintXxxEvent
            (z.B. RepaintDrawingEvent) aus. Die Handler dieses Events (gew√∂hnlich 
            nur einer) bekommen ein PaintToGDI Objekt, mit dessen Hilfe sie zeichnen
            k√∂nnen. 
            </summary>
        </member>
        <member name="M:CADability.PaintBuffer.Union(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            liefert einRechteck, welches die beiden im Parameter gegeben Rechtecke umfasst
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
            <returns></returns>
        </member>
        <member name="T:CADability.PaintTo3DOutOfMemory">
            <summary>
            Exception which is thrown when the is not egnough memory for the 3D display driver
            </summary>
        </member>
        <member name="T:CADability.PaintCapabilities">
            <summary>
            Capabilities of the paint interface
            </summary>
        </member>
        <member name="F:CADability.PaintCapabilities.Standard">
            <summary>
            No special capabilities
            </summary>
        </member>
        <member name="F:CADability.PaintCapabilities.CanDoArcs">
            <summary>
            Can paint circular arcs
            </summary>
        </member>
        <member name="F:CADability.PaintCapabilities.CanFillPaths">
            <summary>
            Can fill a path (use the methods <see cref="M:CADability.IPaintTo3D.OpenPath"/>, <see cref="M:CADability.IPaintTo3D.CloseFigure"/> and <see cref="M:CADability.IPaintTo3D.ClosePath(System.Drawing.Color)"/>.
            </summary>
        </member>
        <member name="F:CADability.PaintCapabilities.ZoomIndependentDisplayList">
            <summary>
            Can handle a displaylist which is independant of the zoom level.
            </summary>
        </member>
        <member name="T:CADability.IPaintTo3D">
            <summary>
            Interface to paint on a OpenGL, DirectX, GDI or some other output device. This interface may still change in future
            it is provided for informational purposes only.
            </summary>
        </member>
        <member name="P:CADability.IPaintTo3D.PaintSurfaces">
            <summary>
            Determins whether surfaces (triangles) are included in painting
            </summary>
        </member>
        <member name="P:CADability.IPaintTo3D.PaintEdges">
            <summary>
            Determins whether curves are included in painting
            </summary>
        </member>
        <member name="P:CADability.IPaintTo3D.PaintSurfaceEdges">
            <summary>
            Determins whether edges of faces should also be painted
            </summary>
        </member>
        <member name="P:CADability.IPaintTo3D.UseLineWidth">
            <summary>
            Should the line width be applied to painting curves
            </summary>
        </member>
        <member name="P:CADability.IPaintTo3D.Precision">
            <summary>
            Gets or sets the precision of the display. (used for tesselation or curve approximation)
            </summary>
        </member>
        <member name="P:CADability.IPaintTo3D.PixelToWorld">
            <summary>
            Returns a factor that translates a one pixel distance into world coordinates
            </summary>
        </member>
        <member name="P:CADability.IPaintTo3D.SelectMode">
            <summary>
            Gets or sets the flag whether the next objects should be painted in the "select mode"
            </summary>
        </member>
        <member name="P:CADability.IPaintTo3D.SelectColor">
            <summary>
            Gets or sets the select color
            </summary>
        </member>
        <member name="P:CADability.IPaintTo3D.DelayText">
            <summary>
            Depricated, not implemented in any current paint interface
            </summary>
        </member>
        <member name="P:CADability.IPaintTo3D.DelayAll">
            <summary>
            Depricated, not implemented in any current paint interface
            </summary>
        </member>
        <member name="P:CADability.IPaintTo3D.TriangulateText">
            <summary>
            Will text objects be tesselated
            </summary>
        </member>
        <member name="P:CADability.IPaintTo3D.DontRecalcTriangulation">
            <summary>
            Deprecated, currently not used
            </summary>
        </member>
        <member name="P:CADability.IPaintTo3D.Capabilities">
            <summary>
            Returns the capabilities of this implementation of the paint interface
            </summary>
        </member>
        <member name="M:CADability.IPaintTo3D.MakeCurrent">
            <summary>
            Will be called before any other paint methods are called. May be called multiple times after <see cref="!:Init"/> has been called
            </summary>
        </member>
        <member name="M:CADability.IPaintTo3D.SetColor(System.Drawing.Color)">
            <summary>
            Sets the color for the next paint methods
            </summary>
            <param name="color">The color to use for drawing</param>
        </member>
        <member name="M:CADability.IPaintTo3D.AvoidColor(System.Drawing.Color)">
            <summary>
            Never use this color for drawing (because it is the background color)
            </summary>
            <param name="color">Color to avoid</param>
        </member>
        <member name="M:CADability.IPaintTo3D.SetLineWidth(CADability.Attribute.LineWidth)">
            <summary>
            Sets the line width for subsequent curve drawing
            </summary>
            <param name="lineWidth">Line width in world coordinates</param>
        </member>
        <member name="M:CADability.IPaintTo3D.SetLinePattern(CADability.Attribute.LinePattern)">
            <summary>
            Sets the line pattern for subsequent curve drawing. A pattern consists of
            pairs of double values: stroke length followed by gap length. If the parameter is null
            or an empty array, solidlines or curves will be drawn.
            </summary>
            <param name="pattern"></param>
        </member>
        <member name="M:CADability.IPaintTo3D.Polyline(CADability.GeoPoint[])">
            <summary>
            Draws a sequence of lines.
            </summary>
            <param name="points">The points to connect</param>
        </member>
        <member name="M:CADability.IPaintTo3D.FilledPolyline(CADability.GeoPoint[])">
            <summary>
            Deprecated, will not be used from within CADability.
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:CADability.IPaintTo3D.Points(CADability.GeoPoint[],System.Single,CADability.GeoObject.PointSymbol)">
            <summary>
            Draws simple pixel based points e.g. for background grid display.
            </summary>
            <param name="points"></param>
            <param name="size"></param>
        </member>
        <member name="M:CADability.IPaintTo3D.Triangle(CADability.GeoPoint[],CADability.GeoVector[],System.Int32[])">
            <summary>
            Draw a set of solid-filled triangles with the current color.
            </summary>
            <param name="vertex">The coordinates of the vertices</param>
            <param name="normals">The coordinates of the normal vectors in the vertices</param>
            <param name="indextriples">Triples of indices which define traingles. Length must be a multiple of 3</param>
        </member>
        <member name="M:CADability.IPaintTo3D.PrepareText(System.String,System.String,System.Drawing.FontStyle)">
            <summary>
            Assure that the charactres in <paramref name="textString"/> will be available when
            <see cref="M:CADability.IPaintTo3D.Text(CADability.GeoVector,CADability.GeoVector,CADability.GeoPoint,System.String,System.String,System.Drawing.FontStyle,CADability.GeoObject.Text.AlignMode,CADability.GeoObject.Text.LineAlignMode)"/> is called.
            </summary>
            <param name="fontName">Name of the font</param>
            <param name="textString">String to be painted</param>
            <param name="fontStyle">Additional font style (bold, italic, etc.)</param>
        </member>
        <member name="M:CADability.IPaintTo3D.PreparePointSymbol(CADability.GeoObject.PointSymbol)">
            <summary>
            Assure that the point symbol is loaded
            </summary>
            <param name="pointSymbol"></param>
        </member>
        <member name="M:CADability.IPaintTo3D.PrepareIcon(System.Drawing.Bitmap)">
            <summary>
            Assure that the <paramref name="icon"/> will be available when <see cref="M:CADability.IPaintTo3D.DisplayIcon(CADability.GeoPoint,System.Drawing.Bitmap)"/> will subsequently be called.
            (Some implementations cache the icon or transform it into an convenient format)
            </summary>
            <param name="icon">The icon</param>
        </member>
        <member name="M:CADability.IPaintTo3D.PrepareBitmap(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Assure that the <paramref name="bitmap"/> will be available when <see cref="M:CADability.IPaintTo3D.DisplayIcon(CADability.GeoPoint,System.Drawing.Bitmap)"/> will subsequently be called.
            (Some implementations cache the bitmap or transform it into an convenient format)
            </summary>
            <param name="bitmap">The bitmap</param>
            <param name="xoffset">x-component of the origin that defines the insertion point (e.g. to center the bitmap)</param>
            <param name="yoffset">y-component of the origin</param>
        </member>
        <member name="M:CADability.IPaintTo3D.PrepareBitmap(System.Drawing.Bitmap)">
            <summary>
            Similar to <see cref="M:CADability.IPaintTo3D.PrepareBitmap(System.Drawing.Bitmap,System.Int32,System.Int32)"/> with origin set to (0,0)
            </summary>
            <param name="bitmap">The bitmap.</param>
        </member>
        <member name="M:CADability.IPaintTo3D.RectangularBitmap(System.Drawing.Bitmap,CADability.GeoPoint,CADability.GeoVector,CADability.GeoVector)">
            <summary>
            Draws a rectangular bitmap at the provided <paramref name="location"/> with <paramref name="directionWidth"/>
            specifying the direction of the lower edge of the bitmap and <paramref name="directionHeight"/>
            specifying the direction of the left edge of the bitmap. <see cref="M:CADability.IPaintTo3D.PrepareBitmap(System.Drawing.Bitmap,System.Int32,System.Int32)"/> must be called 
            before this method is called.
            </summary>
            <param name="bitmap">The bitmap to draw</param>
            <param name="location">Location of the lower left corner of the bitmap</param>
            <param name="directionWidth">Direction of the lower edge of the bitmap</param>
            <param name="directionHeight">Direction of the left edge of the bitmap</param>
        </member>
        <member name="M:CADability.IPaintTo3D.Text(CADability.GeoVector,CADability.GeoVector,CADability.GeoPoint,System.String,System.String,System.Drawing.FontStyle,CADability.GeoObject.Text.AlignMode,CADability.GeoObject.Text.LineAlignMode)">
            <summary>
            Draw a text with the provided parameters and the current color.
            </summary>
            <param name="lineDirection">Direction of the base line of the text</param>
            <param name="glyphDirection">Direction of the glyph of the characters (for horizontal text this is the y-axis)</param>
            <param name="location">Location where to draw the text (using alignement)</param>
            <param name="fontName">Name of the font</param>
            <param name="textString">String to draw</param>
            <param name="fontStyle">Style of the font (e.g. bold)</param>
            <param name="alignment">Left, right or center (horizontal) alignement</param>
            <param name="lineAlignment">Vertical alignement</param>
        </member>
        <member name="M:CADability.IPaintTo3D.List(CADability.IPaintTo3DList)">
            <summary>
            Paint the provided display list.
            </summary>
            <param name="paintThisList">Display list to paint</param>
        </member>
        <member name="M:CADability.IPaintTo3D.SelectedList(CADability.IPaintTo3DList,System.Int32)">
            <summary>
            Paint the provided display list using the display mode.
            </summary>
            <param name="paintThisList">List to paint</param>
            <param name="wobbleRadius">Wobble radius to paint the same list multiple times with small offsets</param>
        </member>
        <member name="M:CADability.IPaintTo3D.Nurbs(CADability.GeoPoint[],System.Double[],System.Double[],System.Int32)">
            <summary>
            Deprecated, not used anymore and not implemented by the CADability display drivers.
            </summary>
            <param name="poles"></param>
            <param name="weights"></param>
            <param name="knots"></param>
            <param name="degree"></param>
        </member>
        <member name="M:CADability.IPaintTo3D.Line2D(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Paint a 2D line in the pixel coordinates system of the display. Usually used for background painting.
            </summary>
            <param name="sx">Start x-coordinate</param>
            <param name="sy">Start y-coordinate</param>
            <param name="ex">End x-coordinate</param>
            <param name="ey">End y-coordinate</param>
        </member>
        <member name="M:CADability.IPaintTo3D.Line2D(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Paint a 2D line in the pixel coordinates system of the display. Usually used for background painting.
            Currently not used.
            </summary>
            <param name="p1">Start point</param>
            <param name="p2">End point</param>
        </member>
        <member name="M:CADability.IPaintTo3D.FillRect2D(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Fill the axis oriented rectangle with the current color. Usually used for background painting.
            </summary>
            <param name="p1">Lower left point of the rectangle</param>
            <param name="p2">Upper right point of the rectangle</param>
        </member>
        <member name="M:CADability.IPaintTo3D.Point2D(System.Int32,System.Int32)">
            <summary>
            Deprecated, currently not used and not implemented
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:CADability.IPaintTo3D.DisplayIcon(CADability.GeoPoint,System.Drawing.Bitmap)">
            <summary>
            Displays the provided icon at the provided position. <see cref="M:CADability.IPaintTo3D.PrepareIcon(System.Drawing.Bitmap)"/> has been called or must be called
            before this method is called. The icon aleasy faces the viewer, no perspective of the projection is applied.
            </summary>
            <param name="p">Where to draw the icon (world coordinates)</param>
            <param name="icon">The icon to draw</param>
        </member>
        <member name="M:CADability.IPaintTo3D.DisplayBitmap(CADability.GeoPoint,System.Drawing.Bitmap)">
            <summary>
            Displays the provided bitmap at the provided location. The bitmap always faces the viewer.
            <see cref="M:CADability.IPaintTo3D.PrepareBitmap(System.Drawing.Bitmap,System.Int32,System.Int32)"/> has been called or must be called prior to this method.
            </summary>
            <param name="p">Where to Paint</param>
            <param name="bitmap">Th ebitmap to paint</param>
        </member>
        <member name="M:CADability.IPaintTo3D.SetProjection(CADability.Projection,CADability.BoundingCube)">
            <summary>
            Sets the projection to use in subsequent calls to paint methods.
            </summary>
            <param name="projection">The projection</param>
            <param name="boundingCube">The bounding cube, may be used for clipping</param>
        </member>
        <member name="M:CADability.IPaintTo3D.Clear(System.Drawing.Color)">
            <summary>
            Clear the whole area with this color. Used before painting objects.
            </summary>
            <param name="background">Color to clear display with</param>
        </member>
        <member name="M:CADability.IPaintTo3D.Resize(System.Int32,System.Int32)">
            <summary>
            Called when the size of the <see cref="!:Windows.Forms.Control"/> associated with this interface changes.
            </summary>
            <param name="width">New width in pixels</param>
            <param name="height">New height in pixels</param>
        </member>
        <member name="M:CADability.IPaintTo3D.OpenList">
            <summary>
            Opens a new display list. All subsequent calls to paint methods will be stred in the list. When
            <see cref="M:CADability.IPaintTo3D.CloseList"/> will be called the object resembling the list will be returned. Only the following 
            method calls are allowed while a displaylist is open: <see cref="M:CADability.IPaintTo3D.Polyline(CADability.GeoPoint[])"/>, <see cref="M:CADability.IPaintTo3D.FilledPolyline(CADability.GeoPoint[])"/>,
            <see cref="M:CADability.IPaintTo3D.Points(CADability.GeoPoint[],System.Single,CADability.GeoObject.PointSymbol)"/>, <see cref="M:CADability.IPaintTo3D.Triangle(CADability.GeoPoint[],CADability.GeoVector[],System.Int32[])"/>, <see cref="M:CADability.IPaintTo3D.RectangularBitmap(System.Drawing.Bitmap,CADability.GeoPoint,CADability.GeoVector,CADability.GeoVector)"/>, <see cref="M:CADability.IPaintTo3D.Text(CADability.GeoVector,CADability.GeoVector,CADability.GeoPoint,System.String,System.String,System.Drawing.FontStyle,CADability.GeoObject.Text.AlignMode,CADability.GeoObject.Text.LineAlignMode)"/>,
            <see cref="M:CADability.IPaintTo3D.DisplayIcon(CADability.GeoPoint,System.Drawing.Bitmap)"/>, <see cref="M:CADability.IPaintTo3D.DisplayBitmap(CADability.GeoPoint,System.Drawing.Bitmap)"/>, <see cref="M:CADability.IPaintTo3D.List(CADability.IPaintTo3DList)"/>
            </summary>
        </member>
        <member name="M:CADability.IPaintTo3D.CloseList">
            <summary>
            Close the display list <see cref="M:CADability.IPaintTo3D.OpenList"/>.
            </summary>
            <returns>An object resembling the display list</returns>
        </member>
        <member name="M:CADability.IPaintTo3D.MakeList(System.Collections.Generic.List{CADability.IPaintTo3DList})">
            <summary>
            Makes a new display list as an assembly of the provided lists.
            </summary>
            <param name="sublists">List to assemble</param>
            <returns>Created display list</returns>
        </member>
        <member name="M:CADability.IPaintTo3D.OpenPath">
            <summary>
            When the implementation supports Paths (see <see cref="F:CADability.PaintCapabilities.CanFillPaths"/>), this call
            will start recording calls to <see cref="M:CADability.IPaintTo3D.Polyline(CADability.GeoPoint[])"/> and <see cref="M:CADability.IPaintTo3D.Arc(CADability.GeoPoint,CADability.GeoVector,CADability.GeoVector,System.Double,System.Double)"/> until <see cref="M:CADability.IPaintTo3D.ClosePath(System.Drawing.Color)"/> is called.
            </summary>
        </member>
        <member name="M:CADability.IPaintTo3D.ClosePath(System.Drawing.Color)">
            <summary>
            Closes the path which was started with <see cref="M:CADability.IPaintTo3D.OpenPath"/> and fills the interior with the provided color.
            </summary>
            <param name="color">Color to fill the path with.</param>
        </member>
        <member name="M:CADability.IPaintTo3D.CloseFigure">
            <summary>
            Closes a subfigure while defining a path. Subfigures are the enclosing path and the holes to be spared.
            Only valid after <see cref="M:CADability.IPaintTo3D.OpenPath"/> and before <see cref="M:CADability.IPaintTo3D.ClosePath(System.Drawing.Color)"/> have been called.
            </summary>
        </member>
        <member name="M:CADability.IPaintTo3D.Arc(CADability.GeoPoint,CADability.GeoVector,CADability.GeoVector,System.Double,System.Double)">
            <summary>
            Draws an (elliptical) arc according to the provided parameters. May only be used when the implementation supports arcs (see <see cref="F:CADability.PaintCapabilities.CanDoArcs"/>.
            </summary>
            <param name="center">The center of the arc</param>
            <param name="majorAxis">Major axis, also defines the radius</param>
            <param name="minorAxis">Minor axis, also defines the radius. When painting a circular arc, minorAxis and majorAxis must have the same length</param>
            <param name="startParameter">Radian value of the starting position (0 is direction of majorAxis)</param>
            <param name="sweepParameter">Radian for the sweep angle</param>
        </member>
        <member name="M:CADability.IPaintTo3D.FreeUnusedLists">
            <summary>
            Only used internally, no need to call.
            </summary>
        </member>
        <member name="M:CADability.IPaintTo3D.UseZBuffer(System.Boolean)">
            <summary>
            Usually set to true, switch off to paint coordinate axis etc.
            </summary>
            <param name="use"></param>
        </member>
        <member name="M:CADability.IPaintTo3D.Blending(System.Boolean)">
            <summary>
            OpenGL specific, set blending mode
            </summary>
            <param name="on"></param>
        </member>
        <member name="M:CADability.IPaintTo3D.FinishPaint">
            <summary>
            Call when a frame is finished and the display buffers should now be switched (if using two display buffers)
            </summary>
        </member>
        <member name="M:CADability.IPaintTo3D.PaintFaces(CADability.PaintTo3D.PaintMode)">
            <summary>
            Faces are painted with a small offset to the backgroung, wheras curves are painted with a small offset to the front.
            This ensures proper visibility of edges that lie on faces.
            </summary>
            <param name="paintMode">Paint faces, curves or both (<see cref="T:CADability.PaintTo3D.PaintMode"/>)</param>
        </member>
        <member name="P:CADability.IPaintTo3D.FacesBehindEdgesOffset">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:CADability.IPaintTo3D.Dispose">
            <summary>
            Will be called when the assoziated control is closed.
            </summary>
        </member>
        <member name="M:CADability.IPaintTo3D.PushState">
            <summary>
            Saves the current state.
            </summary>
        </member>
        <member name="M:CADability.IPaintTo3D.PopState">
            <summary>
            Restores the previously saved state
            </summary>
        </member>
        <member name="M:CADability.IPaintTo3D.PushMultModOp(CADability.ModOp)">
            <summary>
            Sets a matrix to multiply all objects beeing displayed with. This matrix will be applied additionally
            to the current matrix
            </summary>
            <param name="insertion">New matrix</param>
        </member>
        <member name="M:CADability.IPaintTo3D.PopModOp">
            <summary>
            Undoes the previously called <see cref="M:CADability.IPaintTo3D.PushMultModOp(CADability.ModOp)"/>
            </summary>
        </member>
        <member name="M:CADability.IPaintTo3D.SetClip(System.Drawing.Rectangle)">
            <summary>
            Sets a clip rectangle for subsequent paint commands. If <paramref name="clipRectangle"/> is empty,
            no clipping will occur.
            </summary>
            <param name="clipRectangle">Rectangle to use for clipping</param>
        </member>
        <member name="T:CADability.PaintTo3D">
            <summary>
            Some static helper methods
            </summary>
        </member>
        <member name="T:CADability.OpenGlCustomize">
            <summary>
            This class defines static events that can be used to customize the OpenGL implementation
            </summary>
        </member>
        <member name="T:CADability.OpenGlCustomize.SetProjectionDelegate">
            <summary>
            Delegate definition of <see cref="E:CADability.OpenGlCustomize.SetProjectionEvent"/>.
            
            </summary>
            <param name="renderContext">The OpenGL render context</param>
            <param name="paintTo3D">The IPaintTo3D interface of the instance beeing involved</param>
            <param name="projection">The projetion that has been set</param>
            <param name="boundingCube">The bounding cube for the display</param>
        </member>
        <member name="E:CADability.OpenGlCustomize.SetProjectionEvent">
            <summary>
            Event that is raised when the projection of the OpenGL view was changed. You can modify the light sources and direction.
            The original code for setting the light model is:
            <code>
            Gl.glLightModeli(Gl.GL_LIGHT_MODEL_TWO_SIDE, Gl.GL_TRUE);
            Gl.glEnable(Gl.GL_LIGHTING);
            Gl.glLightfv(Gl.GL_LIGHT0, Gl.GL_POSITION, new float[] { (float)v.x, (float)v.y, (float)v.z, 0.0f });
            Gl.glLightfv(Gl.GL_LIGHT0, Gl.GL_AMBIENT, new float[] { 0.2f, 0.2f, 0.2f, 1.0f });
            Gl.glLightfv(Gl.GL_LIGHT0, Gl.GL_DIFFUSE, new float[] { 1.0f, 1.0f, 1.0f, 1.0f });
            Gl.glLightfv(Gl.GL_LIGHT0, Gl.GL_SPECULAR, new float[] { 1.0f, 1.0f, 1.0f, 1.0f });
            Gl.glEnable(Gl.GL_LIGHT0);
            </code>
            </summary>
        </member>
        <member name="M:CADability.OpenGlCustomize.PaintToBitmap(CADability.GeoObject.GeoObjectList,CADability.GeoVector,System.Int32,System.Int32,System.Nullable{CADability.BoundingCube})">
            <summary>
            Paint the provided IGeoObjects onto a bitmap with the help form OpenGL. The viewDirection specifies in which direction the objects are projected (e.g. (0,0,-1) is from top)
            the objects fill the bitmap and leave a 10% empty frame.
            </summary>
            <param name="list">objects to paint</param>
            <param name="viewDirection">direction of view</param>
            <param name="width">of the bitmap</param>
            <param name="height">of the bitmap</param>
            <returns></returns>
        </member>
        <member name="M:CADability.Parametrics.MoveFace(CADability.GeoObject.Face,CADability.GeoVector)">
            <summary>
            the provided face should be moved by the provided offset. All tangentially connected faces are moved with this face.
            This is the preparation and can be called multiple times with different faces and different offsets. Finally call <see cref="M:CADability.Parametrics.Result(System.Collections.Generic.HashSet{CADability.GeoObject.Face}@)"/> for the modified shell.
            </summary>
            <param name="toMove"></param>
            <param name="offset"></param>
        </member>
        <member name="M:CADability.Parametrics.ModifyRadius(CADability.GeoObject.Face,System.Double)">
            <summary>
            For faces on <see cref="T:CADability.GeoObject.CylindricalSurface"/>, <see cref="T:CADability.GeoObject.ToroidalSurface"/>, (maybe not <see cref="T:CADability.GeoObject.SphericalSurface"/> maybe some swept curve surface)
            this face should change its radius resp. <see cref="P:CADability.GeoObject.ToroidalSurface.MinorRadius"/>.
            <para>When it is tangential in the direction of the circle to other faces (like a rounded edge is tangential to the faces of the original edge),
            then its position will be changed, so that it is still tangential to these faces (i.e. changing the radius of a rounded edge).</para> 
            <para>When it is tangential in the other direction (e.g. a cylinder followed by a torus segment, in a pipe or at multiple rounded edges) 
            these tangential faces also change their radius and move to the same axis as their predecessor.</para>
            </summary>
            <param name="toModify">a face from the original shell</param>
            <param name="newRadius">the new radius of the surface</param>
        </member>
        <member name="M:CADability.Parametrics.CollectSameSurfaceFaces(CADability.GeoObject.Face,System.Collections.Generic.HashSet{CADability.GeoObject.Face},System.Collections.Generic.HashSet{CADability.Edge})">
            <summary>
            Find all faces that share a common surface
            </summary>
            <param name="face">start with this face</param>
            <param name="sameSurfaceFaces">the faces found</param>
            <param name="sameSurfaceEdges">the edges, that connect these faces</param>
        </member>
        <member name="T:CADability.ParametricsDistance">
            <summary>
            Action to modify the distance between two objects.
            The objects may be faces or edges or vertices (also a mix of types).
            First we calculate the offset vector: vertex->face: perpendicular foot point, vertex->edge: perpendicular foot point, vertex->vertex: connection
            edge->edge: minimum distance, edge->face: minimum distance, face->face: parallel or minimum distance. (objects with axis should also offer their axis for distance)
            </summary>
        </member>
        <member name="T:CADability.PerformanceTimer">
            <summary>
            Summary description for PerformanceTimer.
            </summary>
        </member>
        <member name="T:CADability.PlaneRef">
            <summary>
            A reference to a plane. The Plane is implemented as a struct, i.e. a value type.
            Sometimes it is necessary to have a parameter or member, which designates a plane
            but may be null (when the plane is not yet computed or not valid). This class
            works as an object replacement of the struct Plane.
            </summary>
        </member>
        <member name="M:CADability.PlaneRef.#ctor(CADability.Plane)">
            <summary>
            Standard and only constructor, wrapping the given Plane.
            </summary>
            <param name="p">The Plane to wrap</param>
        </member>
        <member name="M:CADability.PlaneRef.op_Implicit(CADability.PlaneRef)~CADability.Plane">
            <summary>
            Operator to seamlessly use a PlaneRef as a Plane
            </summary>
            <param name="pr">The PlaneRef to convert</param>
            <returns>The resulting Plane</returns>
        </member>
        <member name="M:CADability.PlaneRef.op_Implicit(CADability.Plane)~CADability.PlaneRef">
            <summary>
            Operator to seamlessly use a Plane as a PlaneRef 
            </summary>
            <param name="pr">The Plane to convert</param>
            <returns>The resulting PlaneRef</returns>
        </member>
        <member name="M:CADability.PlaneRef.FindCommonPlane(CADability.GeoPoint[],CADability.Plane@)">
            <summary>
            Yields a common plane of the cloud of points, if there is one.
            If there is no common plane the result may be not optimal (residual is not minimal)
            </summary>
            <param name="Cloud">the cloud of points</param>
            <param name="isCommon">yields true, if all points lie on the plane</param>
            <returns>the plane, may be null</returns>
        </member>
        <member name="T:CADability.Plane">
            <summary>
            A simple plane as a value type. Is used e.g. as a drawing plane, an intersection plane etc.
            It also serves as a coordinate system (see <see cref="P:CADability.Plane.CoordSys"/>).
            </summary>
        </member>
        <member name="M:CADability.Plane.#ctor(CADability.GeoPoint,CADability.GeoVector,CADability.GeoVector)">
            <summary>
            Creates a new plane with the given parameters. Throws a <see cref="T:CADability.PlaneException"/>, if <paramref name="DirectionX"/>
            and <paramref name="DirectionY"/> have the same direction.
            </summary>
            <param name="Location">location of the plane</param>
            <param name="DirectionX">direction of the x-axis</param>
            <param name="DirectionY">direction of the y-axis, will be adapted if not perpendicular to the x-axis</param>
        </member>
        <member name="M:CADability.Plane.#ctor(CADability.GeoPoint,CADability.GeoPoint,CADability.GeoPoint)">
            <summary>
            Creates a new plane with the given parameters. Throws a <see cref="T:CADability.PlaneException"/>, if 
            the three points are colinear
            </summary>
            <param name="Location">location of the plane</param>
            <param name="p1">specifies the direction of the x-axis</param>
            <param name="p2">specifies the direction of the y-axis, wich will be perpendicular to the x-axis</param>
        </member>
        <member name="M:CADability.Plane.#ctor(CADability.GeoPoint,CADability.GeoVector)">
            <summary>
            Creates a new plane. The parameter data is under-determined for the plane, so the x-axis and y-axis
            will be determined arbitrarily 
            </summary>
            <param name="Location">location of the plane</param>
            <param name="Normal">normal vector of the plane</param>
        </member>
        <member name="M:CADability.Plane.FromPoints(CADability.GeoPoint[],System.Double@,System.Boolean@)">
            <summary>
            Finds a plane that best fits through the given points. Calculates also the maximum distance
            of the points from that plane. If <paramref name="MaxDistance"/> is 0.0 or small, the points are coplanar.
            </summary>
            <param name="Points">points to build the plane from</param>
            <param name="MaxDistance">maximum distance of the points from the plane</param>
            <returns>the plane</returns>
        </member>
        <member name="T:CADability.Plane.StandardPlane">
            <summary>
            Enumeration of the standard planes
            </summary>
        </member>
        <member name="F:CADability.Plane.StandardPlane.XYPlane">
            <summary>
            X/Y-Plane
            </summary>
        </member>
        <member name="F:CADability.Plane.StandardPlane.XZPlane">
            <summary>
            X/Z-Plane
            </summary>
        </member>
        <member name="F:CADability.Plane.StandardPlane.YZPlane">
            <summary>
            Y/Z-Plane
            </summary>
        </member>
        <member name="M:CADability.Plane.#ctor(CADability.Plane.StandardPlane,System.Double)">
            <summary>
            Creates a new plane parallel to a <see cref="!:Standardplane"/> with a given offset
            </summary>
            <param name="std">the standard plane</param>
            <param name="offset">the offset to the standard plane</param>
        </member>
        <member name="F:CADability.Plane.XYPlane">
            <summary>
            Returns the X/Y plane.
            </summary>
        </member>
        <member name="F:CADability.Plane.XZPlane">
            <summary>
            Returns the X/Z plane.
            </summary>
        </member>
        <member name="F:CADability.Plane.YZPlane">
            <summary>
            Returns the Y/Z plane.
            </summary>
        </member>
        <member name="M:CADability.Plane.Intersect(CADability.GeoPoint,CADability.GeoVector)">
            <summary>
            Returns the intersection plane of the line given by the parameters with this plane.
            </summary>
            <param name="LinePoint">point on the line</param>
            <param name="LineDir">direction of the line</param>
            <returns></returns>
        </member>
        <member name="M:CADability.Plane.Distance(CADability.GeoPoint)">
            <summary>
            Returns the signed distance of the point from the plane. The direction of the normal vector
            of the plane determins the sign of the result.
            </summary>
            <param name="p">the point</param>
            <returns>the distance</returns>
        </member>
        <member name="P:CADability.Plane.Location">
            <summary>
            Gets or sets the location of this plane
            </summary>
        </member>
        <member name="P:CADability.Plane.Normal">
            <summary>
            Gets or sets the normal vector of this plane. Setting the normal vector results in a 
            recalculation of the x-axis and y-axis of this plane
            </summary>
        </member>
        <member name="P:CADability.Plane.DirectionX">
            <summary>
            Gets or sets the direction of the x-axis of this plane. Setting the x-axis results in a 
            reculculation of the y-axis to make the axis perpendicular.
            </summary>
        </member>
        <member name="P:CADability.Plane.DirectionY">
            <summary>
            Gets or sets the direction of the y-axis of this plane. Setting the y-axis results in a 
            reculculation of the x-axis to make the axis perpendicular.
            </summary>
        </member>
        <member name="M:CADability.Plane.IsValid">
            <summary>
            An uninitialized plane is invalid, because its normal vector is (0,0,0).
            </summary>
            <returns></returns>
        </member>
        <member name="P:CADability.Plane.CoordSys">
            <summary>
            Returns the coordinate system corresponding to this plane. The z-axis of the coordinate system 
            is the normal vector of this plane (always right handed)
            </summary>
        </member>
        <member name="M:CADability.Plane.Align(CADability.Plane,System.Boolean)">
            <summary>
            Aligns the <see cref="P:CADability.Plane.DirectionX"/> and <see cref="P:CADability.Plane.DirectionY"/> vectors of this plane
            so that the projection of DirectionX of AlignTo and DircetionX of this plane are parallel.
            If the two planes are parallel, the DirectionX and DirectionY of both planes will
            also be parallel. The plane will not be changed. The <see cref="P:CADability.Plane.Location"/> of this
            plane will be changed to a point closest to the location of AlignTo, if relocate
            is true, otherwise the location remains unchanged.
            </summary>
            <param name="AlignTo">Plane to align to</param>
            <param name="relocate">relocate this plane</param>
        </member>
        <member name="M:CADability.Plane.Align(CADability.Plane,System.Boolean,System.Boolean)">
            <summary>
            Aligns the <see cref="P:CADability.Plane.DirectionX"/> and <see cref="P:CADability.Plane.DirectionY"/> vectors of this plane
            so that the projection of DirectionX of AlignTo and DircetionX of this plane are parallel.
            If the two planes are parallel, the DirectionX and DirectionY of both planes will
            also be parallel. The plane will not be changed. The <see cref="P:CADability.Plane.Location"/> of this
            plane will be changed to a point closest to the location of AlignTo, if relocate
            is true, otherwise the location remains unchanged. If <paramref name="flip"/> is true
            there is an additional check whether the angle between the two normal vectors is less than
            90¬∞. If not, the y-axis is reversed and the angle between the two normal vectors will be
            less than 90¬∞
            </summary>
            <param name="alignTo">Plane to align to</param>
            <param name="relocate">relocate this plane</param>
            <param name="flip"></param>
        </member>
        <member name="M:CADability.Plane.Project(CADability.GeoPoint)">
            <summary>
            Projects the given point (perpendicular) onto this plane and returns the two-dimensional
            point as expressed in the coordinate system of this plane.
            </summary>
            <param name="p">the point</param>
            <returns>the point in the coordinate system of this plane</returns>
        </member>
        <member name="M:CADability.Plane.Project(CADability.GeoPoint[])">
            <summary>
            Projects the given point (perpendicular) onto this plane and returns the two-dimensional
            point as expressed in the coordinate system of this plane.
            </summary>
            <param name="p">the point</param>
            <returns>the point in the coordinate system of this plane</returns>
        </member>
        <member name="M:CADability.Plane.Project(CADability.GeoVector)">
            <summary>
            Projects the given vector (perpendicular) onto this plane and returns the two-dimensional
            vector as expressed in the coordinate system of this plane.
            </summary>
            <param name="v">the vector</param>
            <returns>the vector in the coordinate system of this plane</returns>
        </member>
        <member name="M:CADability.Plane.ToLocal(CADability.GeoPoint)">
            <summary>
            Returns the point as expressed in the coordinate system of this plane
            </summary>
            <param name="p">point (in the global system)</param>
            <returns>point in the local system of this plane</returns>
        </member>
        <member name="M:CADability.Plane.ToLocal(CADability.GeoVector)">
            <summary>
            Returns the vector as expressed in the coordinate system of this plane
            </summary>
            <param name="v">vector (in the global system)</param>
            <returns>vector in the local system of this plane</returns>
        </member>
        <member name="M:CADability.Plane.ToLocal(CADability.Plane)">
            <summary>
            Returns the plane given in parameter p expressed in the coordinate system of this plane
            </summary>
            <param name="p">plane in global system</param>
            <returns>plane in local system</returns>
        </member>
        <member name="M:CADability.Plane.ToGlobal(CADability.GeoPoint2D)">
            <summary>
            Inverse to the appropriate <see cref="M:CADability.Plane.Project(CADability.GeoPoint)"/> method. Returns the point in the 
            global coordinate system
            </summary>
            <param name="p">2d point in the local system of this plane</param>
            <returns>3d point in the global coordinate system</returns>
        </member>
        <member name="M:CADability.Plane.ToGlobal(CADability.GeoPoint)">
            <summary>
            Inverse to the appropriate <see cref="M:CADability.Plane.ToLocal(CADability.GeoPoint)"/> method. The given point 
            is assumed in the coordinate ststem of this plane.
            Returns the point in the  global coordinate system.
            </summary>
            <param name="p">point in the plane coordinate system</param>
            <returns>point in the global coordinate system</returns>
        </member>
        <member name="M:CADability.Plane.ToGlobal(CADability.GeoVector2D)">
            <summary>
            Inverse to the appropriate <see cref="M:CADability.Plane.Project(CADability.GeoVector)"/> method. Returns the vector in the 
            global coordinate system
            </summary>
            <param name="v">2d vector in the coordinate system of the plane</param>
            <returns>3d vector in the global coordinate system</returns>
        </member>
        <member name="M:CADability.Plane.ToGlobal(CADability.GeoVector)">
            <summary>
            Returns the 3D GeoVector corresponding to the given GeoVector in the coordinate 
            system of the plane.
            </summary>
            <param name="v">a vector in the coordinate system of the plane</param>
            <returns>a 3D vector in the global coordinate system</returns>
        </member>
        <member name="M:CADability.Plane.Offset(System.Double)">
            <summary>
            Returns a plane parallel to this plane with the given offset
            </summary>
            <param name="dist">the offset</param>
            <returns>the parallel plane</returns>
        </member>
        <member name="M:CADability.Plane.GetProjection">
            <summary>
            Returns a projection that projects (perpendiccular) from global space to this plane
            </summary>
            <returns>the projection</returns>
        </member>
        <member name="M:CADability.Plane.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="T:CADability.PolynomSingleVariable">
            <summary>
            Dient zur Manipulation von Polynomkoeffizienten, bevor aus Polynomen die Wurzel gezogen wird
            </summary>
        </member>
        <member name="T:CADability.monom">
            <summary>
            A single term of the polynom
            </summary>
        </member>
        <member name="F:CADability.monom.exp">
            <summary>
            the exponent for each variable, e.g. {0,2,1} means "y¬≤*z"
            </summary>
        </member>
        <member name="F:CADability.monom.index">
            <summary>
            index into the coefficient array c of the polynom
            </summary>
        </member>
        <member name="T:CADability.Polynom">
            <summary>
            A Polynom in multiple variables, often named x,y,z, but may be any dimension.
            e.g. a*x¬≥ + b*x¬≤*y + c*x*y¬≤ +d*y¬≥ + e*x¬≤ + f*x*y + g*y¬≤ + h*x + i*y + j (deg(ree)==3, dim(ension)==2: (x,y))
            </summary>
        </member>
        <member name="M:CADability.Polynom.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates an empty polynom with all coefficients set to 0, prepared to have a maximum degree of deg
            and a dimension of dim (number of variables)
            </summary>
            <param name="deg">the maximum degree</param>
            <param name="dim">number of variables</param>
        </member>
        <member name="M:CADability.Polynom.#ctor(System.Double,System.Int32)">
            <summary>
            Creates a constant Polynom (often 1 or 0) with the provided dimension
            </summary>
            <param name="cv"></param>
            <param name="dim"></param>
        </member>
        <member name="M:CADability.Polynom.#ctor(System.Object[])">
            <summary>
            Creates a polynom as specified by the parameters.
            Expects input like
            (3, "x2", 4, "x", 5, "", 6, "y2", 7, "z", 8, "x2y")
            a alternating sequence of double values and strings. The charcters in the strings are interpreted as follows:
            A letter, which is the name of the variable, followed by an optional digit, which is the exponent
            of the variable (when missing "1" is assumed).
            An empty string is for the constant. The number of different variable names defines the dimension.
            The highest degree is derived from the exponents. The indices of the variables are in alphabetical order.
            The variable names have no further meaning and are not conserved.
            </summary>
            <param name="def">the definition of the polynom</param>
        </member>
        <member name="M:CADability.Polynom.#ctor(System.Int32[],System.Double)">
            <summary>
            Creates a polynom with a single monom where m are the exponents and v is the facctor
            </summary>
            <param name="m"></param>
            <param name="v"></param>
        </member>
        <member name="M:CADability.Polynom.op_Multiply(CADability.Polynom,CADability.Polynom)">
            <summary>
            Multiplies two Polynoms, which must have the same dimension
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Polynom.op_Addition(CADability.Polynom,CADability.Polynom)">
            <summary>
            Adds two Polynoms, which must have the same dimension
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Polynom.Add(CADability.Polynom)">
            <summary>
            Adds the provided Polynom to this Polynom. The degree of the provided Polynom may not exceed the degree of this Polynom.
            </summary>
            <param name="b"></param>
        </member>
        <member name="M:CADability.Polynom.reduce">
            <summary>
            Reduces the degree of the Polynom, when the highest degree of all terms is less than the degree of this Polynom.
            Saves space.
            </summary>
        </member>
        <member name="M:CADability.Polynom.Substitute(CADability.Polynom[])">
            <summary>
            Replaces the variables by new polynomes and calculates the resulting Polynom. The number of provided polynoms must macht the number of variables of this Polynom, which is the degree.
            </summary>
            <param name="substWith"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Polynom.Set(System.Double,System.Int32[])">
            <summary>
            Sets the factor for the term specified by the parameter
            </summary>
            <param name="v"></param>
            <param name="exp"></param>
        </member>
        <member name="M:CADability.Polynom.Roots">
            <summary>
            Calculates the (real) roots of this Polynom. The Polynom must be 1-dimensional
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Polynom.Modified(CADability.ModOp)">
            <summary>
            Modifies the Polynom (which must be 3-dimensional) by the provided Modop
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.Polynom.Modified(CADability.ModOp2D)">
            <summary>
            Modifies the Polynom (which must be 2-dimensional) by the provided Modop
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.Polynom.Eval(System.Double[])">
            <summary>
            Inserts the values for the variables and calculates the result of the Polynom
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Polynom.Reversed">
            <summary>
            reverses all variables, replaces x by -x, y by -y,  etc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.Polynom.Integrate(System.Int32[])">
            <summary>
            Returns the integrated polynom 
            </summary>
            <param name="intg">variables to integrate</param>
            <returns></returns>
        </member>
        <member name="M:CADability.Polynom.SolveTwoSquared(CADability.Polynom,CADability.Polynom,System.Double[])">
            <summary>
            Sloves two polynoms (==0) of degree 2 and dimension 2. the optinal minmax parameter gives bounds for the first (index 0,1) and the second (indes 2,3) variable
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="minmax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Polynom.MonomLE(System.Int32[],System.Int32[])">
            <summary>
            Implements less or equal for the monom order
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:CADability.ExplicitPCurve3D">
            <summary>
            Curve defined by 3 polynomials in one veriable ("u"), or by 4 polynoms with an additional "w" component (homogenuous coordinates).
            the curve may be defined piecewise: the knots array defines the intervalls for the u parameter while the polynom arrays define the curves for each intervall
            </summary>
        </member>
        <member name="M:CADability.ExplicitPCurve3D.PositionOf(CADability.GeoPoint,System.Double,System.Double@)">
            <summary>
            Returns the best parameter for which the value of this curve comes closest to p. If the curve is composed of multiple segments (knots!=null) then only the segment
            which contains startHere is checked. If it does not contain a minimum, double.MaxValue is returned. If you want to check all segments of a segmented
            curve, use PositionOf(GeoPoint p, out double dist)
            </summary>
            <param name="p"></param>
            <param name="startHere">initial guess for the parameter</param>
            <returns>the parameter for the point p or double.MaxValue, if not found</returns>
        </member>
        <member name="T:CADability.ExplicitPCurve2D">
            <summary>
            Curve defined by 3 polynomials in one veriable ("u"), or by 4 polynoms with an additional "w" component (homogenuous coordinates).
            the curve may be defined piecewise: the knots array defines the intervalls for the u parameter while the polynom arrays define the curves for each intervall
            </summary>
        </member>
        <member name="M:CADability.ExplicitPCurve2D.RawArea">
            <summary>
            Returns the area swept by the vector from (0,0) to the points on the curve 
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.ExplicitPCurve2D.Area(System.Double,System.Double)">
            <summary>
            Returns the area swept by the vector from (0,0) to the points on the curve from parameter sp to ep
            </summary>
            <param name="sp"></param>
            <param name="ep"></param>
            <returns></returns>
        </member>
        <member name="T:CADability.ImplicitPSurface">
            <summary>
            A surface, defined by a polynom in 3 variables. The surface is defined as P(x,y,z)==0.
            
            </summary>
        </member>
        <member name="M:CADability.ImplicitPSurface.#ctor(CADability.GeoObject.ISurface,CADability.BoundingRect,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Approximate the provided surface with a imlicit polynomial surface. Uses points an normals of the surface. Yields good
            results for quadrics (degree==2) and for ruled surfaces.
            </summary>
            <param name="surface"></param>
            <param name="uvbounds"></param>
            <param name="degree"></param>
            <param name="useNormal"></param>
            <param name="nPoints"></param>
        </member>
        <member name="M:CADability.ImplicitPSurface.LagrangeReduction3">
            <summary>
            Modifies the surface into it's "canonical" position. A sphere will be around the origin, a cylinder will be around the z-axis,
            a cone will be around the z-axis with its apex at the origin. The returned ModOp modifies the canonical form into the original form.
            Makes only sense for quadrics
            </summary>
            <returns>the modification that transforms the canonical form into the initial form</returns>
        </member>
        <member name="P:CADability.ImplicitPSurface.Polynom">
            <summary>
            Returns the implicit polynom of this surface (i.e. polynom(x,y,z)==0 for all points on the surface)
            </summary>
        </member>
        <member name="M:CADability.ImplicitPSurface.Intersect(CADability.ExplicitPCurve3D,System.Double[]@)">
            <summary>
            Returns the intersection points of the provided curve with this surface. 
            </summary>
            <param name="c3d">curve to intersect with</param>
            <param name="u">returns the parameter values for the curve of the intersection points</param>
            <returns>the intersection points</returns>
        </member>
        <member name="M:CADability.ImplicitPSurface.MinMaxToPatch(CADability.GeoPoint,CADability.GeoVector,CADability.GeoVector)">
            <summary>
            Returns a list of all points of the surface, where there is a minimum or maximum distance to the plane, defined by
            loc, dirx, diry. Returns only those points, which have a (perpendicular) footpoint in the parallelogram, defined by
            the parameters.
            </summary>
            <param name="loc"></param>
            <param name="dirx"></param>
            <param name="diry"></param>
            <returns></returns>
        </member>
        <member name="T:CADability.PositionObjects">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.Precision">
            <summary>
            Precision specifies the order of size of a typical model. For example 
            two points are considered geometrically equal if their distance is less than
            Precision.eps. Default value for Precision.eps is 1e-6.
            Precision.epsa is the angular precision. Two directions are considered
            equal if their angular difference is less than Precision.epsa.
            </summary>
        </member>
        <member name="F:CADability.Precision.eps">
            <summary>
            The maximum distance for which two points are considered geometrically equal.
            </summary>
        </member>
        <member name="F:CADability.Precision.epsa">
            <summary>
            The maximum difference in radians for two angles to be considered geometrically equal.
            </summary>
        </member>
        <member name="M:CADability.Precision.IsEqual(CADability.GeoPoint,CADability.GeoPoint)">
            <summary>
            Determins, whether the given points are almost identical, i.e. the distance
            of the points is less than eps.
            </summary>
            <param name="p1">first point</param>
            <param name="p2">second point</param>
            <returns>true: almost identical, false: different</returns>
        </member>
        <member name="M:CADability.Precision.SameDirection(CADability.GeoVector,CADability.GeoVector,System.Boolean)">
            <summary>
            Determins, whether the directions of the given vectors are almost identical, i.e.
            the angular difference is less than epsa. This is also true for opposite directions.
            </summary>
            <param name="v1">first vector</param>
            <param name="v2">second vector</param>
            <param name="VectorsAreNormalized">true, if the vectors are already normalized, false if not or unknown</param>
            <returns>true: almost same direction, false: different directions</returns>
        </member>
        <member name="M:CADability.Precision.SameDirection(CADability.GeoVector2D,CADability.GeoVector2D,System.Boolean)">
            <summary>
            Determins, whether the directions of the given vectors are almost identical, i.e.
            the angular difference is less than epsa.
            </summary>
            <param name="v1">first vector</param>
            <param name="v2">second vector</param>
            <param name="VectorsAreNormalized">true, if the vectors are already normalized, false if not or unknown</param>
            <returns>true: almost same direction, false: different directions</returns>
        </member>
        <member name="M:CADability.Precision.IsNullVector(CADability.GeoVector)">
            <summary>
            Determins, whether the length of the given vector is almost 0, i.e.
            the length is less than eps
            </summary>
            <param name="v">the vector to test</param>
            <returns>true if null-vector, false otherwise</returns>
        </member>
        <member name="M:CADability.Precision.IsEqual(CADability.Plane,CADability.Plane)">
            <summary>
            Determins, whether the two planes are almost identical, i.e. the angular difference
            is less than epsa and the distance of then location of p2 to the plane p1 is less than
            eps. The DirectionX, DirectionY and Location properties of the two planes may be 
            completely different, the two coordinate systems of the planes may be different.
            </summary>
            <param name="p1">first plane</param>
            <param name="p2">second plane</param>
            <returns></returns>
        </member>
        <member name="M:CADability.Precision.IsPointOnPlane(CADability.GeoPoint,CADability.Plane)">
            <summary>
            Determins, whether the 3D point is on the plane. This is true when either the distance
            of the point to the plane is less than eps, or the elevation of the vector from the 
            location of the plane to the point is less than epsa
            </summary>
            <param name="p">The point</param>
            <param name="pl">The plane</param>
            <returns>true, if the point is on the plane</returns>
        </member>
        <member name="M:CADability.Precision.IsDirectionInPlane(CADability.GeoVector,CADability.Plane)">
            <summary>
            Determins, whether the given vector is in the given plane
            </summary>
            <param name="dir">The direction</param>
            <param name="pl">The plane</param>
            <returns>true, if the direction is in the plane</returns>
        </member>
        <member name="M:CADability.Precision.IsEqual(CADability.GeoPoint2D,CADability.GeoPoint2D[])">
            <summary>
            Returns true if the distance of each point from p to c is less than eps.
            </summary>
            <param name="c">the center to test to</param>
            <param name="p">points to test</param>
            <returns>true if all points are close, false otherwise</returns>
        </member>
        <member name="M:CADability.Precision.IsEqual(CADability.GeoPoint,CADability.GeoPoint[])">
            <summary>
            Returns true if the distance of each point from p to c is less than eps.
            </summary>
            <param name="c">the center to test to</param>
            <param name="p">points to test</param>
            <returns>true if all points are close, false otherwise</returns>
        </member>
        <member name="T:CADability.PrecisionOverride">
            <summary>
            Use this class to temporary override the values for the precision. The best
            way to use this class is the C# using statement. The constructor of this
            class overrides the values for the global <see cref="T:CADability.Precision"/>. The <see cref="M:CADability.PrecisionOverride.Dispose"/>
            method restores the previous values.
            </summary>
        </member>
        <member name="M:CADability.PrecisionOverride.#ctor(System.Double)">
            <summary>
            Sets the global Precision.eps value.
            </summary>
            <param name="eps">The new Precision.eps value</param>
        </member>
        <member name="M:CADability.PrecisionOverride.#ctor(System.Double,System.Double)">
            <summary>
            Sets the global Precision.eps and epsa value.
            </summary>
            <param name="eps">The new Precision.eps value</param>
            <param name="epsa">The new Precision.epsa value</param>
        </member>
        <member name="M:CADability.PrecisionOverride.Dispose">
            <summary>
            Restores the previous (at time of construction of this object) <see cref="T:CADability.Precision"/> values.
            </summary>
        </member>
        <member name="T:CADability.Project">
            <summary>
            A Project is the database CADability works on. A Project is serializable and contains
            one or more Models (which contain GeoObjects) lists of attributes, views and UserData.
            A Project is usually saved in a file.
            </summary>
        </member>
        <member name="M:CADability.Project.ModelViewDescription.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="M:CADability.Project.#ctor">
            <summary>
            Creates an empty Project. The empty project contains clones of the globally defined
            attributes and attribute lists (like colors, layers etc.)
            </summary>
        </member>
        <member name="M:CADability.Project.AddModel(CADability.Model)">
            <summary>
            Adds the given <see cref="T:CADability.Model"/> to the project. The attributes of the GeoObjects
            in this model are merged into the attribute lists of this project. Fires a
            <see cref="E:CADability.Project.ModelsChangedEvent"/>.
            </summary>
            <param name="ToAdd">Model to add</param>
        </member>
        <member name="M:CADability.Project.RemoveModel(CADability.Model)">
            <summary>
            Removes the given <see cref="T:CADability.Model"/> from the project. Fires a
            <see cref="E:CADability.Project.ModelsChangedEvent"/>.
            </summary>
            <param name="ToRemove">model to remove</param>
        </member>
        <member name="M:CADability.Project.RemoveModel(System.Int32)">
            <summary>
            Removes the <see cref="T:CADability.Model"/> with the given index from the project. Fires a
            <see cref="E:CADability.Project.ModelsChangedEvent"/>.
            </summary>
            <param name="Index">Index of the model to remove</param>
        </member>
        <member name="M:CADability.Project.GetModel(System.Int32)">
            <summary>
            Returns the <see cref="T:CADability.Model"/> with the given index.
            </summary>
            <param name="Index">Index of the required model</param>
            <returns>the model</returns>
        </member>
        <member name="M:CADability.Project.GetModelCount">
            <summary>
            Returns the number of models in this project.
            </summary>
            <returns>the number of models </returns>
        </member>
        <member name="M:CADability.Project.GetActiveModel">
            <summary>
            Returns the active <see cref="T:CADability.Model"/> of this project.
            </summary>
            <returns>the active model</returns>
        </member>
        <member name="M:CADability.Project.GetDefaultLayout">
            <summary>
            Gets a default <see cref="T:CADability.Layout"/> for this project. If there is no layout
            in this project a standard Layout is created and adde to the project
            </summary>
            <returns>a default layout</returns>
        </member>
        <member name="P:CADability.Project.LayoutCount">
            <summary>
            Gets the number of layouts in this project
            </summary>
        </member>
        <member name="M:CADability.Project.GetLayout(System.Int32)">
            <summary>
            Returns the <see cref="T:CADability.Layout"/> with the given index.
            </summary>
            <param name="index">index of required layout</param>
            <returns>layout</returns>
        </member>
        <member name="P:CADability.Project.ModelViewCount">
            <summary>
            Returns the number of <see cref="!:ModelViews"/> in this project
            </summary>
        </member>
        <member name="P:CADability.Project.GdiViews">
            <summary>
            Gets a list of all defined GDI2DViews in this project.
            </summary>
        </member>
        <member name="M:CADability.Project.RemoveLayout(CADability.Layout)">
            <summary>
            Removes the given <see cref="T:CADability.Layout"/> from the project. There must always be at least
            one layout, so you cannot remove the last layout.
            </summary>
            <param name="toRemove">layout to remove</param>
            <returns>success: true, failure: false</returns>
        </member>
        <member name="M:CADability.Project.RemoveModelView(CADability.ModelView)">
            <summary>
            Removes the given ModelView from the project. There must always be at least
            one modelview, so you cannot remove the last modelview.
            </summary>
            <param name="toRemove">modelview to remove</param>
            <returns>success: true, failure: false</returns>
        </member>
        <member name="M:CADability.Project.FindModel(System.String)">
            <summary>
            Returns the <see cref="T:CADability.Model"/> with the given name, Returns null if there is no
            such model in the project.
            </summary>
            <param name="name">name of the required model</param>
            <returns>the model found or null</returns>
        </member>
        <member name="M:CADability.Project.AddLayout(CADability.Layout)">
            <summary>
            Adds the specified <see cref="T:CADability.Layout"/> to the project.
            </summary>
            <param name="l">the layout to add</param>
            <returns>the index of the new layout</returns>
        </member>
        <member name="M:CADability.Project.RenameLayout(CADability.Layout,System.String)">
            <summary>
            Renames the 
            </summary>
            <param name="l"></param>
            <param name="newName"></param>
            <returns></returns>
        </member>
        <member name="F:CADability.Project.UserData">
            <summary>
            The <see cref="F:CADability.Project.UserData"/> object can take any kind of data. If the data objects
            are serializable i.e. implement <see cref="!:System.Runtime.Serialization.ISerialzable"/> they are serialized
            together with the project. If they implement the <see cref="T:CADability.UserInterface.IShowProperty"/> interface
            they are displayed and can be modified on the project tab page of the control center.
            </summary>
        </member>
        <member name="P:CADability.Project.IsModified">
            <summary>
            Gets or sets the modified flag
            </summary>
        </member>
        <member name="P:CADability.Project.FileName">
            <summary>
            The name of the file in which this project ist stored. May be null.
            </summary>
        </member>
        <member name="M:CADability.Project.GetStandardModelView(CADability.Model)">
            <summary>
            Liefert die Standard Darstellung des gegebenen Modells.
            Wenn keine definiert ist, die Draufsicht.
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Project.SaveModified">
            <summary>
            √úberpr√ºft, ob Daten ver√§ndert wurden (IsModified) und fordert ggf. den Anwender auf
            das Projekt zu speichern. 
            </summary>
            <returns>false, wenn Abbrechen gedr√ºckt wurde, true sonst (speichern oder verwerfen)</returns>
        </member>
        <member name="M:CADability.Project.WriteToXML(System.String)">
            <summary>
            Write the project to an XML file using a soap formatter with System.Runtime.Serialization. Use <see cref="M:CADability.Project.ReadFromXML(System.String)"/> to read the file into a projact.
            </summary>
            <param name="FileName">Name of the file to write to.</param>
        </member>
        <member name="M:CADability.Project.ReadFromXML(System.String)">
            <summary>
            Read the provided file with a sop formatter into a new Project. The file must have been written with <see cref="M:CADability.Project.WriteToXML(System.String)"/>.
            </summary>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Project.WriteToStream(System.IO.Stream)">
            <summary>
            Writes the project data to the given stream. Resets the IsModified flag
            </summary>
            <param name="stream">Stream where to write the data</param>
        </member>
        <member name="M:CADability.Project.WriteToFile(System.String)">
            <summary>
            Saves the project in a file with the given FileName.
            If FileName is null, a SaveFileDialog is presented. Uses WriteToStream.
            </summary>
            <param name="FileName">The file name</param>
            <returns>true, if successful, false if the user pressed escape in the SaveFileDialog</returns>
        </member>
        <member name="M:CADability.Project.Export(System.String,System.String)">
            <summary>
            Export the project in one of the following formats:
            dxf, dwg, iges, step, vrml, stl, sat and xt (sat and xt must be licensed seperately) 
            </summary>
            <param name="fileName">Path and filename for the generated output file</param>
            <param name="format">Format, one of the strings: dxf, dwg, iges, step, vrml, stl, sat, xt </param>
            <returns>true on success</returns>
        </member>
        <member name="T:CADability.Project.BindToTypeDelegate">
            <summary>
            Delegate to enable the deserialization of objects that have been renamed or changed the version number.
            </summary>
            <param name="assemblyName">Name of the assembly</param>
            <param name="typeName">neme of the type</param>
            <returns>The type of an object that can be constructed for deserialization</returns>
        </member>
        <member name="E:CADability.Project.BindToTypeEvent">
            <summary>
            Event that gets called when a type cannot be resolved during the deserialization. Provide the Type
            of an constructable object as a result.
            </summary>
        </member>
        <member name="M:CADability.Project.ReadFromStream(System.IO.Stream)">
            <summary>
            Creates a new project reading the data from the given stream.
            </summary>
            <param name="stream">Stream to read from</param>
            <returns></returns>
        </member>
        <member name="M:CADability.Project.ReadFromFile(System.String)">
            <summary>
            Creates a new project reading the data from the file with the given name.
            If FileName is null, an OpenFileDialog will be displayed.
            </summary>
            <param name="FileName">The name of the file</param>
            <returns>The newly created project or null if failed to create a project</returns>
        </member>
        <member name="T:CADability.Project.ConvertToDxfAutoCad2000">
            <summary>
            If necessary, a dxf or dwg file is converted to ACAD2000 dxf version and the temporary filename is returned. Upon Dispose, the temporary files are deleted.
            There is a free converter program from open design https://www.opendesign.com/guestfiles/oda_file_converter (odafileconverter.exe).
            if this program is installed on the computer and the global setting "DwgDxfConverter" contains the path and filename to this program, it will be automatically executed
            and the dwg file will be converted to a dxf file, which can then be imported.
            </summary>
        </member>
        <member name="P:CADability.Project.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.Project.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.Project.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.Project.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Project.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements ISerializable.GetObjectData. Override this method if your object is also serializable.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.ProjectedEdge">
            <summary>
            INTERN: eine 2D Kure aus einer projizierten Kante entstanden, ggf mit Sichtbarkeitsberechnung.
            </summary>
        </member>
        <member name="T:CADability.ProjectedModel">
            <summary>
            
            </summary>
        </member>
        <member name="M:CADability.ProjectedModel.ZoomToModelExtent(System.Drawing.Rectangle,System.Double)">
            <summary>
            Sets the projection to display the <see cref="P:CADability.Model.Extent"/> inside
            the given rectangle
            </summary>
            <param name="ClientRect">The client rectangle of the CondorControl</param>
            <param name="Factor">Additional Factor to show more or less</param>
        </member>
        <member name="M:CADability.ProjectedModel.AddVisibleLayer(CADability.Attribute.Layer)">
            <summary>
            Marks the given Layer as visible in the context of this ProjectedModel.
            </summary>
            <param name="l">The layer</param>
        </member>
        <member name="M:CADability.ProjectedModel.RemoveVisibleLayer(CADability.Attribute.Layer)">
            <summary>
            Marks the given Layer as invisible in the context of this ProjectedModel.
            </summary>
            <param name="l">The layer</param>
        </member>
        <member name="M:CADability.ProjectedModel.IsLayerVisible(CADability.Attribute.Layer)">
            <summary>
            Determins whether the given <see cref="T:CADability.Attribute.Layer"/> is marked visible in the context of this ProjectedModel.
            </summary>
            <param name="l">The layer</param>
        </member>
        <member name="M:CADability.ProjectedModel.GetObjectsFromRect(CADability.BoundingRect,CADability.GeoObject.IGeoObject)">
            <summary>
            Returns all GeoObjects that coincide with the given BoundingRect in the projection
            of this ProjectedModel. If parameter <see cref="!:childOfThis"/> is null, this function
            will return the topmost parents of the objects else it will return direct children
            of "childOfthis".
            </summary>
            <param name="pickrect">bounding rectangle in this projection</param>
            <param name="childOfThis">if null returns topmost parent else return directchild of this</param>
            <returns>GeoObjects found</returns>
        </member>
        <member name="M:CADability.ProjectedModel.GetObjectsNearRect(CADability.BoundingRect)">
            <summary>
            Get all GeoObjects that coincide with the given BoundingRect or are close to it.
            This method is faster than GetObjectsFromRect but does not check the overlap
            of the ractangle and the GeoObject
            </summary>
            <param name="pickrect">the BoundingRect</param>
            <returns>List of all GeoObjects close to the BoundingRect</returns>
        </member>
        <member name="M:CADability.ProjectedModel.GetIntersectionParameters(CADability.GeoObject.ICurve,CADability.ProjectedModel.IntersectionMode)">
            <summary>
            Returns the parameters for all intersection point of this curve with other 
            curves in the model. The curve must be planar. To get the 3D intersection point
            call <see cref="M:CADability.GeoObject.ICurve.PointAt(System.Double)"/>. If CheckExtension is true, there will also be
            intersection parameters in the extension of the curve (if the curve can extend)
            </summary>
            <param name="Curve">Curve to test for intersection points</param>
            <param name="CheckExtension">Also check the extended curve</param>
            <returns>Array of parameters</returns>
        </member>
        <member name="T:CADability.Projection">
            <summary>
            A parallel or perspective projection which is used to convert the 3-dimensional world coordinate system to a 2-dimensional
            screen coordinate system or to a normalized 3-dimensional cube for the paint or rendering interface (<see cref="T:CADability.IPaintTo3D"/>).
            Contains also additional hints for the paint interface and the drawing plane.
            </summary>
        </member>
        <member name="T:CADability.Projection.PickArea">
            <summary>
            Class defining the span or scope in the world coordinate space defined by a axis aligned rectangle 
            in a view or on the screen. The area defined by this object is either a rectangular prism of infinite 
            length in the direction of the view (in case of the parallel view) or a frustum (in case of a
            perspective view). The pickarea is created by the <see cref="M:CADability.Projection.GetPickSpace(System.Drawing.Rectangle)"/>, 
            <see cref="M:CADability.Projection.GetPickSpace(System.Drawing.RectangleF)"/> or <see cref="M:CADability.Projection.GetPickSpace(CADability.BoundingRect)"/>.
            </summary>
        </member>
        <member name="P:CADability.Projection.PickArea.Limited">
            <summary>
            Returns true, if the area is limited
            </summary>
        </member>
        <member name="P:CADability.Projection.PickArea.FrontCenter">
            <summary>
            Gets the center of the front rectangle, i.e. the point you are looking from
            </summary>
        </member>
        <member name="P:CADability.Projection.PickArea.Projection">
            <summary>
            Returns the projection associated with this area
            </summary>
        </member>
        <member name="F:CADability.Projection.LayoutFactor">
            <summary>
            Some Attributes refer to paper bound dimensions: e.g. the linewidth or textsize 
            may be specified in mm on the paper. So we need the posibility to transform linear
            dimensions from layout to world. This is doune by the LayoutFactor;
            </summary>
        </member>
        <member name="F:CADability.Projection.LineWidthFactor">
            <summary>
            A factor for the display line width
            </summary>
        </member>
        <member name="F:CADability.Projection.UseLineWidth">
            <summary>
            Flag indicating the use of line width
            </summary>
        </member>
        <member name="P:CADability.Projection.IsPerspective">
            <summary>
            Returns true if this projection is a perspective projection in contrast to a parallel projection
            </summary>
        </member>
        <member name="T:CADability.Projection.ProjectionChangedDelegate">
            <summary>
            Delegate definition for the <see cref="E:CADability.Projection.ProjectionChangedEvent"/>
            </summary>
            <param name="sender">Object issuing the event</param>
            <param name="args">Empy event arguments</param>
        </member>
        <member name="E:CADability.Projection.ProjectionChangedEvent">
            <summary>
            Event beeing issued when the projection changes
            </summary>
        </member>
        <member name="M:CADability.Projection.#ctor">
            <summary>
            Creates a default projection, a parallel projection from top
            </summary>
        </member>
        <member name="M:CADability.Projection.#ctor(CADability.Projection)">
            <summary>
            Creates a clone of the provided projection
            </summary>
            <param name="copyFrom">Projection being cloned</param>
        </member>
        <member name="M:CADability.Projection.Clone">
            <summary>
            Returns a clone of this projection
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="M:CADability.Projection.GetPickSpace(System.Drawing.Rectangle)">
            <summary>
            Returns a PickArea, <paramref name="viewRect"/> is in window coordinates
            </summary>
            <param name="viewRect">The defining rectangle</param>
            <returns>The area inside the rectangle</returns>
        </member>
        <member name="M:CADability.Projection.GetPickSpace(System.Drawing.RectangleF)">
            <summary>
            Returns a PickArea, <paramref name="viewRect"/> is in window coordinates
            </summary>
            <param name="viewRect">The defining rectangle</param>
            <returns>The area inside the rectangle</returns>
        </member>
        <member name="M:CADability.Projection.GetPickSpace(CADability.BoundingRect)">
            <summary>
            Returns a PickArea, <paramref name="rectWorld2D"/> is in 2-d world coordinates
            </summary>
            <param name="rectWorld2D">The defining rectangle</param>
            <returns>The area inside the rectangle</returns>
        </member>
        <member name="M:CADability.Projection.#ctor(CADability.GeoVector,CADability.GeoVector)">
            <summary>
            Creates a new parallel projection with the provided direction and the direction of the vector that should become the vertical direction.
            </summary>
            <param name="Direction">View direction</param>
            <param name="TopDirection">Vertical direction</param>
        </member>
        <member name="M:CADability.Projection.#ctor(CADability.CoordSys)">
            <summary>
            Creates a new parallel projection to the provided coordinate system
            </summary>
            <param name="ProjectTo">The target system</param>
        </member>
        <member name="M:CADability.Projection.SetDirection(CADability.GeoVector,CADability.GeoVector,CADability.BoundingCube)">
            <summary>
            Sets the view direction and the vertical direction of this projection.
            </summary>
            <param name="Direction">View direction</param>
            <param name="TopDirection">Vertical direction</param>
            <param name="extent">Extend of the model in world coordinates</param>
        </member>
        <member name="T:CADability.Projection.StandardProjection">
            <summary>
            The standard parallel projections
            </summary>
        </member>
        <member name="F:CADability.Projection.StandardProjection.FromTop">
            <summary>
            Projection from top (0, 0, 1)
            </summary>
        </member>
        <member name="F:CADability.Projection.StandardProjection.FromBottom">
            <summary>
            Projection from bottom (0, 0, -1)
            </summary>
        </member>
        <member name="F:CADability.Projection.StandardProjection.FromRight">
            <summary>
            Projection from right (1, 0, 0)
            </summary>
        </member>
        <member name="F:CADability.Projection.StandardProjection.FromLeft">
            <summary>
            Projection from left (-1, 0, 0)
            </summary>
        </member>
        <member name="F:CADability.Projection.StandardProjection.FromBack">
            <summary>
            Projection from back (0, 1, 0)
            </summary>
        </member>
        <member name="F:CADability.Projection.StandardProjection.FromFront">
            <summary>
            Projection from front (0, -1, 0)
            </summary>
        </member>
        <member name="F:CADability.Projection.StandardProjection.Isometric">
            <summary>
            Projection with view direction (-1, -1, -1)
            </summary>
        </member>
        <member name="M:CADability.Projection.#ctor(CADability.Projection.StandardProjection)">
            <summary>
            Creates a new standard projection according to <see cref="T:CADability.Projection.StandardProjection"/>
            </summary>
            <param name="Standard">Which direction to use</param>
        </member>
        <member name="P:CADability.Projection.ShowDrawingPlane">
            <summary>
            Display hint, whether to show the drawing plane
            </summary>
        </member>
        <member name="M:CADability.Projection.SetPlacement(System.Drawing.Rectangle,CADability.BoundingRect)">
            <summary>
            Stellt die Platzierung im Zweidimensionalen ein: Das Quellrechteck 
            soll in das Zielrechteck passen.
            </summary>
            <param name="Destination">das Zielrechteck, gew√∂hnlich ClientRect des Controls</param>
            <param name="Source">Das Quellrechteck in 2-dimensionalen Weltkoordinaten</param>
        </member>
        <member name="M:CADability.Projection.GetPlacement(System.Double@,System.Double@,System.Double@)">
            <summary>
            Liefert die Werte f√ºr die Platzierung. Achtung: die Y-Werte m√ºssen mit dem negativen
            Faktor multipliziert werden, denn die Platzierung dreht die y-achse um!
            </summary>
            <param name="Factor">Skalierungsfaktor, Achtung: f√ºr y negativ!</param>
            <param name="dx">Verschiebung in X</param>
            <param name="dy">Verschiebung in X</param>
        </member>
        <member name="M:CADability.Projection.ProjectUnscaled(CADability.GeoPoint)">
            <summary>
            Berechnet die Projektion des gegebenen Punktes ins Zweidimensionale ohne 
            Ber√ºcksichtigung der Skalierung und Platzierung im Zweidimensionalen, also
            in das zweidimensionale Weltkoordinatensystem und nicht in das 
            Papierkoordinatensystem.
            </summary>
            <param name="p">der zu projizierende Punkt</param>
            <returns>der in 2-dim projizierte Punkt</returns>
        </member>
        <member name="M:CADability.Projection.BoundingRectWorld2d(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:CADability.BoundingRect"/> in the 2d world coordinate system according to the provided view positions.
            The view coordinate system is the windows forms system.
            The 2d world coordinate system is for the parallel projection a plane perpendicular to the projection direction
            scaled the same way as the model. For the perspective projection it is the back plane of the displayed frustum of pyramid.
            </summary>
            <param name="left">left position in the view</param>
            <param name="right">rechter  Rand</param>
            <param name="bottom">unterer Rand</param>
            <param name="top">oberer Rand</param>
            <returns></returns>
        </member>
        <member name="M:CADability.Projection.ProjectF(CADability.GeoPoint)">
            <summary>
            Berechnet die Projektion des gegebenen Punktes ins Zweidimensionale mit 
            Ber√ºcksichtigung der Skalierung und Platzierung im Zweidimensionalen, also
            in das zweidimensionale Papierkoordinatensystem und nicht in das 
            Weltkoordinatensystem.
            </summary>
            <param name="p">der zu projizierende Punkt</param>
            <returns>der in 2-dim projizierte Punkt</returns>
        </member>
        <member name="M:CADability.Projection.UnProject(System.Drawing.Point)">
            <summary>
            Liefert einen 3D Punkt in der Ebene, die durch den Urprung geht. Ist eigentlich so nicht zu gebrauchen
            denn es fehlt die Information wie weit vorne oder hinten der Punkt sein soll
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Projection.PlanePoint(CADability.Plane,System.Drawing.Point)">
            <summary>
            Gets the position of a given point (usually a mouse position in view coordinates) in 
            a given plane. 
            </summary>
            <param name="pln">Plane of the requested point</param>
            <param name="p">Mouse position or point in view coordinates</param>
            <returns>Position of the point in the plane</returns>
        </member>
        <member name="M:CADability.Projection.DrawingPlanePoint(CADability.GeoPoint2D)">
            <summary>
            Liefert den Raumpunkt (Welt3D) zum Welt2D Punkt gem√§√ü Zeichenebene (DrawingPlane)
            </summary>
            <param name="p">der Welt2D Punkt</param>
            <returns>Welt3D Punkt</returns>
        </member>
        <member name="M:CADability.Projection.PointBeam(System.Drawing.Point)">
            <summary>
            Returns a beam corresponding to the 2-dimensional mouse position. The mouse position corresponds to a beam
            in the model which is seen as a point from the viewpoint. The result is in world coordinates
            of the model. Works for both parallel and perspective projection.
            </summary>
            <param name="p">Point to which the corresponding beam is required</param>
            <returns>The corresponding beam</returns>
        </member>
        <member name="M:CADability.Projection.DrawingPlanePoint(System.Drawing.Point)">
            <summary>
            Returns the point in the worldcoordinate system corresponding to the (mouse-) position p and the drawingplane
            </summary>
            <param name="p">Point in window coordinates</param>
            <returns>Point in world coordinates</returns>
        </member>
        <member name="M:CADability.Projection.WorldToWindow(CADability.GeoPoint)">
            <summary>
            Returns the window position of a point in the world coordiate system. Point (0,0) is the top left point of the window
            </summary>
            <param name="p">Point in world coordinate system</param>
            <returns></returns>
        </member>
        <member name="M:CADability.Projection.WindowToWorld(System.Drawing.PointF)">
            <summary>
            Returns the provided point in the world coordinate system
            </summary>
            <param name="windowPoint">A point in the windows coordinate system</param>
            <returns>Result in world coordinate system</returns>
        </member>
        <member name="M:CADability.Projection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Projection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.IQuadTreeInsertable">
            <summary>
            Ein Interface f√ºr Objekte, die in einen QuadTree eingef√ºgt werden k√∂nnen.
            Der QuadTree kann also nicht nur IGeoObject Objekte aufnehmen, sondern alle
            Objekte, die IQuadTreeInsertable unterst√ºtzen.
            </summary>
        </member>
        <member name="M:CADability.IQuadTreeInsertable.GetExtent">
            <summary>
            Returns the extent of the two dimensional object
            </summary>
            <returns>extent</returns>
        </member>
        <member name="M:CADability.IQuadTreeInsertable.HitTest(CADability.BoundingRect@,System.Boolean)">
            <summary>
            Determins whether the rectangle <paramref name="rect"/> coincides with the object
            </summary>
            <param name="rect">testing rectangle</param>
            <param name="includeControlPoints">also check control points (e.g. spline control points, circle center)</param>
            <returns>true, if coinciding, false otherwise</returns>
        </member>
        <member name="P:CADability.IQuadTreeInsertable.ReferencedObject">
            <summary>
            A backpointer to the object represented by this item
            </summary>
        </member>
        <member name="T:CADability.QuadTreeInsertableHashtable">
            <summary>
            Eine Collection, die sicherstellt, dass jedes Objekt nur einmal eingef√ºgt wird.
            Leider gibt es so etwas wie "set" aus STL nicht
            </summary>
        </member>
        <member name="T:CADability.QuadTree">
            <summary>
            A QuadTree of 2-dimensional objects that implement IQuadTreeInsertable.
            This Class might change in future, so the use of this class is deprecated
            </summary>
        </member>
        <member name="T:CADability.QuadTree.QuadNode">
            <summary>
            Ein Knoten im QuadTree. Er enth√§lt entweder eine Liste von Objekten oder
            vier Unterknoten, aber nie beides gleichzeitig.
            </summary>
        </member>
        <member name="T:CADability.QuadTree.QuadNode.IQuadTreeInsertableCollection">
            <summary>
            Einfache typensichere Liste f√ºr IQuadTreeInsertable
            </summary>
        </member>
        <member name="T:CADability.QuadTree.EnumerateNode">
            <summary>
            Liefert alle Objekte im QuadTree, aber m√∂glicherweise mehrfach. Um wirklich √ºber 
            alle Objekte einzeln zu iterieren, m√ºsste man sie erst in einer HashTable (als Keys)
            sammeln.
            </summary>
        </member>
        <member name="M:CADability.QuadTree.#ctor(CADability.BoundingRect)">
            <summary>
            Erzeugt einen neuen QuadTree, dessen (anf√§ngliche) Ausdehnung gegeben ist.
            </summary>
            <param name="InitialRect"></param>
        </member>
        <member name="P:CADability.QuadTree.Size">
            <summary>
            Returns a BoundingRect that contains all objects in this QuadTree and is between the exact extent and the linear double of this extent.
            </summary>
        </member>
        <member name="F:CADability.QuadTree`1.MaxListLen">
            <summary>
            The maximum number of objects in a leaf-node unless MaxDeepth has been reached
            </summary>
        </member>
        <member name="F:CADability.QuadTree`1.MaxDeepth">
            <summary>
            The maximum deepth of the tree. If a node has this deepth no more subnodes will be generated
            but the list of objects in that node might increase MaxListlen.
            </summary>
        </member>
        <member name="M:CADability.QuadTree`1.AddObject(`0)">
            <summary>
            Adds the specified object to the QuadTree
            </summary>
            <param name="ObjectToAdd">Object to add</param>
        </member>
        <member name="M:CADability.QuadTree`1.RemoveObject(`0)">
            <summary>
            Removes the specified object from the QuadTree
            </summary>
            <param name="ObjectToRemove">Object to remove</param>
        </member>
        <member name="M:CADability.QuadTree`1.AllObjects">
            <summary>
            Returns an enumerator for all objects that are close to the specified bounding rectangle.
            </summary>
            <param name="r">The rectangle to filter objects</param>
            <returns>Enumerator for those objects</returns>
        </member>
        <member name="M:CADability.QuadTree`1.ObjectsFromRect(CADability.BoundingRect)">
            <summary>
            Returns an enumerator for all objects that are close to the specified bounding rectangle.
            </summary>
            <param name="r">The rectangle to filter objects</param>
            <returns>Enumerator for those objects</returns>
        </member>
        <member name="M:CADability.QuadTree`1.ObjectsInsideRect(CADability.BoundingRect)">
            <summary>
            Returns an enumerator for all objects that are completely inside the specified bounding rectangle.
            </summary>
            <param name="r">The rectangle to filter objects</param>
            <returns>Enumerator for those objects</returns>
        </member>
        <member name="M:CADability.QuadTree`1.ObjectsCloseTo(`0)">
            <summary>
            Returns an enumerator for all objects that are closed to the specified object. The distance depends
            upon the granularity of the QuadTree.
            </summary>
            <param name="CloseToThis">Filter objects close to this object</param>
            <returns>Enumertor for those objects</returns>
        </member>
        <member name="M:CADability.QuadTree`1.ObjectsCloseTo(CADability.IQuadTreeInsertable,System.Boolean)">
            <summary>
            Returns an enumerator for all objects that are closed to the specified object. The distance depends
            upon the granularity of the QuadTree. if <paramref name="eliminateMultiple"/> is false, the same object
            may be yielded in the enumerator multiple times, but the execution speed is much faster, if eliminateMultiple
            is true, there will be bookkeeping not to yield the same object multiple times.
            </summary>
            <param name="CloseToThis">Filter objects close to this object</param>
            <param name="eliminateMultiple">false: fast mode, multiple yields, true: single yield per object</param>
            <returns>Enumertor for those objects</returns>
        </member>
        <member name="M:CADability.QuadTree`1.GetObjectsFromRect(CADability.BoundingRect)">
            <summary>
            Returns an array of objects that are close to the specified bounding rectangle. The objects may overlap
            the rectangle or even be totaly outside of the rectangle depending on the granularity of the Quadtree.
            But all objects inside the rectangle or interfering with the rectangle are guaranteed to be returned.
            </summary>
            <param name="r">The filter rectangle</param>
            <returns>Array of all appropriate objects</returns>
        </member>
        <member name="M:CADability.QuadTree`1.GetObjectsInsideRect(CADability.BoundingRect)">
            <summary>
            Returns an array of objects that are inside the specified bounding rectangle. 
            </summary>
            <param name="r">The filter rectangle</param>
            <returns>Array of all appropriate objects</returns>
        </member>
        <member name="M:CADability.QuadTree`1.GetObjectsCloseTo(`0)">
            <summary>
            Returns an array of objects that are close to the specified object. The returned objects may or may not
            interfere with the specified object, but it is guaranteed that all objects touching or intersecting
            the specified object are in the returned array.
            </summary>
            <param name="CloseToThis">Object to filter result with</param>
            <returns>Array of all appropriate objects</returns>
        </member>
        <member name="T:CADability.RangeCounter">
            <summary>
            Eine Art Dictionary double->int, wobei das double unscharf ist, also ein Intervall mit maximaler Breite
            </summary>
        </member>
        <member name="T:CADability.ReversibleChange">
            <summary>
            This class contains the information to undo a change in the project database.
            Undoing a change is done by reflection. So we need an object, the name of a method
            or a property and the parameters to use in the call. This information must be
            provided in the constructor. The method or property must have public access.
            </summary>
        </member>
        <member name="M:CADability.ReversibleChange.#ctor(System.Object,System.Type,System.String,System.Object[])">
            <summary>
            Creates a ReversibleChange object. MethodOrPropertyName must be the name (casesensitive!)
            of a public method or property that reverses the change when called with the parameters
            given in the parameter "Parameter". If parameters contains exactly 1 object, the Undo
            method will first look for a set-property with that type to reverse the change. If there
            is no set-property with that name and type then the system will look for a method
            with this single parameter.
            </summary>
            <param name="objectToChange">The object which will be or was changed</param>
            <param name="interfaceForMethod">the interface on which contains the method or property</param>
            <param name="methodOrPropertyName">the case sensitive name of the method or property</param>
            <param name="parameters">The parameters neede to call this method or property</param>
        </member>
        <member name="M:CADability.ReversibleChange.#ctor(System.Object,System.String,System.Object[])">
            <summary>
            Creates a ReversibleChange object. MethodOrPropertyName must be the name (casesensitive!)
            of a public method or property that reverses the change when called with the parameters
            given in the parameter "Parameter". If parameters contains exactly 1 object, the Undo
            method will first look for a set-property with that type to reverse the change. If there
            is no set-property with that name and type then the system will look for a method
            with this single parameter.
            </summary>
            <param name="objectToChange">The object which will be or was changed</param>
            <param name="methodOrPropertyName">the case sensitive name of the method or property</param>
            <param name="parameters">The parameters neede to call this method or property</param>
        </member>
        <member name="P:CADability.ReversibleChange.MethodOrPropertyName">
            <summary>
            Gets the method or property name for this ReversibleChange
            </summary>
        </member>
        <member name="P:CADability.ReversibleChange.ObjectToChange">
            <summary>
            Gets the objects which is changed by this ReversibleChange
            </summary>
        </member>
        <member name="P:CADability.ReversibleChange.Parameters">
            <summary>
            Gets the parameters, that can be used in the method call of this ReversibleChange
            </summary>
        </member>
        <member name="M:CADability.ReversibleChange.IsMethod(System.String)">
            <summary>
            Checks whether this ReversibleChange ist a method with the given name
            </summary>
            <param name="methodName">The name of the method</param>
            <returns>true, if methodName is the name of the ReversibleChange method</returns>
        </member>
        <member name="M:CADability.ReversibleChange.ToString">
            <summary>
            Overrides objec.ToString()
            </summary>
            <returns>the call for the undo as a string</returns>
        </member>
        <member name="T:CADability.RuledSurface">
            <summary>
            Surface definition of a surface defined by two curves. Both curves use the standard parameter interval from 0.0 to 1.0
            The u-direction is provided by a combination of the two curves. The v parameter is defined by a line starting on the
            first curve and ending on the second curve. It is the surface described by a wire or rubber band synchronously moving along
            the two curves. the default parameter space is 0.0 to 1.0 on u and v.
            </summary>
        </member>
        <member name="T:CADability.RuledSurface.IntermediateCurve">
            <summary>
            Dient der Beschreibung einer Zwischenkurve bei festem V
            </summary>
        </member>
        <member name="M:CADability.RuledSurface.IntermediateCurve.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.RuledSurface.IntermediateCurve.CopyGeometry(CADability.GeoObject.IGeoObject)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.CopyGeometry(CADability.GeoObject.IGeoObject)"/>
            </summary>
            <param name="ToCopyFrom"></param>
        </member>
        <member name="M:CADability.RuledSurface.IntermediateCurve.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.IGeoObjectImpl.Modify(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.RuledSurface.PointAt(CADability.GeoPoint2D)">
            <summary>
            Implements <see cref="M:CADability.GeoObject.ISurface.PointAt(CADability.GeoPoint2D)"/>.
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.RuledSurface.UDirection(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.UDirection(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.RuledSurface.VDirection(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.VDirection(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.RuledSurface.DerivationAt(CADability.GeoPoint2D,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.DerivationAt(CADability.GeoPoint2D,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@)"/>
            </summary>
            <param name="uv"></param>
            <param name="location"></param>
            <param name="du"></param>
            <param name="dv"></param>
        </member>
        <member name="M:CADability.RuledSurface.Derivation2At(CADability.GeoPoint2D,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Derivation2At(CADability.GeoPoint2D,CADability.GeoPoint@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@,CADability.GeoVector@)"/>
            </summary>
            <param name="uv"></param>
            <param name="location"></param>
            <param name="du"></param>
            <param name="dv"></param>
            <param name="duu"></param>
            <param name="dvv"></param>
            <param name="duv"></param>
        </member>
        <member name="M:CADability.RuledSurface.FixedU(System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.FixedU(System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="u"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.RuledSurface.FixedV(System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.FixedV(System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="v"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.RuledSurface.Clone">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Clone"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.RuledSurface.CopyData(CADability.GeoObject.ISurface)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.CopyData(CADability.GeoObject.ISurface)"/>
            </summary>
            <param name="CopyFrom"></param>
        </member>
        <member name="M:CADability.RuledSurface.GetNaturalBounds(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetNaturalBounds(System.Double@,System.Double@,System.Double@,System.Double@)"/>
            </summary>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
        </member>
        <member name="M:CADability.RuledSurface.GetPlaneIntersection(CADability.GeoObject.PlaneSurface,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetPlaneIntersection(CADability.GeoObject.PlaneSurface,System.Double,System.Double,System.Double,System.Double,System.Double)"/>
            </summary>
            <param name="pl"></param>
            <param name="umin"></param>
            <param name="umax"></param>
            <param name="vmin"></param>
            <param name="vmax"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.RuledSurface.Make3dCurve(CADability.Curve2D.ICurve2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Make3dCurve(CADability.Curve2D.ICurve2D)"/>
            </summary>
            <param name="curve2d"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.RuledSurface.GetModified(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetModified(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.RuledSurface.Modify(CADability.ModOp)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.Modify(CADability.ModOp)"/>
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:CADability.RuledSurface.GetExtrema">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.GetExtrema"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.RuledSurface.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="P:CADability.Schedule.LabelText">
            <summary>
            Implements <see cref="P:CADability.UserInterface.IShowProperty.LabelText"/>.
            </summary>
        </member>
        <member name="P:CADability.Schedule.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="M:CADability.Schedule.LabelChanged(System.String)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.LabelChanged(System.String)"/>
            </summary>
            <param name="NewText"></param>
        </member>
        <member name="P:CADability.Schedule.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.Schedule.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.Schedule.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.Schedule.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="M:CADability.Schedule.Removed(CADability.UserInterface.IPropertyTreeView)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Removed(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="P:CADability.PositionProperty.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="P:CADability.PositionProperty.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.PositionProperty.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.PositionProperty.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.PositionProperty.Added(CADability.UserInterface.IPropertyPage)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Added(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="M:CADability.PositionProperty.Removed(CADability.UserInterface.IPropertyTreeView)">
            <summary>
            Overrides <see cref="M:CADability.UserInterface.IShowPropertyImpl.Removed(CADability.UserInterface.IPropertyTreeView)"/>
            </summary>
            <param name="propertyTreeView"></param>
        </member>
        <member name="P:CADability.ShowPropertySchedules.LabelType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.LabelType"/>
            </summary>
        </member>
        <member name="P:CADability.ShowPropertySchedules.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.ShowPropertySchedules.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.ShowPropertySchedules.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.DummySerialized.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.SettingsException">
            <summary>
            Exception Klasse f√ºr die Methoden der Klasse Settings
            </summary>
        </member>
        <member name="T:CADability.SettingChangedDelegate">
            <summary>
            A setting has been changed
            </summary>
        </member>
        <member name="T:CADability.ValueChangedDelegate">
            <summary>
            Delegate for the notification of a change of a value
            </summary>
            <param name="sender"></param>
            <param name="NewValue"></param>
        </member>
        <member name="T:CADability.Settings">
            <summary>
            This class is used to give acces and store information that influences global behaviour of the
            CADability system.
            There is a static variable <see cref="F:CADability.Settings.GlobalSettings"/>. This is the only use of settings in CADability.
            This class behaves as a hierarchical dictionary. The keys are strings, which may have the form "mainkey.subkey"
            The values are objects, i.e. any kind of data.
            If the objects implement the IShowProperty interface they are displayed in the global setting tab of the controlcenter.
            There are some classes like <see cref="T:CADability.ColorSetting"/>, <see cref="!:IntergerProperty"/>, <see cref="T:CADability.UserInterface.DoubleProperty"/>,
            <see cref="T:CADability.UserInterface.StringProperty"/> which can be used as a setting value. If you instead simply use a double or string value
            the setting will be only available to programming code but not to the user in the ControlCenter.
            </summary>
        </member>
        <member name="F:CADability.Settings.GlobalSettings">
            <summary>
            The global settings contain many different settings or configurations for the program execution.
            The settings are displayed in the "global" tab of the controlcenter. User code may add or remove settings.
            <see cref="M:CADability.Settings.AddSetting(System.String,System.Object)"/>.
            </summary>
        </member>
        <member name="M:CADability.Settings.ShutDown">
            <summary>
            GlobalSettings has registered the Application.ApplicationExit event. This call saves the settings
            and unregisters the event.
            </summary>
        </member>
        <member name="M:CADability.Settings.GetBoolValue(System.Object)">
            <summary>
            Wandelt das im Parameter gegebene Objekt in den Typ bool um. Werte vom Typ bool k√∂nnen
            auf zwei Arten in den Settings gespeichert sein: einmal als primitiver bool Typ und einmal als
            Booleanproperty Typ. Letzterer hat noch Informationen, wie er interaktiv durch den
            Anwender in einem ShowProperty Control ge√§ndert werden kann. Wenn das gegebene Objekt
            einen anderen Typ hat, dann gibt es eine InvalidCastException.
            </summary>
            <param name="TheValue">ein Objekt, gew√∂hnlich aus den Einstellungen</param>
            <returns>der bool Wert des Objektes</returns>
        </member>
        <member name="P:CADability.Settings.EntryType">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.EntryType"/>, 
            returns <see cref="F:CADability.UserInterface.ShowPropertyEntryType.GroupTitle"/>.
            </summary>
        </member>
        <member name="P:CADability.Settings.SubEntriesCount">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntriesCount"/>, 
            returns the number of subentries in this property view.
            </summary>
        </member>
        <member name="P:CADability.Settings.SubEntries">
            <summary>
            Overrides <see cref="P:CADability.UserInterface.IShowPropertyImpl.SubEntries"/>, 
            returns the subentries in this property view.
            </summary>
        </member>
        <member name="M:CADability.Settings.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.Settings.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.ShapeMiddelLine">
            <summary>
            Erzeugt die Mittelline f√ºr einen Text
            </summary>
        </member>
        <member name="T:CADability.ShortConnection">
            <summary>
            Tries to find a good solution for the (metric) "travelling salesman problem".
            This is still prliminary and may change in future.
            </summary>
        </member>
        <member name="T:CADability.FindPathThroughForbiddenArea">
            <summary>
            Class to find a polyline between two points that does not cross the forbidden area
            </summary>
        </member>
        <member name="M:CADability.FindPathThroughForbiddenArea.#ctor(CADability.BoundingRect[])">
            <summary>
            Constructor to define the forbidden area
            </summary>
            <param name="forbiddenArea">Rectangle which may not be crossed</param>
        </member>
        <member name="M:CADability.FindPathThroughForbiddenArea.ContainsPoint(CADability.GeoPoint2D)">
            <summary>
            Tests whether the provided point <paramref name="toTest"/> is contained in one of the rectangles
            </summary>
            <param name="toTest">Point to test</param>
            <returns>true if contained, false otherwise.</returns>
        </member>
        <member name="M:CADability.FindPathThroughForbiddenArea.PolyLineHitTest(CADability.GeoPoint2D[])">
            <summary>
            Tests whether the provided polyline interferes with one of the rectangles
            </summary>
            <param name="toTest">The polyline</param>
            <returns>true when the polyline and one of the rectangles interfere, fals otherwise</returns>
        </member>
        <member name="M:CADability.FindPathThroughForbiddenArea.FindPath(CADability.GeoPoint2D,CADability.GeoPoint2D,System.Double)">
            <summary>
            Finds a polyline which connects <paramref name="startPoint"/> and <paramref name="endPoint"/>
            and returns the intermediate points. The resulting polyline does not cross the forbidden area
            </summary>
            <param name="startPoint">The polyline starts here</param>
            <param name="endPoint">the polyline end here</param>
            <returns>Intermediate points to go around the forbidden area</returns>
        </member>
        <member name="M:CADability.SweptPlanarCurve.PointAt(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.PointAt(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.SweptPlanarCurve.UDirection(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.UDirection(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.SweptPlanarCurve.VDirection(CADability.GeoPoint2D)">
            <summary>
            Overrides <see cref="M:CADability.GeoObject.ISurfaceImpl.VDirection(CADability.GeoPoint2D)"/>
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.SweptPlanarCurve.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.Tangulation">
            <summary>
            Tangentiale Triangulierung:
            Am gegebenen Rand und ggf. an weiteren inneren Stellen werden tangentiale Ebenen aufgespannt und miteinander verschnitten. So entstehen (konvexe) Polygone,
            die zusammen die Fl√§che triangulieren
            </summary>
        </member>
        <member name="P:CADability.Triangulation.ConnectionTree.Items">
            <summary>
            Liefert alle Items, also auch die der untergeordneten √Ñste
            </summary>
        </member>
        <member name="T:CADability.UndoFrameException">
            <summary>
            Exception class for the <see cref="P:CADability.UndoRedoSystem.UndoFrame"/> class
            </summary>
        </member>
        <member name="T:CADability.UndoRedoSystem">
            <summary>
            The undo/redo sytem usually exists as a member in the <see cref="T:CADability.Project"/> and is accessed
            via <see cref="P:CADability.Project.Undo"/>. The project handles the menu commands "MenuId.Edit.Undo"
            and ""MenuId.Edit.Redo" and calls <see cref="M:CADability.UndoRedoSystem.UndoLastStep"/> rsp. <see cref="M:CADability.UndoRedoSystem.RedoLastStep"/>.
            To add a step to the undo system call <see cref="M:CADability.UndoRedoSystem.AddUndoStep(CADability.ReversibleChange)"/>
            </summary>
        </member>
        <member name="M:CADability.UndoRedoSystem.ClearContext">
            <summary>
            After several changes "using contextFrame" you can reset the context so that the following
            changes with the same context generate a new undo step.
            </summary>
        </member>
        <member name="M:CADability.UndoRedoSystem.ContextFrame(System.Object)">
            <summary>
            All calls to <see cref="M:CADability.UndoRedoSystem.AddUndoStep(CADability.ReversibleChange)"/> that appeare inside the same context are
            considered to belong to the same action and override the previous call from the 
            same context. So only the last call will be saved in the undo stack. Use ContextFrame with the C# "using" schema
            or call IDisposable.Dispose() to close the frame.
            </summary>
            <param name="context">any kind of object</param>
            <returns>the IDisposable interface for the using schema</returns>
        </member>
        <member name="M:CADability.UndoRedoSystem.#ctor">
            <summary>
            Only created by the project. 
            </summary>
        </member>
        <member name="M:CADability.UndoRedoSystem.PeekLastUndoStep">
            <summary>
            Returns the next undo command if there are any. This will be either a ReversibleChange object
            or a untyped ArrayList. Returns null if there are no undosteps available
            </summary>
            <returns>The next undo command </returns>
        </member>
        <member name="M:CADability.UndoRedoSystem.PeekLastRedoStep">
            <summary>
            Returns the next redo command if there are any. This will be either a ReversibleChange object
            or a untyped ArrayList. Returns null if there are no redosteps available
            </summary>
            <returns>The next undo command </returns>
        </member>
        <member name="M:CADability.UndoRedoSystem.Clear">
            <summary>
            Remove all undo and redo actions from the action stack.
            </summary>
        </member>
        <member name="P:CADability.UndoRedoSystem.MaxUndoSteps">
            <summary>
            Set or get the maximum number of undo steps that will be kept in the undo stack.
            When setting this value the undo stack will be cleared.
            </summary>
        </member>
        <member name="M:CADability.UndoRedoSystem.UndoLastStep">
            <summary>
            Executes the undo of the last step. Ususlly called by the project when handling the "MenuId.Edit.Undo" command.
            </summary>
            <returns>success: true, failure: false</returns>
        </member>
        <member name="M:CADability.UndoRedoSystem.RedoLastStep">
            <summary>
            Executes the redo of the last step. Ususlly called by the project when handling the "MenuId.Edit.Redo" command.
            </summary>
            <returns>success: true, failure: false</returns>
        </member>
        <member name="M:CADability.UndoRedoSystem.IgnoreLastStep">
            <summary>
            The top undostep on the undo stack will be ignored.
            </summary>
            <returns>success: true, failure: false</returns>
        </member>
        <member name="M:CADability.UndoRedoSystem.CanUndo">
            <summary>
            Returns true, if there is a step on the undo stack 
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.UndoRedoSystem.CanRedo">
            <summary>
            Returns true, if there is a step on the redo stack 
            </summary>
            <returns></returns>
        </member>
        <member name="M:CADability.UndoRedoSystem.AddUndoStep(CADability.ReversibleChange)">
            <summary>
            Adds an undo step to the undo stack.
            </summary>
            <param name="step">the step</param>
        </member>
        <member name="P:CADability.UndoRedoSystem.UndoFrame">
            <summary>
            Opens an undo frame, which means that all subsequent calls to AddUndoStep
            will be considert as a single undo step. Calling UndoLastStep  or selecting
            Undo from the Menu will undo all this
            steps as a single step. Use the C# "using" construct, since this property
            supports the IDisposable interface, which closes the undoframe when Dispose
            is called.
            </summary>
        </member>
        <member name="M:CADability.UndoRedoSystem.OpenUndoFrame">
            <summary>
            Opens an undo frame: all subsequent calls to <see cref="M:CADability.UndoRedoSystem.AddUndoStep(CADability.ReversibleChange)"/> are considered
            as a single undo step until <see cref="M:CADability.UndoRedoSystem.CloseUndoFrame(System.Object)"/> is beeing called. You can use
            the property <see cref="P:CADability.UndoRedoSystem.UndoFrame"/> instead. UndoFrames may be nested.
            </summary>
            <returns>an object that will be needed for the corresponding CloseUndoFrame call.</returns>
        </member>
        <member name="M:CADability.UndoRedoSystem.CloseUndoFrame(System.Object)">
            <summary>
            Closes the previously opened undo frame. See <see cref="M:CADability.UndoRedoSystem.OpenUndoFrame"/>.
            </summary>
            <param name="UndoFrame">the result from OpenUndoFrame</param>
        </member>
        <member name="T:CADability.UndoStep">
            <summary>
            
            </summary>
        </member>
        <member name="T:CADability.UntypedSet">
            <summary>
            Ein Set im Sinne von STL. Implementiert als HashTable nur mit key, ohne Value
            </summary>
        </member>
        <member name="T:CADability.IManageUserData">
            <summary>
            To control the behaviour of <see cref="T:CADability.UserData"/> objects the value part of a UserData
            may implement this interface. You can then control the cloning and representation of
            your object.
            ------------------- NICHT MEHR VERWENDEN -------------------
            </summary>
        </member>
        <member name="M:CADability.IManageUserData.Clone">
            <summary>
            The <see cref="T:CADability.UserData"/> object is beeing cloned. return an appropriate clone
            of your object or null if it shouldnt be cloned
            </summary>
            <returns>the clone or null</returns>
        </member>
        <member name="M:CADability.IManageUserData.GetShowProperty">
            <summary>
            The <see cref="T:CADability.UserData"/> object can be displayed in the control center if it returns
            a <see cref="T:CADability.UserInterface.IShowProperty"/> interface. All details of representation are managed in the
            IShowProperty interface. Return null, if the object should be invisible to the user.
            </summary>
            <returns>IShowProperty interface or null</returns>
        </member>
        <member name="T:CADability.IMultiObjectUserData">
            <summary>
            Implement this interface on your UserData objects if you want your UserData to be displayed
            as a common property of multiple selected objects.
            </summary>
        </member>
        <member name="T:CADability.UserData">
            <summary>
            A table, that associates names with objects.
            Its purpose is to attach any kind of (user) information to existing CADability objects.
            Many objects of the CADability namespace provide a UserData property, by means of which
            you can connect any object to it. If the object is serializable, it will be serialized
            together with the CADability object. If it implements IClonable it will be cloned when the
            containing object is cloned. If it implements <see cref="T:CADability.UserInterface.IShowProperty"/> it will be displayed
            together with the object in the ControlCenter. If it implements <see cref="T:CADability.IMultiObjectUserData"/>
            it will be displayed as a common property when multiple objects are displayed in the ControlCenter
            </summary>
        </member>
        <member name="M:CADability.UserData.Clone">
            <summary>
            Returns a clone of the UserData object. The containe dictionary of string-object pairs is cloned so the result is
            independant from this object. The values are also cloned if they implement the <see cref="T:System.ICloneable"/> interface.
            If the value of an entry implements <see cref="T:CADability.IManageUserData"/>, <see cref="M:CADability.IManageUserData.Clone"/> will be called.
            </summary>
            <returns>The cloned UserData</returns>
        </member>
        <member name="M:CADability.UserData.Add(System.String,System.Object)">
            <summary>
            Adds or replaces the named entry of the Userdata
            </summary>
            <param name="Name">eindeutige Bezeichnung des Objektes</param>
            <param name="Data">das zus√§tzliche Objekt</param>
        </member>
        <member name="M:CADability.UserData.Add(CADability.UserData)">
            <summary>
            Add all entries given in the parameter to this UserData
            </summary>
            <param name="userData">entries to add</param>
        </member>
        <member name="P:CADability.UserData.Item(System.String)">
            <summary>
            Indexer to read or write values to a given name
            </summary>
        </member>
        <member name="M:CADability.UserData.RemoveUserData(System.String)">
            <summary>
            Removes the entry with the provided name
            </summary>
            <param name="Name">Name of the entry to be removed.</param>
        </member>
        <member name="M:CADability.UserData.ContainsData(System.String)">
            <summary>
            Checks whether an entry with the provided name exists.
            </summary>
            <param name="Name">Name to check</param>
            <returns>true if the entry exists</returns>
        </member>
        <member name="M:CADability.UserData.GetData(System.String)">
            <summary>
            Returns the entry with the provided name. The result may be null if the entry doesn't exist.
            The result must be casted to the required type.
            </summary>
            <param name="Name">Name of the entry</param>
            <returns></returns>
        </member>
        <member name="P:CADability.UserData.AllItems">
            <summary>
            Gets an array of the names of all entries
            </summary>
        </member>
        <member name="M:CADability.UserData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required by deserialization
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:CADability.UserData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (<see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:CADability.Vertex">
            <summary>
            Describes a vertex of an <see cref="T:CADability.Edge"/>. A vertex is the start or endpoint of an edge.
            It connects at least two edges but can belong to any number of edges.
            </summary>
        </member>
        <member name="P:CADability.Vertex.Position">
            <summary>
            Gets the position of this vertex
            </summary>
        </member>
        <member name="P:CADability.Vertex.Edges">
            <summary>
            Gets the list of edges of this vertex
            </summary>
        </member>
        <member name="M:CADability.Vertex.ConditionalEdges(System.Predicate{CADability.Edge})">
            <summary>
            Returns a list of all edges in this vertex that satisfy the provided condition.
            </summary>
            <param name="pr">The condition</param>
            <returns>Edges that satisfy the condition</returns>
        </member>
        <member name="M:CADability.Vertex.FindOutgoing(CADability.GeoObject.Face)">
            <summary>
            Find an edge, which is leaving the vertex on the provided face
            </summary>
            <param name="onThisFace"></param>
            <returns></returns>
        </member>
        <member name="M:CADability.Vertex.FindConnection(CADability.Vertex,Wintellect.PowerCollections.Set{CADability.Edge},Wintellect.PowerCollections.Set{CADability.Vertex},CADability.GeoObject.Face)">
            <summary>
            Find a connection (of edges) between startVertex and the first stopVertex on the provided face
            </summary>
            <param name="startVertex"></param>
            <param name="stopVertices"></param>
            <param name="onThisFace"></param>
            <returns></returns>
        </member>
        <member name="T:CADability.VoxelTree">
            <summary>
            Describes a 3d object (curve or face) in a voxel representation at a dynamic resolution.
            </summary>
        </member>
        <member name="M:CADability.VoxelTree.#ctor(CADability.IOctTreeInsertable,System.Double)">
            <summary>
            Creates the voxel representation of the provided <paramref name="obj"/> (only GetExtent and HitTest are beeing used)
            </summary>
            <param name="obj">the object for which the voxel represenation is to be created</param>
            <param name="precision">the precision, size of the smallest voxel</param>
        </member>
        <member name="T:Wintellect.PowerCollections.BinaryPredicate`1">
            <summary>
            The BinaryPredicate delegate type  encapsulates a method that takes two
            items of the same type, and returns a boolean value representating 
            some relationship between them. For example, checking whether two
            items are equal or equivalent is one kind of binary predicate.
            </summary>
            <param name="item1">The first item.</param>
            <param name="item2">The second item.</param>
            <returns>Whether item1 and item2 satisfy the relationship that the BinaryPredicate defines.</returns>
        </member>
        <member name="T:Wintellect.PowerCollections.Algorithms">
            <summary>
            Algorithms contains a number of static methods that implement
            algorithms that work on collections. Most of the methods deal with
            the standard generic collection interfaces such as IEnumerable&lt;T&gt;,
            ICollection&lt;T&gt; and IList&lt;T&gt;.
            </summary>
        </member>
        <member name="T:Wintellect.PowerCollections.Algorithms.ListRange`1">
            <summary>
            The class that is used to implement IList&lt;T&gt; to view a sub-range
            of a list. The object stores a wrapped list, and a start/count indicating
            a sub-range of the list. Insertion/deletions through the sub-range view
            cause the count to change also; insertions and deletions directly on
            the wrapped list do not.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.ListRange`1.#ctor(System.Collections.Generic.IList{`0},System.Int32,System.Int32)">
            <summary>
            Create a sub-range view object on the indicate part 
            of the list.
            </summary>
            <param name="wrappedList">List to wrap.</param>
            <param name="start">The start index of the view in the wrapped list.</param>
            <param name="count">The number of items in the view.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.Range``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Returns a view onto a sub-range of a list. Items from <paramref name="list"/> are not copied; the
            returned IList&lt;T&gt; is simply a different view onto the same underlying items. Changes to <paramref name="list"/>
            are reflected in the view, and vice versa. Insertions and deletions in the view change the size of the 
            view, but insertions and deletions in the underlying list do not.
            </summary>
            <remarks>This method can be used to apply an algorithm to a portion of a list. For example:
            <code>Algorithms.ReverseInPlace(Algorithms.Range(list, 3, 6))</code>
            will reverse the 6 items beginning at index 3.</remarks>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to view.</param>
            <param name="start">The starting index of the view.</param>
            <param name="count">The number of items in the view.</param>
            <returns>A list that is a view onto the given sub-list. </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> + <paramref name="count"/> is greater than the
            size of <paramref name="list"/>.</exception>
        </member>
        <member name="T:Wintellect.PowerCollections.Algorithms.ArrayRange`1">
            <summary>
            The class that is used to implement IList&lt;T&gt; to view a sub-range
            of an array. The object stores a wrapped array, and a start/count indicating
            a sub-range of the array. Insertion/deletions through the sub-range view
            cause the count to change up to the size of the underlying array. Elements
            fall off the end of the underlying array.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.ArrayRange`1.#ctor(`0[],System.Int32,System.Int32)">
            <summary>
            Create a sub-range view object on the indicate part 
            of the array.
            </summary>
            <param name="wrappedArray">Array to wrap.</param>
            <param name="start">The start index of the view in the wrapped list.</param>
            <param name="count">The number of items in the view.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.Range``1(``0[],System.Int32,System.Int32)">
            <summary>
            Returns a view onto a sub-range of an array. Items from <paramref name="array"/> are not copied; the
            returned IList&lt;T&gt; is simply a different view onto the same underlying items. Changes to <paramref name="array"/>
            are reflected in the view, and vice versa. Insertions and deletions in the view change the size of the 
            view. After an insertion, the last item in <paramref name="array"/> "falls off the end". After a deletion, the
            last item in array becomes the default value (0 or null).
            </summary>
            <remarks>This method can be used to apply an algorithm to a portion of a array. For example:
            <code>Algorithms.ReverseInPlace(Algorithms.Range(array, 3, 6))</code>
            will reverse the 6 items beginning at index 3.</remarks>
            <param name="array">The array to view.</param>
            <param name="start">The starting index of the view.</param>
            <param name="count">The number of items in the view.</param>
            <returns>A list that is a view onto the given sub-array. </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> + <paramref name="count"/> is greater than the
            size of <paramref name="array"/>.</exception>
        </member>
        <member name="T:Wintellect.PowerCollections.Algorithms.ReadOnlyCollection`1">
            <summary>
            The read-only ICollection&lt;T&gt; implementation that is used by the ReadOnly method.
            Methods that modify the collection throw a NotSupportedException, methods that don't
            modify are fowarded through to the wrapped collection.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.ReadOnlyCollection`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Create a ReadOnlyCollection wrapped around the given collection.
            </summary>
            <param name="wrappedCollection">Collection to wrap.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.ReadOnlyCollection`1.MethodModifiesCollection">
            <summary>
            Throws an NotSupportedException stating that this collection cannot be modified.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.ReadOnly``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Returns a read-only view onto a collection. The returned ICollection&lt;T&gt; interface
            only allows operations that do not change the collection: GetEnumerator, Contains, CopyTo,
            Count. The ReadOnly property returns false, indicating that the collection is read-only. All other
            methods on the interface throw a NotSupportedException.
            </summary>
            <remarks>The data in the underlying collection is not copied. If the underlying
            collection is changed, then the read-only view also changes accordingly.</remarks>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The collection to wrap.</param>
            <returns>A read-only view onto <paramref name="collection"/>. If <paramref name="collection"/> is null, then null is returned.</returns>
        </member>
        <member name="T:Wintellect.PowerCollections.Algorithms.ReadOnlyList`1">
            <summary>
            The read-only IList&lt;T&gt; implementation that is used by the ReadOnly method.
            Methods that modify the list throw a NotSupportedException, methods that don't
            modify are fowarded through to the wrapped list.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.ReadOnlyList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Create a ReadOnlyList wrapped around the given list.
            </summary>
            <param name="wrappedList">List to wrap.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.ReadOnlyList`1.MethodModifiesCollection">
            <summary>
            Throws an NotSupportedException stating that this collection cannot be modified.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.ReadOnly``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns a read-only view onto a list. The returned IList&lt;T&gt; interface
            only allows operations that do not change the list: GetEnumerator, Contains, CopyTo,
            Count, IndexOf, and the get accessor of the indexer. 
            The IsReadOnly property returns true, indicating that the list is read-only. All other
            methods on the interface throw a NotSupportedException.
            </summary>
            <remarks>The data in the underlying list is not copied. If the underlying
            list is changed, then the read-only view also changes accordingly.</remarks>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to wrap.</param>
            <returns>A read-only view onto <paramref name="list"/>. Returns null if <paramref name="list"/> is null. 
            If <paramref name="list"/> is already read-only, returns <paramref name="list"/>.</returns>
        </member>
        <member name="T:Wintellect.PowerCollections.Algorithms.ReadOnlyDictionary`2">
            <summary>
            The private class that implements a read-only wrapped for 
            IDictionary &lt;TKey,TValue&gt;.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Create a read-only dictionary wrapped around the given dictionary.
            </summary>
            <param name="wrappedDictionary">The IDictionary&lt;TKey,TValue&gt; to wrap.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.ReadOnlyDictionary`2.MethodModifiesCollection">
            <summary>
            Throws an NotSupportedException stating that this collection cannot be modified.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.ReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Returns a read-only view onto a dictionary. The returned IDictionary&lt;TKey,TValue&gt; interface
            only allows operations that do not change the dictionary. 
            The IsReadOnly property returns true, indicating that the dictionary is read-only. All other
            methods on the interface throw a NotSupportedException.
            </summary>
            <remarks>The data in the underlying dictionary is not copied. If the underlying
            dictionary is changed, then the read-only view also changes accordingly.</remarks>
            <param name="dictionary">The dictionary to wrap.</param>
            <returns>A read-only view onto <paramref name="dictionary"/>. Returns null if <paramref name="dictionary"/> is null. 
            If <paramref name="dictionary"/> is already read-only, returns <paramref name="dictionary"/>.</returns>
        </member>
        <member name="T:Wintellect.PowerCollections.Algorithms.TypedEnumerator`1">
            <summary>
             The class that provides a typed IEnumerator&lt;T&gt;
            view onto an untyped IEnumerator interface.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.TypedEnumerator`1.#ctor(System.Collections.IEnumerator)">
            <summary>
            Create a typed IEnumerator&lt;T&gt;
            view onto an untyped IEnumerator interface 
            </summary>
            <param name="wrappedEnumerator">IEnumerator to wrap.</param>
        </member>
        <member name="T:Wintellect.PowerCollections.Algorithms.TypedEnumerable`1">
            <summary>
            The class that provides a typed IEnumerable&lt;T&gt; view
            onto an untyped IEnumerable interface.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.TypedEnumerable`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            Create a typed IEnumerable&lt;T&gt; view
            onto an untyped IEnumerable interface.
            </summary>
            <param name="wrappedEnumerable">IEnumerable interface to wrap.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.TypedAs``1(System.Collections.IEnumerable)">
            <summary>
            Given a non-generic IEnumerable interface, wrap a generic IEnumerable&lt;T&gt;
            interface around it. The generic interface will enumerate the same objects as the 
            underlying non-generic collection, but can be used in places that require a generic interface.
            The underlying non-generic collection must contain only items that
            are of type <paramref name="T"/> or a type derived from it. This method is useful
            when interfacing older, non-generic collections to newer code that uses generic interfaces.
            </summary>
            <remarks>Some collections implement both generic and non-generic interfaces. For efficiency,
            this method will first attempt to cast <paramref name="untypedCollection"/> to IEnumerable&lt;T&gt;. 
            If that succeeds, it is returned; otherwise, a wrapper object is created.</remarks>
            <typeparam name="T">The item type of the wrapper collection.</typeparam>
            <param name="untypedCollection">An untyped collection. This collection should only contain
            items of type <paramref name="T"/> or a type derived from it. </param>
            <returns>A generic IEnumerable&lt;T&gt; wrapper around <paramref name="untypedCollection"/>. 
            If <paramref name="untypedCollection"/> is null, then null is returned.</returns>
        </member>
        <member name="T:Wintellect.PowerCollections.Algorithms.TypedCollection`1">
            <summary>
            The class that provides a typed ICollection&lt;T&gt; view
            onto an untyped ICollection interface. The ICollection&lt;T&gt;
            is read-only.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.TypedCollection`1.#ctor(System.Collections.ICollection)">
            <summary>
            Create a typed ICollection&lt;T&gt; view
            onto an untyped ICollection interface.
            </summary>
            <param name="wrappedCollection">ICollection interface to wrap.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.TypedCollection`1.MethodModifiesCollection">
            <summary>
            Throws an NotSupportedException stating that this collection cannot be modified.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.TypedAs``1(System.Collections.ICollection)">
            <summary>
            Given a non-generic ICollection interface, wrap a generic ICollection&lt;T&gt;
            interface around it. The generic interface will enumerate the same objects as the 
            underlying non-generic collection, but can be used in places that require a generic interface.
            The underlying non-generic collection must contain only items that
            are of type <paramref name="T"/> or a type derived from it. This method is useful
            when interfacing older, non-generic collections to newer code that uses generic interfaces.
            </summary>
            <remarks><para>Some collections implement both generic and non-generic interfaces. For efficiency,
            this method will first attempt to cast <paramref name="untypedCollection"/> to ICollection&lt;T&gt;. 
            If that succeeds, it is returned; otherwise, a wrapper object is created.</para>
            <para>Unlike the generic interface, the non-generic ICollection interfaces does
            not contain methods for adding or removing items from the collection. For this reason,
            the returned ICollection&lt;T&gt; will be read-only.</para></remarks>
            <typeparam name="T">The item type of the wrapper collection.</typeparam>
            <param name="untypedCollection">An untyped collection. This collection should only contain
            items of type <paramref name="T"/> or a type derived from it. </param>
            <returns>A generic ICollection&lt;T&gt; wrapper around <paramref name="untypedCollection"/>.
            If <paramref name="untypedCollection"/> is null, then null is returned.</returns>
        </member>
        <member name="T:Wintellect.PowerCollections.Algorithms.TypedList`1">
            <summary>
            The class used to create a typed IList&lt;T&gt; view onto
            an untype IList interface.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.TypedList`1.#ctor(System.Collections.IList)">
            <summary>
            Create a typed IList&lt;T&gt; view onto
            an untype IList interface.
            </summary>
            <param name="wrappedList">The IList to wrap.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.TypedAs``1(System.Collections.IList)">
            <summary>
            Given a non-generic IList interface, wrap a generic IList&lt;T&gt;
            interface around it. The generic interface will enumerate the same objects as the 
            underlying non-generic list, but can be used in places that require a generic interface.
            The underlying non-generic list must contain only items that
            are of type <paramref name="T"/> or a type derived from it. This method is useful
            when interfacing older, non-generic lists to newer code that uses generic interfaces.
            </summary>
            <remarks>Some collections implement both generic and non-generic interfaces. For efficiency,
            this method will first attempt to cast <paramref name="untypedList"/> to IList&lt;T&gt;. 
            If that succeeds, it is returned; otherwise, a wrapper object is created.</remarks>
            <typeparam name="T">The item type of the wrapper list.</typeparam>
            <param name="untypedList">An untyped list. This list should only contain
            items of type <paramref name="T"/> or a type derived from it. </param>
            <returns>A generic IList&lt;T&gt; wrapper around <paramref name="untypedlist"/>.
            If <paramref name="untypedlist"/> is null, then null is returned.</returns>
        </member>
        <member name="T:Wintellect.PowerCollections.Algorithms.UntypedCollection`1">
            <summary>
            The class that is used to provide an untyped ICollection
            view onto a typed ICollection&lt;T&gt; interface.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.UntypedCollection`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Create an untyped ICollection
            view onto a typed ICollection&lt;T&gt; interface.
            </summary>
            <param name="wrappedCollection">The ICollection&lt;T&gt; to wrap.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.Untyped``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Given a generic ICollection&lt;T&gt; interface, wrap a non-generic (untyped)
            ICollection interface around it. The non-generic interface will contain the same objects as the 
            underlying generic collection, but can be used in places that require a non-generic interface.
            This method is useful when interfacing generic interfaces with older code that uses non-generic interfaces.
            </summary>
            <remarks>Many generic collections already implement the non-generic interfaces directly. This
            method will first attempt to simply cast <paramref name="typedCollection"/> to ICollection. If that
            succeeds, it is returned; if it fails, then a wrapper object is created.</remarks>
            <typeparam name="T">The item type of the underlying collection.</typeparam>
            <param name="typedCollection">A typed collection to wrap.</param>
            <returns>A non-generic ICollection wrapper around <paramref name="typedCollection"/>.
            If <paramref name="typedCollection"/> is null, then null is returned.</returns>
        </member>
        <member name="T:Wintellect.PowerCollections.Algorithms.UntypedList`1">
            <summary>
            The class that implements a non-generic IList wrapper
            around a generic IList&lt;T&gt; interface.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.UntypedList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Create a non-generic IList wrapper
            around a generic IList&lt;T&gt; interface.
            </summary>
            <param name="wrappedList">The IList&lt;T&gt; interface to wrap.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.UntypedList`1.ConvertToItemType(System.String,System.Object)">
            <summary>
            Convert the given parameter to T. Throw an ArgumentException
            if it isn't.
            </summary>
            <param name="name">parameter name</param>
            <param name="value">parameter value</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.Untyped``1(System.Collections.Generic.IList{``0})">
            <summary>
            Given a generic IList&lt;T&gt; interface, wrap a non-generic (untyped)
            IList interface around it. The non-generic interface will contain the same objects as the 
            underlying generic list, but can be used in places that require a non-generic interface.
            This method is useful when interfacing generic interfaces with older code that uses non-generic interfaces.
            </summary>
            <remarks>Many generic collections already implement the non-generic interfaces directly. This
            method will first attempt to simply cast <paramref name="typedList"/> to IList. If that
            succeeds, it is returned; if it fails, then a wrapper object is created.</remarks>
            <typeparam name="T">The item type of the underlying list.</typeparam>
            <param name="typedList">A typed list to wrap.</param>
            <returns>A non-generic IList wrapper around <paramref name="typedList"/>.
            If <paramref name="typedList"/> is null, then null is returned.</returns>
        </member>
        <member name="T:Wintellect.PowerCollections.Algorithms.ArrayWrapper`1">
            <summary>
            The class that is used to implement IList&lt;T&gt; to view an array
            in a read-write way. Insertions cause the last item in the array
            to fall off, deletions replace the last item with the default value.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.ArrayWrapper`1.#ctor(`0[])">
            <summary>
            Create a list wrapper object on an array.
            </summary>
            <param name="wrappedArray">Array to wrap.</param>
        </member>
        <member name="P:Wintellect.PowerCollections.Algorithms.ArrayWrapper`1.System#Collections#IList#IsFixedSize">
            <summary>
            Return true, to indicate that the list is fixed size.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.ReadWriteList``1(``0[])">
            <summary>
            <para>Creates a read-write IList&lt;T&gt; wrapper around an array. When an array is
            implicitely converted to an IList&lt;T&gt;, changes to the items in the array cannot
            be made through the interface. This method creates a read-write IList&lt;T&gt; wrapper
            on an array that can be used to make changes to the array. </para>
            <para>Use this method when you need to pass an array to an algorithms that takes an 
            IList&lt;T&gt; and that tries to modify items in the list. Algorithms in this class generally do not
            need this method, since they have been design to operate on arrays even when they
            are passed as an IList&lt;T&gt;.</para>
            </summary>
            <remarks>Since arrays cannot be resized, inserting an item causes the last item in the array to be automatically
            removed. Removing an item causes the last item in the array to be replaced with a default value (0 or null). Clearing
            the list causes all the items to be replaced with a default value.</remarks>
            <param name="array">The array to wrap.</param>
            <returns>An IList&lt;T&gt; wrapper onto <paramref name="array"/>.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.Replace``1(System.Collections.Generic.IEnumerable{``0},``0,``0)">
            <summary>
            Replace all items in a collection equal to a particular value with another values, yielding another collection.
            </summary>
            <remarks>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</remarks>
            <param name="collection">The collection to process.</param>
            <param name="itemFind">The value to find and replace within <paramref name="collection"/>.</param>
            <param name="replaceWith">The new value to replace with.</param>
            <returns>An new collection with the items from <paramref name="collection"/>, in the same order, 
            with the appropriate replacements made.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.Replace``1(System.Collections.Generic.IEnumerable{``0},``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Replace all items in a collection equal to a particular value with another values, yielding another collection. A passed
            IEqualityComparer is used to determine equality.
            </summary>
            <param name="collection">The collection to process.</param>
            <param name="itemFind">The value to find and replace within <paramref name="collection"/>.</param>
            <param name="replaceWith">The new value to replace with.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality. Only the Equals method will be called.</param>
            <returns>An new collection with the items from <paramref name="collection"/>, in the same order, 
            with the appropriate replacements made.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.Replace``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0)">
            <summary>
            Replace all items in a collection that a predicate evalues at true with a value, yielding another collection. .
            </summary>
            <param name="collection">The collection to process.</param>
            <param name="predicate">The predicate used to evaluate items with the collection. If the predicate returns true for a particular
            item, the item is replaces with <paramref name="replaceWith"/>.</param>
            <param name="replaceWith">The new value to replace with.</param>
            <returns>An new collection with the items from <paramref name="collection"/>, in the same order, 
            with the appropriate replacements made.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.ReplaceInPlace``1(System.Collections.Generic.IList{``0},``0,``0)">
            <summary>
            Replace all items in a list or array equal to a particular value with another value. The replacement is done in-place, changing
            the list.
            </summary>
            <remarks><para>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</para>
            <para>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</para></remarks>
            <param name="list">The list or array to process.</param>
            <param name="itemFind">The value to find and replace within <paramref name="collection"/>.</param>
            <param name="replaceWith">The new value to replace with.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.ReplaceInPlace``1(System.Collections.Generic.IList{``0},``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Replace all items in a list or array equal to a particular value with another values.
            The replacement is done in-place, changing
            the list. A passed IEqualityComparer is used to determine equality.
            </summary>
            <remarks>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</remarks>
            <param name="list">The list or array to process.</param>
            <param name="itemFind">The value to find and replace within <paramref name="collection"/>.</param>
            <param name="replaceWith">The new value to replace with.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality. Only the Equals method will be called.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.ReplaceInPlace``1(System.Collections.Generic.IList{``0},System.Predicate{``0},``0)">
            <summary>
            Replace all items in a list or array that a predicate evaluates at true with a value. The replacement is done in-place, changing
            the list.
            </summary>
            <remarks>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</remarks>
            <param name="list">The list or array to process.</param>
            <param name="predicate">The predicate used to evaluate items with the collection. If the predicate returns true for a particular
            item, the item is replaces with <paramref name="replaceWith"/>.</param>
            <param name="replaceWith">The new value to replace with.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.RemoveDuplicates``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Remove consecutive equal items from a collection, yielding another collection. In each run of consecutive equal items
            in the collection, all items after the first item in the run are removed. 
            </summary>
            <remarks>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</remarks>
            <param name="collection">The collection to process.</param>
            <returns>An new collection with the items from <paramref name="collection"/>, in the same order, 
            with consecutive duplicates removed.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.RemoveDuplicates``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Remove consecutive equal items from a collection, yielding another collection. In each run of consecutive equal items
            in the collection, all items after the first item in the run are removed. A passed
            IEqualityComparer is used to determine equality.
            </summary>
            <param name="collection">The collection to process.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality. Only the Equals method will be called.</param>
            <returns>An new collection with the items from <paramref name="collection"/>, in the same order, 
            with consecutive duplicates removed.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="equalityComparer"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.RemoveDuplicates``1(System.Collections.Generic.IEnumerable{``0},Wintellect.PowerCollections.BinaryPredicate{``0})">
            <summary>
            Remove consecutive "equal" items from a collection, yielding another collection. In each run of consecutive equal items
            in the collection, all items after the first item in the run are removed. The passed 
            BinaryPredicate is used to determine if two items are "equal".
            </summary>
            <remarks>Since an arbitrary BinaryPredicate is passed to this function, what is being removed need not be true equality. </remarks>
            <param name="collection">The collection to process.</param>
            <param name="predicate">The BinaryPredicate used to compare items for "equality". An item <c>current</c> is removed if <c>predicate(first, current)==true</c>, where
            <c>first</c> is the first item in the group of "duplicate" items.</param>
            <returns>An new collection with the items from <paramref name="collection"/>, in the same order, 
            with consecutive "duplicates" removed.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.RemoveDuplicatesInPlace``1(System.Collections.Generic.IList{``0})">
            <summary>
            Remove consecutive equal items from a list or array. In each run of consecutive equal items
            in the list, all items after the first item in the run are removed. The removal is done in-place, changing
            the list. 
            </summary>
            <remarks><para>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</para>
            <para>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</para></remarks>
            <param name="list">The list or array to process.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.RemoveDuplicatesInPlace``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Remove subsequent consecutive equal items from a list or array. In each run of consecutive equal items
            in the list, all items after the first item in the run are removed.
            The replacement is done in-place, changing
            the list. A passed IEqualityComparer is used to determine equality.
            </summary>
            <remarks>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</remarks>
            <param name="list">The list or array to process.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality. Only the Equals method will be called.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.RemoveDuplicatesInPlace``1(System.Collections.Generic.IList{``0},Wintellect.PowerCollections.BinaryPredicate{``0})">
            <summary>
            Remove consecutive "equal" items from a list or array. In each run of consecutive equal items
            in the list, all items after the first item in the run are removed. The replacement is done in-place, changing
            the list. The passed BinaryPredicate is used to determine if two items are "equal".
            </summary>
            <remarks><para>Since an arbitrary BinaryPredicate is passed to this function, what is being tested for need not be true equality. </para>
            <para>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</para></remarks>
            <param name="list">The list or array to process.</param>
            <param name="predicate">The BinaryPredicate used to compare items for "equality". </param>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.FirstConsecutiveEqual``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Finds the first occurence of <paramref name="count"/> consecutive equal items in the
            list.
            </summary>
            <remarks>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</remarks>
            <param name="list">The list to examine.</param>
            <param name="count">The number of consecutive equal items to look for. The count must be at least 1.</param>
            <returns>The index of the first item in the first run of <paramref name="count"/> consecutive equal items, or -1 if no such run exists..</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.FirstConsecutiveEqual``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Finds the first occurence of <paramref name="count"/> consecutive equal items in the
            list. A passed IEqualityComparer is used to determine equality.
            </summary>
            <param name="list">The list to examine.</param>
            <param name="count">The number of consecutive equal items to look for. The count must be at least 1.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality. Only the Equals method will be called.</param>
            <returns>The index of the first item in the first run of <paramref name="count"/> consecutive equal items, or -1 if no such run exists.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.FirstConsecutiveEqual``1(System.Collections.Generic.IList{``0},System.Int32,Wintellect.PowerCollections.BinaryPredicate{``0})">
            <summary>
            Finds the first occurence of <paramref name="count"/> consecutive "equal" items in the
            list. The passed BinaryPredicate is used to determine if two items are "equal".
            </summary>
            <remarks>Since an arbitrary BinaryPredicate is passed to this function, what is being tested for need not be true equality. </remarks>
            <param name="list">The list to examine.</param>
            <param name="count">The number of consecutive equal items to look for. The count must be at least 1.</param>
            <param name="predicate">The BinaryPredicate used to compare items for "equality". </param>
            <returns>The index of the first item in the first run of <paramref name="count"/> consecutive equal items, or -1 if no such run exists.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.FirstConsecutiveWhere``1(System.Collections.Generic.IList{``0},System.Int32,System.Predicate{``0})">
            <summary>
            Finds the first occurence of <paramref name="count"/> consecutive items in the
            list for which a given predicate returns true.
            </summary>
            <param name="list">The list to examine.</param>
            <param name="count">The number of consecutive items to look for. The count must be at least 1.</param>
            <param name="predicate">The predicate used to test each item.</param>
            <returns>The index of the first item in the first run of <paramref name="count"/> items where <paramref name="predicate"/>
            returns true for all items in the run, or -1 if no such run exists.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.FindFirstWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Finds the first item in a collection that satisfies the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <remarks>If the default value for T could be present in the collection, and 
            would be matched by the predicate, then this method is inappropriate, because
            you cannot disguish whether the default value for T was actually present in the collection,
            or no items matched the predicate. In this case, use TryFindFirstWhere.</remarks>
            <param name="collection">The collection to search.</param>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <returns>The first item in the collection that matches the condition, or the default value for T (0 or null) if no
            item that matches the condition is found.</returns>
            <seealso cref="M:Wintellect.PowerCollections.Algorithms.TryFindFirstWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0@)"/>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.TryFindFirstWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0@)">
            <summary>
            Finds the first item in a collection that satisfies the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <param name="collection">The collection to search.</param>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <param name="foundItem">Outputs the first item in the collection that matches the condition, if the method returns true.</param>
            <returns>True if an item satisfying the condition was found. False if no such item exists in the collection.</returns>
            <seealso cref="M:Wintellect.PowerCollections.Algorithms.FindFirstWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})"/>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.FindLastWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Finds the last item in a collection that satisfies the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <remarks><para>If the collection implements IList&lt;T&gt;, then the list is scanned in reverse until a 
            matching item is found. Otherwise, the entire collection is iterated in the forward direction.</para>
            <para>If the default value for T could be present in the collection, and 
            would be matched by the predicate, then this method is inappropriate, because
            you cannot disguish whether the default value for T was actually present in the collection,
            or no items matched the predicate. In this case, use TryFindFirstWhere.</para></remarks>
            <param name="collection">The collection to search.</param>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <returns>The last item in the collection that matches the condition, or the default value for T (0 or null) if no
            item that matches the condition is found.</returns>
            <seealso cref="M:Wintellect.PowerCollections.Algorithms.TryFindLastWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0@)"/>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.TryFindLastWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0@)">
            <summary>
            Finds the last item in a collection that satisfies the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <remarks>If the collection implements IList&lt;T&gt;, then the list is scanned in reverse until a 
            matching item is found. Otherwise, the entire collection is iterated in the forward direction.</remarks>
            <param name="collection">The collection to search.</param>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <param name="foundItem">Outputs the last item in the collection that matches the condition, if the method returns true.</param>
            <returns>True if an item satisfying the condition was found. False if no such item exists in the collection.</returns>
            <seealso cref="M:Wintellect.PowerCollections.Algorithms.FindLastWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})"/>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.FindWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Enumerates all the items in <paramref name="collection"/> that satisfy the condition defined
            by <paramref name="predicate"/>.
            </summary>
            <param name="collection">The collection to check all the items in.</param>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <returns>An IEnumerable&lt;T&gt; that enumerates the items that satisfy the condition.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.FindFirstIndexWhere``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Finds the index of the first item in a list that satisfies the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <param name="list">The list to search.</param>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <returns>The index of the first item satisfying the condition. -1 if no such item exists in the list.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.FindLastIndexWhere``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Finds the index of the last item in a list that satisfies the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <param name="list">The list to search.</param>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <returns>The index of the last item satisfying the condition. -1 if no such item exists in the list.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.FindIndicesWhere``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Enumerates the indices of all the items in <paramref name="list"/> that satisfy the condition defined
            by <paramref name="predicate"/>.
            </summary>
            <param name="list">The list to check all the items in.</param>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <returns>An IEnumerable&lt;T&gt; that enumerates the indices of items that satisfy the condition.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.FirstIndexOf``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Finds the index of the first item in a list equal to a given item.
            </summary>
            <remarks>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</remarks>
            <param name="list">The list to search.</param>
            <param name="item">The item to search for.</param>
            <returns>The index of the first item equal to <paramref name="item"/>. -1 if no such item exists in the list.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.FirstIndexOf``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Finds the index of the first item in a list equal to a given item. A passed
            IEqualityComparer is used to determine equality.
            </summary>
            <param name="list">The list to search.</param>
            <param name="item">The item to search for.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality. Only the Equals method will be called.</param>
            <returns>The index of the first item equal to <paramref name="item"/>. -1 if no such item exists in the list.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.LastIndexOf``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Finds the index of the last item in a list equal to a given item.
            </summary>
            <remarks>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</remarks>
            <param name="list">The list to search.</param>
            <param name="item">The item to search for.</param>
            <returns>The index of the last item equal to <paramref name="item"/>. -1 if no such item exists in the list.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.LastIndexOf``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Finds the index of the last item in a list equal to a given item. A passed
            IEqualityComparer is used to determine equality.
            </summary>
            <param name="list">The list to search.</param>
            <param name="item">The item to search for.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality. Only the Equals method will be called.</param>
            <returns>The index of the last item equal to <paramref name="item"/>. -1 if no such item exists in the list.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.IndicesOf``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Enumerates the indices of all the items in a list equal to a given item.
            </summary>
            <remarks>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</remarks>
            <param name="list">The list to search.</param>
            <param name="item">The item to search for.</param>
            <returns>An IEnumerable&lt;T&gt; that enumerates the indices of items equal to <paramref name="item"/>. </returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.IndicesOf``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Enumerates the indices of all the items in a list equal to a given item. A passed
            IEqualityComparer is used to determine equality.
            </summary>
            <param name="list">The list to search.</param>
            <param name="item">The item to search for.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality. Only the Equals method will be called.</param>
            <returns>An IEnumerable&lt;T&gt; that enumerates the indices of items equal to <paramref name="item"/>. </returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.FirstIndexOfMany``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Finds the index of the first item in a list equal to one of several given items.
            </summary>
            <remarks>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</remarks>
            <param name="list">The list to search.</param>
            <param name="itemsToLookFor">The items to search for.</param>
            <returns>The index of the first item equal to any of the items in the collection <paramref name="itemsToLookFor"/>. 
            -1 if no such item exists in the list.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.FirstIndexOfMany``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Finds the index of the first item in a list equal to one of several given items. A passed
            IEqualityComparer is used to determine equality.
            </summary>
            <param name="list">The list to search.</param>
            <param name="itemsToLookFor">The items to search for.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality. 
            Only the Equals and GetHashCode methods will be called.</param>
            <returns>The index of the first item equal to any of the items in the collection <paramref name="itemsToLookFor"/>. 
            -1 if no such item exists in the list.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.FirstIndexOfMany``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},Wintellect.PowerCollections.BinaryPredicate{``0})">
            <summary>
            Finds the index of the first item in a list "equal" to one of several given items. The passed 
            BinaryPredicate is used to determine if two items are "equal".
            </summary>
            <remarks>Since an arbitrary BinaryPredicate is passed to this function, what is being removed need not be true equality. This methods finds 
            first item X which satisfies BinaryPredicate(X,Y), where Y is one of the items in <paramref name="itemsToLookFor"/></remarks>
            <param name="list">The list to search.</param>
            <param name="itemsToLookFor">The items to search for.</param>
            <param name="predicate">The BinaryPredicate used to compare items for "equality". </param>
            <returns>The index of the first item "equal" to any of the items in the collection <paramref name="itemsToLookFor"/>, using 
            <paramref name="BinaryPredicate"/> as the test for equality. 
            -1 if no such item exists in the list.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.LastIndexOfMany``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Finds the index of the last item in a list equal to one of several given items.
            </summary>
            <remarks>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</remarks>
            <param name="list">The list to search.</param>
            <param name="itemsToLookFor">The items to search for.</param>
            <returns>The index of the last item equal to any of the items in the collection <paramref name="itemsToLookFor"/>. 
            -1 if no such item exists in the list.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.LastIndexOfMany``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Finds the index of the last item in a list equal to one of several given items. A passed
            IEqualityComparer is used to determine equality.
            </summary>
            <param name="list">The list to search.</param>
            <param name="itemsToLookFor">The items to search for.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality.</param>
            <returns>The index of the last item equal to any of the items in the collection <paramref name="itemsToLookFor"/>. 
            -1 if no such item exists in the list.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.LastIndexOfMany``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},Wintellect.PowerCollections.BinaryPredicate{``0})">
            <summary>
            Finds the index of the last item in a list "equal" to one of several given items. The passed 
            BinaryPredicate is used to determine if two items are "equal".
            </summary>
            <remarks>Since an arbitrary BinaryPredicate is passed to this function, what is being removed need not be true equality. This methods finds 
            last item X which satisfies BinaryPredicate(X,Y), where Y is one of the items in <paramref name="itemsToLookFor"/></remarks>
            <param name="list">The list to search.</param>
            <param name="itemsToLookFor">The items to search for.</param>
            <param name="predicate">The BinaryPredicate used to compare items for "equality". </param>
            <returns>The index of the last item "equal" to any of the items in the collection <paramref name="itemsToLookFor"/>, using 
            <paramref name="BinaryPredicate"/> as the test for equality. 
            -1 if no such item exists in the list.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.IndicesOfMany``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Enumerates the indices of all the items in a list equal to one of several given items. 
            </summary>
            <remarks>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</remarks>
            <param name="list">The list to search.</param>
            <param name="itemsToLookFor">A collection of items to search for.</param>
            <returns>An IEnumerable&lt;T&gt; that enumerates the indices of items equal to
            any of the items in the collection <paramref name="itemsToLookFor"/>. </returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.IndicesOfMany``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Enumerates the indices of all the items in a list equal to one of several given items. A passed
            IEqualityComparer is used to determine equality.
            </summary>
            <param name="list">The list to search.</param>
            <param name="itemsToLookFor">A collection of items to search for.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality. </param>
            <returns>An IEnumerable&lt;T&gt; that enumerates the indices of items equal to
            any of the items in the collection <paramref name="itemsToLookFor"/>. </returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.IndicesOfMany``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},Wintellect.PowerCollections.BinaryPredicate{``0})">
            <summary>
            Enumerates the indices of all the items in a list equal to one of several given items. The passed 
            BinaryPredicate is used to determine if two items are "equal".
            </summary>
            <remarks>Since an arbitrary BinaryPredicate is passed to this function, what is being removed need not be true equality. This methods finds 
            last item X which satisfies BinaryPredicate(X,Y), where Y is one of the items in <paramref name="itemsToLookFor"/></remarks>
            <param name="list">The list to search.</param>
            <param name="itemsToLookFor">A collection of items to search for.</param>
            <param name="predicate">The BinaryPredicate used to compare items for "equality". </param>
            <returns>An IEnumerable&lt;T&gt; that enumerates the indices of items "equal" to any of the items 
            in the collection <paramref name="itemsToLookFor"/>, using 
            <paramref name="BinaryPredicate"/> as the test for equality. </returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.SearchForSubsequence``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Searchs a list for a sub-sequence of items that match a particular pattern. A subsequence 
            of <paramref name="list"/> matches pattern at index i if list[i] is equal to the first item
            in <paramref name="pattern"/>, list[i+1] is equal to the second item in <paramref name="pattern"/>,
            and so forth for all the items in <paramref name="pattern"/>.
            </summary>
            <remarks>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</remarks>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="pattern">The sequence of items to search for.</param>
            <returns>The first index with <paramref name="list"/> that matches the items in <paramref name="pattern"/>.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.SearchForSubsequence``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},Wintellect.PowerCollections.BinaryPredicate{``0})">
            <summary>
            Searchs a list for a sub-sequence of items that match a particular pattern. A subsequence 
            of <paramref name="list"/> matches pattern at index i if list[i] is "equal" to the first item
            in <paramref name="pattern"/>, list[i+1] is "equal" to the second item in <paramref name="pattern"/>,
            and so forth for all the items in <paramref name="pattern"/>. The passed 
            BinaryPredicate is used to determine if two items are "equal".
            </summary>
            <remarks>Since an arbitrary BinaryPredicate is passed to this function, what is being tested
            for in the pattern need not be equality. </remarks>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="pattern">The sequence of items to search for.</param>
            <param name="predicate">The BinaryPredicate used to compare items for "equality". </param>
            <returns>The first index with <paramref name="list"/> that matches the items in <paramref name="pattern"/>.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.SearchForSubsequence``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Searchs a list for a sub-sequence of items that match a particular pattern. A subsequence 
            of <paramref name="list"/> matches pattern at index i if list[i] is equal to the first item
            in <paramref name="pattern"/>, list[i+1] is equal to the second item in <paramref name="pattern"/>,
            and so forth for all the items in <paramref name="pattern"/>. The passed 
            instance of IEqualityComparer&lt;T&gt; is used for determining if two items are equal.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="pattern">The sequence of items to search for.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality. Only the Equals method will be called.</param>
            <returns>The first index with <paramref name="list"/> that matches the items in <paramref name="pattern"/>.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.IsSubsetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if one collection is a subset of another, considered as sets. The first set is a subset
            of the second set if every item in the first set also occurs in the second set. If an item appears X times in the first set,
            it must appear at least X times in the second set.
            </summary>
            <remarks>
            <para>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</para>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the IsSubsetOf method on that class.</para>
            </remarks>
            <param name="collection1">The first collection.</param>
            <param name="collection2">The second collection.</param>
            <returns>True if <paramref name="collection1"/> is a subset of <paramref name="collection2"/>, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.IsSubsetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if one collection is a subset of another, considered as sets. The first set is a subset
            of the second set if every item in the first set also occurs in the second set. If an item appears X times in the first set,
            it must appear at least X times in the second set.
            </summary>
            <remarks>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the IsSubsetOf method on that class.</para>
            </remarks>
            <param name="collection1">The first collection.</param>
            <param name="collection2">The second collection.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality.</param>
            <returns>True if <paramref name="collection1"/> is a subset of <paramref name="collection2"/>, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if one collection is a proper subset of another, considered as sets. The first set is a proper subset
            of the second set if every item in the first set also occurs in the second set, and the first set is strictly smaller than
            the second set. If an item appears X times in the first set,
            it must appear at least X times in the second set.
            </summary>
            <remarks>
            <para>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</para>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the IsSubsetOf method on that class.</para>
            </remarks>
            <param name="collection1">The first collection.</param>
            <param name="collection2">The second collection.</param>
            <returns>True if <paramref name="collection1"/> is a subset of <paramref name="collection2"/>, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if one collection is a proper subset of another, considered as sets. The first set is a proper subset
            of the second set if every item in the first set also occurs in the second set, and the first set is strictly smaller than
            the second set. If an item appears X times in the first set,
            it must appear at least X times in the second set.
            </summary>
            <remarks>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the IsSubsetOf method on that class.</para>
            </remarks>
            <param name="collection1">The first collection.</param>
            <param name="collection2">The second collection.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality. 
            Only the Equals and GetHashCode member functions of this interface are called.</param>
            <returns>True if <paramref name="collection1"/> is a proper subset of <paramref name="collection2"/>, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.DisjointSets``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if two collections are disjoint, considered as sets. Two sets are disjoint if they
            have no common items.
            </summary>
            <remarks>
            <para>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</para>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the IsDisjoint method on that class.</para>
            </remarks>
            <param name="collection1">The first collection.</param>
            <param name="collection2">The second collection.</param>
            <returns>True if <paramref name="collection1"/> are <paramref name="collection2"/> are disjoint, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.DisjointSets``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if two collections are disjoint, considered as sets. Two sets are disjoint if they
            have no common items.
            </summary>
            <remarks>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the IsDisjoint method on that class.</para>
            </remarks>
            <param name="collection1">The first collection.</param>
            <param name="collection2">The second collection.</param>
            <param name="equalityComparer">The IEqualityComparerComparer&lt;T&gt; used to compare items for equality. 
            Only the Equals and GetHashCode member functions of this interface are called.</param>
            <returns>True if <paramref name="collection1"/> are <paramref name="collection2"/> are disjoint, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.EqualSets``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if two collections are equal, considered as sets. Two sets are equal if they
            have have the same items, with order not being significant.
            </summary>
            <remarks>
            <para>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</para>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the EqualTo method on that class.</para>
            </remarks>
            <param name="collection1">The first collection.</param>
            <param name="collection2">The second collection.</param>
            <returns>True if <paramref name="collection1"/> are <paramref name="collection2"/> are equal, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.EqualSets``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if two collections are equal, considered as sets. Two sets are equal if they
            have have the same items, with order not being significant.
            </summary>
            <remarks>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the EqualTo method on that class.</para>
            </remarks>
            <param name="collection1">The first collection.</param>
            <param name="collection2">The second collection.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality. 
            Only the Equals and GetHashCode member functions of this interface are called.</param>
            <returns>True if <paramref name="collection1"/> are <paramref name="collection2"/> are equal, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.SetIntersection``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Computes the set-theoretic intersection of two collections. The intersection of two sets
            is all items that appear in both of the sets. If an item appears X times in one set,
            and Y times in the other set, the intersection contains the item Minimum(X,Y) times. 
            The source collections are not changed.
            A new collection is created with the intersection of the collections; the order of the
            items in this collection is undefined.
            </summary>
            <remarks>
            <para>When equal items appear in both collections, the returned collection will include an arbitrary choice of one of the
            two equal items.</para>
            <para>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</para>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the Intersection or IntersectionWith methods on that class.</para>
            </remarks>
            <param name="collection1">The first collection to intersect.</param>
            <param name="collection2">The second collection to intersect.</param>
            <returns>The intersection of the two collections, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.SetIntersection``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Computes the set-theoretic intersection of two collections. The intersection of two sets
            is all items that appear in both of the sets. If an item appears X times in one set,
            and Y times in the other set, the intersection contains the item Minimum(X,Y) times. 
            The source collections are not changed.
            A new collection is created with the intersection of the collections; the order of the
            items in this collection is undefined.
            </summary>
            <remarks>
            <para>When equal items appear in both collections, the returned collection will include an arbitrary choice of one of the
            two equal items.</para>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the Intersection or IntersectionWith methods on that class.</para>
            </remarks>
            <param name="collection1">The first collection to intersect.</param>
            <param name="collection2">The second collection to intersect.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality. 
            Only the Equals and GetHashCode member functions of this interface are called.</param>
            <returns>The intersection of the two collections, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.SetUnion``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Computes the set-theoretic union of two collections. The union of two sets
            is all items that appear in either of the sets. If an item appears X times in one set,
            and Y times in the other set, the union contains the item Maximum(X,Y) times. 
            The source collections are not changed.
            A new collection is created with the union of the collections; the order of the
            items in this collection is undefined.
            </summary>
            <remarks>
            <para>When equal items appear in both collections, the returned collection will include an arbitrary choice of one of the
            two equal items.</para>
            <para>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</para>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the Union or UnionWith methods on that class.</para>
            </remarks>
            <param name="collection1">The first collection to union.</param>
            <param name="collection2">The second collection to union.</param>
            <returns>The union of the two collections, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.SetUnion``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Computes the set-theoretic union of two collections. The union of two sets
            is all items that appear in either of the sets. If an item appears X times in one set,
            and Y times in the other set, the union contains the item Maximum(X,Y) times. 
            The source collections are not changed.
            A new collection is created with the union of the collections; the order of the
            items in this collection is undefined.
            </summary>
            <remarks>
            <para>When equal items appear in both collections, the returned collection will include an arbitrary choice of one of the
            two equal items.</para>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the union or unionWith methods on that class.</para>
            </remarks>
            <param name="collection1">The first collection to union.</param>
            <param name="collection2">The second collection to union.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality. 
            Only the Equals and GetHashCode member functions of this interface are called.</param>
            <returns>The union of the two collections, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.SetDifference``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Computes the set-theoretic difference of two collections. The difference of two sets
            is all items that appear in the first set, but not in the second. If an item appears X times in the first set,
            and Y times in the second set, the difference contains the item X - Y times (0 times if X &lt; Y). 
            The source collections are not changed.
            A new collection is created with the difference of the collections; the order of the
            items in this collection is undefined.
            </summary>
            <remarks>
            <para>When equal items appear in both collections, the returned collection will include an arbitrary choice of one of the
            two equal items.</para>
            <para>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</para>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the Difference or DifferenceWith methods on that class.</para>
            </remarks>
            <param name="collection1">The first collection to difference.</param>
            <param name="collection2">The second collection to difference.</param>
            <returns>The difference of <paramref name="collection1"/> and <paramref name="collection2"/>, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.SetDifference``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Computes the set-theoretic difference of two collections. The difference of two sets
            is all items that appear in the first set, but not in the second. If an item appears X times in the first set,
            and Y times in the second set, the difference contains the item X - Y times (0 times if X &lt; Y). 
            The source collections are not changed.
            A new collection is created with the difference of the collections; the order of the
            items in this collection is undefined.
            </summary>
            <remarks>
            <para>When equal items appear in both collections, the returned collection will include an arbitrary choice of one of the
            two equal items.</para>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the difference or differenceWith methods on that class.</para>
            </remarks>
            <param name="collection1">The first collection to difference.</param>
            <param name="collection2">The second collection to difference.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality. 
            Only the Equals and GetHashCode member functions of this interface are called.</param>
            <returns>The difference of <paramref name="collection1"/> and <paramref name="collection2"/>, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.SetSymmetricDifference``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Computes the set-theoretic symmetric difference of two collections. The symmetric difference of two sets
            is all items that appear in the one of the sets, but not in the other. If an item appears X times in the one set,
            and Y times in the other set, the symmetric difference contains the item AbsoluteValue(X - Y) times. 
            The source collections are not changed.
            A new collection is created with the symmetric difference of the collections; the order of the
            items in this collection is undefined.
            </summary>
            <remarks>
            <para>When equal items appear in both collections, the returned collection will include an arbitrary choice of one of the
            two equal items.</para>
            <para>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</para>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the SymmetricDifference or SymmetricDifferenceWith methods on that class.</para>
            </remarks>
            <param name="collection1">The first collection to symmetric difference.</param>
            <param name="collection2">The second collection to symmetric difference.</param>
            <returns>The symmetric difference of <paramref name="collection1"/> and <paramref name="collection2"/>, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.SetSymmetricDifference``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Computes the set-theoretic symmetric difference of two collections. The symmetric difference of two sets
            is all items that appear in the one of the sets, but not in the other. If an item appears X times in the one set,
            and Y times in the other set, the symmetric difference contains the item AbsoluteValue(X - Y) times. 
            The source collections are not changed.
            A new collection is created with the symmetric difference of the collections; the order of the
            items in this collection is undefined.
            </summary>
            <remarks>
            <para>When equal items appear in both collections, the returned collection will include an arbitrary choice of one of the
            two equal items.</para>
            <para>If both collections are Set, Bag, OrderedSet, or OrderedBag
            collections, it is more efficient to use the symmetric difference or symmetric differenceWith methods on that class.</para>
            </remarks>
            <param name="collection1">The first collection to symmetric difference.</param>
            <param name="collection2">The second collection to symmetric difference.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality. 
            Only the Equals and GetHashCode member functions of this interface are called.</param>
            <returns>The symmetric difference of <paramref name="collection1"/> and <paramref name="collection2"/>, considered as sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/> or <paramref name="collection2"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.CartesianProduct``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Computes the cartestian product of two collections: all possible pairs of items, with the first item taken from the first collection and 
            the second item taken from the second collection. If the first collection has N items, and the second collection has M items, the cartesian
            product will have N * M pairs.
            </summary>
            <typeparam name="TFirst">The type of items in the first collection.</typeparam>
            <typeparam name="TSecond">The type of items in the second collection.</typeparam>
            <param name="first">The first collection.</param>
            <param name="second">The second collection.</param>
            <returns>An IEnumerable&lt;Pair&lt;TFirst, TSecond&gt;&gt; that enumerates the cartesian product of the two collections.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.ToString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a string representation of the elements in the collection.
            The string representation starts with "{", has a list of items separated
            by commas (","), and ends with "}". Each item in the collection is 
            converted to a string by calling its ToString method (null is represented by "null").
            Contained collections (except strings) are recursively converted to strings by this method.
            </summary>
            <param name="collection">A collection to get the string representation of.</param>
            <returns>The string representation of the collection. If <paramref name="collection"/> is null, then the string "null" is returned.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.ToString``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.String,System.String,System.String)">
            <summary>
            Gets a string representation of the elements in the collection.
            The string to used at the beginning and end, and to separate items,
            and supplied by parameters. Each item in the collection is 
            converted to a string by calling its ToString method (null is represented by "null").
            </summary>
            <param name="collection">A collection to get the string representation of.</param>
            <param name="recursive">If true, contained collections (except strings) are converted to strings by a recursive call to this method, instead
            of by calling ToString.</param>
            <param name="start">The string to appear at the beginning of the output string.</param>
            <param name="separator">The string to appear between each item in the string.</param>
            <param name="end">The string to appear at the end of the output string.</param>
            <returns>The string representation of the collection. If <paramref name="collection"/> is null, then the string "null" is returned.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="start"/>, <paramref name="separator"/>, or <paramref name="end"/>
             is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.ToString``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Gets a string representation of the mappings in a dictionary.
            The string representation starts with "{", has a list of mappings separated
            by commas (", "), and ends with "}". Each mapping is represented
            by "key->value". Each key and value in the dictionary is 
            converted to a string by calling its ToString method (null is represented by "null").
            Contained collections (except strings) are recursively converted to strings by this method.
            </summary>
            <param name="dictionary">A dictionary to get the string representation of.</param>
            <returns>The string representation of the collection, or "null" 
            if <paramref name="dictionary"/> is null.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.GetRandomGenerator">
            <summary>
            Return a private random number generator to use if the user
            doesn't supply one.
            </summary>
            <returns>The private random number generator. Only one is ever created
            and is always returned.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.RandomShuffle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Randomly shuffles the items in a collection, yielding a new collection.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="collection">The collection to shuffle.</param>
            <returns>An array with the same size and items as <paramref name="collection"/>, but the items in a randomly chosen order.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.RandomShuffle``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>
            Randomly shuffles the items in a collection, yielding a new collection.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="collection">The collection to shuffle.</param>
            <param name="randomGenerator">The random number generator to use to select the random order.</param>
            <returns>An array with the same size and items as <paramref name="collection"/>, but the items in a randomly chosen order.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.RandomShuffleInPlace``1(System.Collections.Generic.IList{``0})">
            <summary>
            Randomly shuffles the items in a list or array, in place.
            </summary>
            <remarks>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</remarks>
            <param name="list">The list or array to shuffle.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.RandomShuffleInPlace``1(System.Collections.Generic.IList{``0},System.Random)">
            <summary>
            Randomly shuffles the items in a list or array, in place.
            </summary>
            <remarks>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</remarks>
            <param name="list">The list or array to shuffle.</param>
            <param name="randomGenerator">The random number generator to use to select the random order.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.RandomSubset``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Picks a random subset of <paramref name="count"/> items from <paramref name="collection"/>, and places
            those items into a random order. No item is selected more than once.
            </summary>
            <remarks>If the collection implements IList&lt;T&gt;, then this method takes time O(<paramref name="count"/>).
            Otherwise, this method takes time O(N), where N is the number of items in the collection.</remarks>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The collection of items to select from. This collection is not changed.</param>
            <param name="count">The number of items in the subset to choose.</param>
            <returns>An array of <paramref name="count"/> items, selected at random from <paramref name="collection"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative or greater than <paramref name="collection"/>.Count.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.RandomSubset``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Random)">
            <summary>
            Picks a random subset of <paramref name="count"/> items from <paramref name="collection"/>, and places
            those items into a random order. No item is selected more than once.
            </summary>
            <remarks>If the collection implements IList&lt;T&gt;, then this method takes time O(<paramref name="count"/>).
            Otherwise, this method takes time O(N), where N is the number of items in the collection.</remarks>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The collection of items to select from. This collection is not changed.</param>
            <param name="count">The number of items in the subset to choose.</param>
            <param name="randomGenerator">The random number generates used to make the selection.</param>
            <returns>An array of <paramref name="count"/> items, selected at random from <paramref name="collection"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative or greater than <paramref name="list"/>.Count.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="randomGenerator"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.GeneratePermutations``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Generates all the possible permutations of the items in <paramref name="collection"/>. If <paramref name="collection"/>
            has N items, then N factorial permutations will be generated. This method does not compare the items to determine if
            any of them are equal. If some items are equal, the same permutation may be generated more than once. For example,
            if the collections contains the three items A, A, and B, then this method will generate the six permutations, AAB, AAB,
            ABA, ABA, BAA, BAA (not necessarily in that order). To take equal items into account, use the GenerateSortedPermutations
            method.
            </summary>
            <typeparam name="T">The type of items to permute.</typeparam>
            <param name="collection">The collection of items to permute.</param>
            <returns>An IEnumerable&lt;T[]&gt; that enumerations all the possible permutations of the 
            items in <paramref name="collection"/>. Each permutations is returned as an array. The items in the array
            should be copied if they need to be used after the next permutation is generated; each permutation may
            reuse the same array instance.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.GenerateSortedPermutations``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Generates all the possible permutations of the items in <paramref name="collection"/>, in lexicographical order. 
            Even if some items are equal, the same permutation will not be generated more than once. For example,
            if the collections contains the three items A, A, and B, then this method will generate only the three permutations, AAB, ABA,
            BAA. 
            </summary>
            <typeparam name="T">The type of items to permute.</typeparam>
            <param name="collection">The collection of items to permute.</param>
            <returns>An IEnumerable&lt;T[]&gt; that enumerations all the possible permutations of the 
            items in <paramref name="collection"/>. Each permutations is returned as an array. The items in the array
            should be copied if they need to be used after the next permutation is generated; each permutation may
            reuse the same array instance.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.GenerateSortedPermutations``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Generates all the possible permutations of the items in <paramref name="collection"/>, in lexicographical order. A
            supplied IComparer&lt;T&gt; instance is used to compare the items.
            Even if some items are equal, the same permutation will not be generated more than once. For example,
            if the collections contains the three items A, A, and B, then this method will generate only the three permutations, AAB, ABA,
            BAA. 
            </summary>
            <typeparam name="T">The type of items to permute.</typeparam>
            <param name="collection">The collection of items to permute.</param>
            <param name="comparer">The IComparer&lt;T&gt; used to compare the items.</param>
            <returns>An IEnumerable&lt;T[]&gt; that enumerations all the possible permutations of the 
            items in <paramref name="collection"/>. Each permutations is returned as an array. The items in the array
            should be copied if they need to be used after the next permutation is generated; each permutation may
            reuse the same array instance.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.GenerateSortedPermutations``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            Generates all the possible permutations of the items in <paramref name="collection"/>, in lexicographical order. A
            supplied Comparison&lt;T&gt; delegate is used to compare the items.
            Even if some items are equal, the same permutation will not be generated more than once. For example,
            if the collections contains the three items A, A, and B, then this method will generate only the three permutations, AAB, ABA,
            BAA. 
            </summary>
            <typeparam name="T">The type of items to permute.</typeparam>
            <param name="collection">The collection of items to permute.</param>
            <param name="comparison">The Comparison&lt;T&gt; delegate used to compare the items.</param>
            <returns>An IEnumerable&lt;T[]&gt; that enumerations all the possible permutations of the 
            items in <paramref name="collection"/>. Each permutations is returned as an array. The items in the array
            should be copied if they need to be used after the next permutation is generated; each permutation may
            reuse the same array instance.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.Maximum``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Finds the maximum value in a collection.
            </summary>
            <remarks>Values in the collection are compared by using the IComparable&lt;T&gt;
            interfaces implementation on the type T.</remarks>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The collection to search.</param>
            <returns>The largest item in the collection. </returns>
            <exception cref="T:System.InvalidOperationException">The collection is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.Maximum``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Finds the maximum value in a collection. A supplied IComparer&lt;T&gt; is used
            to compare the items in the collection.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The collection to search.</param>
            <param name="comparer">The comparer instance used to compare items in the collection.</param>
            <returns>The largest item in the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="comparer"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.Maximum``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            Finds the maximum value in a collection. A supplied Comparison&lt;T&gt; delegate is used
            to compare the items in the collection.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The collection to search.</param>
            <param name="comparison">The comparison used to compare items in the collection.</param>
            <returns>The largest item in the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="comparison"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.Minimum``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Finds the minimum value in a collection.
            </summary>
            <remarks>Values in the collection are compared by using the IComparable&lt;T&gt;
            interfaces implementation on the type T.</remarks>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The collection to search.</param>
            <returns>The smallest item in the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.Minimum``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Finds the minimum value in a collection. A supplied IComparer&lt;T&gt; is used
            to compare the items in the collection.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The collection to search.</param>
            <param name="comparer">The comparer instance used to compare items in the collection.</param>
            <returns>The smallest item in the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="comparer"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.Minimum``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            Finds the minimum value in a collection. A supplied Comparison&lt;T&gt; delegate is used
            to compare the items in the collection.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The collection to search.</param>
            <param name="comparison">The comparison used to compare items in the collection.</param>
            <returns>The smallest item in the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="comparison"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.IndexOfMaximum``1(System.Collections.Generic.IList{``0})">
            <summary>
            Finds the index of the maximum value in a list.
            </summary>
            <remarks>Values in the list are compared by using the IComparable&lt;T&gt;
            interfaces implementation on the type T.</remarks>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <returns>The index of the largest item in the list. If the maximum value appears
            multiple times, the index of the first appearance is used. If the list is empty, -1 is returned.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.IndexOfMaximum``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Finds the index of the maximum value in a list. A supplied IComparer&lt;T&gt; is used
            to compare the items in the collection. 
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="comparer">The comparer instance used to compare items in the collection.</param>
            <returns>The index of the largest item in the list. If the maximum value appears
            multiple times, the index of the first appearance is used. If the list is empty, -1 is returned.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> or <paramref name="comparer"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.IndexOfMaximum``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            Finds the index of the maximum value in a list. A supplied Comparison&lt;T&gt; delegate is used
            to compare the items in the collection.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="comparison">The comparison used to compare items in the collection.</param>
            <returns>The index of the largest item in the list. If the maximum value appears
            multiple times, the index of the first appearance is used. If the list is empty, -1 is returned.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> or <paramref name="comparison"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.IndexOfMinimum``1(System.Collections.Generic.IList{``0})">
            <summary>
            Finds the index of the minimum value in a list.
            </summary>
            <remarks>Values in the list are compared by using the IComparable&lt;T&gt;
            interfaces implementation on the type T.</remarks>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <returns>The index of the smallest item in the list. If the minimum value appears
            multiple times, the index of the first appearance is used.</returns>
            <exception cref="T:System.InvalidOperationException">The collection is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.IndexOfMinimum``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Finds the index of the minimum value in a list. A supplied IComparer&lt;T&gt; is used
            to compare the items in the collection. 
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="comparer">The comparer instance used to compare items in the collection.</param>
            <returns>The index of the smallest item in the list. If the minimum value appears
            multiple times, the index of the first appearance is used.</returns>
            <exception cref="T:System.InvalidOperationException">The collection is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> or <paramref name="comparer"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.IndexOfMinimum``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            Finds the index of the minimum value in a list. A supplied Comparison&lt;T&gt; delegate is used
            to compare the items in the collection.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="comparison">The comparison delegate used to compare items in the collection.</param>
            <returns>The index of the smallest item in the list. If the minimum value appears
            multiple times, the index of the first appearance is used.</returns>
            <exception cref="T:System.InvalidOperationException">The collection is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> or <paramref name="comparison"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.Sort``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a sorted version of a collection.
            </summary>
            <remarks>Values are compared by using the IComparable&lt;T&gt;
            interfaces implementation on the type T.</remarks>
            <param name="collection">The collection to sort.</param>
            <returns>An array containing the sorted version of the collection.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.Sort``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Creates a sorted version of a collection. A supplied IComparer&lt;T&gt; is used
            to compare the items in the collection. 
            </summary>
            <param name="collection">The collection to sort.</param>
            <param name="comparer">The comparer instance used to compare items in the collection. Only
            the Compare method is used.</param>
            <returns>An array containing the sorted version of the collection.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.Sort``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            Creates a sorted version of a collection. A supplied Comparison&lt;T&gt; delegate is used
            to compare the items in the collection.
            </summary>
            <param name="collection">The collection to sort.</param>
            <param name="comparison">The comparison delegate used to compare items in the collection.</param>
            <returns>An array containing the sorted version of the collection.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.SortInPlace``1(System.Collections.Generic.IList{``0})">
            <summary>
            Sorts a list or array in place.
            </summary>
            <remarks><para>The Quicksort algorithms is used to sort the items. In virtually all cases,
            this takes time O(N log N), where N is the number of items in the list.</para>
            <para>Values are compared by using the IComparable&lt;T&gt;
            interfaces implementation on the type T.</para>
            <para>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</para></remarks>
            <param name="list">The list or array to sort.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.SortInPlace``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts a list or array in place. A supplied IComparer&lt;T&gt; is used
            to compare the items in the list. 
            </summary>
            <remarks><para>The Quicksort algorithms is used to sort the items. In virtually all cases,
            this takes time O(N log N), where N is the number of items in the list.</para>
            <para>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</para></remarks>
            <param name="list">The list or array to sort.</param>
            <param name="comparer">The comparer instance used to compare items in the collection. Only
            the Compare method is used.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.SortInPlace``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            Sorts a list or array in place. A supplied Comparison&lt;T&gt; delegate is used
            to compare the items in the list.
            </summary>
            <remarks><para>The Quicksort algorithms is used to sort the items. In virtually all cases,
            this takes time O(N log N), where N is the number of items in the list.</para>
            <para>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</para></remarks>
            <param name="list">The list or array to sort.</param>
            <param name="comparison">The comparison delegate used to compare items in the collection.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.StableSort``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a sorted version of a collection. The sort is stable, which means that if items X and Y are equal,
            and X precedes Y in the unsorted collection, X will precede Y is the sorted collection.
            </summary>
            <remarks>Values are compared by using the IComparable&lt;T&gt;
            interfaces implementation on the type T.</remarks>
            <param name="collection">The collection to sort.</param>
            <returns>An array containing the sorted version of the collection.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.StableSort``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Creates a sorted version of a collection. The sort is stable, which means that if items X and Y are equal,
            and X precedes Y in the unsorted collection, X will precede Y is the sorted collection. A supplied IComparer&lt;T&gt; is used
            to compare the items in the collection. 
            </summary>
            <param name="collection">The collection to sort.</param>
            <param name="comparer">The comparer instance used to compare items in the collection. Only
            the Compare method is used.</param>
            <returns>An array containing the sorted version of the collection.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.StableSort``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            Creates a sorted version of a collection. The sort is stable, which means that if items X and Y are equal,
            and X precedes Y in the unsorted collection, X will precede Y is the sorted collection. 
            A supplied Comparison&lt;T&gt; delegate is used
            to compare the items in the collection.
            </summary>
            <remarks>Values are compared by using the IComparable&lt;T&gt;
            interfaces implementation on the type T.</remarks>
            <param name="collection">The collection to sort.</param>
            <param name="comparison">The comparison delegate used to compare items in the collection.</param>
            <returns>An array containing the sorted version of the collection.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.StableSortInPlace``1(System.Collections.Generic.IList{``0})">
            <summary>
            Sorts a list or array in place. The sort is stable, which means that if items X and Y are equal,
            and X precedes Y in the unsorted collection, X will precede Y is the sorted collection. 
            </summary>
            <remarks><para>Values are compared by using the IComparable&lt;T&gt;
            interfaces implementation on the type T.</para>
            <para>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</para></remarks>
            <param name="list">The list or array to sort.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.StableSortInPlace``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts a list or array in place. The sort is stable, which means that if items X and Y are equal,
            and X precedes Y in the unsorted collection, X will precede Y is the sorted collection. 
            A supplied IComparer&lt;T&gt; is used
            to compare the items in the list. 
            </summary>
            <remarks>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</remarks>
            <param name="list">The list or array to sort.</param>
            <param name="comparer">The comparer instance used to compare items in the collection. Only
            the Compare method is used.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.StableSortInPlace``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            Sorts a list or array in place. The sort is stable, which means that if items X and Y are equal,
            and X precedes Y in the unsorted collection, X will precede Y is the sorted collection. 
            A supplied Comparison&lt;T&gt; delegate is used
            to compare the items in the list.
            </summary>
            <remarks>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</remarks>
            <param name="list">The list or array to sort.</param>
            <param name="comparison">The comparison delegate used to compare items in the collection.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Int32@)">
            <summary>
            Searches a sorted list for an item via binary search. The list must be sorted
            by the natural ordering of the type (it's implementation of IComparable&lt;T&gt;).
            </summary>
            <param name="list">The sorted list to search.</param>
            <param name="item">The item to search for.</param>
            <param name="index">Returns the first index at which the item can be found. If the return
            value is zero, indicating that <paramref name="item"/> was not present in the list, then this
            returns the index at which <paramref name="item"/> could be inserted to maintain the sorted
            order of the list.</param>
            <returns>The number of items equal to <paramref name="item"/> that appear in the list.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IComparer{``0},System.Int32@)">
            <summary>
            Searches a sorted list for an item via binary search. The list must be sorted
            by the ordering in the passed instance of IComparer&lt;T&gt;.
            </summary>
            <param name="list">The sorted list to search.</param>
            <param name="item">The item to search for.</param>
            <param name="comparer">The comparer instance used to sort the list. Only
            the Compare method is used.</param>
            <param name="index">Returns the first index at which the item can be found. If the return
            value is zero, indicating that <paramref name="item"/> was not present in the list, then this
            returns the index at which <paramref name="item"/> could be inserted to maintain the sorted
            order of the list.</param>
            <returns>The number of items equal to <paramref name="item"/> that appear in the list.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Comparison{``0},System.Int32@)">
            <summary>
            Searches a sorted list for an item via binary search. The list must be sorted
            by the ordering in the passed Comparison&lt;T&gt; delegate.
            </summary>
            <param name="list">The sorted list to search.</param>
            <param name="item">The item to search for.</param>
            <param name="comparison">The comparison delegate used to sort the list.</param>
            <param name="index">Returns the first index at which the item can be found. If the return
            value is zero, indicating that <paramref name="item"/> was not present in the list, then this
            returns the index at which <paramref name="item"/> could be inserted to maintain the sorted
            order of the list.</param>
            <returns>The number of items equal to <paramref name="item"/> that appear in the list.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.MergeSorted``1(System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Merge several sorted collections into a single sorted collection. Each input collection must be sorted
            by the natural ordering of the type (it's implementation of IComparable&lt;T&gt;). The merging
            is stable; equal items maintain their ordering, and equal items in different collections are placed
            in the order of the collections.
            </summary>
            <param name="collections">The set of collections to merge. In many languages, this parameter
            can be specified as several individual parameters.</param>
            <returns>An IEnumerable&lt;T&gt; that enumerates all the items in all the collections
            in sorted order. </returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.MergeSorted``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Merge several sorted collections into a single sorted collection. Each input collection must be sorted
            by the ordering in the passed instance of IComparer&lt;T&gt;. The merging
            is stable; equal items maintain their ordering, and equal items in different collections are placed
            in the order of the collections.
            </summary>
            <param name="collections">The set of collections to merge. In many languages, this parameter
            can be specified as several individual parameters.</param>
            <param name="comparer">The comparer instance used to sort the list. Only
            the Compare method is used.</param>
            <returns>An IEnumerable&lt;T&gt; that enumerates all the items in all the collections
            in sorted order. </returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.MergeSorted``1(System.Comparison{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Merge several sorted collections into a single sorted collection. Each input collection must be sorted
            by the ordering in the passed Comparison&lt;T&gt; delegate. The merging
            is stable; equal items maintain their ordering, and equal items in different collections are placed
            in the order of the collections.
            </summary>
            <param name="collections">The set of collections to merge. In many languages, this parameter
            can be specified as several individual parameters.</param>
            <param name="comparison">The comparison delegate used to sort the collections.</param>
            <returns>An IEnumerable&lt;T&gt; that enumerates all the items in all the collections
            in sorted order. </returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.LexicographicalCompare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Performs a lexicographical comparison of two sequences of values. A lexicographical comparison compares corresponding
            pairs of elements from two sequences in order. If the first element of sequence1 is less than the first element of sequence2, 
            then the comparison ends and the first sequence is lexicographically less than the second. If the first elements of each sequence
            are equal, then the comparison proceeds to the second element of each sequence. If one sequence is shorter than the other,
            but corresponding elements are all equal, then the shorter sequence is considered less than the longer one.
            </summary>
            <remarks>T must implement either IComparable&lt;T&gt; and this implementation is used
            to compare the items. </remarks>
            <typeparam name="T">Types of items to compare. This type must implement IComparable&lt;T&gt; to allow 
            items to be compared.</typeparam>
            <param name="sequence1">The first sequence to compare.</param>
            <param name="sequence2">The second sequence to compare.</param>
            <returns>Less than zero if <paramref name="sequence1"/> is lexicographically less than <paramref name="sequence2"/>.
            Greater than zero if <paramref name="sequence1"/> is lexicographically greater than <paramref name="sequence2"/>.
            Zero if <paramref name="sequence1"/> is equal to <paramref name="sequence2"/>.</returns>
            <exception cref="T:System.NotSupportedException">T does not implement IComparable&lt;T&gt; or IComparable.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.LexicographicalCompare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            Performs a lexicographical comparison of two sequences of values, using a supplied comparison delegate. A lexicographical comparison compares corresponding
            pairs of elements from two sequences in order. If the first element of sequence1 is less than the first element of sequence2, 
            then the comparison ends and the first sequence is lexicographically less than the second. If the first elements of each sequence
            are equal, then the comparison proceeds to the second element of each sequence. If one sequence is shorter than the other,
            but corresponding elements are all equal, then the shorter sequence is considered less than the longer one.
            </summary>
            <typeparam name="T">Types of items to compare.</typeparam>
            <param name="sequence1">The first sequence to compare.</param>
            <param name="sequence2">The second sequence to compare.</param>
            <param name="comparison">The IComparison&lt;T&gt; delegate to compare items. 
            Only the Compare member function of this interface is called.</param>
            <returns>Less than zero if <paramref name="sequence1"/> is lexicographically less than <paramref name="sequence2"/>.
            Greater than zero if <paramref name="sequence1"/> is lexicographically greater than <paramref name="sequence2"/>.
            Zero if <paramref name="sequence1"/> is equal to <paramref name="sequence2"/>.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.LexicographicalCompare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Performs a lexicographical comparison of two sequences of values, using a supplied comparer interface. A lexicographical comparison compares corresponding
            pairs of elements from two sequences in order. If the first element of sequence1 is less than the first element of sequence2, 
            then the comparison ends and the first sequence is lexicographically less than the second. If the first elements of each sequence
            are equal, then the comparison proceeds to the second element of each sequence. If one sequence is shorter than the other,
            but corresponding elements are all equal, then the shorter sequence is considered less than the longer one.
            </summary>
            <typeparam name="T">Types of items to compare.</typeparam>
            <param name="sequence1">The first sequence to compare.</param>
            <param name="sequence2">The second sequence to compare.</param>
            <param name="comparer">The IComparer&lt;T&gt; used to compare items. 
            Only the Compare member function of this interface is called.</param>
            <returns>Less than zero if <paramref name="sequence1"/> is lexicographically less than <paramref name="sequence2"/>.
            Greater than zero if <paramref name="sequence1"/> is lexicographically greater than <paramref name="sequence2"/>.
            Zero if <paramref name="sequence1"/> is equal to <paramref name="sequence2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sequence1"/>, <paramref name="sequence2"/>, or 
            <paramref name="comparer"/> is null.</exception>
        </member>
        <member name="T:Wintellect.PowerCollections.Algorithms.LexicographicalComparerClass`1">
            <summary>
            A private class used by the LexicographicalComparer method to compare sequences
            (IEnumerable) of T by there Lexicographical ordering.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.LexicographicalComparerClass`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Creates a new instance that comparer sequences of T by their lexicographical
            ordered.
            </summary>
            <param name="itemComparer">The IComparer used to compare individual items of type T.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.GetLexicographicalComparer``1">
            <summary>
            Creates an IComparer instance that can be used for comparing ordered
            sequences of type T; that is IEnumerable&lt;Tgt;. This comparer can be used
            for collections or algorithms that use sequences of T as an item type. The Lexicographical
            ordered of sequences is for comparison.
            </summary>
            <remarks>T must implement either IComparable&lt;T&gt; and this implementation is used
            to compare the items. </remarks>
            <returns>At IComparer&lt;IEnumerable&lt;T&gt;&gt; that compares sequences of T.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.GetLexicographicalComparer``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Creates an IComparer instance that can be used for comparing ordered
            sequences of type T; that is IEnumerable&lt;Tgt;. This comparer can be uses
            for collections or algorithms that use sequences of T as an item type. The Lexicographics
            ordered of sequences is for comparison.
            </summary>
            <param name="comparer">A comparer instance used to compare individual items of type T.</param>
            <returns>At IComparer&lt;IEnumerable&lt;T&gt;&gt; that compares sequences of T.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.GetLexicographicalComparer``1(System.Comparison{``0})">
            <summary>
            Creates an IComparer instance that can be used for comparing ordered
            sequences of type T; that is IEnumerable&lt;Tgt;. This comparer can be uses
            for collections or algorithms that use sequences of T as an item type. The Lexicographics
            ordered of sequences is for comparison.
            </summary>
            <param name="comparison">A comparison delegate used to compare individual items of type T.</param>
            <returns>At IComparer&lt;IEnumerable&lt;T&gt;&gt; that compares sequences of T.</returns>
        </member>
        <member name="T:Wintellect.PowerCollections.Algorithms.ReverseComparerClass`1">
            <summary>
            An IComparer instance that can be used to reverse the sense of 
            a wrapped IComparer instance.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.ReverseComparerClass`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            </summary>
            <param name="comparer">The comparer to reverse.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.GetReverseComparer``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Reverses the order of comparison of an IComparer&lt;T&gt;. The resulting comparer can be used,
            for example, to sort a collection in descending order. Equality and hash codes are unchanged.
            </summary>
            <typeparam name="T">The type of items thta are being compared.</typeparam>
            <param name="comparer">The comparer to reverse.</param>
            <returns>An IComparer&lt;T&gt; that compares items in the reverse order of <paramref name="comparer"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is null.</exception>
        </member>
        <member name="T:Wintellect.PowerCollections.Algorithms.IdentityComparer`1">
            <summary>
            A class, implementing IEqualityComparer&lt;T&gt;, that compares objects
            for object identity only. Only Equals and GetHashCode can be used;
            this implementation is not appropriate for ordering.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.GetIdentityComparer``1">
            <summary>
            Gets an IEqualityComparer&lt;T&gt; instance that can be used to compare objects
            of type T for object identity only. Two objects compare equal only if they
            are references to the same object. 
            </summary>
            <returns>An IEqualityComparer&lt;T&gt; instance for identity comparison.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.GetReverseComparison``1(System.Comparison{``0})">
            <summary>
            Reverses the order of comparison of an Comparison&lt;T&gt;. The resulting comparison can be used,
            for example, to sort a collection in descending order. 
            </summary>
            <typeparam name="T">The type of items that are being compared.</typeparam>
            <param name="comparison">The comparison to reverse.</param>
            <returns>A Comparison&lt;T&gt; that compares items in the reverse order of <paramref name="comparison"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparison"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.GetComparerFromComparison``1(System.Comparison{``0})">
            <summary>
            Given a comparison delegate that compares two items of type T, gets an
            IComparer&lt;T&gt; instance that performs the same comparison.
            </summary>
            <param name="comparison">The comparison delegate to use.</param>
            <returns>An IComparer&lt;T&gt; that performs the same comparing operation
            as <paramref name="comparison"/>.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.GetComparisonFromComparer``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Given in IComparer&lt;T&gt; instenace that comparers two items from type T, 
            gets a Comparison delegate that performs the same comparison.
            </summary>
            <param name="comparer">The IComparer&lt;T&gt; instance to use.</param>
            <returns>A Comparison&lt;T&gt; delegate that performans the same comparing
            operation as <paramref name="comparer"/>.</returns>
        </member>
        <member name="T:Wintellect.PowerCollections.Algorithms.CollectionEqualityComparer`1">
            <summary>
            A private class used to implement GetCollectionEqualityComparer(). This
            class implements IEqualityComparer&lt;IEnumerable&lt;T&gt;gt; to compare
            two enumerables for equality, where order is significant.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.GetCollectionEqualityComparer``1">
            <summary>
            Gets an IEqualityComparer&lt;IEnumerable&lt;T&gt;&gt; implementation 
            that can be used to compare collections of elements (of type T). Two collections
            of T's are equal if they have the same number of items, and corresponding 
            items are equal, considered in order. This is the same notion of equality as
            in Algorithms.EqualCollections, but encapsulated in an IEqualityComparer&lt;IEnumerable&lt;T&gt;&gt; implementation.
            </summary>
            <example>
            The following code creates a Dictionary where the keys are a collection of strings.
            <code>
                Dictionary&lt;IEnumerable&lt;string&gt;, int&gt; = 
                    new Dictionary&lt;IEnumerable&lt;string&gt;, int&gt;(Algorithms.GetCollectionEqualityComparer&lt;string&gt;());
            </code>
            </example>
            <returns>IEqualityComparer&lt;IEnumerable&lt;T&gt;&gt; implementation suitable for 
            comparing collections of T for equality.</returns>
            <seealso cref="M:Wintellect.PowerCollections.Algorithms.EqualCollections``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.GetCollectionEqualityComparer``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            <para>Gets an IEqualityComparer&lt;IEnumerable&lt;T&gt;&gt; implementation 
            that can be used to compare collections of elements (of type T). Two collections
            of T's are equal if they have the same number of items, and corresponding 
            items are equal, considered in order. This is the same notion of equality as
            in Algorithms.EqualCollections, but encapsulated in an IEqualityComparer&lt;IEnumerable&lt;T&gt;&gt; implementation.</para>
            <para>An IEqualityComparer&lt;T&gt; is used to determine if individual T's are equal</para>
            </summary>
            <example>
            The following code creates a Dictionary where the keys are a collection of strings, compared in a case-insensitive way
            <code>
                Dictionary&lt;IEnumerable&lt;string&gt;, int&gt; = 
                    new Dictionary&lt;IEnumerable&lt;string&gt;, int&gt;(Algorithms.GetCollectionEqualityComparer&lt;string&gt;(StringComparer.CurrentCultureIgnoreCase));
            </code>
            </example>
            <param name="equalityComparer">An IEqualityComparer&lt;T&gt; implementation used to compare individual T's.</param>
            <returns>IEqualityComparer&lt;IEnumerable&lt;T&gt;&gt; implementation suitable for 
            comparing collections of T for equality.</returns>
            <seealso cref="M:Wintellect.PowerCollections.Algorithms.EqualCollections``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="T:Wintellect.PowerCollections.Algorithms.SetEqualityComparer`1">
            <summary>
            A private class used to implement GetSetEqualityComparer(). This
            class implements IEqualityComparer&lt;IEnumerable&lt;T&gt;gt; to compare
            two enumerables for equality, where order is not significant.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.GetSetEqualityComparer``1">
            <summary>
            <para>Gets an IEqualityComparer&lt;IEnumerable&lt;T&gt;&gt; implementation 
            that can be used to compare collections of elements (of type T). Two collections
            of T's are equal if they have the same number of items, and corresponding 
            items are equal, without regard to order. This is the same notion of equality as
            in Algorithms.EqualSets, but encapsulated in an IEqualityComparer&lt;IEnumerable&lt;T&gt;&gt; implementation.</para>
            <para>An IEqualityComparer&lt;T&gt; is used to determine if individual T's are equal</para>
            </summary>
            <example>
            The following code creates a Dictionary where the keys are a set of strings, without regard to order
            <code>
                Dictionary&lt;IEnumerable&lt;string&gt;, int&gt; = 
                    new Dictionary&lt;IEnumerable&lt;string&gt;, int&gt;(Algorithms.GetSetEqualityComparer&lt;string&gt;(StringComparer.CurrentCultureIgnoreCase));
            </code>
            </example>
            <returns>IEqualityComparer&lt;IEnumerable&lt;T&gt;&gt; implementation suitable for 
            comparing collections of T for equality, without regard to order.</returns>
            <seealso cref="M:Wintellect.PowerCollections.Algorithms.EqualSets``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.GetSetEqualityComparer``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Gets an IEqualityComparer&lt;IEnumerable&lt;T&gt;&gt; implementation 
            that can be used to compare collections of elements (of type T). Two collections
            of T's are equal if they have the same number of items, and corresponding 
            items are equal, without regard to order. This is the same notion of equality as
            in Algorithms.EqualSets, but encapsulated in an IEqualityComparer&lt;IEnumerable&lt;T&gt;&gt; implementation.
            </summary>
            <example>
            The following code creates a Dictionary where the keys are a set of strings, without regard to order
            <code>
                Dictionary&lt;IEnumerable&lt;string&gt;, int&gt; = 
                    new Dictionary&lt;IEnumerable&lt;string&gt;, int&gt;(Algorithms.GetSetEqualityComparer&lt;string&gt;());
            </code>
            </example>
            <param name="equalityComparer">An IEqualityComparer&lt;T&gt; implementation used to compare individual T's.</param>
            <returns>IEqualityComparer&lt;IEnumerable&lt;T&gt;&gt; implementation suitable for 
            comparing collections of T for equality, without regard to order.</returns>
            <seealso cref="M:Wintellect.PowerCollections.Algorithms.EqualSets``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Determines if a collection contains any item that satisfies the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <param name="collection">The collection to check all the items in.</param>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <returns>True if the collection contains one or more items that satisfy the condition
            defined by <paramref name="predicate"/>. False if the collection does not contain
            an item that satisfies <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.TrueForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Determines if all of the items in the collection satisfy the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <param name="collection">The collection to check all the items in.</param>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <returns>True if all of the items in the collection satisfy the condition
            defined by <paramref name="predicate"/>, or if the collection is empty. False if one or more items
            in the collection do not satisfy <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.CountWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Counts the number of items in the collection that satisfy the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <param name="collection">The collection to count items in.</param>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <returns>The number of items in the collection that satisfy <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.RemoveWhere``1(System.Collections.Generic.ICollection{``0},System.Predicate{``0})">
            <summary>
            Removes all the items in the collection that satisfy the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <remarks>If the collection if an array or implements IList&lt;T&gt;, an efficient algorithm that
            compacts items is used. If not, then ICollection&lt;T&gt;.Remove is used
            to remove items from the collection. If the collection is an array or fixed-size list,
            the non-removed elements are placed, in order, at the beginning of
            the list, and the remaining list items are filled with a default value (0 or null).</remarks>
            <param name="collection">The collection to check all the items in.</param>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <returns>Returns a collection of the items that were removed. This collection contains the
            items in the same order that they orginally appeared in <paramref name="collection"/>.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.Convert``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1})">
            <summary>
            Convert a collection of items by applying a delegate to each item in the collection. The resulting collection
            contains the result of applying <paramref name="converter"/> to each item in <paramref name="sourceCollection"/>, in
            order.
            </summary>
            <typeparam name="TSource">The type of items in the collection to convert.</typeparam>
            <typeparam name="TDest">The type each item is being converted to.</typeparam>
            <param name="sourceCollection">The collection of item being converted.</param>
            <param name="converter">A delegate to the method to call, passing each item in <paramref name="sourceCollection"/>.</param>
            <returns>The resulting collection from applying <paramref name="converter"/> to each item in <paramref name="sourceCollection"/>, in
            order.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourceCollection"/> or <paramref name="converter"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.GetDictionaryConverter``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Creates a delegate that converts keys to values by used a dictionary to map values. Keys
            that a not present in the dictionary are converted to the default value (zero or null).
            </summary>
            <remarks>This delegate can be used as a parameter in Convert or ConvertAll methods to convert
            entire collections.</remarks>
            <param name="dictionary">The dictionary used to perform the conversion.</param>
            <returns>A delegate to a method that converts keys to values. </returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.GetDictionaryConverter``2(System.Collections.Generic.IDictionary{``0,``1},``1)">
            <summary>
            Creates a delegate that converts keys to values by used a dictionary to map values. Keys
            that a not present in the dictionary are converted to a supplied default value.
            </summary>
            <remarks>This delegate can be used as a parameter in Convert or ConvertAll methods to convert
            entire collections.</remarks>
            <param name="dictionary">The dictionary used to perform the conversion.</param>
            <param name="defaultValue">The result of the conversion for keys that are not present in the dictionary.</param>
            <returns>A delegate to a method that converts keys to values. </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the specified action on each item in a collection.
            </summary>
            <param name="collection">The collection to process.</param>
            <param name="action">An Action delegate which is invoked for each item in <paramref name="collection"/>.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.Partition``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Partition a list or array based on a predicate. After partitioning, all items for which
            the predicate returned true precede all items for which the predicate returned false.
            </summary>
            <remarks>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</remarks>
            <param name="list">The list or array to partition.</param>
            <param name="predicate">A delegate that defines the partitioning condition.</param>
            <returns>The index of the first item in the second half of the partition; i.e., the first item for
            which <paramref name="predicate"/> returned false. If the predicate was true for all items
            in the list, list.Count is returned.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.StablePartition``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Partition a list or array based on a predicate. After partitioning, all items for which
            the predicate returned true precede all items for which the predicate returned false. 
            The partition is stable, which means that if items X and Y have the same result from
            the predicate, and X precedes Y in the original list, X will precede Y in the 
            partitioned list.
            </summary>
            <remarks>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</remarks>
            <param name="list">The list or array to partition.</param>
            <param name="predicate">A delegate that defines the partitioning condition.</param>
            <returns>The index of the first item in the second half of the partition; i.e., the first item for
            which <paramref name="predicate"/> returned false. If the predicate was true for all items
            in the list, list.Count is returned.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.Concatenate``1(System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Concatenates all the items from several collections. The collections need not be of the same type, but
            must have the same item type.
            </summary>
            <param name="collections">The set of collections to concatenate. In many languages, this parameter
            can be specified as several individual parameters.</param>
            <returns>An IEnumerable that enumerates all the items in each of the collections, in order.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.EqualCollections``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if the two collections contain equal items in the same order. The two collections do not need
            to be of the same type; it is permissible to compare an array and an OrderedBag, for instance.
            </summary>
            <remarks>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</remarks>
            <typeparam name="T">The type of items in the collections.</typeparam>
            <param name="collection1">The first collection to compare.</param>
            <param name="collection2">The second collection to compare.</param>
            <returns>True if the collections have equal items in the same order. If both collections are empty, true is returned.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.EqualCollections``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if the two collections contain equal items in the same order. The passed 
            instance of IEqualityComparer&lt;T&gt; is used for determining if two items are equal.
            </summary>
            <typeparam name="T">The type of items in the collections.</typeparam>
            <param name="collection1">The first collection to compare.</param>
            <param name="collection2">The second collection to compare.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality. 
            Only the Equals member function of this interface is called.</param>
            <returns>True if the collections have equal items in the same order. If both collections are empty, true is returned.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/>, <paramref name="collection2"/>, or
            <paramref name="equalityComparer"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.EqualCollections``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},Wintellect.PowerCollections.BinaryPredicate{``0})">
            <summary>
            Determines if the two collections contain "equal" items in the same order. The passed 
            BinaryPredicate is used to determine if two items are "equal".
            </summary>
            <remarks>Since an arbitrary BinaryPredicate is passed to this function, what is being tested
            for need not be equality. For example, the following code determines if each integer in
            list1 is less than or equal to the corresponding integer in list2.
            <code>
            List&lt;int&gt; list1, list2;
            if (EqualCollections(list1, list2, delegate(int x, int y) { return x &lt;= y; }) {
                // the check is true...
            }
            </code>
            </remarks>
            <typeparam name="T">The type of items in the collections.</typeparam>
            <param name="collection1">The first collection to compare.</param>
            <param name="collection2">The second collection to compare.</param>
            <param name="predicate">The BinaryPredicate used to compare items for "equality". 
            This predicate can compute any relation between two items; it need not represent equality or an equivalence relation.</param>
            <returns>True if <paramref name="predicate"/>returns true for each corresponding pair of
            items in the two collections. If both collections are empty, true is returned.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection1"/>, <paramref name="collection2"/>, or
            <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an array with the items in a collection.
            </summary>
            <remarks>If <paramref name="collection"/> implements ICollection&lt;T&gt;T, then 
            ICollection&lt;T&gt;.CopyTo() is used to fill the array. Otherwise, the IEnumerable&lt;T&gt;.GetEnumerator()
            is used to fill the array.</remarks>
            <typeparam name="T">Element type of the collection.</typeparam>
            <param name="collection">Collection to create array from.</param>
            <returns>An array with the items from the collection, in enumeration order.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.Count``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Count the number of items in an IEnumerable&lt;T&gt; collection. If 
            a more specific collection type is being used, it is more efficient to use
            the Count property, if one is provided.
            </summary>
            <remarks>If the collection implements ICollection&lt;T&gt;, this method
            simply returns ICollection&lt;T&gt;.Count. Otherwise, it enumerates all items
            and counts them.</remarks>
            <param name="collection">The collection to count items in.</param>
            <returns>The number of items in the collection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.CountEqual``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Counts the number of items in the collection that are equal to <paramref name="find"/>.
            </summary>
            <remarks>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</remarks>
            <param name="collection">The collection to count items in.</param>
            <param name="find">The item to compare to.</param>
            <returns>The number of items in the collection that are equal to <paramref name="find"/>.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.CountEqual``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Counts the number of items in the collection that are equal to <paramref name="find"/>.
            </summary>
            <param name="collection">The collection to count items in.</param>
            <param name="find">The item to compare to.</param>
            <param name="equalityComparer">The comparer to use to determine if two items are equal. Only the Equals
            member function will be called.</param>
            <returns>The number of items in the collection that are equal to <paramref name="find"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="collection"/> or <paramref name="equalityComparer"/>
            is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.NCopiesOf``1(System.Int32,``0)">
            <summary>
            Creates an IEnumerator that enumerates a given item <paramref name="n"/> times.
            </summary>
            <example>
            The following creates a list consisting of 1000 copies of the double 1.0.
            <code>
            List&lt;double&gt; list = new List&lt;double&gt;(Algorithms.NCopiesOf(1000, 1.0));
            </code></example>
            <param name="n">The number of times to enumerate the item.</param>
            <param name="item">The item that should occur in the enumeration.</param>
            <returns>An IEnumerable&lt;T&gt; that yields <paramref name="n"/> copies
            of <paramref name="item"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The argument <paramref name="n"/> is less than zero.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.Fill``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Replaces each item in a list with a given value. The list does not change in size.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to modify.</param>
            <param name="value">The value to fill with.</param>
            <exception cref="T:System.ArgumentException"><paramref name="list"/> is a read-only list.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.Fill``1(``0[],``0)">
            <summary>
            Replaces each item in a array with a given value. 
            </summary>
            <param name="array">The array to modify.</param>
            <param name="value">The value to fill with.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.FillRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0)">
            <summary>
            Replaces each item in a part of a list with a given value.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to modify.</param>
            <param name="start">The index at which to start filling. The first index in the list has index 0.</param>
            <param name="count">The number of items to fill.</param>
            <param name="value">The value to fill with.</param>
            <exception cref="T:System.ArgumentException"><paramref name="list"/> is a read-only list.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> or <paramref name="count"/> is negative, or 
            <paramref name="start"/> + <paramref name="count"/> is greater than <paramref name="list"/>.Count.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.FillRange``1(``0[],System.Int32,System.Int32,``0)">
            <summary>
            Replaces each item in a part of a array with a given value.
            </summary>
            <param name="array">The array to modify.</param>
            <param name="start">The index at which to start filling. The first index in the array has index 0.</param>
            <param name="count">The number of items to fill.</param>
            <param name="value">The value to fill with.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> or <paramref name="count"/> is negative, or 
            <paramref name="start"/> + <paramref name="count"/> is greater than <paramref name="array"/>.Length.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.Copy``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Copies all of the items from the collection <paramref name="source"/> to the list <paramref name="dest"/>, starting
            at the index <paramref name="destIndex"/>. If necessary, the size of the destination list is expanded.
            </summary>
            <param name="source">The collection that provide the source items. </param>
            <param name="dest">The list to store the items into.</param>
            <param name="destIndex">The index to begin copying items to.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="destIndex"/> is negative or 
            greater than <paramref name="dest"/>.Count.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="dest"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.Copy``1(System.Collections.Generic.IEnumerable{``0},``0[],System.Int32)">
            <summary>
            Copies all of the items from the collection <paramref name="source"/> to the array <paramref name="dest"/>, starting
            at the index <paramref name="destIndex"/>. 
            </summary>
            <param name="source">The collection that provide the source items. </param>
            <param name="dest">The array to store the items into.</param>
            <param name="destIndex">The index to begin copying items to.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="destIndex"/> is negative or 
            greater than <paramref name="dest"/>.Length.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="dest"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The collection has more items than will fit into the array. In this case, the array
            has been filled with as many items as fit before the exception is thrown.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.Copy``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Copies at most <paramref name="count"/> items from the collection <paramref name="source"/> to the list <paramref name="dest"/>, starting
            at the index <paramref name="destIndex"/>. If necessary, the size of the destination list is expanded. The source collection must not be
            the destination list or part thereof.
            </summary>
            <param name="source">The collection that provide the source items. </param>
            <param name="dest">The list to store the items into.</param>
            <param name="destIndex">The index to begin copying items to.</param>
            <param name="count">The maximum number of items to copy.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="destIndex"/> is negative or 
            greater than <paramref name="dest"/>.Count</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="dest"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.Copy``1(System.Collections.Generic.IEnumerable{``0},``0[],System.Int32,System.Int32)">
            <summary>
            Copies at most <paramref name="count"/> items from the collection <paramref name="source"/> to the array <paramref name="dest"/>, starting
            at the index <paramref name="destIndex"/>. The source collection must not be
            the destination array or part thereof.
            </summary>
            <param name="source">The collection that provide the source items. </param>
            <param name="dest">The array to store the items into.</param>
            <param name="destIndex">The index to begin copying items to.</param>
            <param name="count">The maximum number of items to copy. The array must be large enought to fit this number of items.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="destIndex"/> is negative or 
            greater than <paramref name="dest"/>.Length.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative or <paramref name="destIndex"/> + <paramref name="count"/>
            is greater than <paramref name="dest"/>.Length.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="dest"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.Copy``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count"/> items from the list <paramref name="source"/>, starting at the index <paramref name="sourceIndex"/>, 
            to the list <paramref name="dest"/>, starting at the index <paramref name="destIndex"/>. If necessary, the size of the destination list is expanded.
            The source and destination lists may be the same.
            </summary>
            <param name="source">The collection that provide the source items. </param>
            <param name="sourceIndex">The index within <paramref name="source"/>to begin copying items from.</param>
            <param name="dest">The list to store the items into.</param>
            <param name="destIndex">The index within <paramref name="dest"/>to begin copying items to.</param>
            <param name="count">The maximum number of items to copy.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="sourceIndex"/> is negative or 
            greater than <paramref name="source"/>.Count</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="destIndex"/> is negative or 
            greater than <paramref name="dest"/>.Count</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative or too large.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="dest"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.Copy``1(System.Collections.Generic.IList{``0},System.Int32,``0[],System.Int32,System.Int32)">
            <summary>
            Copies <paramref name="count"/> items from the list or array <paramref name="source"/>, starting at the index <paramref name="sourceIndex"/>, 
            to the array <paramref name="dest"/>, starting at the index <paramref name="destIndex"/>. 
            The source may be the same as the destination array.
            </summary>
            <param name="source">The list or array that provide the source items. </param>
            <param name="sourceIndex">The index within <paramref name="source"/>to begin copying items from.</param>
            <param name="dest">The array to store the items into.</param>
            <param name="destIndex">The index within <paramref name="dest"/>to begin copying items to.</param>
            <param name="count">The maximum number of items to copy. The destination array must be large enough to hold this many items.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="sourceIndex"/> is negative or 
            greater than <paramref name="source"/>.Count</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="destIndex"/> is negative or 
            greater than <paramref name="dest"/>.Length</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is negative or too large.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="dest"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.Reverse``1(System.Collections.Generic.IList{``0})">
            <summary>
            Reverses a list and returns the reversed list, without changing the source list.
            </summary>
            <param name="source">The list to reverse.</param>
            <returns>A collection that contains the items from <paramref name="source"/> in reverse order.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.ReverseInPlace``1(System.Collections.Generic.IList{``0})">
            <summary>
            Reverses a list or array in place.
            </summary>
            <remarks>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</remarks>
            <param name="list">The list or array to reverse.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="list"/> is read only.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.Rotate``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Rotates a list and returns the rotated list, without changing the source list.
            </summary>
            <param name="source">The list to rotate.</param>
            <param name="amountToRotate">The number of elements to rotate. This value can be positive or negative. 
            For example, rotating by positive 3 means that source[3] is the first item in the returned collection.
            Rotating by negative 3 means that source[source.Count - 3] is the first item in the returned collection.</param>
            <returns>A collection that contains the items from <paramref name="source"/> in rotated order.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Algorithms.RotateInPlace``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Rotates a list or array in place.
            </summary>
            <remarks>Although arrays cast to IList&lt;T&gt; are normally read-only, this method
            will work correctly and modify an array passed as <paramref name="list"/>.</remarks>
            <param name="list">The list or array to rotate.</param>
            <param name="amountToRotate">The number of elements to rotate. This value can be positive or negative. 
            For example, rotating by positive 3 means that list[3] is the first item in the resulting list.
            Rotating by negative 3 means that list[list.Count - 3] is the first item in the resulting list.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="list"/> is null.</exception>
        </member>
        <member name="T:Wintellect.PowerCollections.Bag`1">
             <summary>
             Bag&lt;T&gt; is a collection that contains items of type T. 
             Unlike a Set, duplicate items (items that compare equal to each other) are allowed in an Bag. 
             </summary>
             <remarks>
             <p>The items are compared in one of two ways. If T implements IComparable&lt;T&gt; 
             then the Equals method of that interface will be used to compare items, otherwise the Equals
             method from Object will be used. Alternatively, an instance of IComparer&lt;T&gt; can be passed
             to the constructor to use to compare items.</p>
             <p>Bag is implemented as a hash table. Inserting, deleting, and looking up an
             an element all are done in approximately constant time, regardless of the number of items in the bag.</p>
             <p>When multiple equal items are stored in the bag, they are stored as a representative item and a count. 
             If equal items can be distinguished, this may be noticable. For example, if a case-insensitive
             comparer is used with a Bag&lt;string&gt;, and both "hello", and "HELLO" are added to the bag, then the
             bag will appear to contain two copies of "hello" (the representative item).</p>
             <p><see cref="!:OrderedBag&lt;T&gt;"/> is similar, but uses comparison instead of hashing, maintain
             the items in sorted order, and stores distinct copies of items that compare equal.</p>
            </remarks>
            <seealso cref="!:OrderedBag&lt;T&gt;"/>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.NewPair(`0,System.Int32)">
            <summary>
            Helper function to create a new KeyValuePair struct with an item and a count.
            </summary>
            <param name="item">The item.</param>
            <param name="count">The number of appearances.</param>
            <returns>A new KeyValuePair.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.NewPair(`0)">
            <summary>
            Helper function to create a new KeyValuePair struct with a count of zero.
            </summary>
            <param name="item">The item.</param>
            <returns>A new KeyValuePair.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.#ctor">
             <summary>
             Creates a new Bag. 
             </summary>
            <remarks>
             Items that are null are permitted.
            </remarks>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new Bag. The Equals and GetHashCode methods of the passed comparison object
            will be used to compare items in this bag for equality.
            </summary>
            <param name="equalityComparer">An instance of IEqualityComparer&lt;T&gt; that will be used to compare items.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
             <summary>
             Creates a new Bag. The bag is
             initialized with all the items in the given collection.
             </summary>
            <remarks>
             Items that are null are permitted.
            </remarks>
             <param name="collection">A collection with items to be placed into the Bag.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new Bag. The Equals and GetHashCode methods of the passed comparison object
            will be used to compare items in this bag. The bag is
            initialized with all the items in the given collection.
            </summary>
            <param name="collection">A collection with items to be placed into the Bag.</param>
            <param name="equalityComparer">An instance of IEqualityComparer&lt;T&gt; that will be used to compare items.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.#ctor(System.Collections.Generic.IEqualityComparer{System.Collections.Generic.KeyValuePair{`0,System.Int32}},System.Collections.Generic.IEqualityComparer{`0},Wintellect.PowerCollections.Hash{System.Collections.Generic.KeyValuePair{`0,System.Int32}},System.Int32)">
            <summary>
            Creates a new Bag given a comparer and a hash that contains the data. Used
            internally for Clone.
            </summary>
            <param name="equalityComparer">IEqualityComparer for the bag.</param>
            <param name="keyEqualityComparer">IEqualityComparer for the key.</param>
            <param name="hash">Data for the bag.</param>
            <param name="count">Size of the bag.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.System#ICloneable#Clone">
            <summary>
            Makes a shallow clone of this bag; i.e., if items of the
            bag are reference types, then they are not cloned. If T is a value type,
            then each element is copied as if by simple assignment.
            </summary>
            <remarks>Cloning the bag takes time O(N), where N is the number of items in the bag.</remarks>
            <returns>The cloned bag.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.Clone">
            <summary>
            Makes a shallow clone of this bag; i.e., if items of the
            bag are reference types, then they are not cloned. If T is a value type,
            then each element is copied as if by simple assignment.
            </summary>
            <remarks>Cloning the bag takes time O(N), where N is the number of unquie items in the bag.</remarks>
            <returns>The cloned bag.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.CloneContents">
            <summary>
            Makes a deep clone of this bag. A new bag is created with a clone of
            each element of this bag, by calling ICloneable.Clone on each element. If T is
            a value type, then each element is copied as if by simple assignment.
            </summary>
            <remarks><para>If T is a reference type, it must implement
            ICloneable. Otherwise, an InvalidOperationException is thrown.</para>
            <para>Cloning the bag takes time O(N log N), where N is the number of items in the bag.</para></remarks>
            <returns>The cloned bag.</returns>
            <exception cref="T:System.InvalidOperationException">T is a reference type that does not implement ICloneable.</exception>
        </member>
        <member name="P:Wintellect.PowerCollections.Bag`1.Comparer">
            <summary>
            Returns the IEqualityComparer&lt;T&gt; used to compare items in this bag. 
            </summary>
            <value>If the bag was created using a comparer, that comparer is returned. Otherwise
            the default comparer for T (EqualityComparer&lt;T&gt;.Default) is returned.</value>
        </member>
        <member name="P:Wintellect.PowerCollections.Bag`1.Count">
            <summary>
            Returns the number of items in the bag.
            </summary>
            <remarks>The size of the bag is returned in constant time.</remarks>
            <value>The number of items in the bag.</value>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.NumberOfCopies(`0)">
            <summary>
            Returns the number of copies of <paramref name="item"/> in the bag. 
            </summary>
            <remarks>NumberOfCopies() takes approximately constant time, no matter how many items
            are stored in the bag.</remarks>
            <param name="item">The item to search for in the bag.</param>
            <returns>The number of items in the bag that compare equal to <paramref name="item"/>.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.GetRepresentativeItem(`0,`0@)">
            <summary>
            Returns the representative item stored in the bag that is equal to
            the provided item. Also returns the number of copies of the item in the bag.
            </summary>
            <param name="item">Item to find in the bag.</param>
            <param name="representative">If one or more items equal to <paramref name="item"/> are present in the
            bag, returns the representative item. If no items equal to <paramref name="item"/> are stored in the bag, 
            returns <paramref name="item"/>.</param>
            <returns>The number of items equal to <paramref name="item"/> stored in the bag.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.GetEnumerator">
            <summary>
            Returns an enumerator that enumerates all the items in the bag. 
            If an item is present multiple times in the bag, the representative item is yielded by the
            enumerator multiple times. The order of enumeration is haphazard and may change.
            </summary>
            <remarks>
            <p>Typically, this method is not called directly. Instead the "foreach" statement is used
            to enumerate the items, which uses this method implicitly.</p>
            <p>If an item is added to or deleted from the bag while it is being enumerated, then 
            the enumeration will end with an InvalidOperationException.</p>
            <p>Enumeration all the items in the bag takes time O(N), where N is the number
            of items in the bag.</p>
            </remarks>
            <returns>An enumerator for enumerating all the items in the Bag.</returns>		
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.Contains(`0)">
            <summary>
            Determines if this bag contains an item equal to <paramref name="item"/>. The bag
            is not changed.
            </summary>
            <remarks>Searching the bag for an item takes time O(log N), where N is the number of items in the bag.</remarks>
            <param name="item">The item to search for.</param>
            <returns>True if the bag contains <paramref name="item"/>. False if the bag does not contain <paramref name="item"/>.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.DistinctItems">
            <summary>
            Enumerates all the items in the bag, but enumerates equal items
            just once, even if they occur multiple times in the bag.
            </summary>
            <remarks>If the bag is changed while items are being enumerated, the
            enumeration will terminate with an InvalidOperationException.</remarks>
            <returns>An IEnumerable&lt;T&gt; that enumerates the unique items.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.Add(`0)">
            <summary>
            Adds a new item to the bag. Since bags can contain duplicate items, the item 
            is added even if the bag already contains an item equal to <paramref name="item"/>. In
            this case, the count of items for the representative item is increased by one, but the existing
            represetative item is unchanged.
            </summary>
            <remarks>
            <para>Adding an item takes approximately constant time, regardless of the number of items in the bag.</para></remarks>
            <param name="item">The item to add to the bag.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.AddRepresentative(`0)">
            <summary>
            Adds a new item to the bag. Since bags can contain duplicate items, the item 
            is added even if the bag already contains an item equal to <paramref name="item"/>. In
            this case (unlike Add), the new item becomes the representative item.
            </summary>
            <remarks>
            <para>Adding an item takes approximately constant time, regardless of the number of items in the bag.</para></remarks>
            <param name="item">The item to add to the bag.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.ChangeNumberOfCopies(`0,System.Int32)">
            <summary>
            Changes the number of copies of an existing item in the bag, or adds the indicated number
            of copies of the item to the bag. 
            </summary>
            <remarks>
            <para>Changing the number of copies takes approximately constant time, regardless of the number of items in the bag.</para></remarks>
            <param name="item">The item to change the number of copies of. This may or may not already be present in the bag.</param>
            <param name="numCopies">The new number of copies of the item.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.AddMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds all the items in <paramref name="collection"/> to the bag. 
            </summary>
            <remarks>
            <para>Adding the collection takes time O(M log N), where N is the number of items in the bag, and M is the 
            number of items in <paramref name="collection"/>.</para></remarks>
            <param name="collection">A collection of items to add to the bag.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.Remove(`0)">
            <summary>
            Searches the bag for one item equal to <paramref name="item"/>, and if found,
            removes it from the bag. If not found, the bag is unchanged. 
            </summary>
            <remarks>
            <para>Equality between items is determined by the comparison instance or delegate used
            to create the bag.</para>
            <para>Removing an item from the bag takes approximated constant time,
            regardless of the number of items in the bag.</para></remarks>
            <param name="item">The item to remove.</param>
            <returns>True if <paramref name="item"/> was found and removed. False if <paramref name="item"/> was not in the bag.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.RemoveAllCopies(`0)">
            <summary>
            Searches the bag for all items equal to <paramref name="item"/>, and 
            removes all of them from the bag. If not found, the bag is unchanged.
            </summary>
            <remarks>
            <para>Equality between items is determined by the comparer instance used
            to create the bag.</para>
            <para>RemoveAllCopies() takes time O(M log N), where N is the total number of items in the bag, and M is
            the number of items equal to <paramref name="item"/>.</para></remarks>
            <param name="item">The item to remove.</param>
            <returns>The number of copies of <paramref name="item"/> that were found and removed. </returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.RemoveMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all the items in <paramref name="collection"/> from the bag. Items that
            are not present in the bag are ignored.
            </summary>
            <remarks>
            <para>Equality between items is determined by the comparer instance used
            to create the bag.</para>
            <para>Removing the collection takes time O(M), where M is the 
            number of items in <paramref name="collection"/>.</para></remarks>
            <param name="collection">A collection of items to remove from the bag.</param>
            <returns>The number of items removed from the bag.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.Clear">
            <summary>
            Removes all items from the bag.
            </summary>
            <remarks>Clearing the bag takes a constant amount of time, regardless of the number of items in it.</remarks>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.CheckConsistentComparison(Wintellect.PowerCollections.Bag{`0})">
            <summary>
            Check that this bag and another bag were created with the same comparison
            mechanism. Throws exception if not compatible.
            </summary>
            <param name="otherBag">Other bag to check comparision mechanism.</param>
            <exception cref="T:System.InvalidOperationException">If otherBag and this bag don't use the same method for comparing items.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.IsEqualTo(Wintellect.PowerCollections.Bag{`0})">
            <summary>
            Determines if this bag is equal to another bag. This bag is equal to
            <paramref name="otherBag"/> if they contain the same number of 
            of copies of equal elements.
            </summary>
            <remarks>IsSupersetOf is computed in time O(N), where N is the number of unique items in 
            this bag.</remarks>
            <param name="otherBag">Bag to compare to</param>
            <returns>True if this bag is equal to <paramref name="otherBag"/>, false otherwise.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.IsSupersetOf(Wintellect.PowerCollections.Bag{`0})">
            <summary>
            Determines if this bag is a superset of another bag. Neither bag is modified.
            This bag is a superset of <paramref name="otherBag"/> if every element in
            <paramref name="otherBag"/> is also in this bag, at least the same number of
            times.
            </summary>
            <remarks>IsSupersetOf is computed in time O(M), where M is the number of unique items in 
            <paramref name="otherBag"/>.</remarks>
            <param name="otherBag">Bag to compare to.</param>
            <returns>True if this is a superset of <paramref name="otherBag"/>.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.IsProperSupersetOf(Wintellect.PowerCollections.Bag{`0})">
            <summary>
            Determines if this bag is a proper superset of another bag. Neither bag is modified.
            This bag is a proper superset of <paramref name="otherBag"/> if every element in
            <paramref name="otherBag"/> is also in this bag, at least the same number of
            times. Additional, this bag must have strictly more items than <paramref name="otherBag"/>.
            </summary>
            <remarks>IsProperSupersetOf is computed in time O(M), where M is the number of unique items in 
            <paramref name="otherBag"/>.</remarks>
            <param name="otherBag">Set to compare to.</param>
            <returns>True if this is a proper superset of <paramref name="otherBag"/>.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.IsSubsetOf(Wintellect.PowerCollections.Bag{`0})">
            <summary>
            Determines if this bag is a subset of another ba11 items in this bag.
            </summary>
            <param name="otherBag">Bag to compare to.</param>
            <returns>True if this is a subset of <paramref name="otherBag"/>.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.IsProperSubsetOf(Wintellect.PowerCollections.Bag{`0})">
            <summary>
            Determines if this bag is a proper subset of another bag. Neither bag is modified.
            This bag is a subset of <paramref name="otherBag"/> if every element in this bag
            is also in <paramref name="otherBag"/>, at least the same number of
            times. Additional, this bag must have strictly fewer items than <paramref name="otherBag"/>.
            </summary>
            <remarks>IsProperSubsetOf is computed in time O(N), where N is the number of unique items in this bag.</remarks>
            <param name="otherBag">Bag to compare to.</param>
            <returns>True if this is a proper subset of <paramref name="otherBag"/>.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.IsDisjointFrom(Wintellect.PowerCollections.Bag{`0})">
            <summary>
            Determines if this bag is disjoint from another bag. Two bags are disjoint
            if no item from one set is equal to any item in the other bag.
            </summary>
            <remarks>
            <para>The answer is computed in time O(N), where N is the size of the smaller set.</para>
            </remarks>
            <param name="otherBag">Bag to check disjointness with.</param>
            <returns>True if the two bags are disjoint, false otherwise.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.UnionWith(Wintellect.PowerCollections.Bag{`0})">
            <summary>
            Computes the union of this bag with another bag. The union of two bags
            is all items from both of the bags. If an item appears X times in one bag,
            and Y times in the other bag, the union contains the item Maximum(X,Y) times. This bag receives
            the union of the two bags, the other bag is unchanged.
            </summary>
            <remarks>
            <para>The union of two bags is computed in time O(M+N), where M and N are the size of the 
            two bags.</para>
            </remarks>
            <param name="otherBag">Bag to union with.</param>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.Union(Wintellect.PowerCollections.Bag{`0})">
            <summary>
            Computes the union of this bag with another bag. The union of two bags
            is all items from both of the bags.  If an item appears X times in one bag,
            and Y times in the other bag, the union contains the item Maximum(X,Y) times. A new bag is 
            created with the union of the bags and is returned. This bag and the other bag 
            are unchanged.
            </summary>
            <remarks>
            <para>The union of two bags is computed in time O(M+N), where M and N are the size of the two bags.</para>
            </remarks>
            <param name="otherBag">Bag to union with.</param>
            <returns>The union of the two bags.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.SumWith(Wintellect.PowerCollections.Bag{`0})">
            <summary>
            Computes the sum of this bag with another bag. The sum of two bags
            is all items from both of the bags. If an item appears X times in one bag,
            and Y times in the other bag, the sum contains the item (X+Y) times. This bag receives
            the sum of the two bags, the other bag is unchanged.
            </summary>
            <remarks>
            <para>The sum of two bags is computed in time O(M), where M is the size of the 
            other bag..</para>
            </remarks>
            <param name="otherBag">Bag to sum with.</param>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.Sum(Wintellect.PowerCollections.Bag{`0})">
            <summary>
            Computes the sum of this bag with another bag. he sum of two bags
            is all items from both of the bags.  If an item appears X times in one bag,
            and Y times in the other bag, the sum contains the item (X+Y) times. A new bag is 
            created with the sum of the bags and is returned. This bag and the other bag 
            are unchanged.
            </summary>
            <remarks>
            <para>The sum of two bags is computed in time O(M + N log M), where M is the size of the 
            larger bag, and N is the size of the smaller bag.</para>
            </remarks>
            <param name="otherBag">Bag to sum with.</param>
            <returns>The sum of the two bags.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.IntersectionWith(Wintellect.PowerCollections.Bag{`0})">
            <summary>
            Computes the intersection of this bag with another bag. The intersection of two bags
            is all items that appear in both of the bags. If an item appears X times in one bag,
            and Y times in the other bag, the sum contains the item Minimum(X,Y) times. This bag receives
            the intersection of the two bags, the other bag is unchanged.
            </summary>
            <remarks>
            <para>When equal items appear in both bags, the intersection will include an arbitrary choice of one of the
            two equal items.</para>
            <para>The intersection of two bags is computed in time O(N), where N is the size of the smaller bag.</para>
            </remarks>
            <param name="otherBag">Bag to intersection with.</param>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.Intersection(Wintellect.PowerCollections.Bag{`0})">
            <summary>
            Computes the intersection of this bag with another bag. The intersection of two bags
            is all items that appear in both of the bags. If an item appears X times in one bag,
            and Y times in the other bag, the intersection contains the item Minimum(X,Y) times. A new bag is 
            created with the intersection of the bags and is returned. This bag and the other bag 
            are unchanged.
            </summary>
            <remarks>
            <para>When equal items appear in both bags, the intersection will include an arbitrary choice of one of the
            two equal items.</para>
            <para>The intersection of two bags is computed in time O(N), where N is the size of the smaller bag.</para>
            </remarks>
            <param name="otherBag">Bag to intersection with.</param>
            <returns>The intersection of the two bags.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.DifferenceWith(Wintellect.PowerCollections.Bag{`0})">
            <summary>
            Computes the difference of this bag with another bag. The difference of these two bags
            is all items that appear in this bag, but not in <paramref name="otherBag"/>. If an item appears X times in this bag,
            and Y times in the other bag, the difference contains the item X - Y times (zero times if Y >= X). This bag receives
            the difference of the two bags; the other bag is unchanged.
            </summary>
            <remarks>
            <para>The difference of two bags is computed in time O(M), where M is the size of the 
            other bag.</para>
            </remarks>
            <param name="otherBag">Bag to difference with.</param>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.Difference(Wintellect.PowerCollections.Bag{`0})">
            <summary>
            Computes the difference of this bag with another bag. The difference of these two bags
            is all items that appear in this bag, but not in <paramref name="otherBag"/>. If an item appears X times in this bag,
            and Y times in the other bag, the difference contains the item X - Y times (zero times if Y >= X).  A new bag is 
            created with the difference of the bags and is returned. This bag and the other bag 
            are unchanged.
            </summary>
            <remarks>
            <para>The difference of two bags is computed in time O(M + N), where M and N are the size
            of the two bags.</para>
            </remarks>
            <param name="otherBag">Bag to difference with.</param>
            <returns>The difference of the two bags.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.SymmetricDifferenceWith(Wintellect.PowerCollections.Bag{`0})">
            <summary>
            Computes the symmetric difference of this bag with another bag. The symmetric difference of two bags
            is all items that appear in either of the bags, but not both. If an item appears X times in one bag,
            and Y times in the other bag, the symmetric difference contains the item AbsoluteValue(X - Y) times. This bag receives
            the symmetric difference of the two bags; the other bag is unchanged.
            </summary>
            <remarks>
            <para>The symmetric difference of two bags is computed in time O(M + N), where M is the size of the 
            larger bag, and N is the size of the smaller bag.</para>
            </remarks>
            <param name="otherBag">Bag to symmetric difference with.</param>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Bag`1.SymmetricDifference(Wintellect.PowerCollections.Bag{`0})">
            <summary>
            Computes the symmetric difference of this bag with another bag. The symmetric difference of two bags
            is all items that appear in either of the bags, but not both. If an item appears X times in one bag,
            and Y times in the other bag, the symmetric difference contains the item AbsoluteValue(X - Y) times. A new bag is 
            created with the symmetric difference of the bags and is returned. This bag and the other bag 
            are unchanged.
            </summary>
            <remarks>
            <para>The symmetric difference of two bags is computed in time O(M + N), where M is the size of the 
            larger bag, and N is the size of the smaller bag.</para>
            </remarks>
            <param name="otherBag">Bag to symmetric difference with.</param>
            <returns>The symmetric difference of the two bags.</returns>
            <exception cref="T:System.InvalidOperationException">This bag and <paramref name="otherBag"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="T:Wintellect.PowerCollections.CollectionBase`1">
            <summary>
            CollectionBase is a base class that can be used to more easily implement the
            generic ICollection&lt;T&gt; and non-generic ICollection interfaces.
            </summary>
            <remarks>
            <para>To use CollectionBase as a base class, the derived class must override
            the Count, GetEnumerator, Add, Clear, and Remove methods. </para>
            <para>ICollection&lt;T&gt;.Contains need not be implemented by the
            derived class, but it should be strongly considered, because the CollectionBase implementation
            may not be very efficient.</para>
            </remarks>
            <typeparam name="T">The item type of the collection.</typeparam>
        </member>
        <member name="M:Wintellect.PowerCollections.CollectionBase`1.#ctor">
            <summary>
            Creates a new CollectionBase. 
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.CollectionBase`1.ToString">
            <summary>
            Shows the string representation of the collection. The string representation contains
            a list of the items in the collection. Contained collections (except string) are expanded
            recursively.
            </summary>
            <returns>The string representation of the collection.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.CollectionBase`1.Add(`0)">
            <summary>
            Must be overridden to allow adding items to this collection.
            </summary>
            <remarks><p>This method is not abstract, although derived classes should always
            override it. It is not abstract because some derived classes may wish to reimplement
            Add with a different return type (typically bool). In C#, this can be accomplished
            with code like the following:</p>
            <code>
                public class MyCollection&lt;T&gt;: CollectionBase&lt;T&gt;, ICollection&lt;T&gt;
                {
                    public new bool Add(T item) {
                        /* Add the item */
                    }
             
                    void ICollection&lt;T&gt;.Add(T item) {
                        Add(item);
                    }
                }
            </code>
            </remarks>
            <param name="item">Item to be added to the collection.</param>
            <exception cref="T:System.NotImplementedException">Always throws this exception to indicated
            that the method must be overridden or re-implemented in the derived class.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.CollectionBase`1.Clear">
            <summary>
            Must be overridden to allow clearing this collection.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.CollectionBase`1.Remove(`0)">
            <summary>
            Must be overridden to allow removing items from this collection.
            </summary>
            <returns>True if <paramref name="item"/> existed in the collection and
            was removed. False if <paramref name="item"/> did not exist in the collection.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.CollectionBase`1.Contains(`0)">
            <summary>
            Determines if the collection contains a particular item. This default implementation
            iterates all of the items in the collection via GetEnumerator, testing each item
            against <paramref name="item"/> using IComparable&lt;T&gt;.Equals or
            Object.Equals.
            </summary>
            <remarks>You should strongly consider overriding this method to provide
            a more efficient implementation, or if the default equality comparison
            is inappropriate.</remarks>
            <param name="item">The item to check for in the collection.</param>
            <returns>True if the collection contains <paramref name="item"/>, false otherwise.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.CollectionBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all the items in the collection into an array. Implemented by
            using the enumerator returned from GetEnumerator to get all the items
            and copy them to the provided array.
            </summary>
            <param name="array">Array to copy to.</param>
            <param name="arrayIndex">Starting index in <paramref name="array"/> to copy to.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.CollectionBase`1.ToArray">
            <summary>
            Creates an array of the correct size, and copies all the items in the 
            collection into the array, by calling CopyTo.
            </summary>
            <returns>An array containing all the elements in the collection, in order.</returns>
        </member>
        <member name="P:Wintellect.PowerCollections.CollectionBase`1.Count">
            <summary>
            Must be overridden to provide the number of items in the collection.
            </summary>
            <value>The number of items in the collection.</value>
        </member>
        <member name="P:Wintellect.PowerCollections.CollectionBase`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Indicates whether the collection is read-only. Always returns false.
            </summary>
            <value>Always returns false.</value>
        </member>
        <member name="M:Wintellect.PowerCollections.CollectionBase`1.AsReadOnly">
            <summary>
            Provides a read-only view of this collection. The returned ICollection&lt;T&gt; provides
            a view of the collection that prevents modifications to the collection. Use the method to provide
            access to the collection without allowing changes. Since the returned object is just a view,
            changes to the collection will be reflected in the view.
            </summary>
            <returns>An ICollection&lt;T&gt; that provides read-only access to the collection.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.CollectionBase`1.Exists(System.Predicate{`0})">
            <summary>
            Determines if the collection contains any item that satisfies the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <returns>True if the collection contains one or more items that satisfy the condition
            defined by <paramref name="predicate"/>. False if the collection does not contain
            an item that satisfies <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.CollectionBase`1.TrueForAll(System.Predicate{`0})">
            <summary>
            Determines if all of the items in the collection satisfy the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <returns>True if all of the items in the collection satisfy the condition
            defined by <paramref name="predicate"/>, or if the collection is empty. False if one or more items
            in the collection do not satisfy <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.CollectionBase`1.CountWhere(System.Predicate{`0})">
            <summary>
            Counts the number of items in the collection that satisfy the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <returns>The number of items in the collection that satisfy <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.CollectionBase`1.FindAll(System.Predicate{`0})">
            <summary>
            Enumerates the items in the collection that satisfy the condition defined
            by <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <returns>An IEnumerable&lt;T&gt; that enumerates the items that satisfy the condition.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.CollectionBase`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes all the items in the collection that satisfy the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <returns>Returns a collection of the items that were removed, in sorted order.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.CollectionBase`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each item in this collection.
            </summary>
            <param name="action">An Action delegate which is invoked for each item in this collection.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.CollectionBase`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Convert this collection of items by applying a delegate to each item in the collection. The resulting enumeration
            contains the result of applying <paramref name="converter"/> to each item in this collection, in
            order.
            </summary>
            <typeparam name="TOutput">The type each item is being converted to.</typeparam>
            <param name="converter">A delegate to the method to call, passing each item in this collection.</param>
            <returns>An IEnumerable&lt;TOutput^gt; that enumerates the resulting collection from applying <paramref name="converter"/> to each item in this collection in
            order.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="converter"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.CollectionBase`1.GetEnumerator">
            <summary>
            Must be overridden to enumerate all the members of the collection.
            </summary>
            <returns>A generic IEnumerator&lt;T&gt; that can be used
            to enumerate all the items in the collection.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.CollectionBase`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the items in the collection into an array. Implemented by
            using the enumerator returned from GetEnumerator to get all the items
            and copy them to the provided array.
            </summary>
            <param name="array">Array to copy to.</param>
            <param name="index">Starting index in <paramref name="array"/> to copy to.</param>
        </member>
        <member name="P:Wintellect.PowerCollections.CollectionBase`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Indicates whether the collection is synchronized.
            </summary>
            <value>Always returns false, indicating that the collection is not synchronized.</value>
        </member>
        <member name="P:Wintellect.PowerCollections.CollectionBase`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Indicates the synchronization object for this collection.
            </summary>
            <value>Always returns this.</value>
        </member>
        <member name="M:Wintellect.PowerCollections.CollectionBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Provides an IEnumerator that can be used to iterate all the members of the
            collection. This implementation uses the IEnumerator&lt;T&gt; that was overridden
            by the derived classes to enumerate the members of the collection.
            </summary>
            <returns>An IEnumerator that can be used to iterate the collection.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.CollectionBase`1.DebuggerDisplayString">
            <summary>
            Display the contents of the collection in the debugger. This is intentionally private, it is called
            only from the debugger due to the presence of the DebuggerDisplay attribute. It is similar
            format to ToString(), but is limited to 250-300 characters or so, so as not to overload the debugger.
            </summary>
            <returns>The string representation of the items in the collection, similar in format to ToString().</returns>
        </member>
        <member name="T:Wintellect.PowerCollections.Comparers">
            <summary>
            A collection of methods to create IComparer and IEqualityComparer instances in various ways.
            </summary>
        </member>
        <member name="T:Wintellect.PowerCollections.Comparers.KeyValueEqualityComparer`2">
            <summary>
            Class to change an IEqualityComparer&lt;TKey&gt; to an IEqualityComparer&lt;KeyValuePair&lt;TKey, TValue&gt;&gt; 
            Only the keys are compared.
            </summary>
        </member>
        <member name="T:Wintellect.PowerCollections.Comparers.KeyValueComparer`2">
            <summary>
            Class to change an IComparer&lt;TKey&gt; to an IComparer&lt;KeyValuePair&lt;TKey, TValue&gt;&gt; 
            Only the keys are compared.
            </summary>
        </member>
        <member name="T:Wintellect.PowerCollections.Comparers.PairComparer`2">
            <summary>
            Class to change an IComparer&lt;TKey&gt; and IComparer&lt;TValue&gt; to an IComparer&lt;KeyValuePair&lt;TKey, TValue&gt;&gt; 
            Keys are compared, followed by values.
            </summary>
        </member>
        <member name="T:Wintellect.PowerCollections.Comparers.ComparisonComparer`1">
            <summary>
            Class to change an Comparison&lt;T&gt; to an IComparer&lt;T&gt;.
            </summary>
        </member>
        <member name="T:Wintellect.PowerCollections.Comparers.ComparisonKeyValueComparer`2">
            <summary>
            Class to change an Comparison&lt;TKey&gt; to an IComparer&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;.
            GetHashCode cannot be used on this class.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Comparers.ComparerFromComparison``1(System.Comparison{``0})">
            <summary>
            Given an Comparison on a type, returns an IComparer on that type. 
            </summary>
            <typeparam name="T">T to compare.</typeparam>
            <param name="comparison">Comparison delegate on T</param>
            <returns>IComparer that uses the comparison.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Comparers.ComparerKeyValueFromComparerKey``2(System.Collections.Generic.IComparer{``0})">
            <summary>
            Given an IComparer on TKey, returns an IComparer on
            key-value Pairs. 
            </summary>
            <typeparam name="TKey">TKey of the pairs</typeparam>
            <typeparam name="TValue">TValue of the apris</typeparam>
            <param name="keyComparer">IComparer on TKey</param>
            <returns>IComparer for comparing key-value pairs.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Comparers.EqualityComparerKeyValueFromComparerKey``2(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Given an IEqualityComparer on TKey, returns an IEqualityComparer on
            key-value Pairs. 
            </summary>
            <typeparam name="TKey">TKey of the pairs</typeparam>
            <typeparam name="TValue">TValue of the apris</typeparam>
            <param name="keyEqualityComparer">IComparer on TKey</param>
            <returns>IEqualityComparer for comparing key-value pairs.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Comparers.ComparerPairFromKeyValueComparers``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IComparer{``1})">
            <summary>
            Given an IComparer on TKey and TValue, returns an IComparer on
            key-value Pairs of TKey and TValue, comparing first keys, then values. 
            </summary>
            <typeparam name="TKey">TKey of the pairs</typeparam>
            <typeparam name="TValue">TValue of the apris</typeparam>
            <param name="keyComparer">IComparer on TKey</param>
            <param name="valueComparer">IComparer on TValue</param>
            <returns>IComparer for comparing key-value pairs.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Comparers.ComparerKeyValueFromComparisonKey``2(System.Comparison{``0})">
            <summary>
            Given an Comparison on TKey, returns an IComparer on
            key-value Pairs. 
            </summary>
            <typeparam name="TKey">TKey of the pairs</typeparam>
            <typeparam name="TValue">TValue of the apris</typeparam>
            <param name="keyComparison">Comparison delegate on TKey</param>
            <returns>IComparer for comparing key-value pairs.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Comparers.DefaultComparer``1">
            <summary>
            Given an element type, check that it implements IComparable&lt;T&gt; or IComparable, then returns
            a IComparer that can be used to compare elements of that type.
            </summary>
            <returns>The IComparer&lt;T&gt; instance.</returns>
            <exception cref="T:System.InvalidOperationException">T does not implement IComparable&lt;T&gt;.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Comparers.DefaultKeyValueComparer``2">
            <summary>
            Given an key and value type, check that TKey implements IComparable&lt;T&gt; or IComparable, then returns
            a IComparer that can be used to compare KeyValuePairs of those types.
            </summary>
            <returns>The IComparer&lt;KeyValuePair&lt;TKey, TValue&gt;&gt; instance.</returns>
            <exception cref="T:System.InvalidOperationException">TKey does not implement IComparable&lt;T&gt;.</exception>
        </member>
        <member name="T:Wintellect.PowerCollections.Hash`1">
             <summary>
             The base implementation for various collections classes that use hash tables
             as part of their implementation. This class should not (and can not) be 
             used directly by end users; it's only for internal use by the collections package. The Hash
             does not handle duplicate values.
             </summary>
             <remarks>
             The Hash manages items of type T, and uses a IComparer&lt;ItemTYpe&gt; that
             hashes compares items to hash items into the table.  
            </remarks>
        </member>
        <member name="T:Wintellect.PowerCollections.Hash`1.Slot">
            <summary>
            The structure that has each slot in the hash table. Each slot has three parts:
            1. The collision bit. Indicates whether some item visited this slot but had to
            keep looking because the slot was full. 
            2. 31-bit full hash value of the item. If zero, the slot is empty.
            3. The item itself.
            </summary>
        </member>
        <member name="P:Wintellect.PowerCollections.Hash`1.Slot.HashValue">
            <summary>
            The full hash value associated with the value in this slot, or zero
            if the slot is empty.
            </summary>
        </member>
        <member name="P:Wintellect.PowerCollections.Hash`1.Slot.Empty">
            <summary>
            Is this slot empty?
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Hash`1.Slot.Clear">
            <summary>
            Clear this slot, leaving the collision bit alone.
            </summary>
        </member>
        <member name="P:Wintellect.PowerCollections.Hash`1.Slot.Collision">
            <summary>
            The "Collision" bit indicates that some value hit this slot and
            collided, so had to try another slot.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Hash`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor. Create a new hash table.
            </summary>
            <param name="equalityComparer">The comparer to use to compare items. </param>
        </member>
        <member name="M:Wintellect.PowerCollections.Hash`1.GetEnumerationStamp">
            <summary>
            Gets the current enumeration stamp. Call CheckEnumerationStamp later
            with this value to throw an exception if the hash table is changed.
            </summary>
            <returns>The current enumeration stamp.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Hash`1.StopEnumerations">
            <summary>
            Must be called whenever there is a structural change in the tree. Causes
            changeStamp to be changed, which causes any in-progress enumerations
            to throw exceptions.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Hash`1.CheckEnumerationStamp(System.Int32)">
            <summary>
            Checks the given stamp against the current change stamp. If different, the
            collection has changed during enumeration and an InvalidOperationException
            must be thrown
            </summary>
            <param name="startStamp">changeStamp at the start of the enumeration.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Hash`1.GetFullHash(`0)">
            <summary>
            Gets the full hash code for an item.
            </summary>
            <param name="item">Item to get hash code for.</param>
            <returns>The full hash code. It is never zero.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Hash`1.GetHashValuesFromFullHash(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Get the initial bucket number and skip amount from the full hash value.
            </summary>
            <param name="hash">The full hash value.</param>
            <param name="initialBucket">Returns the initial bucket. Always in the range 0..(totalSlots - 1).</param>
            <param name="skip">Returns the skip values. Always odd in the range 0..(totalSlots - 1).</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Hash`1.GetHashValues(`0,System.Int32@,System.Int32@)">
            <summary>
            Gets the full hash value, initial bucket number, and skip amount for an item.
            </summary>
            <param name="item">Item to get hash value of.</param>
            <param name="initialBucket">Returns the initial bucket. Always in the range 0..(totalSlots - 1).</param>
            <param name="skip">Returns the skip values. Always odd in the range 0..(totalSlots - 1).</param>
            <returns>The full hash value. This is never zero.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Hash`1.EnsureEnoughSlots(System.Int32)">
            <summary>
            Make sure there are enough slots in the hash table that <paramref name="additionalItems"/>
            items can be inserted into the table.
            </summary>
            <param name="additionalItems">Number of additional items we are inserting.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Hash`1.ShrinkIfNeeded">
            <summary>
            Check if the number of items in the table is small enough that
            we should shrink the table again.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Hash`1.GetSecondaryShift(System.Int32)">
            <summary>
            Given the size of a hash table, compute the "secondary shift" value -- the shift
            that is used to determine the skip amount for collision resolution.
            </summary>
            <param name="newSize">The new size of the table.</param>
            <returns>The secondary skip amount.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Hash`1.ResizeTable(System.Int32)">
            <summary>
            Resize the hash table to the given new size, moving all items into the
            new hash table.
            </summary>
            <param name="newSize">The new size of the hash table. Must be a power
            of two.</param>
        </member>
        <member name="P:Wintellect.PowerCollections.Hash`1.ElementCount">
            <summary>
            Get the number of items in the hash table.
            </summary>
            <value>The number of items stored in the hash table.</value>
        </member>
        <member name="P:Wintellect.PowerCollections.Hash`1.SlotCount">
            <summary>
            Get the number of slots in the hash table. Exposed internally
            for testing purposes.
            </summary>
            <value>The number of slots in the hash table.</value>
        </member>
        <member name="P:Wintellect.PowerCollections.Hash`1.LoadFactor">
            <summary>
            Get or change the load factor. Changing the load factor may cause
            the size of the table to grow or shrink accordingly.
            </summary>
            <value></value>
        </member>
        <member name="M:Wintellect.PowerCollections.Hash`1.Insert(`0,System.Boolean,`0@)">
            <summary>
            Insert a new item into the hash table. If a duplicate item exists, can replace or
            do nothing.
            </summary>
            <param name="item">The item to insert.</param>
            <param name="replaceOnDuplicate">If true, duplicate items are replaced. If false, nothing
            is done if a duplicate already exists.</param>
            <param name="previous">If a duplicate was found, returns it (whether replaced or not).</param>
            <returns>True if no duplicate existed, false if a duplicate was found.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Hash`1.Delete(`0,`0@)">
            <summary>
            Deletes an item from the hash table. 
            </summary>
            <param name="item">Item to search for and delete.</param>
            <param name="itemDeleted">If true returned, the actual item stored in the hash table (must be 
            equal to <paramref name="item"/>, but may not be identical.</param>
            <returns>True if item was found and deleted, false if item wasn't found.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Hash`1.Find(`0,System.Boolean,`0@)">
            <summary>
            Find an item in the hash table. If found, optionally replace it with the
            finding item.
            </summary>
            <param name="find">Item to find.</param>
            <param name="replace">If true, replaces the equal item in the hash table
            with <paramref name="item"/>.</param>
            <param name="item">Returns the equal item found in the table, if true was returned.</param>
            <returns>True if the item was found, false otherwise.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Hash`1.GetEnumerator">
            <summary>
            Enumerate all of the items in the hash table. The items
            are enumerated in a haphazard, unpredictable order.
            </summary>
            <returns>An IEnumerator&lt;T&gt; that enumerates the items
            in the hash table.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Hash`1.GetAny">
            <summary>
            Return an unspecified item of this hash table
            </summary>
            <returns>Some item</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Hash`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerate all of the items in the hash table. The items
            are enumerated in a haphazard, unpredictable order.
            </summary>
            <returns>An IEnumerator that enumerates the items
            in the hash table.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Hash`1.Clone(System.Converter{`0,`0})">
            <summary>
            Creates a clone of this hash table.
            </summary>
            <param name="cloneItem">If non-null, this function is applied to each item when cloning. It must be the 
            case that this function does not modify the hash code or equality function.</param>
            <returns>A shallow clone that contains the same items.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Hash`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialize the hash table. Called from the serialization infrastructure.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Hash`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called on deserialization. We cannot deserialize now, because hash codes
            might not be correct now. We do real deserialization in the OnDeserialization call.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Hash`1.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <summary>
            Deserialize the hash table. Called from the serialization infrastructure when 
            the object graph has finished deserializing.
            </summary>
        </member>
        <member name="T:Wintellect.PowerCollections.ListBase`1">
            <summary>
            ListBase is an abstract class that can be used as a base class for a read-write collection that needs 
            to implement the generic IList&lt;T&gt; and non-generic IList collections. The derived class needs
            to override the following methods: Count, Clear, Insert, RemoveAt, and the indexer. The implementation
            of all the other methods in IList&lt;T&gt; and IList are handled by ListBase.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.#ctor">
            <summary>
            Creates a new ListBase.
            </summary>
        </member>
        <member name="P:Wintellect.PowerCollections.ListBase`1.Count">
            <summary>
            The property must be overridden by the derived class to return the number of 
            items in the list.
            </summary>
            <value>The number of items in the list.</value>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.Clear">
            <summary>
            This method must be overridden by the derived class to empty the list
            of all items.
            </summary>
        </member>
        <member name="P:Wintellect.PowerCollections.ListBase`1.Item(System.Int32)">
            <summary>
            The indexer must be overridden by the derived class to get and set
            values of the list at a particular index.
            </summary>
            <param name="index">The index in the list to get or set an item at. The
            first item in the list has index 0, and the last has index Count-1.</param>
            <returns>The item at the given index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is
            less than zero or greater than or equal to Count.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.Insert(System.Int32,`0)">
            <summary>
            This method must be overridden by the derived class to insert a new
            item at the given index. 
            </summary>
            <param name="index">The index in the list to insert the item at. After the
            insertion, the inserted item is located at this index. The
            first item in the list has index 0.</param>
            <param name="item">The item to insert at the given index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is
            less than zero or greater than Count.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.RemoveAt(System.Int32)">
            <summary>
            This method must be overridden by the derived class to remove the
            item at the given index. 
            </summary>
            <param name="index">The index in the list to remove the item at. The
            first item in the list has index 0.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is
            less than zero or greater than or equal to Count.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.GetEnumerator">
            <summary>
            Enumerates all of the items in the list, in order. The item at index 0
            is enumerated first, then the item at index 1, and so on.
            </summary>
            <remarks>The enumerator does not check for changes made
            to the structure of the list. Thus, changes to the list during
            enumeration may cause incorrect enumeration or out of range
            exceptions. Consider overriding this method and adding checks
            for structural changes.</remarks>
            <returns>An IEnumerator&lt;T&gt; that enumerates all the
            items in the list.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.Contains(`0)">
            <summary>
            Determines if the list contains any item that compares equal to <paramref name="item"/>.
            The implementation simply checks whether IndexOf(item) returns a non-negative value.
            </summary>
            <remarks>Equality in the list is determined by the default sense of
            equality for T. If T implements IComparable&lt;T&gt;, the
            Equals method of that interface is used to determine equality. Otherwise, 
            Object.Equals is used to determine equality.</remarks>
            <param name="item">The item to search for.</param>
            <returns>True if the list contains an item that compares equal to <paramref name="item"/>.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.Add(`0)">
            <summary>
            Adds an item to the end of the list. This method is equivalent to calling: 
            <code>Insert(Count, item)</code>
            </summary>
            <param name="item">The item to add to the list.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.Remove(`0)">
            <summary>
            Searches the list for the first item that compares equal to <paramref name="item"/>.
            If one is found, it is removed. Otherwise, the list is unchanged.
            </summary>
            <remarks>Equality in the list is determined by the default sense of
            equality for T. If T implements IComparable&lt;T&gt;, the
            Equals method of that interface is used to determine equality. Otherwise, 
            Object.Equals is used to determine equality.</remarks>
            <param name="item">The item to remove from the list.</param>
            <returns>True if an item was found and removed that compared equal to
            <paramref name="item"/>. False if no such item was in the list.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.CopyTo(`0[])">
            <summary>
            Copies all the items in the list, in order, to <paramref name="array"/>,
            starting at index 0.
            </summary>
            <param name="array">The array to copy to. This array must have a size
            that is greater than or equal to Count.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all the items in the list, in order, to <paramref name="array"/>,
            starting at <paramref name="arrayIndex"/>.
            </summary>
            <param name="array">The array to copy to. This array must have a size
            that is greater than or equal to Count + arrayIndex.</param>
            <param name="arrayIndex">The starting index in <paramref name="array"/>
            to copy to.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the list to <paramref name="array"/>,
            starting at <paramref name="arrayIndex"/>.
            </summary>
            <param name="index">The starting index in the source list of the range to copy.</param>
            <param name="array">The array to copy to. This array must have a size
            that is greater than or equal to Count + arrayIndex.</param>
            <param name="arrayIndex">The starting index in <paramref name="array"/>
            to copy to.</param>
            <param name="count">The number of items to copy.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.AsReadOnly">
            <summary>
            Provides a read-only view of this list. The returned IList&lt;T&gt; provides
            a view of the list that prevents modifications to the list. Use the method to provide
            access to the list without allowing changes. Since the returned object is just a view,
            changes to the list will be reflected in the view.
            </summary>
            <returns>An IList&lt;T&gt; that provides read-only access to the list.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.Find(System.Predicate{`0})">
            <summary>
            Finds the first item in the list that satisfies the condition
            defined by <paramref name="predicate"/>. If no item matches the condition, than
            the default value for T (null or all-zero) is returned.
            </summary>
            <remarks>If the default value for T (null or all-zero) matches the condition defined by <paramref name="predicate"/>,
            and the list might contain the default value, then it is impossible to distinguish the different between finding
            the default value and not finding any item. To distinguish these cases, use <see cref="M:Wintellect.PowerCollections.ListBase`1.TryFind(System.Predicate{`0},`0@)"/>.</remarks>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <returns>The first item that satisfies the condition <paramref name="predicate"/>. If no item satisfies that
            condition, the default value for T is returned.</returns>
            <seealso cref="M:Wintellect.PowerCollections.ListBase`1.TryFind(System.Predicate{`0},`0@)"/>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.TryFind(System.Predicate{`0},`0@)">
            <summary>
            Finds the first item in the list that satisfies the condition
            defined by <paramref name="predicate"/>. 
            </summary>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <param name="foundItem">If true is returned, this parameter receives the first item in the list
            that satifies the condition defined by <paramref name="predicate"/>.</param>
            <returns>True if an item that  satisfies the condition <paramref name="predicate"/> was found. False 
            if no item in the list satisfies that condition.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.FindLast(System.Predicate{`0})">
            <summary>
            Finds the last item in the list that satisfies the condition
            defined by <paramref name="predicate"/>. If no item matches the condition, than
            the default value for T (null or all-zero) is returned.
            </summary>
            <remarks>If the default value for T (null or all-zero) matches the condition defined by <paramref name="predicate"/>,
            and the list might contain the default value, then it is impossible to distinguish the different between finding
            the default value and not finding any item. To distinguish these cases, use <see cref="M:Wintellect.PowerCollections.ListBase`1.TryFindLast(System.Predicate{`0},`0@)"/>.</remarks>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <returns>The last item that satisfies the condition <paramref name="predicate"/>. If no item satisfies that
            condition, the default value for T is returned.</returns>
            <seealso cref="M:Wintellect.PowerCollections.ListBase`1.TryFindLast(System.Predicate{`0},`0@)"/>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.TryFindLast(System.Predicate{`0},`0@)">
            <summary>
            Finds the last item in the list that satisfies the condition
            defined by <paramref name="predicate"/>. 
            </summary>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <param name="foundItem">If true is returned, this parameter receives the last item in the list
            that satifies the condition defined by <paramref name="predicate"/>.</param>
            <returns>True if an item that  satisfies the condition <paramref name="predicate"/> was found. False 
            if no item in the list satisfies that condition.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.FindIndex(System.Predicate{`0})">
            <summary>
            Finds the index of the first item in the list that satisfies the condition
            defined by <paramref name="predicate"/>. If no item matches the condition, -1 is returned.
            </summary>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <returns>The index of the first item that satisfies the condition <paramref name="predicate"/>. If no item satisfies that
            condition, -1 is returned.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Finds the index of the first item, in the range of items extending from <paramref name="index"/> to the end, that satisfies the condition
            defined by <paramref name="predicate"/>. If no item matches the condition, -1 is returned.
            </summary>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <param name="index">The starting index of the range to check.</param>
            <returns>The index of the first item in the given range that satisfies the condition <paramref name="predicate"/>. If no item satisfies that
            condition, -1 is returned.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Finds the index of the first item, in the range of <paramref name="count"/> items starting from <paramref name="index"/>, that satisfies the condition
            defined by <paramref name="predicate"/>. If no item matches the condition, -1 is returned.
            </summary>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <param name="index">The starting index of the range to check.</param>
            <param name="count">The number of items in range to check.</param>
            <returns>The index of the first item in the given range that satisfies the condition <paramref name="predicate"/>. If no item satisfies that
            condition, -1 is returned.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            Finds the index of the last item in the list that satisfies the condition
            defined by <paramref name="predicate"/>. If no item matches the condition, -1 is returned.
            </summary>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <returns>The index of the last item that satisfies the condition <paramref name="predicate"/>. If no item satisfies that
            condition, -1 is returned.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Finds the index of the last item, in the range of items extending from the beginning
            of the list to <paramref name="index"/>, that satisfies the condition
            defined by <paramref name="predicate"/>. If no item matches the condition, -1 is returned.
            </summary>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <param name="index">The ending index of the range to check.</param>
            <returns>The index of the last item in the given range that satisfies the condition <paramref name="predicate"/>. If no item satisfies that
            condition, -1 is returned.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Finds the index of the last item, in the range of <paramref name="count"/> items ending at <paramref name="index"/>, that satisfies the condition
            defined by <paramref name="predicate"/>. If no item matches the condition, -1 is returned.
            </summary>
            <param name="predicate">A delegate that defined the condition to check for.</param>
            <param name="index">The ending index of the range to check.</param>
            <param name="count">The number of items in range to check.</param>
            <returns>The index of the last item in the given range that satisfies the condition <paramref name="predicate"/>. If no item satisfies that
            condition, -1 is returned.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.IndexOf(`0)">
            <summary>
            Finds the index of the first item in the list that is equal to <paramref name="item"/>. 
            </summary>
            <remarks>The default implementation of equality for type T is used in the search. This is the
            equality defined by IComparable&lt;T&gt; or object.Equals.</remarks>
            <param name="item">The item to search fror.</param>
            <returns>The index of the first item in the list that that is equal to <paramref name="item"/>.  If no item is equal
            to <paramref name="item"/>, -1 is returned.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.IndexOf(`0,System.Int32)">
            <summary>
            Finds the index of the first item, in the range of items extending from <paramref name="index"/> to the end,  
            that is equal to <paramref name="item"/>. 
            </summary>
            <remarks>The default implementation of equality for type T is used in the search. This is the
            equality defined by IComparable&lt;T&gt; or object.Equals.</remarks>
            <param name="item">The item to search fror.</param>
            <param name="index">The starting index of the range to check.</param>
            <returns>The index of the first item in the given range that that is equal to <paramref name="item"/>.  If no item is equal
            to <paramref name="item"/>, -1 is returned.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Finds the index of the first item, in the range of <paramref name="count"/> items starting from <paramref name="index"/>,  
            that is equal to <paramref name="item"/>. 
            </summary>
            <remarks>The default implementation of equality for type T is used in the search. This is the
            equality defined by IComparable&lt;T&gt; or object.Equals.</remarks>
            <param name="item">The item to search fror.</param>
            <param name="index">The starting index of the range to check.</param>
            <param name="count">The number of items in range to check.</param>
            <returns>The index of the first item in the given range that that is equal to <paramref name="item"/>.  If no item is equal
            to <paramref name="item"/>, -1 is returned.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.LastIndexOf(`0)">
            <summary>
            Finds the index of the last item in the list that is equal to <paramref name="item"/>. 
            </summary>
            <remarks>The default implementation of equality for type T is used in the search. This is the
            equality defined by IComparable&lt;T&gt; or object.Equals.</remarks>
            <param name="item">The item to search fror.</param>
            <returns>The index of the last item in the list that that is equal to <paramref name="item"/>.  If no item is equal
            to <paramref name="item"/>, -1 is returned.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Finds the index of the last item, in the range of items extending from the beginning
            of the list to <paramref name="index"/>, that is equal to <paramref name="item"/>. 
            </summary>
            <remarks>The default implementation of equality for type T is used in the search. This is the
            equality defined by IComparable&lt;T&gt; or object.Equals.</remarks>
            <param name="item">The item to search fror.</param>
            <param name="index">The ending index of the range to check.</param>
            <returns>The index of the last item in the given range that that is equal to <paramref name="item"/>.  If no item is equal
            to <paramref name="item"/>, -1 is returned.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Finds the index of the last item, in the range of <paramref name="count"/> items ending at <paramref name="index"/>, 
            that is equal to <paramref name="item"/>. 
            </summary>
            <remarks>The default implementation of equality for type T is used in the search. This is the
            equality defined by IComparable&lt;T&gt; or object.Equals.</remarks>
            <param name="item">The item to search for.</param>
            <param name="index">The ending index of the range to check.</param>
            <param name="count">The number of items in range to check.</param>
            <returns>The index of the last item in the given range that that is equal to <paramref name="item"/>.  If no item is equal
            to <paramref name="item"/>, -1 is returned.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.Range(System.Int32,System.Int32)">
            <summary>
            Returns a view onto a sub-range of this list. Items are not copied; the
            returned IList&lt;T&gt; is simply a different view onto the same underlying items. Changes to this list
            are reflected in the view, and vice versa. Insertions and deletions in the view change the size of the 
            view, but insertions and deletions in the underlying list do not.
            </summary>
            <remarks>
            <para>This method can be used to apply an algorithm to a portion of a list. For example:</para>
            <code>Algorithms.ReverseInPlace(deque.Range(3, 6))</code>
            will reverse the 6 items beginning at index 3.</remarks>
            <param name="start">The starting index of the view.</param>
            <param name="count">The number of items in the view.</param>
            <returns>A list that is a view onto the given sub-part of this list. </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> or <paramref name="count"/> is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/> + <paramref name="count"/> is greater than the
            size of the list.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.ConvertToItemType(System.String,System.Object)">
            <summary>
            Convert the given parameter to T. Throw an ArgumentException
            if it isn't.
            </summary>
            <param name="name">parameter name</param>
            <param name="value">parameter value</param>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the end of the list. This method is equivalent to calling: 
            <code>Insert(Count, item)</code>
            </summary>
            <param name="value">The item to add to the list.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> cannot be converted to T.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.System#Collections#IList#Clear">
            <summary>
            Removes all the items from the list, resulting in an empty list.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines if the list contains any item that compares equal to <paramref name="value"/>.
            </summary>
            <remarks>Equality in the list is determined by the default sense of
            equality for T. If T implements IComparable&lt;T&gt;, the
            Equals method of that interface is used to determine equality. Otherwise, 
            Object.Equals is used to determine equality.</remarks>
            <param name="value">The item to search for.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Find the first occurrence of an item equal to <paramref name="value"/>
            in the list, and returns the index of that item.
            </summary>
            <remarks>Equality in the list is determined by the default sense of
            equality for T. If T implements IComparable&lt;T&gt;, the
            Equals method of that interface is used to determine equality. Otherwise, 
            Object.Equals is used to determine equality.</remarks>
            <param name="value">The item to search for.</param>
            <returns>The index of <paramref name="value"/>, or -1 if no item in the 
            list compares equal to <paramref name="value"/>.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Insert a new
            item at the given index. 
            </summary>
            <param name="index">The index in the list to insert the item at. After the
            insertion, the inserted item is located at this index. The
            first item in the list has index 0.</param>
            <param name="value">The item to insert at the given index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is
            less than zero or greater than Count.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> cannot be converted to T.</exception>
        </member>
        <member name="P:Wintellect.PowerCollections.ListBase`1.System#Collections#IList#IsFixedSize">
            <summary>
            Returns whether the list is a fixed size. This implementation always returns false.
            </summary>
            <value>Alway false, indicating that the list is not fixed size.</value>
        </member>
        <member name="P:Wintellect.PowerCollections.ListBase`1.System#Collections#IList#IsReadOnly">
            <summary>
            Returns whether the list is read only. This implementation returns the value
            from ICollection&lt;T&gt;.IsReadOnly, which is by default, false.
            </summary>
            <value>By default, false, indicating that the list is not read only.</value>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Searches the list for the first item that compares equal to <paramref name="value"/>.
            If one is found, it is removed. Otherwise, the list is unchanged.
            </summary>
            <remarks>Equality in the list is determined by the default sense of
            equality for T. If T implements IComparable&lt;T&gt;, the
            Equals method of that interface is used to determine equality. Otherwise, 
            Object.Equals is used to determine equality.</remarks>
            <param name="value">The item to remove from the list.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> cannot be converted to T.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.ListBase`1.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Removes the
            item at the given index. 
            </summary>
            <param name="index">The index in the list to remove the item at. The
            first item in the list has index 0.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is
            less than zero or greater than or equal to Count.</exception>
        </member>
        <member name="P:Wintellect.PowerCollections.ListBase`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the
            value at a particular index in the list.
            </summary>
            <param name="index">The index in the list to get or set an item at. The
            first item in the list has index 0, and the last has index Count-1.</param>
            <value>The item at the given index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is
            less than zero or greater than or equal to Count.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> cannot be converted to T.</exception>
        </member>
        <member name="T:Wintellect.PowerCollections.MultiDictionaryBase`2">
            <summary>
            MultiDictionaryBase is a base class that can be used to more easily implement a class
            that associates multiple values to a single key. The class implements the generic
            IDictionary&lt;TKey, ICollection&lt;TValue&gt;&gt; interface.
            </summary>
            <remarks>
            <para>To use MultiDictionaryBase as a base class, the derived class must override
            Count, Clear, Add, Remove(TKey), Remove(TKey,TValue), Contains(TKey,TValue), 
            EnumerateKeys, and TryEnumerateValuesForKey. </para>
            <para>It may wish consider overriding CountValues, CountAllValues, ContainsKey,
            and EqualValues, but these are not required.
            </para>
            </remarks>
            <typeparam name="TKey">The key type of the dictionary.</typeparam>
            <typeparam name="TValue">The value type of the dictionary.</typeparam>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.#ctor">
            <summary>
            Creates a new MultiDictionaryBase. 
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.Clear">
            <summary>
            Clears the dictionary. This method must be overridden in the derived class.
            </summary>
        </member>
        <member name="P:Wintellect.PowerCollections.MultiDictionaryBase`2.Count">
            <summary>
            Gets the number of keys in the dictionary. This property must be overridden
            in the derived class.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.EnumerateKeys">
            <summary>
            Enumerate all the keys in the dictionary. This method must be overridden by a derived
            class.
            </summary>
            <returns>An IEnumerator&lt;TKey&gt; that enumerates all of the keys in the collection that
            have at least one value associated with them.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.TryEnumerateValuesForKey(`0,System.Collections.Generic.IEnumerator{`1}@)">
            <summary>
            Enumerate all of the values associated with a given key. This method must be overridden
            by the derived class. If the key exists and has values associated with it, an enumerator for those
            values is returned throught <paramref name="values"/>. If the key does not exist, false is returned.
            </summary>
            <param name="key">The key to get values for.</param>
            <param name="values">If true is returned, this parameter receives an enumerators that
            enumerates the values associated with that key.</param>
            <returns>True if the key exists and has values associated with it. False otherwise.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.Add(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.ICollection{`1}})">
            <summary>
            Adds a key-value pair to the collection. The value part of the pair must be a collection
            of values to associate with the key. If values are already associated with the given
            key, the new values are added to the ones associated with that key.
            </summary>
            <param name="item">A KeyValuePair contains the Key and Value collection to add.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.System#Collections#Generic#IDictionary{TKey,System#Collections#Generic#ICollection{TValue}}#Add(`0,System.Collections.Generic.ICollection{`1})">
            <summary>
            Implements IDictionary&lt;TKey, IEnumerable&lt;TValue&gt;&gt;.Add. If the 
            key is already present, and ArgumentException is thrown. Otherwise, a
            new key is added, and new values are associated with that key.
            </summary>
            <param name="key">Key to add.</param>
            <param name="values">Values to associate with that key.</param>
            <exception cref="T:System.ArgumentException">The key is already present in the dictionary.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.AddMany(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            <para>Adds new values to be associated with a key. If duplicate values are permitted, this
            method always adds new key-value pairs to the dictionary.</para>
            <para>If duplicate values are not permitted, and <paramref name="key"/> already has a value
            equal to one of <paramref name="values"/> associated with it, then that value is replaced,
            and the number of values associate with <paramref name="key"/> is unchanged.</para>
            </summary>
            <param name="key">The key to associate with.</param>
            <param name="values">A collection of values to associate with <paramref name="key"/>.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.Add(`0,`1)">
            <summary>
            Adds a new key-value pair to the dictionary.  This method must be overridden in the derived class.
            </summary>
            <param name="key">Key to add.</param>
            <param name="value">Value to associated with the key.</param>
            <exception cref="T:System.ArgumentException">key is already present in the dictionary</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.Remove(`0)">
            <summary>
            Removes a key from the dictionary. This method must be overridden in the derived class.
            </summary>
            <param name="key">Key to remove from the dictionary.</param>
            <returns>True if the key was found, false otherwise.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.Remove(`0,`1)">
            <summary>
            Removes a key-value pair from the dictionary. This method must be overridden in the derived class.
            </summary>
            <param name="key">Key to remove from the dictionary.</param>
            <param name="value">Associated value to remove from the dictionary.</param>
            <returns>True if the key-value pair was found, false otherwise.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.Remove(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.ICollection{`1}})">
            <summary>
            Removes a set of values from a given key. If all values associated with a key are
            removed, then the key is removed also.
            </summary>
            <param name="pair">A KeyValuePair contains a key and a set of values to remove from that key.</param>
            <returns>True if at least one values was found and removed.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.RemoveMany(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Removes a collection of values from the values associated with a key. If the
            last value is removed from a key, the key is removed also.
            </summary>
            <param name="key">A key to remove values from.</param>
            <param name="values">A collection of values to remove.</param>
            <returns>The number of values that were present and removed. </returns>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.RemoveMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Remove all of the keys (and any associated values) in a collection
            of keys. If a key is not present in the dictionary, nothing happens.
            </summary>
            <param name="keyCollection">A collection of key values to remove.</param>
            <returns>The number of keys from the collection that were present and removed.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.System#Collections#Generic#IDictionary{TKey,System#Collections#Generic#ICollection{TValue}}#TryGetValue(`0,System.Collections.Generic.ICollection{`1}@)">
            <summary>
            Determines if this dictionary contains a key equal to <paramref name="key"/>. If so, all the values
            associated with that key are returned through the values parameter. This method must be
            overridden by the derived class.
            </summary>
            <param name="key">The key to search for.</param>
            <param name="values">Returns all values associated with key, if true was returned.</param>
            <returns>True if the dictionary contains key. False if the dictionary does not contain key.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.ContainsKey(`0)">
            <summary>
            Determines whether a given key is found in the dictionary.
            </summary>
            <remarks>The default implementation simply calls TryEnumerateValuesForKey.
            It may be appropriate to override this method to 
            provide a more efficient implementation.</remarks>
            <param name="key">Key to look for in the dictionary.</param>
            <returns>True if the key is present in the dictionary.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.Contains(`0,`1)">
            <summary>
            Determines if this dictionary contains a key-value pair equal to <paramref name="key"/> and 
            <paramref name="value"/>. The dictionary is not changed. This method must be overridden in the derived class.
            </summary>
            <param name="key">The key to search for.</param>
            <param name="value">The value to search for.</param>
            <returns>True if the dictionary has associated <paramref name="value"/> with <paramref name="key"/>.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.Contains(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.ICollection{`1}})">
            <summary>
            Determines if this dictionary contains the given key and all of the values associated with that key..
            </summary>
            <param name="pair">A key and collection of values to search for.</param>
            <returns>True if the dictionary has associated all of the values in <paramref name="pair"/>.Value with <paramref name="pair"/>.Key.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.EqualValues(`1,`1)">
            <summary>
            If the derived class does not use the default comparison for values, this
            methods should be overridden to compare two values for equality. This is
            used for the correct implementation of ICollection.Contains on the Values
            and KeyValuePairs collections.
            </summary>
            <param name="value1">First value to compare.</param>
            <param name="value2">Second value to compare.</param>
            <returns>True if the values are equal.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.CountValues(`0)">
            <summary>
            Gets a count of the number of values associated with a key. The
            default implementation is slow; it enumerators all of the values
            (using TryEnumerateValuesForKey) to count them. A derived class
            may be able to supply a more efficient implementation.
            </summary>
            <param name="key">The key to count values for.</param>
            <returns>The number of values associated with <paramref name="key"/>.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.CountAllValues">
            <summary>
            Gets a total count of values in the collection. This default implementation
            is slow; it enumerates all of the keys in the dictionary and calls CountValues on each.
            A derived class may be able to supply a more efficient implementation.
            </summary>
            <returns>The total number of values associated with all keys in the dictionary.</returns>
        </member>
        <member name="P:Wintellect.PowerCollections.MultiDictionaryBase`2.Keys">
            <summary>
            Gets a read-only collection all the keys in this dictionary.
            </summary>
            <value>An readonly ICollection&lt;TKey&gt; of all the keys in this dictionary.</value>
        </member>
        <member name="P:Wintellect.PowerCollections.MultiDictionaryBase`2.Values">
            <summary>
            Gets a read-only collection of all the values in the dictionary. 
            </summary>
            <returns>A read-only ICollection&lt;TValue&gt; of all the values in the dictionary.</returns>
        </member>
        <member name="P:Wintellect.PowerCollections.MultiDictionaryBase`2.System#Collections#Generic#IDictionary{TKey,System#Collections#Generic#ICollection{TValue}}#Values">
            <summary>
            Gets a read-only collection of all the value collections in the dictionary. 
            </summary>
            <returns>A read-only ICollection&lt;IEnumerable&lt;TValue&gt;&gt; of all the values in the dictionary.</returns>
        </member>
        <member name="P:Wintellect.PowerCollections.MultiDictionaryBase`2.KeyValuePairs">
            <summary>
            Gets a read-only collection of all key-value pairs in the dictionary. If a key has multiple
            values associated with it, then a key-value pair is present for each value associated
            with the key.
            </summary>
        </member>
        <member name="P:Wintellect.PowerCollections.MultiDictionaryBase`2.Item(`0)">
            <summary>
            Returns a collection of all of the values in the dictionary associated with <paramref name="key"/>,
            or changes the set of values associated with <paramref name="key"/>.
            If the key is not present in the dictionary, an ICollection enumerating no
            values is returned. The returned collection of values is read-write, and can be used to 
            modify the collection of values associated with the key.
            </summary>
            <param name="key">The key to get the values associated with.</param>
            <value>An ICollection&lt;TValue&gt; with all the values associated with <paramref name="key"/>.</value>
        </member>
        <member name="P:Wintellect.PowerCollections.MultiDictionaryBase`2.System#Collections#Generic#IDictionary{TKey,System#Collections#Generic#ICollection{TValue}}#Item(`0)">
            <summary>
            Gets a collection of all the values in the dictionary associated with <paramref name="key"/>,
            or changes the set of values associated with <paramref name="key"/>.
            If the key is not present in the dictionary, a KeyNotFound exception is thrown.
            </summary>
            <param name="key">The key to get the values associated with.</param>
            <value>An IEnumerable&lt;TValue&gt; that enumerates all the values associated with <paramref name="key"/>.</value>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The given key is not present in the dictionary.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.Replace(`0,`1)">
            <summary>
            Replaces all values associated with <paramref name="key"/> with the single value <paramref name="value"/>.
            </summary>
            <remarks>This implementation simply calls Remove, followed by Add.</remarks>
            <param name="key">The key to associate with.</param>
            <param name="value">The new values to be associated with <paramref name="key"/>.</param>
            <returns>Returns true if some values were removed. Returns false if <paramref name="key"/> was not
            present in the dictionary before Replace was called.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.ReplaceMany(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Replaces all values associated with <paramref name="key"/> with a new collection
            of values. If the collection does not permit duplicate values, and <paramref name="values"/> has duplicate
            items, then only the last of duplicates is added.
            </summary>
            <param name="key">The key to associate with.</param>
            <param name="values">The new values to be associated with <paramref name="key"/>.</param>
            <returns>Returns true if some values were removed. Returns false if <paramref name="key"/> was not
            present in the dictionary before Replace was called.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.ToString">
            <summary>
            Shows the string representation of the dictionary. The string representation contains
            a list of the mappings in the dictionary.
            </summary>
            <returns>The string representation of the dictionary.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.DebuggerDisplayString">
            <summary>
            Display the contents of the dictionary in the debugger. This is intentionally private, it is called
            only from the debugger due to the presence of the DebuggerDisplay attribute. It is similar
            format to ToString(), but is limited to 250-300 characters or so, so as not to overload the debugger.
            </summary>
            <returns>The string representation of the items in the collection, similar in format to ToString().</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.GetEnumerator">
            <summary>
            Enumerate all the keys in the dictionary, and for each key, the collection of values for that key.
            </summary>
            <returns>An enumerator to enumerate all the key, ICollection&lt;value&gt; pairs in the dictionary.</returns>
        </member>
        <member name="T:Wintellect.PowerCollections.MultiDictionaryBase`2.ValuesForKeyCollection">
            <summary>
            A private class that provides the ICollection&lt;TValue&gt; for a particular key. This is the collection
            that is returned from the indexer. The collections is read-write, live, and can be used to add, remove,
            etc. values from the multi-dictionary.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.ValuesForKeyCollection.#ctor(Wintellect.PowerCollections.MultiDictionaryBase{`0,`1},`0)">
            <summary>
            Constructor. Initializes this collection.
            </summary>
            <param name="myDictionary">Dictionary we're using.</param>
            <param name="key">The key we're looking at.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.ValuesForKeyCollection.Clear">
            <summary>
            Remove the key and all values associated with it.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.ValuesForKeyCollection.Add(`1)">
            <summary>
            Add a new values to this key.
            </summary>
            <param name="item">New values to add.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.ValuesForKeyCollection.Remove(`1)">
            <summary>
            Remove a value currently associated with key.
            </summary>
            <param name="item">Value to remove.</param>
            <returns>True if item was assocaited with key, false otherwise.</returns>
        </member>
        <member name="P:Wintellect.PowerCollections.MultiDictionaryBase`2.ValuesForKeyCollection.Count">
            <summary>
            Get the number of values associated with the key.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.ValuesForKeyCollection.NoValues">
            <summary>
            A simple function that returns an IEnumerator&lt;TValue&gt; that
            doesn't yield any values. A helper.
            </summary>
            <returns>An IEnumerator&lt;TValue&gt; that yields no values.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.ValuesForKeyCollection.GetEnumerator">
            <summary>
            Enumerate all the values associated with key.
            </summary>
            <returns>An IEnumerator&lt;TValue&gt; that enumerates all the values associated with key.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.ValuesForKeyCollection.Contains(`1)">
            <summary>
            Determines if the given values is associated with key.
            </summary>
            <param name="item">Value to check for.</param>
            <returns>True if value is associated with key, false otherwise.</returns>
        </member>
        <member name="T:Wintellect.PowerCollections.MultiDictionaryBase`2.KeysCollection">
            <summary>
            A private class that implements ICollection&lt;TKey&gt; and ICollection for the
            Keys collection. The collection is read-only.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.MultiDictionaryBase`2.KeysCollection.#ctor(Wintellect.PowerCollections.MultiDictionaryBase{`0,`1})">
            <summary>
            Constructor.
            </summary>
            <param name="myDictionary">The dictionary this is associated with.</param>
        </member>
        <member name="T:Wintellect.PowerCollections.MultiDictionaryBase`2.ValuesCollection">
            <summary>
            A private class that implements ICollection&lt;TValue&gt; and ICollection for the
            Values collection. The collection is read-only.
            </summary>
        </member>
        <member name="T:Wintellect.PowerCollections.MultiDictionaryBase`2.EnumerableValuesCollection">
            <summary>
            A private class that implements ICollection&lt;ICollection&lt;TValue&gt;&gt; and ICollection for the
            Values collection on IDictionary. The collection is read-only.
            </summary>
        </member>
        <member name="T:Wintellect.PowerCollections.MultiDictionaryBase`2.KeyValuePairsCollection">
            <summary>
            A private class that implements ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt; and ICollection for the
            KeyValuePairs collection. The collection is read-only.
            </summary>
        </member>
        <member name="T:Wintellect.PowerCollections.OrderedMultiDictionary`2">
             <summary>
             <para>The OrderedMultiDictionary class that associates values with a key. Unlike an OrderedDictionary,
             each key can have multiple values associated with it. When indexing an OrderedMultidictionary, instead
             of a single value associated with a key, you retrieve an enumeration of values.</para>
             <para>All of the key are stored in sorted order. Also, the values associated with a given key 
             are kept in sorted order as well.</para>
             <para>When constructed, you can chose to allow the same value to be associated with a key multiple
             times, or only one time. </para>
             </summary>
             <typeparam name="TKey">The type of the keys.</typeparam>
             <typeparam name="TValue">The of values associated with the keys.</typeparam>
            <seealso cref="!:MultiDictionary&lt;TKey,TValue&gt;"/>
            <seealso cref="!:OrderedDictionary&lt;TKey,TValue&gt;"/>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.NewPair(`0,`1)">
            <summary>
            Helper function to create a new KeyValuePair struct.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>A new KeyValuePair.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.NewPair(`0)">
            <summary>
            Helper function to create a new KeyValuePair struct with a default value.
            </summary>
            <param name="key">The key.</param>
            <returns>A new KeyValuePair.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.KeyRange(`0)">
            <summary>
            Get a RangeTester that maps to the range of all items with the 
            given key.
            </summary>
            <param name="key">Key in the given range.</param>
            <returns>A RangeTester delegate that selects the range of items with that range.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.DoubleBoundedKeyRangeTester(`0,System.Boolean,`0,System.Boolean)">
            <summary>
            Gets a range tester that defines a range by first and last items.
            </summary>
            <param name="first">The lower bound.</param>
            <param name="firstInclusive">True if the lower bound is inclusive, false if exclusive.</param>
            <param name="last">The upper bound.</param>
            <param name="lastInclusive">True if the upper bound is inclusive, false if exclusive.</param>
            <returns>A RangeTester delegate that tests for a key in the given range.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.LowerBoundedKeyRangeTester(`0,System.Boolean)">
            <summary>
            Gets a range tester that defines a range by a lower bound.
            </summary>
            <param name="first">The lower bound.</param>
            <param name="inclusive">True if the lower bound is inclusive, false if exclusive.</param>
            <returns>A RangeTester delegate that tests for a key in the given range.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.UpperBoundedKeyRangeTester(`0,System.Boolean)">
            <summary>
            Gets a range tester that defines a range by upper bound.
            </summary>
            <param name="last">The upper bound.</param>
            <param name="inclusive">True if the upper bound is inclusive, false if exclusive.</param>
            <returns>A RangeTester delegate that tests for a key in the given range.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.#ctor(System.Boolean)">
            <summary>
            Create a new OrderedMultiDictionary. The default ordering of keys and values are used. If duplicate values
            are allowed, multiple copies of the same value can be associated with the same key. For example, the key "foo"
            could have "a", "a", and "b" associated with it. If duplicate values are not allowed, only one copies of a given value can
            be associated with the same key, although different keys can have the same value. For example, the key "foo" could
            have "a" and "b" associated with it, which key "bar" has values "b" and "c" associated with it.
            </summary>
            <remarks>The default ordering of keys and values will be used, as defined by TKey and TValue's implementation
            of IComparable&lt;T&gt; (or IComparable if IComparable&lt;T&gt; is not implemented). If a different ordering should be
            used, other constructors allow a custom Comparer or IComparer to be passed to changed the ordering.</remarks>
            <param name="allowDuplicateValues">Can the same value be associated with a key multiple times?</param>
            <exception cref="T:System.InvalidOperationException">TKey or TValue does not implement either IComparable&lt;T&gt; or IComparable.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.#ctor(System.Boolean,System.Comparison{`0})">
            <summary>
            Create a new OrderedMultiDictionary. If duplicate values
            are allowed, multiple copies of the same value can be associated with the same key. For example, the key "foo"
            could have "a", "a", and "b" associated with it. If duplicate values are not allowed, only one copies of a given value can
            be associated with the same key, although different keys can have the same value. For example, the key "foo" could
            have "a" and "b" associated with it, which key "bar" has values "b" and "c" associated with it.
            </summary>
            <param name="allowDuplicateValues">Can the same value be associated with a key multiple times?</param>
            <param name="keyComparison">A delegate to a method that will be used to compare keys.</param>
            <exception cref="T:System.InvalidOperationException">TValue does not implement either IComparable&lt;TValue&gt; or IComparable.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.#ctor(System.Boolean,System.Comparison{`0},System.Comparison{`1})">
            <summary>
            Create a new OrderedMultiDictionary. If duplicate values
            are allowed, multiple copies of the same value can be associated with the same key. For example, the key "foo"
            could have "a", "a", and "b" associated with it. If duplicate values are not allowed, only one copies of a given value can
            be associated with the same key, although different keys can have the same value. For example, the key "foo" could
            have "a" and "b" associated with it, which key "bar" has values "b" and "c" associated with it.
            </summary>
            <param name="allowDuplicateValues">Can the same value be associated with a key multiple times?</param>
            <param name="keyComparison">A delegate to a method that will be used to compare keys.</param>
            <param name="valueComparison">A delegate to a method that will be used to compare values.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.#ctor(System.Boolean,System.Collections.Generic.IComparer{`0})">
            <summary>
            Create a new OrderedMultiDictionary. If duplicate values
            are allowed, multiple copies of the same value can be associated with the same key. For example, the key "foo"
            could have "a", "a", and "b" associated with it. If duplicate values are not allowed, only one copies of a given value can
            be associated with the same key, although different keys can have the same value. For example, the key "foo" could
            have "a" and "b" associated with it, which key "bar" has values "b" and "c" associated with it.
            </summary>
            <param name="allowDuplicateValues">Can the same value be associated with a key multiple times?</param>
            <param name="keyComparer">An IComparer&lt;TKey&gt; instance that will be used to compare keys.</param>
            <exception cref="T:System.InvalidOperationException">TValue does not implement either IComparable&lt;TValue&gt; or IComparable.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.#ctor(System.Boolean,System.Collections.Generic.IComparer{`0},System.Collections.Generic.IComparer{`1})">
            <summary>
            Create a new OrderedMultiDictionary. If duplicate values
            are allowed, multiple copies of the same value can be associated with the same key. For example, the key "foo"
            could have "a", "a", and "b" associated with it. If duplicate values are not allowed, only one copies of a given value can
            be associated with the same key, although different keys can have the same value. For example, the key "foo" could
            have "a" and "b" associated with it, which key "bar" has values "b" and "c" associated with it.
            </summary>
            <param name="allowDuplicateValues">Can the same value be associated with a key multiple times?</param>
            <param name="keyComparer">An IComparer&lt;TKey&gt; instance that will be used to compare keys.</param>
            <param name="valueComparer">An IComparer&lt;TValue&gt; instance that will be used to compare values.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.#ctor(System.Boolean,System.Int32,System.Collections.Generic.IComparer{`0},System.Collections.Generic.IComparer{`1},System.Collections.Generic.IComparer{System.Collections.Generic.KeyValuePair{`0,`1}},Wintellect.PowerCollections.RedBlackTree{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Create a new OrderedMultiDictionary. Used internally for cloning.
            </summary>
            <param name="allowDuplicateValues">Can the same value be associated with a key multiple times?</param>
            <param name="keyCount">Number of keys.</param>
            <param name="keyComparer">An IComparer&lt;TKey&gt; instance that will be used to compare keys.</param>
            <param name="valueComparer">An IComparer&lt;TValue&gt; instance that will be used to compare values.</param>
            <param name="comparer">Comparer of key-value pairs.</param>
            <param name="tree">The red-black tree used to store the data.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.Add(`0,`1)">
            <summary>
            <para>Adds a new value to be associated with a key. If duplicate values are permitted, this
            method always adds a new key-value pair to the dictionary.</para>
            <para>If duplicate values are not permitted, and <paramref name="key"/> already has a value
            equal to <paramref name="value"/> associated with it, then that value is replaced with <paramref name="value"/>,
            and the number of values associate with <paramref name="key"/> is unchanged.</para>
            </summary>
            <param name="key">The key to associate with.</param>
            <param name="value">The value to associated with <paramref name="key"/>.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.Remove(`0,`1)">
            <summary>
            Removes a given value from the values associated with a key. If the
            last value is removed from a key, the key is removed also.
            </summary>
            <param name="key">A key to remove a value from.</param>
            <param name="value">The value to remove.</param>
            <returns>True if <paramref name="value"/> was associated with <paramref name="key"/> (and was
            therefore removed). False if <paramref name="value"/> was not associated with <paramref name="key"/>.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.Remove(`0)">
            <summary>
            Removes a key and all associated values from the dictionary. If the
            key is not present in the dictionary, it is unchanged and false is returned.
            </summary>
            <param name="key">The key to remove.</param>
            <returns>True if the key was present and was removed. Returns 
            false if the key was not present.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.Clear">
            <summary>
            Removes all keys and values from the dictionary.
            </summary>
        </member>
        <member name="P:Wintellect.PowerCollections.OrderedMultiDictionary`2.KeyComparer">
            <summary>
            Returns the IComparer&lt;T&gt; used to compare keys in this dictionary. 
            </summary>
            <value>If the dictionary was created using a comparer, that comparer is returned. If the dictionary was
            created using a comparison delegate, then a comparer equivalent to that delegate
            is returned. Otherwise
            the default comparer for TKey (Comparer&lt;TKey&gt;.Default) is returned.</value>
        </member>
        <member name="P:Wintellect.PowerCollections.OrderedMultiDictionary`2.ValueComparer">
            <summary>
            Returns the IComparer&lt;T&gt; used to compare values in this dictionary. 
            </summary>
            <value>If the dictionary was created using a comparer, that comparer is returned. If the dictionary was
            created using a comparison delegate, then a comparer equivalent to that delegate
            is returned. Otherwise
            the default comparer for TValue (Comparer&lt;TValue&gt;.Default) is returned.</value>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.EqualValues(`1,`1)">
            <summary>
            Determine if two values are equal.
            </summary>
            <param name="value1">First value to compare.</param>
            <param name="value2">Second value to compare.</param>
            <returns>True if the values are equal.</returns>
        </member>
        <member name="P:Wintellect.PowerCollections.OrderedMultiDictionary`2.Count">
            <summary>
            Gets the number of key-value pairs in the dictionary. Each value associated
            with a given key is counted. If duplicate values are permitted, each duplicate
            value is included in the count.
            </summary>
            <value>The number of key-value pairs in the dictionary.</value>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.Contains(`0,`1)">
            <summary>
            Checks to see if <paramref name="value"/> is associated with <paramref name="key"/>
            in the dictionary.
            </summary>
            <param name="key">The key to check.</param>
            <param name="value">The value to check.</param>
            <returns>True if <paramref name="value"/> is associated with <paramref name="key"/>.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.ContainsKey(`0)">
            <summary>
            Checks to see if the key is present in the dictionary and has
            at least one value associated with it.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True if <paramref name="key"/> is present and has at least
            one value associated with it. Returns false otherwise.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.EnumerateKeys(Wintellect.PowerCollections.RedBlackTree{System.Collections.Generic.KeyValuePair{`0,`1}}.RangeTester,System.Boolean)">
            <summary>
            A private helper method that returns an enumerable that
            enumerates all the keys in a range.
            </summary>
            <param name="rangeTester">Defines the range to enumerate.</param>
            <param name="reversed">Should the keys be enumerated in reverse order?</param>
            <returns>An IEnumerable&lt;TKey&gt; that enumerates the keys in the given range.
            in the dictionary.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.EnumerateValuesForKey(`0)">
            <summary>
            A private helper method for the indexer to return an enumerable that
            enumerates all the values for a key. This is separate method because indexers
            can't use the yield return construct.
            </summary>
            <param name="key"></param>
            <returns>An IEnumerable&lt;TValue&gt; that can be used to enumerate all the
            values associated with <paramref name="key"/>. If <paramref name="key"/> is not present,
            an enumerable that enumerates no items is returned.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.TryEnumerateValuesForKey(`0,System.Collections.Generic.IEnumerator{`1}@)">
            <summary>
            Determines if this dictionary contains a key equal to <paramref name="key"/>. If so, all the values
            associated with that key are returned through the values parameter. 
            </summary>
            <param name="key">The key to search for.</param>
            <param name="values">Returns all values associated with key, if true was returned.</param>
            <returns>True if the dictionary contains key. False if the dictionary does not contain key.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.EnumerateKeys">
            <summary>
            Enumerate all of the keys in the dictionary.
            </summary>
            <returns>An IEnumerator&lt;TKey&gt; of all of the keys in the dictionary.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.CountValues(`0)">
            <summary>
            Gets the number of values associated with a given key.
            </summary>
            <param name="key">The key to count values of.</param>
            <returns>The number of values associated with <paramref name="key"/>. If <paramref name="key"/>
            is not present in the dictionary, zero is returned.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.CountAllValues">
            <summary>
            Gets a total count of values in the collection. 
            </summary>
            <returns>The total number of values associated with all keys in the dictionary.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.Clone">
            <summary>
            Makes a shallow clone of this dictionary; i.e., if keys or values of the
            dictionary are reference types, then they are not cloned. If TKey or TValue is a value type,
            then each element is copied as if by simple assignment.
            </summary>
            <remarks>Cloning the dictionary takes time O(N), where N is the number of key-value pairs in the dictionary.</remarks>
            <returns>The cloned dictionary.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.System#ICloneable#Clone">
            <summary>
            Implements ICloneable.Clone. Makes a shallow clone of this dictionary; i.e., if keys or values are reference types, then they are not cloned.
            </summary>
            <returns>The cloned dictionary.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.NonCloneableType(System.Type)">
            <summary>
            Throw an InvalidOperationException indicating that this type is not cloneable.
            </summary>
            <param name="t">Type to test.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.CloneContents">
            <summary>
            Makes a deep clone of this dictionary. A new dictionary is created with a clone of
            each entry of this dictionary, by calling ICloneable.Clone on each element. If TKey or TValue is
            a value type, then each element is copied as if by simple assignment.
            </summary>
            <remarks><para>If TKey or TValue is a reference type, it must implement
            ICloneable. Otherwise, an InvalidOperationException is thrown.</para>
            <para>Cloning the dictionary takes time O(N log N), where N is the number of key-value pairs in the dictionary.</para></remarks>
            <returns>The cloned dictionary.</returns>
            <exception cref="T:System.InvalidOperationException">TKey or TValue is a reference type that does not implement ICloneable.</exception>
        </member>
        <member name="P:Wintellect.PowerCollections.OrderedMultiDictionary`2.KeyValuePairs">
            <summary>
            Gets a read-only collection of all key-value pairs in the dictionary. If a key has multiple
            values associated with it, then a key-value pair is present for each value associated
            with the key.
            </summary>
        </member>
        <member name="T:Wintellect.PowerCollections.OrderedMultiDictionary`2.KeyValuePairsCollection">
            <summary>
            A private class that implements ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt; and ICollection for the
            KeyValuePairs collection. The collection is read-only.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.Reversed">
             <summary>
             Returns a View collection that can be used for enumerating the keys and values in the collection in 
             reversed order.
             </summary>
            <remarks>
            <p>Typically, this method is used in conjunction with a foreach statement. For example:
            <code>
             foreach(KeyValuePair&lt;TKey, TValue&gt; pair in dictionary.Reversed()) {
                // process pair
             }
            </code></p>
             <p>If an entry is added to or deleted from the dictionary while the View is being enumerated, then 
             the enumeration will end with an InvalidOperationException.</p>
            <p>Calling Reverse does not copy the data in the dictionary, and the operation takes constant time.</p>
            </remarks>
             <returns>An OrderedDictionary.View of key-value pairs in reverse order.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.Range(`0,System.Boolean,`0,System.Boolean)">
             <summary>
             Returns a collection that can be used for enumerating some of the keys and values in the collection. 
             Only keys that are greater than <paramref name="from"/> and 
             less than <paramref name="to"/> are included. The keys are enumerated in sorted order.
             Keys equal to the end points of the range can be included or excluded depending on the
             <paramref name="fromInclusive"/> and <paramref name="toInclusive"/> parameters.
             </summary>
            <remarks>
            <p>If <paramref name="from"/> is greater than or equal to <paramref name="to"/>, the returned collection is empty. </p>
            <p>The sorted order of the keys is determined by the comparison instance or delegate used
             to create the dictionary.</p>
            <p>Typically, this property is used in conjunction with a foreach statement. For example:</p>
            <code>
             foreach(KeyValuePair&lt;TKey, TValue&gt; pair in dictionary.Range(from, true, to, false)) {
                // process pair
             }
            </code>
            <p>Calling Range does not copy the data in the dictionary, and the operation takes constant time.</p></remarks>
             <param name="from">The lower bound of the range.</param>
             <param name="fromInclusive">If true, the lower bound is inclusive--keys equal to the lower bound will
             be included in the range. If false, the lower bound is exclusive--keys equal to the lower bound will not
             be included in the range.</param>
             <param name="to">The upper bound of the range. </param>
             <param name="toInclusive">If true, the upper bound is inclusive--keys equal to the upper bound will
             be included in the range. If false, the upper bound is exclusive--keys equal to the upper bound will not
             be included in the range.</param>
             <returns>An OrderedMultiDictionary.View of key-value pairs in the given range.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.RangeFrom(`0,System.Boolean)">
             <summary>
             Returns a collection that can be used for enumerating some of the keys and values in the collection. 
             Only keys that are greater than (and optionally, equal to) <paramref name="from"/> are included. 
             The keys are enumerated in sorted order. Keys equal to <paramref name="from"/> can be included
             or excluded depending on the <paramref name="fromInclusive"/> parameter.
             </summary>
            <remarks>
            <p>The sorted order of the keys is determined by the comparison instance or delegate used
             to create the dictionary.</p>
            <p>Typically, this property is used in conjunction with a foreach statement. For example:</p>
            <code>
             foreach(KeyValuePair&lt;TKey, TValue&gt; pair in dictionary.RangeFrom(from, true)) {
                // process pair
             }
            </code>
            <p>Calling RangeFrom does not copy of the data in the dictionary, and the operation takes constant time.</p>
            </remarks>
             <param name="from">The lower bound of the range.</param>
             <param name="fromInclusive">If true, the lower bound is inclusive--keys equal to the lower bound will
             be included in the range. If false, the lower bound is exclusive--keys equal to the lower bound will not
             be included in the range.</param>
             <returns>An OrderedMultiDictionary.View of key-value pairs in the given range.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.RangeTo(`0,System.Boolean)">
             <summary>
             Returns a collection that can be used for enumerating some of the keys and values in the collection. 
             Only items that are less than (and optionally, equal to) <paramref name="to"/> are included. 
             The items are enumerated in sorted order. Items equal to <paramref name="to"/> can be included
             or excluded depending on the <paramref name="toInclusive"/> parameter.
             </summary>
            <remarks>
            <p>The sorted order of the keys is determined by the comparison instance or delegate used
             to create the dictionary.</p>
            <p>Typically, this property is used in conjunction with a foreach statement. For example:</p>
            <code>
             foreach(KeyValuePair&lt;TKey, TValue&gt; pair in dictionary.RangeFrom(from, false)) {
                // process pair
             }
            </code>
            <p>Calling RangeTo does not copy the data in the dictionary, and the operation takes constant time.</p>
            </remarks>
             <param name="to">The upper bound of the range. </param>
             <param name="toInclusive">If true, the upper bound is inclusive--keys equal to the upper bound will
             be included in the range. If false, the upper bound is exclusive--keys equal to the upper bound will not
             be included in the range.</param>
             <returns>An OrderedMultiDictionary.View of key-value pairs in the given range.</returns>
        </member>
        <member name="T:Wintellect.PowerCollections.OrderedMultiDictionary`2.View">
             <summary>
             The OrderedMultiDictionary&lt;TKey,TValue&gt;.View class is used to look at a subset of the keys and values
             inside an ordered multi-dictionary. It is returned from the Range, RangeTo, RangeFrom, and Reversed methods. 
             </summary>
            <remarks>
             <p>Views are dynamic. If the underlying dictionary changes, the view changes in sync. If a change is made
             to the view, the underlying dictionary changes accordingly.</p>
            <p>Typically, this class is used in conjunction with a foreach statement to enumerate the keys
             and values in a subset of the OrderedMultiDictionary. For example:</p>
            <code>
             foreach(KeyValuePair&lt;TKey, TValue&gt; pair in dictionary.Range(from, to)) {
                // process pair
             }
            </code>
            </remarks>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.View.#ctor(Wintellect.PowerCollections.OrderedMultiDictionary{`0,`1},Wintellect.PowerCollections.RedBlackTree{System.Collections.Generic.KeyValuePair{`0,`1}}.RangeTester,System.Boolean,System.Boolean)">
            <summary>
            Initialize the View.
            </summary>
            <param name="myDictionary">Associated OrderedMultiDictionary to be viewed.</param>
            <param name="rangeTester">Range tester that defines the range being used.</param>
            <param name="entireTree">If true, then rangeTester defines the entire tree.</param>
            <param name="reversed">Is the view enuemerated in reverse order?</param>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.View.KeyInView(`0)">
            <summary>
            Determine if the given key lies within the bounds of this view.
            </summary>
            <param name="key">Key to test.</param>
            <returns>True if the key is within the bounds of this view.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.View.EnumerateKeys">
            <summary>
            Enumerate all the keys in the dictionary. 
            </summary>
            <returns>An IEnumerator&lt;TKey&gt; that enumerates all of the keys in the collection that
            have at least one value associated with them.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.View.TryEnumerateValuesForKey(`0,System.Collections.Generic.IEnumerator{`1}@)">
            <summary>
            Enumerate all of the values associated with a given key. If the key exists and has values associated with it, an enumerator for those
            values is returned throught <paramref name="values"/>. If the key does not exist, false is returned.
            </summary>
            <param name="key">The key to get values for.</param>
            <param name="values">If true is returned, this parameter receives an enumerators that
            enumerates the values associated with that key.</param>
            <returns>True if the key exists and has values associated with it. False otherwise.</returns>
        </member>
        <member name="P:Wintellect.PowerCollections.OrderedMultiDictionary`2.View.Count">
            <summary>
            Number of keys in this view.
            </summary>
            <value>Number of keys that lie within the bounds the view.</value>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.View.ContainsKey(`0)">
            <summary>
            Tests if the key is present in the part of the dictionary being viewed.
            </summary>
            <param name="key">Key to check</param>
            <returns>True if the key is within this view. </returns>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.View.Contains(`0,`1)">
            <summary>
            Tests if the key-value pair is present in the part of the dictionary being viewed.
            </summary>
            <param name="key">Key to check for.</param>
            <param name="value">Value to check for.</param>
            <returns>True if the key-value pair is within this view. </returns>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.View.CountValues(`0)">
            <summary>
            Gets the number of values associated with a given key.
            </summary>
            <param name="key">The key to count values of.</param>
            <returns>The number of values associated with <paramref name="key"/>. If <paramref name="key"/>
            is not present in this view, zero is returned.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.View.Add(`0,`1)">
            <summary>
            Adds the given key-value pair to the underlying dictionary of this view.
            If <paramref name="key"/> is not within the range of this view, an
            ArgumentException is thrown.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> is not 
            within the range of this view.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.View.Remove(`0)">
            <summary>
            Removes the key (and associated value) from the underlying dictionary of this view. If
            no key in the view is equal to the passed key, the dictionary and view are unchanged.
            </summary>
            <param name="key">The key to remove.</param>
            <returns>True if the key was found and removed. False if the key was not found.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.View.Remove(`0,`1)">
            <summary>
            Removes the key and value from the underlying dictionary of this view. that is equal to the passed in key. If
            no key in the view is equal to the passed key, or has the given value associated with it, the dictionary and view are unchanged.
            </summary>
            <param name="key">The key to remove.</param>
            <param name="value">The value to remove.</param>
            <returns>True if the key-value pair was found and removed. False if the key-value pair was not found.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.View.Clear">
            <summary>
            Removes all the keys and values within this view from the underlying OrderedMultiDictionary.
            </summary>
            <example>The following removes all the keys that start with "A" from an OrderedMultiDictionary.
            <code>
            dictionary.Range("A", "B").Clear();
            </code>
            </example>
        </member>
        <member name="M:Wintellect.PowerCollections.OrderedMultiDictionary`2.View.Reversed">
            <summary>
            Creates a new View that has the same keys and values as this, in the reversed order.
            </summary>
            <returns>A new View that has the reversed order of this view.</returns>
        </member>
        <member name="T:Wintellect.PowerCollections.Pair`2">
            <summary>
            Stores a pair of objects within a single struct. This struct is useful to use as the
            T of a collection, or as the TKey or TValue of a dictionary.
            </summary>
        </member>
        <member name="F:Wintellect.PowerCollections.Pair`2.firstComparer">
            <summary>
            Comparers for the first and second type that are used to compare
            values.
            </summary>
        </member>
        <member name="F:Wintellect.PowerCollections.Pair`2.First">
            <summary>
            The first element of the pair.
            </summary>
        </member>
        <member name="F:Wintellect.PowerCollections.Pair`2.Second">
            <summary>
            The second element of the pair.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Pair`2.#ctor(`0,`1)">
            <summary>
            Creates a new pair with given first and second elements.
            </summary>
            <param name="first">The first element of the pair.</param>
            <param name="second">The second element of the pair.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Pair`2.#ctor(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Creates a new pair using elements from a KeyValuePair structure. The
            First element gets the Key, and the Second elements gets the Value.
            </summary>
            <param name="keyAndValue">The KeyValuePair to initialize the Pair with .</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Pair`2.Equals(System.Object)">
            <summary>
            Determines if this pair is equal to another object. The pair is equal to another object 
            if that object is a Pair, both element types are the same, and the first and second elements
            both compare equal using object.Equals.
            </summary>
            <param name="obj">Object to compare for equality.</param>
            <returns>True if the objects are equal. False if the objects are not equal.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Pair`2.Equals(Wintellect.PowerCollections.Pair{`0,`1})">
            <summary>
            Determines if this pair is equal to another pair. The pair is equal if  the first and second elements
            both compare equal using IComparable&lt;T&gt;.Equals or object.Equals.
            </summary>
            <param name="other">Pair to compare with for equality.</param>
            <returns>True if the pairs are equal. False if the pairs are not equal.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Pair`2.GetHashCode">
            <summary>
            Returns a hash code for the pair, suitable for use in a hash-table or other hashed collection.
            Two pairs that compare equal (using Equals) will have the same hash code. The hash code for
            the pair is derived by combining the hash codes for each of the two elements of the pair.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Pair`2.CompareTo(Wintellect.PowerCollections.Pair{`0,`1})">
            <summary>
            <para> Compares this pair to another pair of the some type. The pairs are compared by using
            the IComparable&lt;T&gt; or IComparable interface on TFirst and TSecond. The pairs
            are compared by their first elements first, if their first elements are equal, then they
            are compared by their second elements.</para>
            <para>If either TFirst or TSecond does not implement IComparable&lt;T&gt; or IComparable, then
            an NotSupportedException is thrown, because the pairs cannot be compared.</para>
            </summary>
            <param name="other">The pair to compare to.</param>
            <returns>An integer indicating how this pair compares to <paramref name="other"/>. Less
            than zero indicates this pair is less than <paramref name="other"/>. Zero indicate this pair is
            equals to <paramref name="other"/>. Greater than zero indicates this pair is greater than
            <paramref name="other"/>.</returns>
            <exception cref="T:System.NotSupportedException">Either FirstSecond or TSecond is not comparable
            via the IComparable&lt;T&gt; or IComparable interfaces.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Pair`2.System#IComparable#CompareTo(System.Object)">
            <summary>
            <para> Compares this pair to another pair of the some type. The pairs are compared by using
            the IComparable&lt;T&gt; or IComparable interface on TFirst and TSecond. The pairs
            are compared by their first elements first, if their first elements are equal, then they
            are compared by their second elements.</para>
            <para>If either TFirst or TSecond does not implement IComparable&lt;T&gt; or IComparable, then
            an NotSupportedException is thrown, because the pairs cannot be compared.</para>
            </summary>
            <param name="obj">The pair to compare to.</param>
            <returns>An integer indicating how this pair compares to <paramref name="obj"/>. Less
            than zero indicates this pair is less than <paramref name="other"/>. Zero indicate this pair is
            equals to <paramref name="obj"/>. Greater than zero indicates this pair is greater than
            <paramref name="obj"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not of the correct type.</exception>
            <exception cref="T:System.NotSupportedException">Either FirstSecond or TSecond is not comparable
            via the IComparable&lt;T&gt; or IComparable interfaces.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Pair`2.ToString">
            <summary>
            Returns a string representation of the pair. The string representation of the pair is
            of the form:
            <c>First: {0}, Second: {1}</c>
            where {0} is the result of First.ToString(), and {1} is the result of Second.ToString() (or
            "null" if they are null.)
            </summary>
            <returns> The string representation of the pair.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Pair`2.op_Equality(Wintellect.PowerCollections.Pair{`0,`1},Wintellect.PowerCollections.Pair{`0,`1})">
            <summary>
            Determines if two pairs are equal. Two pairs are equal if  the first and second elements
            both compare equal using IComparable&lt;T&gt;.Equals or object.Equals.
            </summary>
            <param name="pair1">First pair to compare.</param>
            <param name="pair2">Second pair to compare.</param>
            <returns>True if the pairs are equal. False if the pairs are not equal.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Pair`2.op_Inequality(Wintellect.PowerCollections.Pair{`0,`1},Wintellect.PowerCollections.Pair{`0,`1})">
            <summary>
            Determines if two pairs are not equal. Two pairs are equal if  the first and second elements
            both compare equal using IComparable&lt;T&gt;.Equals or object.Equals.
            </summary>
            <param name="pair1">First pair to compare.</param>
            <param name="pair2">Second pair to compare.</param>
            <returns>True if the pairs are not equal. False if the pairs are equal.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Pair`2.op_Explicit(Wintellect.PowerCollections.Pair{`0,`1})~System.Collections.Generic.KeyValuePair{`0,`1}">
            <summary>
            Converts a Pair to a KeyValuePair. The Key part of the KeyValuePair gets
            the First element, and the Value part of the KeyValuePair gets the Second 
            elements.
            </summary>
            <param name="pair">Pair to convert.</param>
            <returns>The KeyValuePair created from <paramref name="pair"/>.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Pair`2.ToKeyValuePair">
            <summary>
            Converts this Pair to a KeyValuePair. The Key part of the KeyValuePair gets
            the First element, and the Value part of the KeyValuePair gets the Second 
            elements.
            </summary>
            <returns>The KeyValuePair created from this Pair.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Pair`2.op_Explicit(System.Collections.Generic.KeyValuePair{`0,`1})~Wintellect.PowerCollections.Pair{`0,`1}">
            <summary>
            Converts a KeyValuePair structure into a Pair. The
            First element gets the Key, and the Second element gets the Value.
            </summary>
            <param name="keyAndValue">The KeyValuePair to convert.</param>
            <returns>The Pair created by converted the KeyValuePair into a Pair.</returns>
        </member>
        <member name="T:Wintellect.PowerCollections.ReadOnlyCollectionBase`1">
            <summary>
            ReadOnlyCollectionBase is a base class that can be used to more easily implement the
            generic ICollection&lt;T&gt; and non-generic ICollection interfaces for a read-only collection:
            a collection that does not allow adding or removing elements.
            </summary>
            <remarks>
            <para>To use ReadOnlyCollectionBase as a base class, the derived class must override
            the Count and GetEnumerator methods. </para>
            <para>ICollection&lt;T&gt;.Contains need not be implemented by the
            derived class, but it should be strongly considered, because the ReadOnlyCollectionBase implementation
            may not be very efficient.</para>
            </remarks>
            <typeparam name="T">The item type of the collection.</typeparam>
        </member>
        <member name="M:Wintellect.PowerCollections.ReadOnlyCollectionBase`1.#ctor">
            <summary>
            Creates a new ReadOnlyCollectionBase. 
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.ReadOnlyCollectionBase`1.MethodModifiesCollection">
            <summary>
            Throws an NotSupportedException stating that this collection cannot be modified.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.ReadOnlyCollectionBase`1.ToString">
            <summary>
            Shows the string representation of the collection. The string representation contains
            a list of the items in the collection.
            </summary>
            <returns>The string representation of the collection.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.ReadOnlyCollectionBase`1.Exists(System.Predicate{`0})">
            <summary>
            Determines if the collection contains any item that satisfies the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <returns>True if the collection contains one or more items that satisfy the condition
            defined by <paramref name="predicate"/>. False if the collection does not contain
            an item that satisfies <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.ReadOnlyCollectionBase`1.TrueForAll(System.Predicate{`0})">
            <summary>
            Determines if all of the items in the collection satisfy the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <returns>True if all of the items in the collection satisfy the condition
            defined by <paramref name="predicate"/>, or if the collection is empty. False if one or more items
            in the collection do not satisfy <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.ReadOnlyCollectionBase`1.CountWhere(System.Predicate{`0})">
            <summary>
            Counts the number of items in the collection that satisfy the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <returns>The number of items in the collection that satisfy <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.ReadOnlyCollectionBase`1.FindAll(System.Predicate{`0})">
            <summary>
            Enumerates the items in the collection that satisfy the condition defined
            by <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <returns>An IEnumerable&lt;T&gt; that enumerates the items that satisfy the condition.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.ReadOnlyCollectionBase`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each item in this collection.
            </summary>
            <param name="action">An Action delegate which is invoked for each item in this collection.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.ReadOnlyCollectionBase`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Convert this collection of items by applying a delegate to each item in the collection. The resulting enumeration
            contains the result of applying <paramref name="converter"/> to each item in this collection, in
            order.
            </summary>
            <typeparam name="TOutput">The type each item is being converted to.</typeparam>
            <param name="converter">A delegate to the method to call, passing each item in this collection.</param>
            <returns>An IEnumerable&lt;TOutput^gt; that enumerates the resulting collection from applying <paramref name="converter"/> to each item in this collection in
            order.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="converter"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.ReadOnlyCollectionBase`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            This method throws an NotSupportedException
            stating the collection is read-only.
            </summary>
            <param name="item">Item to be added to the collection.</param>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.ReadOnlyCollectionBase`1.System#Collections#Generic#ICollection{T}#Clear">
            <summary>
            This method throws an NotSupportedException
            stating the collection is read-only.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.ReadOnlyCollectionBase`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>
            This method throws an NotSupportedException
            stating the collection is read-only.
            </summary>
            <param name="item">Item to be removed from the collection.</param>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.ReadOnlyCollectionBase`1.Contains(`0)">
            <summary>
            Determines if the collection contains a particular item. This default implementation
            iterates all of the items in the collection via GetEnumerator, testing each item
            against <paramref name="item"/> using IComparable&lt;T&gt;.Equals or
            Object.Equals.
            </summary>
            <remarks>You should strongly consider overriding this method to provide
            a more efficient implementation.</remarks>
            <param name="item">The item to check for in the collection.</param>
            <returns>True if the collection contains <paramref name="item"/>, false otherwise.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.ReadOnlyCollectionBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all the items in the collection into an array. Implemented by
            using the enumerator returned from GetEnumerator to get all the items
            and copy them to the provided array.
            </summary>
            <param name="array">Array to copy to.</param>
            <param name="arrayIndex">Starting index in <paramref name="array"/> to copy to.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.ReadOnlyCollectionBase`1.ToArray">
            <summary>
            Creates an array of the correct size, and copies all the items in the 
            collection into the array, by calling CopyTo.
            </summary>
            <returns>An array containing all the elements in the collection, in order.</returns>
        </member>
        <member name="P:Wintellect.PowerCollections.ReadOnlyCollectionBase`1.Count">
            <summary>
            Must be overridden to provide the number of items in the collection.
            </summary>
            <value>The number of items in the collection.</value>
        </member>
        <member name="P:Wintellect.PowerCollections.ReadOnlyCollectionBase`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Indicates whether the collection is read-only. Returns the value
            of readOnly that was provided to the constructor.
            </summary>
            <value>Always true.</value>
        </member>
        <member name="M:Wintellect.PowerCollections.ReadOnlyCollectionBase`1.GetEnumerator">
            <summary>
            Must be overridden to enumerate all the members of the collection.
            </summary>
            <returns>A generic IEnumerator&lt;T&gt; that can be used
            to enumerate all the items in the collection.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.ReadOnlyCollectionBase`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the items in the collection into an array. Implemented by
            using the enumerator returned from GetEnumerator to get all the items
            and copy them to the provided array.
            </summary>
            <param name="array">Array to copy to.</param>
            <param name="index">Starting index in <paramref name="array"/> to copy to.</param>
        </member>
        <member name="P:Wintellect.PowerCollections.ReadOnlyCollectionBase`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Indicates whether the collection is synchronized.
            </summary>
            <value>Always returns false, indicating that the collection is not synchronized.</value>
        </member>
        <member name="P:Wintellect.PowerCollections.ReadOnlyCollectionBase`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Indicates the synchronization object for this collection.
            </summary>
            <value>Always returns this.</value>
        </member>
        <member name="M:Wintellect.PowerCollections.ReadOnlyCollectionBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Provides an IEnumerator that can be used to iterate all the members of the
            collection. This implementation uses the IEnumerator&lt;T&gt; that was overridden
            by the derived classes to enumerate the members of the collection.
            </summary>
            <returns>An IEnumerator that can be used to iterate the collection.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.ReadOnlyCollectionBase`1.DebuggerDisplayString">
            <summary>
            Display the contents of the collection in the debugger. This is intentionally private, it is called
            only from the debugger due to the presence of the DebuggerDisplay attribute. It is similar
            format to ToString(), but is limited to 250-300 characters or so, so as not to overload the debugger.
            </summary>
            <returns>The string representation of the items in the collection, similar in format to ToString().</returns>
        </member>
        <member name="T:Wintellect.PowerCollections.DuplicatePolicy">
            <summary>
            Describes what to do if a key is already in the tree when doing an
            insertion.
            </summary>
        </member>
        <member name="T:Wintellect.PowerCollections.RedBlackTree`1">
             <summary>
             The base implementation for various collections classes that use Red-Black trees
             as part of their implementation. This class should not (and can not) be 
             used directly by end users; it's only for internal use by the collections package.
             </summary>
             <remarks>
             The Red-Black tree manages items of type T, and uses a IComparer&lt;T&gt; that
             compares items to sort the tree. Multiple items can compare equal and be stored
             in the tree. Insert, Delete, and Find operations are provided in their full generality;
             all operations allow dealing with either the first or last of items that compare equal. 
            </remarks>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.GetNodeStack">
            <summary>
            Create an array of Nodes big enough for any path from top 
            to bottom. This is cached, and reused from call-to-call, so only one
            can be around at a time per tree.
            </summary>
            <returns>The node stack.</returns>
        </member>
        <member name="T:Wintellect.PowerCollections.RedBlackTree`1.Node">
            <summary>
            The class that is each node in the red-black tree.
            </summary>
        </member>
        <member name="P:Wintellect.PowerCollections.RedBlackTree`1.Node.IsRed">
            <summary>
            Is this a red node?
            </summary>
        </member>
        <member name="P:Wintellect.PowerCollections.RedBlackTree`1.Node.Count">
            <summary>
            Get or set the Count field -- a 31-bit field
            that holds the number of nodes at or below this
            level.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.Node.IncrementCount">
            <summary>
            Add one to the Count.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.Node.DecrementCount">
            <summary>
            Subtract one from the Count. The current
            Count must be non-zero.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.Node.Clone">
            <summary>
            Clones a node and all its descendants.
            </summary>
            <returns>The cloned node.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.StopEnumerations">
            <summary>
            Must be called whenever there is a structural change in the tree. Causes
            changeStamp to be changed, which causes any in-progress enumerations
            to throw exceptions.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.CheckEnumerationStamp(System.Int32)">
            <summary>
            Checks the given stamp against the current change stamp. If different, the
            collection has changed during enumeration and an InvalidOperationException
            must be thrown
            </summary>
            <param name="startStamp">changeStamp at the start of the enumeration.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initialize a red-black tree, using the given interface instance to compare elements. Only
            Compare is used on the IComparer interface.
            </summary>
            <param name="comparer">The IComparer&lt;T&gt; used to sort keys.</param>
        </member>
        <member name="P:Wintellect.PowerCollections.RedBlackTree`1.ElementCount">
            <summary>
            Returns the number of elements in the tree.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.Clone">
            <summary>
            Clone the tree, returning a new tree containing the same items. Should
            take O(N) take.
            </summary>
            <returns>Clone version of this tree.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.Find(`0,System.Boolean,System.Boolean,`0@)">
            <summary>
            Finds the key in the tree. If multiple items in the tree have
            compare equal to the key, finds the first or last one. Optionally replaces the item
            with the one searched for.
            </summary>
            <param name="key">Key to search for.</param>
            <param name="findFirst">If true, find the first of duplicates, else finds the last of duplicates.</param>
            <param name="replace">If true, replaces the item with key (if function returns true)</param>
            <param name="item">Returns the found item, before replacing (if function returns true).</param>
            <returns>True if the key was found.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.FindIndex(`0,System.Boolean)">
            <summary>
            Finds the index of the key in the tree. If multiple items in the tree have
            compare equal to the key, finds the first or last one. 
            </summary>
            <param name="key">Key to search for.</param>
            <param name="findFirst">If true, find the first of duplicates, else finds the last of duplicates.</param>
            <returns>Index of the item found if the key was found, -1 if not found.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.GetItemByIndex(System.Int32)">
            <summary>
            Find the item at a particular index in the tree.
            </summary>
            <param name="index">The zero-based index of the item. Must be &gt;= 0 and &lt; Count.</param>
            <returns>The item at the particular index.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.Insert(`0,Wintellect.PowerCollections.DuplicatePolicy,`0@)">
            <summary>
            Insert a new node into the tree, maintaining the red-black invariants.
            </summary>
            <remarks>Algorithm from Sedgewick, "Algorithms".</remarks>
            <param name="item">The new item to insert</param>
            <param name="dupPolicy">What to do if equal item is already present.</param>
            <param name="previous">If false, returned, the previous item.</param>
            <returns>false if duplicate exists, otherwise true.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.InsertSplit(Wintellect.PowerCollections.RedBlackTree{`0}.Node,Wintellect.PowerCollections.RedBlackTree{`0}.Node,Wintellect.PowerCollections.RedBlackTree{`0}.Node,Wintellect.PowerCollections.RedBlackTree{`0}.Node,System.Boolean@)">
            <summary>
            Split a node with two red children (a 4-node in the 2-3-4 tree formalism), as
            part of an insert operation.
            </summary>
            <param name="ggparent">great grand-parent of "node", can be null near root</param>
            <param name="gparent">grand-parent of "node", can be null near root</param>
            <param name="parent">parent of "node", can be null near root</param>
            <param name="node">Node to split, can't be null</param>
            <param name="rotated">Indicates that rotation(s) occurred in the tree.</param>
            <returns>Node to continue searching from.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.Rotate(Wintellect.PowerCollections.RedBlackTree{`0}.Node,Wintellect.PowerCollections.RedBlackTree{`0}.Node,Wintellect.PowerCollections.RedBlackTree{`0}.Node)">
            <summary>
            Performs a rotation involving the node, it's child and grandchild. The counts of 
            childs and grand-child are set the correct values from their children; this is important
            if they have been adjusted on the way down the try as part of an insert/delete.
            </summary>
            <param name="node">Top node of the rotation. Can be null if child==root.</param>
            <param name="child">One child of "node". Not null.</param>
            <param name="gchild">One child of "child". Not null.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.Delete(`0,System.Boolean,`0@)">
            <summary>
            Deletes a key from the tree. If multiple elements are equal to key, 
            deletes the first or last. If no element is equal to the key, 
            returns false.
            </summary>
            <remarks>Top-down algorithm from Weiss. Basic plan is to move down in the tree, 
            rotating and recoloring along the way to always keep the current node red, which 
            ensures that the node we delete is red. The details are quite complex, however! </remarks>
            <param name="key">Key to delete.</param>
            <param name="deleteFirst">Which item to delete if multiple are equal to key. True to delete the first, false to delete last.</param>
            <param name="item">Returns the item that was deleted, if true returned.</param>
            <returns>True if an element was deleted, false if no element had 
            specified key.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.GetEnumerator">
            
            <summary>
            Enumerate all the items in-order
            </summary>
            <returns>An enumerator for all the items, in order.</returns>
            <exception cref="T:System.InvalidOperationException">The tree has an item added or deleted during the enumeration.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerate all the items in-order
            </summary>
            <returns>An enumerator for all the items, in order.</returns>
            <exception cref="T:System.InvalidOperationException">The tree has an item added or deleted during the enumeration.</exception>
        </member>
        <member name="T:Wintellect.PowerCollections.RedBlackTree`1.RangeTester">
            <summary>
            A delegate that tests if an item is within a custom range. The range must be a contiguous
            range of items with the ordering of this tree. The range test function must test
            if an item is before, withing, or after the range.
            </summary>
            <param name="item">Item to test against the range.</param>
            <returns>Returns negative if item is before the range, zero if item is withing the range,
            and positive if item is after the range.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.BoundedRangeTester(System.Boolean,`0,System.Boolean,`0)">
            <summary>
            Gets a range tester that defines a range by first and last items.
            </summary>
            <param name="useFirst">If true, bound the range on the bottom by first.</param>
            <param name="first">If useFirst is true, the inclusive lower bound.</param>
            <param name="useLast">If true, bound the range on the top by last.</param>
            <param name="last">If useLast is true, the exclusive upper bound.</param>
            <returns>A RangeTester delegate that tests for an item in the given range.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.DoubleBoundedRangeTester(`0,System.Boolean,`0,System.Boolean)">
            <summary>
            Gets a range tester that defines a range by first and last items.
            </summary>
            <param name="first">The lower bound.</param>
            <param name="firstInclusive">True if the lower bound is inclusive, false if exclusive.</param>
            <param name="last">The upper bound.</param>
            <param name="lastInclusive">True if the upper bound is inclusive, false if exclusive.</param>
            <returns>A RangeTester delegate that tests for an item in the given range.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.LowerBoundedRangeTester(`0,System.Boolean)">
            <summary>
            Gets a range tester that defines a range by a lower bound.
            </summary>
            <param name="first">The lower bound.</param>
            <param name="inclusive">True if the lower bound is inclusive, false if exclusive.</param>
            <returns>A RangeTester delegate that tests for an item in the given range.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.UpperBoundedRangeTester(`0,System.Boolean)">
            <summary>
            Gets a range tester that defines a range by upper bound.
            </summary>
            <param name="last">The upper bound.</param>
            <param name="inclusive">True if the upper bound is inclusive, false if exclusive.</param>
            <returns>A RangeTester delegate that tests for an item in the given range.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.EqualRangeTester(`0)">
            <summary>
            Gets a range tester that defines a range by all items equal to an item.
            </summary>
            <param name="equalTo">The item that is contained in the range.</param>
            <returns>A RangeTester delegate that tests for an item equal to <paramref name="equalTo"/>.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.EntireRangeTester(`0)">
            <summary>
            A range tester that defines a range that is the entire tree.
            </summary>
            <param name="item">Item to test.</param>
            <returns>Always returns 0.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.EnumerateRange(Wintellect.PowerCollections.RedBlackTree{`0}.RangeTester)">
            <summary>
            Enumerate the items in a custom range in the tree. The range is determined by 
            a RangeTest delegate.
            </summary>
            <param name="rangeTester">Tests an item against the custom range.</param>
            <returns>An IEnumerable&lt;T&gt; that enumerates the custom range in order.</returns>
            <exception cref="T:System.InvalidOperationException">The tree has an item added or deleted during the enumeration.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.EnumerateRangeInOrder(Wintellect.PowerCollections.RedBlackTree{`0}.RangeTester,Wintellect.PowerCollections.RedBlackTree{`0}.Node)">
            <summary>
            Enumerate all the items in a custom range, under and including node, in-order.
            </summary>
            <param name="rangeTester">Tests an item against the custom range.</param>
            <param name="node">Node to begin enumeration. May be null.</param>
            <returns>An enumerable of the items.</returns>
            <exception cref="T:System.InvalidOperationException">The tree has an item added or deleted during the enumeration.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.EnumerateRangeReversed(Wintellect.PowerCollections.RedBlackTree{`0}.RangeTester)">
            <summary>
            Enumerate the items in a custom range in the tree, in reversed order. The range is determined by 
            a RangeTest delegate.
            </summary>
            <param name="rangeTester">Tests an item against the custom range.</param>
            <returns>An IEnumerable&lt;T&gt; that enumerates the custom range in reversed order.</returns>
            <exception cref="T:System.InvalidOperationException">The tree has an item added or deleted during the enumeration.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.EnumerateRangeInReversedOrder(Wintellect.PowerCollections.RedBlackTree{`0}.RangeTester,Wintellect.PowerCollections.RedBlackTree{`0}.Node)">
            <summary>
            Enumerate all the items in a custom range, under and including node, in reversed order.
            </summary>
            <param name="rangeTester">Tests an item against the custom range.</param>
            <param name="node">Node to begin enumeration. May be null.</param>
            <returns>An enumerable of the items, in reversed oreder.</returns>
            <exception cref="T:System.InvalidOperationException">The tree has an item added or deleted during the enumeration.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.DeleteItemFromRange(Wintellect.PowerCollections.RedBlackTree{`0}.RangeTester,System.Boolean,`0@)">
            <summary>
            Deletes either the first or last item from a range, as identified by a RangeTester
            delegate. If the range is empty, returns false.
            </summary>
            <remarks>Top-down algorithm from Weiss. Basic plan is to move down in the tree, 
            rotating and recoloring along the way to always keep the current node red, which 
            ensures that the node we delete is red. The details are quite complex, however! </remarks>
            <param name="rangeTester">Range to delete from.</param>
            <param name="deleteFirst">If true, delete the first item from the range, else the last.</param>
            <param name="item">Returns the item that was deleted, if true returned.</param>
            <returns>True if an element was deleted, false if the range is empty.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.DeleteRange(Wintellect.PowerCollections.RedBlackTree{`0}.RangeTester)">
            <summary>
            Delete all the items in a range, identified by a RangeTester delegate.
            </summary>
            <param name="rangeTester">The delegate that defines the range to delete.</param>
            <returns>The number of items deleted.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.CountRange(Wintellect.PowerCollections.RedBlackTree{`0}.RangeTester)">
            <summary>
            Count the items in a custom range in the tree. The range is determined by 
            a RangeTester delegate.
            </summary>
            <param name="rangeTester">The delegate that defines the range.</param>
            <returns>The number of items in the range.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.CountRangeUnderNode(Wintellect.PowerCollections.RedBlackTree{`0}.RangeTester,Wintellect.PowerCollections.RedBlackTree{`0}.Node,System.Boolean,System.Boolean)">
            <summary>
            Count all the items in a custom range, under and including node.
            </summary>
            <param name="rangeTester">The delegate that defines the range.</param>
            <param name="node">Node to begin enumeration. May be null.</param>
            <param name="belowRangeTop">This node and all under it are either in the range or below it.</param>
            <param name="aboveRangeBottom">This node and all under it are either in the range or above it.</param>
            <returns>The number of items in the range, under and include node.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.FirstItemInRange(Wintellect.PowerCollections.RedBlackTree{`0}.RangeTester,`0@)">
            <summary>
            Find the first item in a custom range in the tree, and it's index. The range is determined
            by a RangeTester delegate.
            </summary>
            <param name="rangeTester">The delegate that defines the range.</param>
            <param name="item">Returns the item found, if true was returned.</param>
            <returns>Index of first item in range if range is non-empty, -1 otherwise.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.RedBlackTree`1.LastItemInRange(Wintellect.PowerCollections.RedBlackTree{`0}.RangeTester,`0@)">
            <summary>
            Find the last item in a custom range in the tree, and it's index. The range is determined
            by a RangeTester delegate.
            </summary>
            <param name="rangeTester">The delegate that defines the range.</param>
            <param name="item">Returns the item found, if true was returned.</param>
            <returns>Index of the item if range is non-empty, -1 otherwise.</returns>
        </member>
        <member name="T:Wintellect.PowerCollections.Set`1">
             <summary>
             Set&lt;T&gt; is a collection that contains items of type T. 
             The item are maintained in a haphazard, unpredictable order, and duplicate items are not allowed.
             </summary>
             <remarks>
             <p>The items are compared in one of two ways. If T implements IComparable&lt;T&gt; 
             then the Equals method of that interface will be used to compare items, otherwise the Equals
             method from Object will be used. Alternatively, an instance of IComparer&lt;T&gt; can be passed
             to the constructor to use to compare items.</p>
             <p>Set is implemented as a hash table. Inserting, deleting, and looking up an
             an element all are done in approximately constant time, regardless of the number of items in the Set.</p>
            </remarks>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.#ctor">
             <summary>
             Creates a new Set. The Equals method and GetHashCode method on T
             will be used to compare items for equality.
             </summary>
            <remarks>
             Items that are null are permitted, and will be sorted before all other items.
            </remarks>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new Set. The Equals and GetHashCode method of the passed comparer object
            will be used to compare items in this set.
            </summary>
            <param name="equalityComparer">An instance of IEqualityComparer&lt;T&gt; that will be used to compare items.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
             <summary>
             Creates a new Set. The Equals method and GetHashCode method on T
             will be used to compare items for equality.
             </summary>
            <remarks>
             Items that are null are permitted.
            </remarks>
             <param name="collection">A collection with items to be placed into the Set.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new Set. The Equals and GetHashCode method of the passed comparer object
            will be used to compare items in this set. The set is
            initialized with all the items in the given collection.
            </summary>
            <param name="collection">A collection with items to be placed into the Set.</param>
            <param name="equalityComparer">An instance of IEqualityComparer&lt;T&gt; that will be used to compare items.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},Wintellect.PowerCollections.Hash{`0})">
            <summary>
            Creates a new Set given a comparer and a tree that contains the data. Used
            internally for Clone.
            </summary>
            <param name="equalityComparer">EqualityComparer for the set.</param>
            <param name="hash">Data for the set.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.System#ICloneable#Clone">
            <summary>
            Makes a shallow clone of this set; i.e., if items of the
            set are reference types, then they are not cloned. If T is a value type,
            then each element is copied as if by simple assignment.
            </summary>
            <remarks>Cloning the set takes time O(N), where N is the number of items in the set.</remarks>
            <returns>The cloned set.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.Clone">
            <summary>
            Makes a shallow clone of this set; i.e., if items of the
            set are reference types, then they are not cloned. If T is a value type,
            then each element is copied as if by simple assignment.
            </summary>
            <remarks>Cloning the set takes time O(N), where N is the number of items in the set.</remarks>
            <returns>The cloned set.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.CloneContents">
            <summary>
            Makes a deep clone of this set. A new set is created with a clone of
            each element of this set, by calling ICloneable.Clone on each element. If T is
            a value type, then each element is copied as if by simple assignment.
            </summary>
            <remarks><para>If T is a reference type, it must implement
            ICloneable. Otherwise, an InvalidOperationException is thrown.</para>
            <para>Cloning the set takes time O(N), where N is the number of items in the set.</para></remarks>
            <returns>The cloned set.</returns>
            <exception cref="T:System.InvalidOperationException">T is a reference type that does not implement ICloneable.</exception>
        </member>
        <member name="P:Wintellect.PowerCollections.Set`1.Comparer">
            <summary>
            Returns the IEqualityComparer&lt;T&gt; used to compare items in this set. 
            </summary>
            <value>If the set was created using a comparer, that comparer is returned. Otherwise
            the default comparer for T (EqualityComparer&lt;T&gt;.Default) is returned.</value>
        </member>
        <member name="P:Wintellect.PowerCollections.Set`1.Count">
            <summary>
            Returns the number of items in the set.
            </summary>
            <remarks>The size of the set is returned in constant time.</remarks>
            <value>The number of items in the set.</value>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.GetEnumerator">
            <summary>
            Returns an enumerator that enumerates all the items in the set. 
            The items are enumerated in sorted order.
            </summary>
            <remarks>
            <p>Typically, this method is not called directly. Instead the "foreach" statement is used
            to enumerate the items, which uses this method implicitly.</p>
            <p>If an item is added to or deleted from the set while it is being enumerated, then 
            the enumeration will end with an InvalidOperationException.</p>
            <p>Enumerating all the items in the set takes time O(N), where N is the number
            of items in the set.</p>
            </remarks>
            <returns>An enumerator for enumerating all the items in the Set.</returns>		
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.Contains(`0)">
            <summary>
            Determines if this set contains an item equal to <paramref name="item"/>. The set
            is not changed.
            </summary>
            <remarks>Searching the set for an item takes approximately constant time, regardless of the number of items in the set.</remarks>
            <param name="item">The item to search for.</param>
            <returns>True if the set contains <paramref name="item"/>. False if the set does not contain <paramref name="item"/>.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.TryGetItem(`0,`0@)">
            <summary>
            <para>Determines if this set contains an item equal to <paramref name="item"/>, according to the 
            comparison mechanism that was used when the set was created. The set
            is not changed.</para>
            <para>If the set does contain an item equal to <paramref name="item"/>, then the item from the set is returned.</para>
            </summary>
            <remarks>Searching the set for an item takes approximately constant time, regardless of the number of items in the set.</remarks>
            <example>
            In the following example, the set contains strings which are compared in a case-insensitive manner. 
            <code>
            Set&lt;string&gt; set = new Set&lt;string&gt;(StringComparer.CurrentCultureIgnoreCase);
            set.Add("HELLO");
            string s;
            bool b = set.TryGetItem("Hello", out s);   // b receives true, s receives "HELLO".
            </code>
            </example>
            <param name="item">The item to search for.</param>
            <param name="foundItem">Returns the item from the set that was equal to <paramref name="item"/>.</param>
            <returns>True if the set contains <paramref name="item"/>. False if the set does not contain <paramref name="item"/>.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.Add(`0)">
            <summary>
            Adds a new item to the set. If the set already contains an item equal to
            <paramref name="item"/>, that item is replaced with <paramref name="item"/>.
            </summary>
            <remarks>
            <para>Equality between items is determined by the comparison instance or delegate used
            to create the set.</para>
            <para>Adding an item takes approximately constant time, regardless of the number of items in the set.</para></remarks>
            <param name="item">The item to add to the set.</param>
            <returns>True if the set already contained an item equal to <paramref name="item"/> (which was replaced), false 
            otherwise.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Adds a new item to the set. If the set already contains an item equal to
            <paramref name="item"/>, that item is replaced with <paramref name="item"/>.
            </summary>
            <remarks>
            <para>Equality between items is determined by the comparison instance or delegate used
            to create the set.</para>
            <para>Adding an item takes approximately constant time, regardless of the number of items in the set.</para></remarks>
            <param name="item">The item to add to the set.</param>
            <returns>True if the set already contained an item equal to <paramref name="item"/> (which was replaced), false 
            otherwise.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.AddMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds all the items in <paramref name="collection"/> to the set. If the set already contains an item equal to
            one of the items in <paramref name="collection"/>, that item will be replaced.
            </summary>
            <remarks>
            <para>Equality between items is determined by the comparison instance or delegate used
            to create the set.</para>
            <para>Adding the collection takes time O(M), where M is the 
            number of items in <paramref name="collection"/>.</para></remarks>
            <param name="collection">A collection of items to add to the set.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.Remove(`0)">
            <summary>
            Searches the set for an item equal to <paramref name="item"/>, and if found,
            removes it from the set. If not found, the set is unchanged.
            </summary>
            <remarks>
            <para>Equality between items is determined by the comparison instance or delegate used
            to create the set.</para>
            <para>Removing an item from the set takes approximately constant time, regardless of the size of the set.</para></remarks>
            <param name="item">The item to remove.</param>
            <returns>True if <paramref name="item"/> was found and removed. False if <paramref name="item"/> was not in the set.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.RemoveMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all the items in <paramref name="collection"/> from the set. 
            </summary>
            <remarks>
            <para>Equality between items is determined by the comparison instance or delegate used
            to create the set.</para>
            <para>Removing the collection takes time O(M), where M is the 
            number of items in <paramref name="collection"/>.</para></remarks>
            <param name="collection">A collection of items to remove from the set.</param>
            <returns>The number of items removed from the set.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.Clear">
            <summary>
            Removes all items from the set.
            </summary>
            <remarks>Clearing the set takes a constant amount of time, regardless of the number of items in it.</remarks>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.CheckConsistentComparison(Wintellect.PowerCollections.Set{`0})">
            <summary>
            Check that this set and another set were created with the same comparison
            mechanism. Throws exception if not compatible.
            </summary>
            <param name="otherSet">Other set to check comparision mechanism.</param>
            <exception cref="T:System.InvalidOperationException">If otherSet and this set don't use the same method for comparing items.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.IsSupersetOf(Wintellect.PowerCollections.Set{`0})">
            <summary>
            Determines if this set is a superset of another set. Neither set is modified.
            This set is a superset of <paramref name="otherSet"/> if every element in
            <paramref name="otherSet"/> is also in this set.
            <remarks>IsSupersetOf is computed in time O(M), where M is the size of the 
            <paramref name="otherSet"/>.</remarks>
            </summary>
            <param name="otherSet">Set to compare to.</param>
            <returns>True if this is a superset of <paramref name="otherSet"/>.</returns>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.IsProperSupersetOf(Wintellect.PowerCollections.Set{`0})">
            <summary>
            Determines if this set is a proper superset of another set. Neither set is modified.
            This set is a proper superset of <paramref name="otherSet"/> if every element in
            <paramref name="otherSet"/> is also in this set.
            Additionally, this set must have strictly more items than <paramref name="otherSet"/>.
            </summary>
            <remarks>IsProperSubsetOf is computed in time O(M), where M is the size of
            <paramref name="otherSet"/>.</remarks>
            <param name="otherSet">Set to compare to.</param>
            <returns>True if this is a proper superset of <paramref name="otherSet"/>.</returns>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.IsSubsetOf(Wintellect.PowerCollections.Set{`0})">
            <summary>
            Determines if this set is a subset of another set. Neither set is modified.
            This set is a subset of <paramref name="otherSet"/> if every element in this set
            is also in <paramref name="otherSet"/>.
            </summary>
            <remarks>IsSubsetOf is computed in time O(N), where N is the size of the this set.</remarks>
            <param name="otherSet">Set to compare to.</param>
            <returns>True if this is a subset of <paramref name="otherSet"/>.</returns>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.IsProperSubsetOf(Wintellect.PowerCollections.Set{`0})">
            <summary>
            Determines if this set is a proper subset of another set. Neither set is modified.
            This set is a subset of <paramref name="otherSet"/> if every element in this set
            is also in <paramref name="otherSet"/>. Additionally, this set must have strictly 
            fewer items than <paramref name="otherSet"/>.
            </summary>
            <remarks>IsProperSubsetOf is computed in time O(N), where N is the size of the this set.</remarks>
            <param name="otherSet">Set to compare to.</param>
            <returns>True if this is a proper subset of <paramref name="otherSet"/>.</returns>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.IsEqualTo(Wintellect.PowerCollections.Set{`0})">
            <summary>
            Determines if this set is equal to another set. This set is equal to
            <paramref name="otherSet"/> if they contain the same items.
            </summary>
            <remarks>IsEqualTo is computed in time O(N), where N is the number of items in 
            this set.</remarks>
            <param name="otherSet">Set to compare to</param>
            <returns>True if this set is equal to <paramref name="otherSet"/>, false otherwise.</returns>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.IsDisjointFrom(Wintellect.PowerCollections.Set{`0})">
            <summary>
            Determines if this set is disjoint from another set. Two sets are disjoint
            if no item from one set is equal to any item in the other set.
            </summary>
            <remarks>
            <para>The answer is computed in time O(N), where N is the size of the smaller set.</para>
            </remarks>
            <param name="otherSet">Set to check disjointness with.</param>
            <returns>True if the two sets are disjoint, false otherwise.</returns>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.UnionWith(Wintellect.PowerCollections.Set{`0})">
            <summary>
            Computes the union of this set with another set. The union of two sets
            is all items that appear in either or both of the sets. This set receives
            the union of the two sets, the other set is unchanged.
            </summary>
            <remarks>
            <para>If equal items appear in both sets, the union will include an arbitrary choice of one of the
            two equal items.</para>
            <para>The union of two sets is computed in time O(M + N), where M is the size of the 
            larger set, and N is the size of the smaller set.</para>
            </remarks>
            <param name="otherSet">Set to union with.</param>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.Union(Wintellect.PowerCollections.Set{`0})">
            <summary>
            Computes the union of this set with another set. The union of two sets
            is all items that appear in either or both of the sets. A new set is 
            created with the union of the sets and is returned. This set and the other set 
            are unchanged.
            </summary>
            <remarks>
            <para>If equal items appear in both sets, the union will include an arbitrary choice of one of the
            two equal items.</para>
            <para>The union of two sets is computed in time O(M + N), where M is the size of the 
            one set, and N is the size of the other set.</para>
            </remarks>
            <param name="otherSet">Set to union with.</param>
            <returns>The union of the two sets.</returns>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.IntersectionWith(Wintellect.PowerCollections.Set{`0})">
            <summary>
            Computes the intersection of this set with another set. The intersection of two sets
            is all items that appear in both of the sets. This set receives
            the intersection of the two sets, the other set is unchanged.
            </summary>
            <remarks>
            <para>When equal items appear in both sets, the intersection will include an arbitrary choice of one of the
            two equal items.</para>
            <para>The intersection of two sets is computed in time O(N), where N is the size of the smaller set.</para>
            </remarks>
            <param name="otherSet">Set to intersection with.</param>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.Intersection(Wintellect.PowerCollections.Set{`0})">
            <summary>
            Computes the intersection of this set with another set. The intersection of two sets
            is all items that appear in both of the sets. A new set is 
            created with the intersection of the sets and is returned. This set and the other set 
            are unchanged.
            </summary>
            <remarks>
            <para>When equal items appear in both sets, the intersection will include an arbitrary choice of one of the
            two equal items.</para>
            <para>The intersection of two sets is computed in time O(N), where N is the size of the smaller set.</para>
            </remarks>
            <param name="otherSet">Set to intersection with.</param>
            <returns>The intersection of the two sets.</returns>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.DifferenceWith(Wintellect.PowerCollections.Set{`0})">
            <summary>
            Computes the difference of this set with another set. The difference of these two sets
            is all items that appear in this set, but not in <paramref name="otherSet"/>. This set receives
            the difference of the two sets; the other set is unchanged.
            </summary>
            <remarks>
            <para>The difference of two sets is computed in time O(N), where N is the size of the smaller set.</para>
            </remarks>
            <param name="otherSet">Set to difference with.</param>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.Difference(Wintellect.PowerCollections.Set{`0})">
            <summary>
            Computes the difference of this set with another set. The difference of these two sets
            is all items that appear in this set, but not in <paramref name="otherSet"/>. A new set is 
            created with the difference of the sets and is returned. This set and the other set 
            are unchanged.
            </summary>
            <remarks>
            <para>The difference of two sets is computed in time O(N), where N is the size of the smaller set.</para>
            </remarks>
            <param name="otherSet">Set to difference with.</param>
            <returns>The difference of the two sets.</returns>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.SymmetricDifferenceWith(Wintellect.PowerCollections.Set{`0})">
            <summary>
            Computes the symmetric difference of this set with another set. The symmetric difference of two sets
            is all items that appear in either of the sets, but not both. This set receives
            the symmetric difference of the two sets; the other set is unchanged.
            </summary>
            <remarks>
            <para>The symmetric difference of two sets is computed in time O(N), where N is the size of the smaller set.</para>
            </remarks>
            <param name="otherSet">Set to symmetric difference with.</param>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.SymmetricDifference(Wintellect.PowerCollections.Set{`0})">
            <summary>
            Computes the symmetric difference of this set with another set. The symmetric difference of two sets
            is all items that appear in either of the sets, but not both. A new set is 
            created with the symmetric difference of the sets and is returned. This set and the other set 
            are unchanged.
            </summary>
            <remarks>
            <para>The symmetric difference of two sets is computed in time O(N), where N is the size of the smaller set.</para>
            </remarks>
            <param name="otherSet">Set to symmetric difference with.</param>
            <returns>The symmetric difference of the two sets.</returns>
            <exception cref="T:System.InvalidOperationException">This set and <paramref name="otherSet"/> don't use the same method for comparing items.</exception>
        </member>
        <member name="M:Wintellect.PowerCollections.Set`1.GetAny">
            <summary>
            Returns an arbitrary object or null if there is none
            </summary>
            <returns></returns>
        </member>
        <member name="T:Wintellect.PowerCollections.Strings">
            <summary>
            A holder class for localizable strings that are used. Currently, these are not loaded from resources, but 
            just coded into this class. To make this library localizable, simply change this class to load the
            given strings from resources.
            </summary>
        </member>
        <member name="T:Wintellect.PowerCollections.Util">
            <summary>
            A holder class for various internal utility functions that need to be shared.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Util.IsCloneableType(System.Type,System.Boolean@)">
            <summary>
            Determine if a type is cloneable: either a value type or implementing
            ICloneable.
            </summary>
            <param name="type">Type to check.</param>
            <param name="isValue">Returns if the type is a value type, and does not implement ICloneable.</param>
            <returns>True if the type is cloneable.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Util.SimpleClassName(System.Type)">
            <summary>
            Returns the simple name of the class, for use in exception messages. 
            </summary>
            <returns>The simple name of this class.</returns>
        </member>
        <member name="T:Wintellect.PowerCollections.Util.WrapEnumerable`1">
            <summary>
            Wrap an enumerable so that clients can't get to the underlying 
            implementation via a down-cast.
            </summary>
        </member>
        <member name="M:Wintellect.PowerCollections.Util.WrapEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Create the wrapper around an enumerable.
            </summary>
            <param name="wrapped">IEnumerable to wrap.</param>
        </member>
        <member name="M:Wintellect.PowerCollections.Util.CreateEnumerableWrapper``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Wrap an enumerable so that clients can't get to the underlying
            implementation via a down-case
            </summary>
            <param name="wrapped">Enumerable to wrap.</param>
            <returns>A wrapper around the enumerable.</returns>
        </member>
        <member name="M:Wintellect.PowerCollections.Util.GetHashCode``1(``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Gets the hash code for an object using a comparer. Correctly handles
            null.
            </summary>
            <param name="item">Item to get hash code for. Can be null.</param>
            <param name="equalityComparer">The comparer to use.</param>
            <returns>The hash code for the item.</returns>
        </member>
        <member name="T:MathNet.Numerics.Complex">
             <summary>Complex numbers class.</summary>
             <remarks>
             <p>The class <c>Complex</c> provides all elementary operations
             on complex numbers. All the operators <c>+</c>, <c>-</c>,
             <c>*</c>, <c>/</c>, <c>==</c>, <c>!=</c> are defined in the
             canonical way. Additional complex trigonometric functions such 
             as <see cref="M:MathNet.Numerics.Complex.Cos"/>, <see cref="M:MathNet.Numerics.Complex.Acoth"/>, ... 
             are also provided. Note that the <c>Complex</c> structures 
             has two special constant values <see cref="P:MathNet.Numerics.Complex.NaN"/> and 
             <see cref="P:MathNet.Numerics.Complex.Infinity"/>.</p>
             
             <p>In order to avoid possible ambiguities resulting from a 
             <c>Complex(double, double)</c> constructor, the static methods 
             <see cref="M:MathNet.Numerics.Complex.FromRealImaginary(System.Double,System.Double)"/> and <see cref="M:MathNet.Numerics.Complex.FromModulusArgument(System.Double,System.Double)"/>
             are provided instead.</p>
             
             <code>
             Complex x = Complex.FromRealImaginary(1d, 2d);
             Complex y = Complex.FromModulusArgument(1d, Math.Pi);
             Complex z = (x + y) / (x - y);
             </code>
             
             <p>Since there is no canonical order amoung the complex numbers,
             <c>Complex</c> does not implement <c>IComparable</c> but several
             lexicographic <c>IComparer</c> implementations are provided, see 
             <see cref="P:MathNet.Numerics.Complex.RealImaginaryComparer"/>,
             <see cref="P:MathNet.Numerics.Complex.ModulusArgumentComparer"/> and
             <see cref="P:MathNet.Numerics.Complex.ArgumentModulusComparer"/>.</p>
             
             <p>For mathematical details about complex numbers, please
             have a look at the <a href="http://en.wikipedia.org/wiki/Complex_number">
             Wikipedia</a></p>
             </remarks>
            
        </member>
        <member name="P:MathNet.Numerics.Complex.RealImaginaryComparer">
            <summary>
            Gets the lexicographical comparer based on <c>(real, imaginary)</c>. 
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.ModulusArgumentComparer">
            <summary>
            Gets the lexicographical comparer based on <c>(modulus, argument)</c>.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.ArgumentModulusComparer">
            <summary>
            Gets the lexicographical comparer based on <c>(argument, modulus)</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.FromRealImaginary(System.Double,System.Double)">
            <summary>Constructs a <c>Complex</c> from its real
            and imaginary parts.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.FromModulusArgument(System.Double,System.Double)">
            <summary>Constructs a <c>Complex</c> from its modulus and
            argument.</summary>
            <param name="modulus">Must be non-negative.</param>
            <param name="argument">Real number.</param>
        </member>
        <member name="P:MathNet.Numerics.Complex.Zero">
            <summary>Represents the zero value. This field is constant.</summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.IsZero">
            <summary>Indicates whether the <c>Complex</c> is zero.</summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.One">
            <summary>Represents the <c>1</c> value. This field is constant.</summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.I">
            <summary>Represents the imaginary number. This field is constant.</summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.NaN">
            <summary>Represents a value that is not a number. This field is constant.</summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.IsNaN">
            <summary>Indicates whether the provided <c>Complex</c> evaluates to a
            value that is not a number.</summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.Infinity">
            <summary>Represents the infinity value. This field is constant.</summary>
            <remarks>The semantic associated to this value is a <c>Complex</c> of 
            infinite real and imaginary part. If you need more formal complex
            number handling (according to the Riemann Sphere and the extended
            complex plane C*, or using directed infinity) please check out the
            alternative MathNet.PreciseNumerics and MathNet.Symbolics packages
            instead.</remarks>
        </member>
        <member name="P:MathNet.Numerics.Complex.IsInfinity">
            <summary>Indicates the provided <c>Complex</c> evaluates to an
            infinite value.</summary>
            <remarks>True if it either evaluates to a complex infinity
            or to a directed infinity.</remarks>
        </member>
        <member name="P:MathNet.Numerics.Complex.IsReal">
            <summary>Indicates the provided <c>Complex</c> is real.</summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.IsImaginary">
            <summary>Indicates the provided <c>Complex</c> is imaginary.</summary>
        </member>
        <member name="P:MathNet.Numerics.Complex.Real">
            <summary>Gets or sets the real part of this <c>Complex</c>.</summary>
            <seealso cref="P:MathNet.Numerics.Complex.Imag"/>
        </member>
        <member name="P:MathNet.Numerics.Complex.Imag">
            <summary>Gets or sets the imaginary part of this <c>Complex</c>.</summary>
            <seealso cref="P:MathNet.Numerics.Complex.Real"/>
        </member>
        <member name="P:MathNet.Numerics.Complex.Modulus">
            <summary>Gets or sets the modulus of this <c>Complex</c>.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if an attemp
            is made to set a negative modulus.</exception>
            <remarks>If this <c>Complex</c> is zero when the modulus is set, the Complex is assumed to be positive real with an argument of zero.</remarks>
            <seealso cref="P:MathNet.Numerics.Complex.Argument"/>
        </member>
        <member name="P:MathNet.Numerics.Complex.ModulusSquared">
            <summary>Gets or sets the squared modulus of this <c>Complex</c>.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if an attemp
            is made to set a negative modulus.</exception>
            <remarks>If this <c>Complex</c> is zero when the modulus is set, the Complex is assumed to be positive real with an argument of zero.</remarks>
            <seealso cref="P:MathNet.Numerics.Complex.Argument"/>
        </member>
        <member name="P:MathNet.Numerics.Complex.Argument">
            <summary>Gets or sets the argument of this <c>Complex</c>.</summary>
            <remarks>Argument always returns a value bigger than negative Pi and
            smaller or equal to Pi. If this <c>Complex</c> is zero, the Complex
            is assumed to be positive real with an argument of zero.</remarks>
        </member>
        <member name="P:MathNet.Numerics.Complex.Conjugate">
            <summary>Gets or sets the conjugate of this <c>Complex</c>.</summary>
            <remarks>The semantic of <i>setting the conjugate</i> is such that
            <code>
            // a, b of type Complex
            a.Conjugate = b;
            </code>
            is equivalent to
            <code>
            // a, b of type Complex
            a = b.Conjugate
            </code>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Complex.Equals(System.Object)">
            <summary>Indicates whether <c>obj</c> is equal to this instance.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Equals(MathNet.Numerics.Complex)">
            <summary>Indicates whether <c>z</c> is equal to this instance.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.GetHashCode">
            <summary>Gets the hashcode of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Equality(MathNet.Numerics.Complex,MathNet.Numerics.Complex)">
            <summary>Equality test.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Inequality(MathNet.Numerics.Complex,MathNet.Numerics.Complex)">
            <summary>Inequality test.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_UnaryPlus(MathNet.Numerics.Complex)">
            <summary>Unary addition.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_UnaryNegation(MathNet.Numerics.Complex)">
            <summary>Unary minus.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Addition(MathNet.Numerics.Complex,MathNet.Numerics.Complex)">
            <summary>Complex addition.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Subtraction(MathNet.Numerics.Complex,MathNet.Numerics.Complex)">
            <summary>Complex subtraction.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Addition(MathNet.Numerics.Complex,System.Double)">
            <summary>Complex addition.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Subtraction(MathNet.Numerics.Complex,System.Double)">
            <summary>Complex subtraction.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Addition(System.Double,MathNet.Numerics.Complex)">
            <summary>Complex addition.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Subtraction(System.Double,MathNet.Numerics.Complex)">
            <summary>Complex subtraction.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Multiply(MathNet.Numerics.Complex,MathNet.Numerics.Complex)">
            <summary>Complex multiplication.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Multiply(System.Double,MathNet.Numerics.Complex)">
            <summary>Complex multiplication.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Multiply(MathNet.Numerics.Complex,System.Double)">
            <summary>Complex multiplication.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Division(MathNet.Numerics.Complex,MathNet.Numerics.Complex)">
            <summary>Complex division.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Division(System.Double,MathNet.Numerics.Complex)">
            <summary>Complex division.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Division(MathNet.Numerics.Complex,System.Double)">
            <summary>Complex division.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.op_Implicit(System.Double)~MathNet.Numerics.Complex">
            <summary>Implicit conversion of a real double to a real <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Sin">
            <summary>Trigonometric Sine (Sinus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Cos">
            <summary>Trigonometric Cosine (Cosinus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Tan">
            <summary>Trigonometric Tangent (Tangens) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Cot">
            <summary>Trigonometric Cotangent (Cotangens) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Sec">
            <summary>Trigonometric Secant (Sekans) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Csc">
            <summary>Trigonometric Cosecant (Cosekans) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Asin">
            <summary>Trigonometric Arcus Sine (Arkussinus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Acos">
            <summary>Trigonometric Arcus Cosine (Arkuscosinus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Atan">
            <summary>Trigonometric Arcus Tangent (Arkustangens) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Acot">
            <summary>Trigonometric Arcus Cotangent (Arkuscotangens) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Asec">
            <summary>Trigonometric Arcus Secant (Arkussekans) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Acsc">
            <summary>Trigonometric Arcus Cosecant (Arkuscosekans) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Sinh">
            <summary>Trigonometric Hyperbolic Sine (Sinus hyperbolicus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Cosh">
            <summary>Trigonometric Hyperbolic Cosine (Cosinus hyperbolicus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Tanh">
            <summary>Trigonometric Hyperbolic Tangent (Tangens hyperbolicus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Coth">
            <summary>Trigonometric Hyperbolic Cotangent (Cotangens hyperbolicus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Sech">
            <summary>Trigonometric Hyperbolic Secant (Secans hyperbolicus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Csch">
            <summary>Trigonometric Hyperbolic Cosecant (Cosecans hyperbolicus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Asinh">
            <summary>Trigonometric Hyperbolic Area Sine (Areasinus hyperbolicus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Acosh">
            <summary>Trigonometric Hyperbolic Area Cosine (Areacosinus hyperbolicus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Atanh">
            <summary>Trigonometric Hyperbolic Area Tangent (Areatangens hyperbolicus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Acoth">
            <summary>Trigonometric Hyperbolic Area Cotangent (Areacotangens hyperbolicus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Asech">
            <summary>Trigonometric Hyperbolic Area Secant (Areasekans hyperbolicus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Acsch">
            <summary>Trigonometric Hyperbolic Area Cosecant (Areacosekans hyperbolicus) of this <c>Complex</c>.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Exp">
            <summary>Exponential of this <c>Complex</c> (exp(x), E^x).</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Ln">
            <summary>Natural Logarithm of this <c>Complex</c> (Base E).</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Pow(MathNet.Numerics.Complex)">
            <summary>Raise this <c>Complex</c> to the given value.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Root(MathNet.Numerics.Complex)">
            <summary>Raise this <c>Complex</c> to the inverse of the given value.</summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Square">
            <summary>The Square (power 2) of this <c>Complex</c></summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Sqrt">
            <summary>The Square Root (power 1/2) of this <c>Complex</c></summary>
        </member>
        <member name="M:MathNet.Numerics.Complex.Parse(System.String)">
            <summary>Parse a string into a <c>Complex</c>.</summary>
            <remarks>
            The adopted string representation for the complex numbers is 
            <i>UVW+I*XYZ</i> where <i>UVW</i> and <i>XYZ</i> are <c>double</c> 
            strings. Some alternative representations are <i>UVW+XYZi</i>,
            <i>UVW+iXYZ</i>, <i>UVW</i> and <i>iXYZ</i>. 
            Additionally the string <c>"NaN"</c> is mapped to 
            <c>Complex.NaN</c>, the string <c>"Infinity"</c> to 
            <c>Complex.ComplexInfinity</c>, <c>"PositiveInfinity"</c>
            to <c>Complex.DirectedInfinity(Complex.One)</c>,
            <c>"NegativeInfinity"</c> to <c>Complex.DirectedInfinity(-Complex.One)</c>
            and finally <c>"DirectedInfinity(WVW+I*XYZ)"</c> to <c>Complex.DirectedInfinity(WVW+I*XYZ)</c>.
            <code>
            Complex z = Complex.Parse("12.5+I*7");
            Complex nan = Complex.Parse("NaN");
            Complex infinity = Complex.Parse("Infinity");
            </code>
            This method is symetric to <see cref="M:MathNet.Numerics.Complex.ToString"/>.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Complex.ToString">
            <summary>
            Converts this <c>Complex</c> into a <c>string</c>.
            </summary>
            <remarks>
            <p>This method is symmetric to <see cref="M:MathNet.Numerics.Complex.Parse(System.String)"/>.</p>
            <p>The .Net framework may round-up the <c>double</c> values when
            converting them to string. The method <c>Complex.ToExactString</c>
            guarantied that no approximation will be done while converting
            the <see cref="T:MathNet.Numerics.Complex"/> to a <c>string</c>.</p>
            </remarks>
            <seealso cref="M:MathNet.Numerics.Double.ToExactString(System.Double)"/>
        </member>
        <member name="T:MathNet.Numerics.Double">
            <summary>
            The class <c>Double</c> provides various utilities to handle
            <c>double</c> values.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Double.ToExactString(System.Double)">
            <summary>
            Converts the given double to a string representation of its
            exact decimal value.
            </summary>
            <param name="d">The double to convert.</param>
            <return>A string representation of the double's exact decimal value.</return>
            <remarks>
            <p>The .Net framework often round-up the <c>double</c> value
            when converting them into <c>string</c>. This behavior however
            might be troublesome for application. The method <c>ToExactString</c>
            provides, as the name suggests, an non-rounded string conversion
            of a <c>double</c> value.</p>
            </remarks>
        </member>
        <member name="T:MathNet.Numerics.Double.ArbitraryDecimal">
            <summary>Private class used for manipulating.</summary>
        </member>
        <member name="F:MathNet.Numerics.Double.ArbitraryDecimal.digits">
            <summary>Digits in the decimal expansion, one byte per digit</summary>
        </member>
        <member name="F:MathNet.Numerics.Double.ArbitraryDecimal.decimalPoint">
            <summary> How many digits are *after* the decimal point</summary>
        </member>
        <member name="M:MathNet.Numerics.Double.ArbitraryDecimal.#ctor(System.Int64)">
            <summary> 
            Constructs an arbitrary decimal expansion from the given long.
            The long must not be negative.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Double.ArbitraryDecimal.MultiplyBy(System.Int32)">
            <summary>
            Multiplies the current expansion by the given amount, which should
            only be 2 or 5.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Double.ArbitraryDecimal.Shift(System.Int32)">
            <summary>
            Shifts the decimal point; a negative value makes
            the decimal expansion bigger (as fewer digits come after the
            decimal place) and a positive value makes the decimal
            expansion smaller.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Double.ArbitraryDecimal.Normalize">
            <summary>
            Removes leading/trailing zeroes from the expansion.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Double.ArbitraryDecimal.ToString">
            <summary>
            Converts the value to a proper decimal string representation.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.NamespaceDoc">
            <summary>
            <p>This namespace is a port of the 
            <a href="http://math.nist.gov/javanumerics/jama/">JAMA library</a>.</p>
            
            <p>The <c>MathNet.Numerics.LinearAlgebra</c> provides the fundamental operations 
            of numerical linear algebra.  Various constructors create Matrices from two 
            dimensional arrays of double precision floating point numbers.  Various "gets" 
            and "sets" provide access to submatrices and matrix elements.  Several methods 
            implement basic matrix arithmetic, including matrix addition and
            multiplication, matrix norms, and element-by-element array operations.
            Methods for reading and printing matrices are also included.  All the
            operations in this version of the Matrix Class involve real matrices.
            Complex matrices may be handled in a future version.</p>
            
            <p>Five fundamental matrix decompositions, which consist of pairs or triples
            of matrices, permutation vectors, and the like, produce results in five
            decomposition classes.  These decompositions are accessed by the Matrix
            class to compute solutions of simultaneous linear equations, determinants,
            inverses and other matrix functions.</p>
            
            The five decompositions are:<br/>
            <UL>
            <LI>Cholesky Decomposition of symmetric, positive definite matrices.</LI>
            <LI>LU Decomposition of rectangular matrices.</LI>
            <LI>QR Decomposition of rectangular matrices.</LI>
            <LI>Singular Value Decomposition of rectangular matrices.</LI>
            <LI>Eigenvalue Decomposition of both symmetric and nonsymmetric square matrices.</LI>
            </UL>
            
            <p><b>Example of use:</b> Solve a linear system <c>A x = b</c> and compute the residual norm, 
            <c>||b - A x||</c>.</p>
            <code>
            double[,] vals = {{1.,2.,3.},{4.,5.,6.},{7.,8.,10.}};
            Matrix a = new Matrix(vals);
            Matrix b = Matrix.Random(3,1);
            Matrix x = a.Solve(b);
            Matrix r = a * x - b;
            double rnorm = r.NormInf();
            </code>
            
            <p>Author: The MathWorks, Inc. and the National Institute of Standards and Technology (5 August 1998).</p>
            <p>Port: Joannes Vermorel (2004).</p>
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Trig">
            <summary>
            Static DoublePrecision Trigonometry Helper Class
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.DegreeToRadiant(System.Double)">
            <summary>
            Converts a degree (360-periodic) angle to a radiant (2*Pi-periodic) angle. 
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.RadiantToDegree(System.Double)">
            <summary>
            Converts a radiant (2*Pi-periodic) angle to a degree (360-periodic) angle. 
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.NewgradToRadiant(System.Double)">
            <summary>
            Converts a newgrad (400-periodic) angle to a radiant (2*Pi-periodic) angle. 
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.RadiantToNewgrad(System.Double)">
            <summary>
            Converts a radiant (2*Pi-periodic) angle to a newgrad (400-periodic) angle. 
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.DegreeToNewgrad(System.Double)">
            <summary>
            Converts a degree (360-periodic) angle to a newgrad (400-periodic) angle. 
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.NewgradToDegree(System.Double)">
            <summary>
            Converts a newgrad (400-periodic) angle to a degree (360-periodic) angle. 
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Sin(System.Double)">
            <summary>Trigonometric Sine (Sinus) of an angle in radians</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Cos(System.Double)">
            <summary>Trigonometric Cosine (Cosinus) of an angle in radians</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Tan(System.Double)">
            <summary>Trigonometric Tangent (Tangens) of an angle in radians</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Cot(System.Double)">
            <summary>Trigonometric Cotangent (Cotangens) of an angle in radians</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Sec(System.Double)">
            <summary>Trigonometric Secant (Sekans) of an angle in radians</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Csc(System.Double)">
            <summary>Trigonometric Cosecant (Cosekans) of an angle in radians</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Asin(System.Double)">
            <summary>Trigonometric Arcus Sine (Arkussinus) in radians</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Acos(System.Double)">
            <summary>Trigonometric Arcus Cosine (Arkuscosinus) in radians</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Atan(System.Double)">
            <summary>Trigonometric Arcus Tangent (Arkustangens) in radians</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.ArcusTangentFromRational(System.Double,System.Double)">
            <summary>The principal argument (in radians) of the complex number x+I*y</summary>
            <param name="nominator">y</param>
            <param name="denominator">x</param>
        </member>
        <member name="M:MathNet.Numerics.Trig.Acot(System.Double)">
            <summary>Trigonometric Arcus Cotangent (Arkuscotangens) in radians</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Asec(System.Double)">
            <summary>Trigonometric Arcus Secant (Arkussekans) in radians</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Acsc(System.Double)">
            <summary>Trigonometric Arcus Cosecant (Arkuscosekans) in radians</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Sinh(System.Double)">
            <summary>Trigonometric Hyperbolic Sine (Sinus hyperbolicus)</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Cosh(System.Double)">
            <summary>Trigonometric Hyperbolic Cosine (Cosinus hyperbolicus)</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Tanh(System.Double)">
            <summary>Trigonometric Hyperbolic Tangent (Tangens hyperbolicus)</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Coth(System.Double)">
            <summary>Trigonometric Hyperbolic Cotangent (Cotangens hyperbolicus)</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Sech(System.Double)">
            <summary>Trigonometric Hyperbolic Secant (Sekans hyperbolicus)</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Csch(System.Double)">
            <summary>Trigonometric Hyperbolic Cosecant (Cosekans hyperbolicus)</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Asinh(System.Double)">
            <summary>Trigonometric Hyperbolic Area Sine (Areasinus hyperbolicus)</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Acosh(System.Double)">
            <summary>Trigonometric Hyperbolic Area Cosine (Areacosinus hyperbolicus)</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Atanh(System.Double)">
            <summary>Trigonometric Hyperbolic Area Tangent (Areatangens hyperbolicus)</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Acoth(System.Double)">
            <summary>Trigonometric Hyperbolic Area Cotangent (Areacotangens hyperbolicus)</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Asech(System.Double)">
            <summary>Trigonometric Hyperbolic Area Secant (Areasekans hyperbolicus)</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Acsch(System.Double)">
            <summary>Trigonometric Hyperbolic Area Cosecant (Areacosekans hyperbolicus)</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.Hypot(System.Double,System.Double)">
            <summary> Returns <code>sqrt(a<sup>2</sup> + b<sup>2</sup>)</code> 
            without underflow/overlow.</summary>
        </member>
        <member name="M:MathNet.Numerics.Trig.GammaLn(System.Double)">
            <summary>
            Returns the natural logarithm of Gamma for a real value > 0
            </summary>
            <param name="xx">A real value for Gamma calculation</param>
            <returns>A value ln|Gamma(xx))| for xx > 0</returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.Factorial(System.Int32)">
            <summary>
            Returns a factorial of an integer number (n!)
            </summary>
            <param name="n">The value to be factorialized</param>
            <returns>The double precision result</returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.BinomialCoefficient(System.Int32,System.Int32)">
            <summary>
            Returns a binomial coefficient of n and k as a double precision number
            </summary>
            <param name="n"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.FactorialLn(System.Int32)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:MathNet.Numerics.Trig.Beta(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="z"></param>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="T:netDxf.AciColor">
            <summary>
            Represents an ACI color (AutoCAD Color Index) that also supports true color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.ByLayer">
            <summary>
            Gets the ByLayer color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.ByBlock">
            <summary>
            Gets the ByBlock color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Red">
            <summary>
            Defines a default red color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Yellow">
            <summary>
            Defines a default yellow color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Green">
            <summary>
            Defines a default green color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Cyan">
            <summary>
            Defines a default cyan color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Blue">
            <summary>
            Defines a default blue color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Magenta">
            <summary>
            Defines a default magenta color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.Default">
            <summary>
            Defines a default white/black color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.DarkGray">
            <summary>
            Defines a default dark gray color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.LightGray">
            <summary>
            Defines a default light gray color.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.IndexRgb">
            <summary>
            A dictionary that contains the indexed colors, the key represents the color index and the value the RGB components of the color.
            </summary>
        </member>
        <member name="M:netDxf.AciColor.#ctor">
            <summary>
            Initializes a new instance of the <c>AciColor</c> class with black/white color index 7.
            </summary>
        </member>
        <member name="M:netDxf.AciColor.#ctor(System.Byte,System.Byte,System.Byte)">
             <summary>
             Initializes a new instance of the <c>AciColor</c> class.
             </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
             <remarks>By default the UseTrueColor will be set to true.</remarks>
        </member>
        <member name="M:netDxf.AciColor.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <c>AciColor</c> class.
            </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
            <remarks>By default the UseTrueColor will be set to true.</remarks>
        </member>
        <member name="M:netDxf.AciColor.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>AciColor</c> class.
            </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
            <remarks>By default the UseTrueColor will be set to true.</remarks>
        </member>
        <member name="M:netDxf.AciColor.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <c>AciColor</c> class.
            </summary>
            <param name="color">A <see cref="T:System.Drawing.Color">color</see>.</param>
            <remarks>By default the UseTrueColor will be set to true.</remarks>
        </member>
        <member name="M:netDxf.AciColor.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <c>AciColor</c> class.
            </summary>
            <param name="index">Color index.</param>
            <remarks>
            By default the UseTrueColor will be set to false.<br />
            Accepted color index values range from 1 to 255.<br />
            Indexes from 1 to 255 represents a color, the index 0 and 256 are reserved for ByLayer and ByBlock colors.
            </remarks>
        </member>
        <member name="P:netDxf.AciColor.IsByLayer">
            <summary>
            Defines if the color is defined by layer.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.IsByBlock">
            <summary>
            Defines if the color is defined by block.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.R">
            <summary>
            Gets the red component of the AciColor.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.G">
            <summary>
            Gets the green component of the AciColor.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.B">
            <summary>
            Gets the blue component of the AciColor.
            </summary>
        </member>
        <member name="P:netDxf.AciColor.UseTrueColor">
            <summary>
            Get or set if the AciColor should use true color values.
            </summary>
            <remarks>
            By default, the constructors that use RGB values will set this boolean to true
            while the constants and the constructor that use a color index will set it to false.
            </remarks>
        </member>
        <member name="P:netDxf.AciColor.Index">
            <summary>
            Gets or sets the color index.
            </summary>
            <remarks>
            Accepted color index values range from 1 to 255.
            Indexes from 1 to 255 represents a color, the index 0 and 256 are reserved for ByLayer and ByBlock colors.
            </remarks>
        </member>
        <member name="M:netDxf.AciColor.FromHsl(netDxf.Vector3)">
            <summary>
            Converts HSL (hue, saturation, lightness) value to an <see cref="T:netDxf.AciColor">AciColor</see>.
            </summary>
            <param name="hsl">A Vector3 containing the hue, saturation, and lightness components.</param>
            <returns>An <see cref="T:System.Drawing.Color">AciColor</see> that represents the actual HSL value.</returns>
        </member>
        <member name="M:netDxf.AciColor.FromHsl(System.Double,System.Double,System.Double)">
            <summary>
            Converts HSL (hue, saturation, lightness) value to an <see cref="T:netDxf.AciColor">AciColor</see>.
            </summary>
            <param name="hue">Hue (input values range from 0 to 1).</param>
            <param name="saturation">Saturation percentage (input values range from 0 to 1).</param>
            <param name="lightness">Lightness percentage (input values range from 0 to 1).</param>
            <returns>An <see cref="T:System.Drawing.Color">AciColor</see> that represents the actual HSL value.</returns>
        </member>
        <member name="M:netDxf.AciColor.ToHsl(netDxf.AciColor,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts the RGB (red, green, blue) components of an <see cref="T:netDxf.AciColor">AciColor</see> to HSL (hue, saturation, lightness) values.
            </summary>
            <param name="color">A <see cref="T:netDxf.AciColor">color</see>.</param>
            <param name="hue">Hue (output values range from 0 to 1).</param>
            <param name="saturation">Saturation (output values range from 0 to 1).</param>
            <param name="lightness">Lightness (output values range from 0 to 1).</param>
        </member>
        <member name="M:netDxf.AciColor.ToHsl(netDxf.AciColor)">
            <summary>
            Converts the RGB (red, green, blue) components of an <see cref="T:netDxf.AciColor">AciColor</see> to HSL (hue, saturation, lightness) values.
            </summary>
            <param name="color">A <see cref="T:netDxf.AciColor">color</see>.</param>
            <returns>A Vector3 where the three coordinates x, y, z represents the hue, saturation, and lightness components (output values range from 0 to 1).</returns>
        </member>
        <member name="M:netDxf.AciColor.ToColor">
            <summary>
            Converts the AciColor to a <see cref="T:System.Drawing.Color">color</see>.
            </summary>
            <returns>A <see cref="T:System.Drawing.Color">System.Drawing.Color</see> that represents the actual AciColor.</returns>
            <remarks>A default color white will be used for ByLayer and ByBlock colors.</remarks>
        </member>
        <member name="M:netDxf.AciColor.FromColor(System.Drawing.Color)">
            <summary>
            Converts a <see cref="T:System.Drawing.Color">color</see> to an <see cref="T:System.Drawing.Color">AciColor</see>.
            </summary>
            <param name="color">A <see cref="T:System.Drawing.Color">color</see>.</param>
        </member>
        <member name="M:netDxf.AciColor.ToTrueColor(netDxf.AciColor)">
            <summary>
            Gets the 24-bit color value from an AciColor.
            </summary>
            <param name="color">A <see cref="T:netDxf.AciColor">color</see>.</param>
            <returns>A 24-bit color value (BGR order).</returns>
        </member>
        <member name="M:netDxf.AciColor.FromTrueColor(System.Int32)">
            <summary>
            Gets the <see cref="T:netDxf.AciColor">color</see> from a 24-bit color value.
            </summary>
            <param name="value">A 24-bit color value (BGR order).</param>
            <returns>A <see cref="T:netDxf.AciColor">color</see>.</returns>
        </member>
        <member name="M:netDxf.AciColor.FromCadIndex(System.Int16)">
            <summary>
            Gets the <see cref="T:netDxf.AciColor">color</see> from an index.
            </summary>
            <param name="index">A CAD indexed AciColor index.</param>
            <returns>A <see cref="T:netDxf.AciColor">color</see>.</returns>
            <remarks>
            Accepted index values range from 0 to 256. An index 0 represents a ByBlock color and an index 256 is a ByLayer color;
            any other value will return one of the 255 indexed AciColors.
            </remarks>
        </member>
        <member name="M:netDxf.AciColor.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:netDxf.AciColor.Clone">
            <summary>
            Creates a new color that is a copy of the current instance.
            </summary>
            <returns>A new color that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.AciColor.Equals(netDxf.AciColor)">
            <summary>
            Check if the components of two colors are equal.
            </summary>
            <param name="other">Another color to compare to.</param>
            <returns>True if the three components are equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.AciColor.RgbToAci(System.Byte,System.Byte,System.Byte)">
            <summary>
            Obtains the approximate color index from the RGB components.
            </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
            <returns>The approximate color index from the RGB components</returns>
            <remarks>This conversion will never be accurate.</remarks>
        </member>
        <member name="T:netDxf.Blocks.Block">
            <summary>
            Represents a block definition.
            </summary>
            <remarks>
            Avoid to add any kind of dimensions to the block's entities list, programs loading DXF files with them seems to behave in a weird fashion.
            This is not applicable when working in the Model and Paper space blocks.
            </remarks>
        </member>
        <member name="F:netDxf.Blocks.Block.DefaultModelSpaceName">
            <summary>
            Default ModelSpace block name.
            </summary>
        </member>
        <member name="F:netDxf.Blocks.Block.DefaultPaperSpaceName">
            <summary>
            Default PaperSpace block name.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.ModelSpace">
            <summary>
            Gets the default *Model_Space block.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.PaperSpace">
            <summary>
            Gets the default *Paper_Space block.
            </summary>
        </member>
        <member name="M:netDxf.Blocks.Block.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>Block</c> class as an external reference drawing. 
            </summary>
            <param name="name">Block name.</param>
            <param name="xrefFile">External reference path name.</param>
            <remarks>Only DWG files can be used as externally referenced blocks.</remarks>
        </member>
        <member name="M:netDxf.Blocks.Block.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>Block</c> class as an external reference drawing. 
            </summary>
            <param name="name">Block name.</param>
            <param name="xrefFile">External reference path name.</param>
            <param name="overlay">Specifies if the external reference is an overlay, by default it is set to false.</param>
            <remarks>Only DWG files can be used as externally referenced blocks.</remarks>
        </member>
        <member name="M:netDxf.Blocks.Block.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>Block</c> class.
            </summary>
            <param name="name">Block name.</param>
        </member>
        <member name="M:netDxf.Blocks.Block.#ctor(System.String,System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject})">
            <summary>
            Initializes a new instance of the <c>Block</c> class.
            </summary>
            <param name="name">Block name.</param>
            <param name="entities">The list of entities that make the block.</param>
        </member>
        <member name="M:netDxf.Blocks.Block.#ctor(System.String,System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject},System.Collections.Generic.IEnumerable{netDxf.Entities.AttributeDefinition})">
            <summary>
            Initializes a new instance of the <c>Block</c> class.
            </summary>
            <param name="name">Block name.</param>
            <param name="entities">The list of entities that make the block.</param>
            <param name="attributes">The list of attribute definitions that make the block.</param>
        </member>
        <member name="P:netDxf.Blocks.Block.Name">
            <summary>
            Gets the name of the table object.
            </summary>
            <remarks>Table object names are case insensitive.</remarks>
        </member>
        <member name="P:netDxf.Blocks.Block.Description">
            <summary>
            Gets or sets the block description.
            </summary>
            <remarks>
            AutoCAD has an unknown limit on the number of characters for the description when loading an external DXF,
            while, on the other hand is perfectly capable of saving a Block description that surpasses such limit.<br />
            Keep in mind that when saving a DXF prior to the AutoCad2007 version, non-ASCII characters will be encoded,
            therefore a single letter might consume more characters when saved into the DXF.<br />
            New line characters are not allowed.
            </remarks>
        </member>
        <member name="P:netDxf.Blocks.Block.Origin">
            <summary>
            Gets or sets the block origin in world coordinates, it is recommended to always keep this value to the default Vector3.Zero.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.Layer">
            <summary>
            Gets or sets the block <see cref="P:netDxf.Blocks.Block.Layer">layer</see>.
            </summary>
            <remarks>It seems that the block layer is always the default "0" regardless of what is defined here, so it is pointless to change this value.</remarks>
        </member>
        <member name="P:netDxf.Blocks.Block.Entities">
            <summary>
            Gets the <see cref="T:netDxf.Entities.EntityObject">entity</see> list of the block.
            </summary>
            <remarks>Null entities, attribute definitions or entities already owned by another block or document cannot be added to the list.</remarks>
        </member>
        <member name="P:netDxf.Blocks.Block.AttributeDefinitions">
            <summary>
            Gets the <see cref="T:netDxf.Entities.AttributeDefinition">entity</see> list of the block.
            </summary>
            <remarks>
            Null or attribute definitions already owned by another block or document cannot be added to the list.
            Additionally Paper Space blocks do not contain attribute definitions.
            </remarks>
        </member>
        <member name="P:netDxf.Blocks.Block.Record">
            <summary>
            Gets the block record associated with this block.
            </summary>
            <remarks>It returns the same object as the owner property.</remarks>
        </member>
        <member name="P:netDxf.Blocks.Block.Flags">
            <summary>
            Gets the block-type flags (bit-coded values, may be combined).
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.XrefFile">
            <summary>
            Gets the external reference path name.
            </summary>
            <remarks>
            This property is only applicable to externally referenced blocks.
            </remarks>
        </member>
        <member name="P:netDxf.Blocks.Block.IsXRef">
            <summary>
            Gets if the block is an external reference.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.IsForInternalUseOnly">
            <summary>
            All blocks that starts with "*" are for internal use only.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.Block.End">
            <summary>
            Gets or sets the block end object.
            </summary>
        </member>
        <member name="M:netDxf.Blocks.Block.Create(netDxf.DxfDocument,System.String)">
            <summary>
            Creates a block from the content of a <see cref="T:netDxf.DxfDocument">document</see>.
            </summary>
            <param name="doc">A <see cref="T:netDxf.DxfDocument">DxfDocument</see> instance.</param>
            <param name="name">Name of the new block.</param>
            <returns>The block build from the <see cref="T:netDxf.DxfDocument">document</see> content.</returns>
            <remarks>Only the entities contained in ModelSpace will make part of the block.</remarks>
        </member>
        <member name="M:netDxf.Blocks.Block.Load(System.String)">
            <summary>
            Creates a block from an external DXF file.
            </summary>
            <param name="file">DXF file name.</param>
            <returns>The block build from the DXF file content. It will return null if the file has not been able to load.</returns>
            <remarks>
            The name of the block will be the file name without extension, and
            only the entities contained in ModelSpace will make part of the block.
            </remarks>
        </member>
        <member name="M:netDxf.Blocks.Block.Load(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a block from an external DXF file.
            </summary>
            <param name="file">DXF file name.</param>
            <param name="supportFolders">List of the document support folders.</param>
            <returns>The block build from the DXF file content. It will return null if the file has not been able to load.</returns>
            <remarks>
            The name of the block will be the file name without extension, and
            only the entities contained in ModelSpace will make part of the block.
            </remarks>
        </member>
        <member name="M:netDxf.Blocks.Block.Load(System.String,System.String)">
            <summary>
            Creates a block from an external DXF file.
            </summary>
            <param name="file">DXF file name.</param>
            <param name="name">Name of the new block.</param>
            <returns>The block build from the DXF file content. It will return null if the file has not been able to load.</returns>
            <remarks>Only the entities contained in ModelSpace will make part of the block.</remarks>
        </member>
        <member name="M:netDxf.Blocks.Block.Load(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a block from an external DXF file.
            </summary>
            <param name="file">DXF file name.</param>
            <param name="name">Name of the new block.</param>
            <param name="supportFolders">List of the document support folders.</param>
            <returns>The block build from the DXF file content. It will return null if the file has not been able to load.</returns>
            <remarks>Only the entities contained in ModelSpace will make part of the block.</remarks>
        </member>
        <member name="M:netDxf.Blocks.Block.Save(System.String,netDxf.Header.DxfVersion)">
            <summary>
            Saves a block to a text DXF file.
            </summary>
            <param name="file">DXF file name.</param>
            <param name="version">Version of the DXF database version.</param>
            <returns>Return true if the file has been successfully save, false otherwise.</returns>
        </member>
        <member name="M:netDxf.Blocks.Block.Save(System.String,netDxf.Header.DxfVersion,System.Boolean)">
            <summary>
            Saves a block to a DXF file.
            </summary>
            <param name="file">DXF file name.</param>
            <param name="version">Version of the DXF database version.</param>
            <param name="isBinary">Defines if the file will be saved as binary.</param>
            <returns>Return true if the file has been successfully save, false otherwise.</returns>
        </member>
        <member name="M:netDxf.Blocks.Block.SetName(System.String,System.Boolean)">
            <summary>
            Hack to change the table name without having to check its name. Some invalid characters are used for internal purposes only.
            </summary>
            <param name="newName">Table object new name.</param>
        </member>
        <member name="M:netDxf.Blocks.Block.Clone(System.String)">
            <summary>
            Creates a new Block that is a copy of the current instance.
            </summary>
            <param name="newName">Block name of the copy.</param>
            <returns>A new Block that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Blocks.Block.Clone">
            <summary>
            Creates a new Block that is a copy of the current instance.
            </summary>
            <returns>A new Block that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Blocks.Block.AssignHandle(System.Int64)">
            <summary>
            Assigns a handle to the object based in a integer counter.
            </summary>
            <param name="entityNumber">Number to assign.</param>
            <returns>Next available entity number.</returns>
            <remarks>
            Some objects might consume more than one, is, for example, the case of polylines that will assign
            automatically a handle to its vertexes. The entity number will be converted to an hexadecimal number.
            </remarks>
        </member>
        <member name="T:netDxf.Blocks.BlockAttributeDefinitionChangeEventArgs">
            <summary>
            Represents the arguments thrown when an attribute definition is added ore removed from a <see cref="T:netDxf.Blocks.Block">Block</see>.
            </summary>
        </member>
        <member name="M:netDxf.Blocks.BlockAttributeDefinitionChangeEventArgs.#ctor(netDxf.Entities.AttributeDefinition)">
            <summary>
            Initializes a new instance of <c>BlockAttributeDefinitionChangeEventArgs</c>.
            </summary>
            <param name="item">The attribute definition that is being added or removed from the block.</param>
        </member>
        <member name="P:netDxf.Blocks.BlockAttributeDefinitionChangeEventArgs.Item">
            <summary>
            Gets the attribute definition that is being added or removed.
            </summary>
        </member>
        <member name="T:netDxf.Blocks.BlockEntityChangeEventArgs">
            <summary>
            Represents the arguments thrown when an entity is added ore removed from a <see cref="T:netDxf.Blocks.Block">Block</see>.
            </summary>
        </member>
        <member name="M:netDxf.Blocks.BlockEntityChangeEventArgs.#ctor(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of <c>BlockEntityChangeEventArgs</c>.
            </summary>
            <param name="item">The entity that is being added or removed from the block.</param>
        </member>
        <member name="P:netDxf.Blocks.BlockEntityChangeEventArgs.Item">
            <summary>
            Gets the entity that is being added or removed.
            </summary>
        </member>
        <member name="T:netDxf.Blocks.BlockRecord">
            <summary>
            Represent the record of a block in the tables section.
            </summary>
        </member>
        <member name="M:netDxf.Blocks.BlockRecord.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>BlockRecord</c> class.
            </summary>
            <param name="name">Block definition name.</param>
        </member>
        <member name="P:netDxf.Blocks.BlockRecord.Name">
            <summary>
            Gets the name of the block record.
            </summary>
            <remarks>
            Block record names are case insensitive.<br />
            The block which name starts with "*" are for internal purpose only.
            </remarks>
        </member>
        <member name="P:netDxf.Blocks.BlockRecord.Layout">
            <summary>
            Gets the associated Layout.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.BlockRecord.Units">
            <summary>
            Gets or sets the block insertion units.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.BlockRecord.DefaultUnits">
            <summary>
            Gets or sets the default block units.
            </summary>
            <remarks>These are the units that all new blocks will use as default.</remarks>
        </member>
        <member name="P:netDxf.Blocks.BlockRecord.AllowExploding">
            <summary>
            Gets or sets if the block can be exploded.
            </summary>
            <remarks>
            This property is only compatible with DXF version AutoCad2007 and upwards.
            </remarks>
        </member>
        <member name="P:netDxf.Blocks.BlockRecord.ScaleUniformly">
            <summary>
            Gets or sets if the block must be scaled uniformly.
            </summary>
            <remarks>
            This property is only compatible with DXF version AutoCad2007 and upwards.
            </remarks>
        </member>
        <member name="P:netDxf.Blocks.BlockRecord.Owner">
            <summary>
            Gets the owner of the actual DXF object.
            </summary>
        </member>
        <member name="P:netDxf.Blocks.BlockRecord.IsForInternalUseOnly">
            <summary>
            Gets if the block record is for internal use only.
            </summary>
            <remarks>
            All blocks which name starts with "*" are for internal use and should not be modified.
            </remarks>
        </member>
        <member name="P:netDxf.Blocks.BlockRecord.XData">
            <summary>
            Gets the block record <see cref="T:netDxf.Collections.XDataDictionary">extended data</see>.
            </summary>
        </member>
        <member name="M:netDxf.Blocks.BlockRecord.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Blocks.BlockTypeFlags">
            <summary>
            Block-type flags (bit-coded values, may be combined).
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.None">
            <summary>
            Indicates none of the following flags apply.
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.AnonymousBlock">
            <summary>
            This is an anonymous block generated by hatching, associative dimensioning, other internal operations, or an application.
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.NonConstantAttributeDefinitions">
            <summary>
            This block has non-constant attribute definitions
            (this bit is not set if the block has any attribute definitions that are constant, or has no attribute definitions at all).
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.XRef">
            <summary>
            This block is an external reference.
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.XRefOverlay">
            <summary>
            This block is an external reference overlay.
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.ExternallyDependent">
            <summary>
            This block is externally dependent.
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.ResolvedExternalReference">
            <summary>
            This is a resolved external reference, or dependent of an external reference (ignored on input).
            </summary>
        </member>
        <member name="F:netDxf.Blocks.BlockTypeFlags.DefinitionExternalReference">
            <summary>
            This definition is a referenced external reference (ignored on input).
            </summary>
        </member>
        <member name="T:netDxf.Blocks.EndBlock">
            <summary>
            Represents the termination element of the block definition.
            </summary>
        </member>
        <member name="M:netDxf.Blocks.EndBlock.#ctor(netDxf.DxfObject)">
            <summary>
            Initializes a new instance of the <c>BlockEnd</c> class.
            </summary>
        </member>
        <member name="T:netDxf.BoundingRectangle">
            <summary>
            Represents an axis aligned bounding rectangle.
            </summary>
        </member>
        <member name="M:netDxf.BoundingRectangle.#ctor(netDxf.Vector2,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new axis aligned bounding rectangle from a rotated ellipse.
            </summary>
            <param name="center">Center of the ellipse.</param>
            <param name="majorAxis">Major axis of the ellipse.</param>
            <param name="minorAxis">Minor axis of the ellipse.</param>
            <param name="rotation">Rotation in degrees of the ellipse.</param>
        </member>
        <member name="M:netDxf.BoundingRectangle.#ctor(netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new axis aligned bounding rectangle from a circle.
            </summary>
            <param name="center">Center of the bounding rectangle.</param>
            <param name="radius">Radius of the circle.</param>
        </member>
        <member name="M:netDxf.BoundingRectangle.#ctor(netDxf.Vector2,System.Double,System.Double)">
            <summary>
            Initializes a new axis aligned bounding rectangle.
            </summary>
            <param name="center">Center of the bounding rectangle.</param>
            <param name="width">Width of the bounding rectangle.</param>
            <param name="height">Height of the bounding rectangle.</param>
        </member>
        <member name="M:netDxf.BoundingRectangle.#ctor(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new axis aligned bounding rectangle.
            </summary>
            <param name="min">Lower-left corner.</param>
            <param name="max">Upper-right corner.</param>
        </member>
        <member name="M:netDxf.BoundingRectangle.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2})">
            <summary>
            Initializes a new axis aligned bounding rectangle.
            </summary>
            <param name="points">A list of Vector2.</param>
        </member>
        <member name="P:netDxf.BoundingRectangle.Min">
            <summary>
            Gets or sets the bounding rectangle lower-left corner.
            </summary>
        </member>
        <member name="P:netDxf.BoundingRectangle.Max">
            <summary>
            Gets or sets the bounding rectangle upper-right corner.
            </summary>
        </member>
        <member name="P:netDxf.BoundingRectangle.Center">
            <summary>
            Gets the bounding rectangle center.
            </summary>
        </member>
        <member name="P:netDxf.BoundingRectangle.Radius">
            <summary>
            Gets the radius of the circle that contains the bounding rectangle.
            </summary>
        </member>
        <member name="P:netDxf.BoundingRectangle.Width">
            <summary>
            Gets the bounding rectangle width.
            </summary>
        </member>
        <member name="P:netDxf.BoundingRectangle.Height">
            <summary>
            Gets the bounding rectangle height.
            </summary>
        </member>
        <member name="M:netDxf.BoundingRectangle.PointInside(netDxf.Vector2)">
            <summary>
            Checks if a point is inside the bounding rectangle.
            </summary>
            <param name="point">Vector2 to check.</param>
            <returns>True if the point is inside the bounding rectangle, false otherwise.</returns>
            <remarks></remarks>
        </member>
        <member name="M:netDxf.BoundingRectangle.Union(netDxf.BoundingRectangle,netDxf.BoundingRectangle)">
            <summary>
            Obtains the union between two bounding rectangles.
            </summary>
            <param name="aabr1">A bounding rectangle.</param>
            <param name="aabr2">A bounding rectangle.</param>
            <returns>The resulting bounding rectangle.</returns>
        </member>
        <member name="M:netDxf.BoundingRectangle.Union(System.Collections.Generic.IEnumerable{netDxf.BoundingRectangle})">
            <summary>
            Obtains the union of a bounding rectangles list .
            </summary>
            <param name="rectangles">A list of bounding rectangles.</param>
            <returns>The resulting bounding rectangle.</returns>
        </member>
        <member name="T:netDxf.ClippingBoundary">
            <summary>
            Represent a clipping boundary to display specific portions of
            an <see cref="T:netDxf.Entities.Image">Image</see>,
            an <see cref="T:netDxf.Entities.Underlay">Underlay</see>,
            or a <see cref="T:netDxf.Entities.Wipeout">Wipeout</see>.
            </summary>
        </member>
        <member name="M:netDxf.ClippingBoundary.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>ClippingBoundary</c> class as a rectangular clipping boundary.
            </summary>
            <param name="x">Rectangle x-coordinate of the first corner.</param>
            <param name="y">Rectangle y-coordinate of the first corner.</param>
            <param name="width">Rectangle width.</param>
            <param name="height">Rectangle height.</param>
        </member>
        <member name="M:netDxf.ClippingBoundary.#ctor(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>ClippingBoundary</c> class as a rectangular clipping boundary from two opposite corners.
            </summary>
            <param name="firstCorner">Rectangle first corner.</param>
            <param name="secondCorner">Rectangle second corner.</param>
        </member>
        <member name="M:netDxf.ClippingBoundary.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2})">
            <summary>
            Initializes a new instance of the <c>ClippingBoundary</c> class as a polygonal clipping boundary.
            </summary>
            <param name="vertexes">The list of vertexes of the polygonal boundary.</param>
        </member>
        <member name="P:netDxf.ClippingBoundary.Type">
            <summary>
            Gets the clipping boundary type, rectangular or polygonal.
            </summary>
        </member>
        <member name="P:netDxf.ClippingBoundary.Vertexes">
            <summary>
            Gets the list of vertexes of the polygonal boundary, or the opposite vertexes if the boundary is rectangular.
            </summary>
        </member>
        <member name="M:netDxf.ClippingBoundary.Clone">
            <summary>
            Creates a new ClippingBoundary that is a copy of the current instance.
            </summary>
            <returns>A new ClippingBoundary that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.ClippingBoundaryType">
            <summary>
            Image clipping boundary type.
            </summary>
        </member>
        <member name="F:netDxf.ClippingBoundaryType.Rectangular">
            <summary>
            Rectangular.
            </summary>
        </member>
        <member name="F:netDxf.ClippingBoundaryType.Polygonal">
            <summary>
            Polygonal.
            </summary>
        </member>
        <member name="T:netDxf.Collections.ApplicationRegistries">
            <summary>
            Represents a collection of application registries.
            </summary>
        </member>
        <member name="M:netDxf.Collections.ApplicationRegistries.Add(netDxf.Tables.ApplicationRegistry,System.Boolean)">
            <summary>
            Adds an application registry to the list.
            </summary>
            <param name="appReg"><see cref="T:netDxf.Tables.ApplicationRegistry">ApplicationRegistry</see> to add to the list.</param>
            <param name="assignHandle">Checks if the appReg parameter requires a handle.</param>
            <returns>
            If a an application registry already exists with the same name as the instance that is being added the method returns the existing application registry,
            if not it will return the new application registry.
            </returns>
        </member>
        <member name="M:netDxf.Collections.ApplicationRegistries.Remove(System.String)">
            <summary>
            Removes an application registry.
            </summary>
            <param name="name"><see cref="T:netDxf.Tables.ApplicationRegistry">ApplicationRegistry</see> name to remove from the document.</param>
            <returns>True if the application registry has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved application registries or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.ApplicationRegistries.Remove(netDxf.Tables.ApplicationRegistry)">
            <summary>
            Removes an application registry.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.ApplicationRegistry">ApplicationRegistry</see> to remove from the document.</param>
            <returns>True if the application registry has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved application registries or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.AttributeCollection">
            <summary>
            Represents a collection of <see cref="T:netDxf.Entities.Attribute">Attributes</see>.
            </summary>
        </member>
        <member name="M:netDxf.Collections.AttributeCollection.#ctor">
            <summary>
            Initializes a new instance of <c>AttributeCollection</c> with the specified collection of attributes.
            </summary>
        </member>
        <member name="M:netDxf.Collections.AttributeCollection.#ctor(System.Collections.Generic.IEnumerable{netDxf.Entities.Attribute})">
            <summary>
            Initializes a new instance of <c>AttributeCollection</c> with the specified collection of attributes.
            </summary>
            <param name="attributes">The collection of attributes from which build the dictionary.</param>
        </member>
        <member name="P:netDxf.Collections.AttributeCollection.Count">
            <summary>
            Gets the number of object contained in the collection.
            </summary>
        </member>
        <member name="P:netDxf.Collections.AttributeCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:netDxf.Collections.AttributeCollection.Item(System.Int32)">
            <summary>
            Gets the attribute at the specified index.
            </summary>
            <param name="index"> The zero-based index of the element to get or set.</param>
            <returns>The object at the specified index.</returns>
        </member>
        <member name="M:netDxf.Collections.AttributeCollection.Contains(netDxf.Entities.Attribute)">
            <summary>
            Determines whether an attribute is in the collection.
            </summary>
            <param name="item">The attribute to locate in the collection.</param>
            <returns>True if attribute is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.AttributeCollection.CopyTo(netDxf.Entities.Attribute[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array"> The one-dimensional System.Array that is the destination of the elements copied from the collection. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:netDxf.Collections.AttributeCollection.IndexOf(netDxf.Entities.Attribute)">
            <summary>
            Searches for the specified attribute and returns the zero-based index of the first occurrence within the entire collection.
            </summary>
            <param name="item">The attribute to locate in the collection.</param>
            <returns>The zero-based index of the first occurrence of item within the entire collection, if found; otherwise, ‚Äì1.</returns>
        </member>
        <member name="M:netDxf.Collections.AttributeCollection.AttributeWithTag(System.String)">
            <summary>
            Searches for the first occurrence attribute with the specified attribute definition tag within the entire collection
            </summary>
            <param name="tag"></param>
            <returns>The first occurrence of the attribute with the specified attribute definition tag within the entire collection.</returns>
        </member>
        <member name="M:netDxf.Collections.AttributeCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:netDxf.Collections.AttributeDefinitionDictionary">
            <summary>
            Represents a dictionary of <see cref="T:netDxf.Entities.AttributeDefinition">AttributeDefinitions</see>.
            </summary>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionary.#ctor">
            <summary>
            Initializes a new instance of <c>AttributeDefinitionDictionary</c>.
            </summary>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionary.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <c>AttributeDefinitionDictionary</c> and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of items the collection can initially store.</param>
        </member>
        <member name="P:netDxf.Collections.AttributeDefinitionDictionary.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> with the specified tag.
            </summary>
            <param name="tag">The tag of the attribute definition to get or set.</param>
            <returns>The <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> with the specified tag.</returns>
        </member>
        <member name="P:netDxf.Collections.AttributeDefinitionDictionary.Tags">
            <summary>
            Gets an ICollection containing the tags of the current dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.AttributeDefinitionDictionary.Values">
            <summary>
            Gets an ICollection containing the <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> list of the current dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.AttributeDefinitionDictionary.Count">
            <summary>
            Gets the number of <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> contained in the current dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.AttributeDefinitionDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the actual dictionary is read-only.
            </summary>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionary.Add(netDxf.Entities.AttributeDefinition)">
            <summary>
            Adds an <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> to the dictionary.
            </summary>
            <param name="item">The <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> to add.</param>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionary.AddRange(System.Collections.Generic.IEnumerable{netDxf.Entities.AttributeDefinition})">
            <summary>
            Adds an <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> list to the dictionary.
            </summary>
            <param name="collection">The collection whose elements should be added.</param>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionary.Remove(System.String)">
            <summary>
            Removes an <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> with the specified tag from the current dictionary.
            </summary>
            <param name="tag">The tag of the <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> to remove.</param>
            <returns>True if the <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionary.Clear">
            <summary>
            Removes all <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> from the current dictionary.
            </summary>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionary.ContainsTag(System.String)">
            <summary>
            Determines whether current dictionary contains an <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> with the specified tag.
            </summary>
            <param name="tag">The tag to locate in the current dictionary.</param>
            <returns>True if the current dictionary contains an <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> with the tag; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionary.ContainsValue(netDxf.Entities.AttributeDefinition)">
            <summary>
            Determines whether current dictionary contains a specified <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see>.
            </summary>
            <param name="value">The <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> to locate in the current dictionary.</param>
            <returns>True if the current dictionary contains the <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see>; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionary.TryGetValue(System.String,netDxf.Entities.AttributeDefinition@)">
            <summary>
            Gets the <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> associated with the specified tag.
            </summary>
            <param name="tag">The tag whose value to get.</param>
            <param name="value">When this method returns, the <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> associated with the specified tag,
            if the tag is found; otherwise, null. This parameter is passed uninitialized.</param>
            <returns>True if the current dictionary contains an <see cref="T:netDxf.Entities.AttributeDefinition">attribute definition</see> with the specified tag; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the dictionary.
            </summary>
            <returns>An enumerator that can be used to iterate through the dictionary.</returns>
        </member>
        <member name="T:netDxf.Collections.AttributeDefinitionDictionaryEventArgs">
            <summary>
            Represents the arguments thrown by the <see cref="T:netDxf.Collections.AttributeDefinitionDictionary">AttributeDefinitionDictionary</see> events.
            </summary>
        </member>
        <member name="M:netDxf.Collections.AttributeDefinitionDictionaryEventArgs.#ctor(netDxf.Entities.AttributeDefinition)">
            <summary>
            Initializes a new instance of <c>AttributeDefinitionDictionaryEventArgs</c>.
            </summary>
            <param name="item">Item that is being added or removed from the dictionary.</param>
        </member>
        <member name="P:netDxf.Collections.AttributeDefinitionDictionaryEventArgs.Item">
            <summary>
            Get the item that is being added to or removed from the dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.AttributeDefinitionDictionaryEventArgs.Cancel">
            <summary>
            Gets or sets if the operation must be canceled.
            </summary>
            <remarks>This property is used by the BeforeAddItem and BeforeRemoveItem events to cancel the add or remove operations.</remarks>
        </member>
        <member name="T:netDxf.Collections.BlockRecords">
            <summary>
            Represents a collection of blocks.
            </summary>
        </member>
        <member name="M:netDxf.Collections.BlockRecords.Add(netDxf.Blocks.Block,System.Boolean)">
            <summary>
            Adds a block to the list.
            </summary>
            <param name="block"><see cref="T:netDxf.Blocks.Block">Block</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the block parameter.</param>
            <returns>
            If a block already exists with the same name as the instance that is being added the method returns the existing block,
            if not it will return the new block.
            </returns>
        </member>
        <member name="M:netDxf.Collections.BlockRecords.Remove(System.String)">
            <summary>
            Removes a block.
            </summary>
            <param name="name"><see cref="T:netDxf.Blocks.Block">Block</see> name to remove from the document.</param>
            <returns>True if the block has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved blocks or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.BlockRecords.Remove(netDxf.Blocks.Block)">
            <summary>
            Removes a block.
            </summary>
            <param name="item"><see cref="T:netDxf.Blocks.Block">Block</see> to remove from the document.</param>
            <returns>True if the block has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved blocks or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.DimensionStyleOverrideDictionary">
            <summary>
            Represents a dictionary of <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverrides</see>.
            </summary>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.#ctor">
            <summary>
            Initializes a new instance of <c>DimensionStyleOverrideDictionary</c>.
            </summary>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <c>DimensionStyleOverrideDictionary</c> and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of items the collection can initially store.</param>
        </member>
        <member name="P:netDxf.Collections.DimensionStyleOverrideDictionary.Item(netDxf.Tables.DimensionStyleOverrideType)">
            <summary>
            Gets or sets the <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> with the specified type.
            </summary>
            <param name="type">The type of the DimensionStyleOverride to get or set.</param>
            <returns>The <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> with the specified type.</returns>
        </member>
        <member name="P:netDxf.Collections.DimensionStyleOverrideDictionary.Types">
            <summary>
            Gets an ICollection containing the types of the current dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DimensionStyleOverrideDictionary.Values">
            <summary>
            Gets an ICollection containing the <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> list of the current dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DimensionStyleOverrideDictionary.Count">
            <summary>
            Gets the number of <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> contained in the current dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DimensionStyleOverrideDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the actual dictionary is read-only.
            </summary>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.Add(netDxf.Tables.DimensionStyleOverrideType,System.Object)">
            <summary>
            Adds a <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> to the dictionary from its type and value.
            </summary>
            <param name="type">Dimension style override type.</param>
            <param name="value">Dimension style override value.</param>
            <remarks>A new DimensionStyleOverride will be created from the specified arguments.</remarks>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.Add(netDxf.Tables.DimensionStyleOverride)">
            <summary>
            Adds an <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> to the dictionary.
            </summary>
            <param name="item">The <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> to add.</param>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.AddRange(System.Collections.Generic.IEnumerable{netDxf.Tables.DimensionStyleOverride})">
            <summary>
            Adds an <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> list to the dictionary.
            </summary>
            <param name="collection">The collection whose elements should be added.</param>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.Remove(netDxf.Tables.DimensionStyleOverrideType)">
            <summary>
            Removes an <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> of the specified type from the current dictionary.
            </summary>
            <param name="type">The type of the <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> to remove.</param>
            <returns>True if the <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.Clear">
            <summary>
            Removes all <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> from the current dictionary.
            </summary>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.ContainsType(netDxf.Tables.DimensionStyleOverrideType)">
            <summary>
            Determines whether current dictionary contains an <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> of the specified type.
            </summary>
            <param name="type">The type to locate in the current dictionary.</param>
            <returns>True if the current dictionary contains an <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> of the type; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.ContainsValue(netDxf.Tables.DimensionStyleOverride)">
            <summary>
            Determines whether current dictionary contains a specified <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see>.
            </summary>
            <param name="value">The <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> to locate in the current dictionary.</param>
            <returns>True if the current dictionary contains the <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see>; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.TryGetValue(netDxf.Tables.DimensionStyleOverrideType,netDxf.Tables.DimensionStyleOverride@)">
            <summary>
            Gets the <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> associated of the specified type.
            </summary>
            <param name="type">The type whose value to get.</param>
            <param name="value">When this method returns, the <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> associated of the specified type,
            if the tag is found; otherwise, null. This parameter is passed uninitialized.</param>
            <returns>True if the current dictionary contains an <see cref="T:netDxf.Tables.DimensionStyleOverride">DimensionStyleOverride</see> of the specified type; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the dictionary.
            </summary>
            <returns>An enumerator that can be used to iterate through the dictionary.</returns>
        </member>
        <member name="T:netDxf.Collections.DimensionStyleOverrideDictionaryEventArgs">
            <summary>
            Represents the arguments thrown by the <see cref="T:netDxf.Collections.DimensionStyleOverrideDictionary">DimensionStyleOverrideDictionary</see> events.
            </summary>
        </member>
        <member name="M:netDxf.Collections.DimensionStyleOverrideDictionaryEventArgs.#ctor(netDxf.Tables.DimensionStyleOverride)">
            <summary>
            Initializes a new instance of <c>DimensionStyleOverrideDictionaryEventArgs</c>.
            </summary>
            <param name="item">Item that is being added or removed from the dictionary.</param>
        </member>
        <member name="P:netDxf.Collections.DimensionStyleOverrideDictionaryEventArgs.Item">
            <summary>
            Get the item that is being added to or removed from the dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.DimensionStyleOverrideDictionaryEventArgs.Cancel">
            <summary>
            Gets or sets if the operation must be canceled.
            </summary>
            <remarks>This property is used by the BeforeAddItem and BeforeRemoveItem events to cancel the add or remove operations.</remarks>
        </member>
        <member name="T:netDxf.Collections.DimensionStyles">
            <summary>
            Represents a collection of dimension styles.
            </summary>
        </member>
        <member name="M:netDxf.Collections.DimensionStyles.Add(netDxf.Tables.DimensionStyle,System.Boolean)">
            <summary>
            Adds a dimension style to the list.
            </summary>
            <param name="style"><see cref="T:netDxf.Tables.DimensionStyle">DimensionStyle</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the dimension style parameter.</param>
            <returns>
            If a dimension style already exists with the same name as the instance that is being added the method returns the existing dimension style,
            if not it will return the new dimension style.
            </returns>
        </member>
        <member name="M:netDxf.Collections.DimensionStyles.Remove(System.String)">
            <summary>
            Removes a dimension style.
            </summary>
            <param name="name"><see cref="T:netDxf.Tables.DimensionStyle">DimensionStyle</see> name to remove from the document.</param>
            <returns>True if the dimension style has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved dimension styles or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.DimensionStyles.Remove(netDxf.Tables.DimensionStyle)">
            <summary>
            Removes a dimension style.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.DimensionStyle">DimensionStyle</see> to remove from the document.</param>
            <returns>True if the dimension style has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved dimension styles or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.EntityCollection">
            <summary>
            Represent a collection of <see cref="T:netDxf.Entities.EntityObject">entities</see> that fire events when it is modified. 
            </summary>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.#ctor">
            <summary>
            Initializes a new instance of <c>EntityCollection</c>.
            </summary>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <c>EntityCollection</c> and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of items the collection can initially store.</param>
        </member>
        <member name="P:netDxf.Collections.EntityCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:netDxf.Entities.EntityObject">entity</see> at the specified index.
            </summary>
            <param name="index"> The zero-based index of the element to get or set.</param>
            <returns>The <see cref="T:netDxf.Entities.EntityObject">entity</see> at the specified index.</returns>
        </member>
        <member name="P:netDxf.Collections.EntityCollection.Count">
            <summary>
            Gets the number of <see cref="T:netDxf.Entities.EntityObject">entities</see> contained in the collection.
            </summary>
        </member>
        <member name="P:netDxf.Collections.EntityCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.Add(netDxf.Entities.EntityObject)">
            <summary>
            Adds an <see cref="T:netDxf.Entities.EntityObject">entity</see> to the collection.
            </summary>
            <param name="item"> The <see cref="T:netDxf.Entities.EntityObject">entity</see> to add to the collection.</param>
            <returns>True if the <see cref="T:netDxf.Entities.EntityObject">entity</see> has been added to the collection, or false otherwise.</returns>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.AddRange(System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject})">
            <summary>
            Adds an <see cref="T:netDxf.Entities.EntityObject">entity</see> list to the end of the collection.
            </summary>
            <param name="collection">The collection whose elements should be added.</param>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.Insert(System.Int32,netDxf.Entities.EntityObject)">
            <summary>
            Inserts an <see cref="T:netDxf.Entities.EntityObject">entity</see> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The <see cref="T:netDxf.Entities.EntityObject">entity</see> to insert. The value can not be null.</param>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.Remove(netDxf.Entities.EntityObject)">
            <summary>
            Removes the first occurrence of a specific <see cref="T:netDxf.Entities.EntityObject">entity</see> from the collection
            </summary>
            <param name="item">The <see cref="T:netDxf.Entities.EntityObject">entity</see> to remove from the collection.</param>
            <returns>True if <see cref="T:netDxf.Entities.EntityObject">entity</see> is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.Remove(System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject})">
            <summary>
            Removes the first occurrence of a specific object from the collection
            </summary>
            <param name="items">The list of objects to remove from the collection.</param>
            <returns>True if object is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:netDxf.Entities.EntityObject">entity</see> at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:netDxf.Entities.EntityObject">entity</see> to remove.</param>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.Clear">
            <summary>
            Removes all <see cref="T:netDxf.Entities.EntityObject">entities</see> from the collection.
            </summary>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.IndexOf(netDxf.Entities.EntityObject)">
            <summary>
            Searches for the specified <see cref="T:netDxf.Entities.EntityObject">entity</see> and returns the zero-based index of the first occurrence within the entire collection.
            </summary>
            <param name="item">The <see cref="T:netDxf.Entities.EntityObject">entity</see> to locate in the collection.</param>
            <returns>The zero-based index of the first occurrence of item within the entire collection, if found; otherwise, ‚Äì1.</returns>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.Contains(netDxf.Entities.EntityObject)">
            <summary>
            Determines whether an <see cref="T:netDxf.Entities.EntityObject">entity</see> is in the collection.
            </summary>
            <param name="item">The <see cref="T:netDxf.Entities.EntityObject">entity</see> to locate in the collection.</param>
            <returns>True if item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.CopyTo(netDxf.Entities.EntityObject[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array"> The one-dimensional System.Array that is the destination of the elements copied from the collection. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:netDxf.Collections.EntityCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:netDxf.Collections.EntityCollectionEventArgs">
            <summary>
            Represents the arguments thrown by the <c>EntityCollection</c> events.
            </summary>
        </member>
        <member name="M:netDxf.Collections.EntityCollectionEventArgs.#ctor(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of <c>EntityCollectionEventArgs</c>.
            </summary>
            <param name="item">Item that is being added or removed from the collection.</param>
        </member>
        <member name="P:netDxf.Collections.EntityCollectionEventArgs.Item">
            <summary>
            Get the item that is being added or removed from the collection.
            </summary>
        </member>
        <member name="P:netDxf.Collections.EntityCollectionEventArgs.Cancel">
            <summary>
            Gets or sets if the operation must be canceled.
            </summary>
            <remarks>This property is used by the OnBeforeAdd and OnBeforeRemove events to cancel the add or remove operation.</remarks>
        </member>
        <member name="T:netDxf.Collections.Groups">
            <summary>
            Represents a collection of groups.
            </summary>
        </member>
        <member name="M:netDxf.Collections.Groups.Add(netDxf.Objects.Group,System.Boolean)">
            <summary>
            Adds a group to the list.
            </summary>
            <param name="group"><see cref="T:netDxf.Objects.Group">Group</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the group parameter.</param>
            <returns>
            If a group already exists with the same name as the instance that is being added the method returns the existing group,
            if not it will return the new group.<br />
            The methods will automatically add the grouped entities to the document, if they have not been added previously.
            </returns>
        </member>
        <member name="M:netDxf.Collections.Groups.Remove(System.String)">
            <summary>
            Deletes a group.
            </summary>
            <param name="name"><see cref="T:netDxf.Objects.Group">Group</see> name to remove from the document.</param>
            <returns>True if the group has been successfully removed, or false otherwise.</returns>
            <remarks>Removing a group only deletes it from the collection, the entities that once belonged to the group are not deleted.</remarks>
        </member>
        <member name="M:netDxf.Collections.Groups.Remove(netDxf.Objects.Group)">
            <summary>
            Deletes a group.
            </summary>
            <param name="item"><see cref="T:netDxf.Objects.Group">Group</see> to remove from the document.</param>
            <returns>True if the group has been successfully removed, or false otherwise.</returns>
            <remarks>Removing a group only deletes it from the collection, the entities that once belonged to the group are not deleted.</remarks>
        </member>
        <member name="T:netDxf.Collections.ImageDefinitions">
            <summary>
            Represents a collection of image definitions.
            </summary>
        </member>
        <member name="M:netDxf.Collections.ImageDefinitions.Add(netDxf.Objects.ImageDefinition,System.Boolean)">
            <summary>
            Adds an image definition to the list.
            </summary>
            <param name="imageDefinition"><see cref="T:netDxf.Objects.ImageDefinition">ImageDefinition</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the image definition parameter.</param>
            <returns>
            If an image definition already exists with the same name as the instance that is being added the method returns the existing image definition,
            if not it will return the new image definition.
            </returns>
        </member>
        <member name="M:netDxf.Collections.ImageDefinitions.Remove(System.String)">
            <summary>
            Removes an image definition.
            </summary>
            <param name="name"><see cref="T:netDxf.Objects.ImageDefinition">ImageDefinition</see> name to remove from the document.</param>
            <returns>True if the image definition has been successfully removed, or false otherwise.</returns>
            <remarks>Any image definition referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.ImageDefinitions.Remove(netDxf.Objects.ImageDefinition)">
            <summary>
            Removes an image definition.
            </summary>
            <param name="item"><see cref="T:netDxf.Objects.ImageDefinition">ImageDefinition</see> to remove from the document.</param>
            <returns>True if the image definition has been successfully removed, or false otherwise.</returns>
            <remarks>Any image definition referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.Layers">
            <summary>
            Represents a collection of layers.
            </summary>
        </member>
        <member name="M:netDxf.Collections.Layers.Add(netDxf.Tables.Layer,System.Boolean)">
            <summary>
            Adds a layer to the list.
            </summary>
            <param name="layer"><see cref="T:netDxf.Tables.Layer">Layer</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the layer parameter.</param>
            <returns>
            If a layer already exists with the same name as the instance that is being added the method returns the existing layer,
            if not it will return the new layer.
            </returns>
        </member>
        <member name="M:netDxf.Collections.Layers.Remove(System.String)">
            <summary>
            Removes a layer.
            </summary>
            <param name="name"><see cref="T:netDxf.Tables.Layer">Layer</see> name to remove from the document.</param>
            <returns>True if the layer has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved layers or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.Layers.Remove(netDxf.Tables.Layer)">
            <summary>
            Removes a layer.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.Layer">Layer</see> to remove from the document.</param>
            <returns>True if the layer has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved layers or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.Layouts">
            <summary>
            Represents a collection of layouts.
            </summary>
            <remarks>
            AutoCad limits the number of layouts to 256, but at the same time it allows to import DXF files with more than that,
            for this reason the max capacity has been set to short.MaxValue.
            The maximum number of layouts is also limited by the number of blocks, due to that for each layout a block record must exist in the blocks collection.
            </remarks>
        </member>
        <member name="M:netDxf.Collections.Layouts.GetReferences(System.String)">
            <summary>
            Gets the <see cref="T:netDxf.DxfObject">dxf objects</see> referenced by a T.
            </summary>
            <param name="name">Table object name.</param>
            <returns>The list of DxfObjects that reference the specified table object.</returns>
            <remarks>
            If there is no table object with the specified name in the list the method an empty list.<br />
            The Groups collection method GetReferences will always return an empty list since there are no DxfObjects that references them.
            </remarks>
        </member>
        <member name="M:netDxf.Collections.Layouts.GetReferences(netDxf.Objects.Layout)">
            <summary>
            Gets the <see cref="T:netDxf.DxfObject">dxf objects</see> referenced by a T.
            </summary>
            <param name="item">Table object.</param>
            <returns>The list of DxfObjects that reference the specified table object.</returns>
            <remarks>
            If there is no table object with the specified name in the list the method an empty list.<br />
            The Groups collection method GetReferences will always return an empty list since there are no DxfObjects that references them.
            </remarks>
        </member>
        <member name="M:netDxf.Collections.Layouts.Add(netDxf.Objects.Layout,System.Boolean)">
            <summary>
            Adds a layout to the list.
            </summary>
            <param name="layout"><see cref="T:netDxf.Objects.Layout">Layout</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the layout parameter.</param>
            <returns>
            If a layout already exists with the same name as the instance that is being added the method returns the existing layout.
            </returns>
        </member>
        <member name="M:netDxf.Collections.Layouts.Remove(System.String)">
            <summary>
            Deletes a layout and removes the layout entities from the document.
            </summary>
            <param name="name"><see cref="T:netDxf.Objects.Layout">Layout</see> name to remove from the document.</param>
            <returns>True if the layout has been successfully removed, or false otherwise.</returns>
            <remarks>
            The ModelSpace layout cannot be removed. If all PaperSpace layouts have been removed a default PaperSpace will be created since it is required by the DXF implementation.<br />
            When a Layout is deleted all entities that has been added to it will also be removed.<br />
            Removing a Layout will rebuild the PaperSpace block names, to follow the naming rule: Paper_Space, Paper_Space0, Paper_Space1, ...
            </remarks>
        </member>
        <member name="M:netDxf.Collections.Layouts.Remove(netDxf.Objects.Layout)">
            <summary>
            Deletes a layout and removes the layout entities from the document.
            </summary>
            <param name="item"><see cref="T:netDxf.Objects.Layout">Layout</see> to remove from the document.</param>
            <returns>True if the layout has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved layouts or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.Linetypes">
            <summary>
            Represents a collection of line types.
            </summary>
        </member>
        <member name="M:netDxf.Collections.Linetypes.NamesFromFile(System.String)">
            <summary>
            Gets the list of linetype names defined in a LIN file.
            </summary>
            <param name="file">Linetype definitions file.</param>
            <returns>List of linetype names contained in the specified LIN file.</returns>
            <remarks>
            If the file is not found in the specified folder, it will try to find them in the list of supported folders defined in the DxfDocument.<br />
            </remarks>
        </member>
        <member name="M:netDxf.Collections.Linetypes.AddFromFile(System.String,System.Boolean)">
            <summary>
            Adds all linetypes to the list from the definition in a LIN file.
            </summary>
            <param name="file">File where the definition is located.</param>
            <param name="reload">Specifies if the linetype definitions of the file will overwrite the existing ones, in case another with the same name exists in the file.</param>
            <remarks>
            If the file is not found in the specified folder, it will try to find them in the list of supported folders defined in the DxfDocument.<br />
            Any text style or shape present in the linetype definition must be previously defined in the DxfDocument, if not an exception will be generated.
            </remarks>
        </member>
        <member name="M:netDxf.Collections.Linetypes.AddFromFile(System.String,System.String,System.Boolean)">
            <summary>
            Adds a linetype to the list from the definition in a LIN file.
            </summary>
            <param name="file">File where the definition is located.</param>
            <param name="linetypeName">Name of the line type definition to read (ignore case).</param>
            <param name="reload">Specifies if the linetype definition of the file will overwrite the existing one, in case another with the same name exists in the file.</param>
            <returns>
            True if the linetype has been added from the linetype definitions LIN file; false otherwise.
            It will return false if the linetype is present in the file and the reload argument is false.
            </returns>
            <remarks>
            If the file is not found in the specified folder, it will try to find them in the list of supported folders defined in the DxfDocument.<br />
            Any text style or shape present in the linetype definition must be previously defined in the DxfDocument, if not an exception will be generated.
            </remarks>
        </member>
        <member name="M:netDxf.Collections.Linetypes.Save(System.String,System.Boolean)">
            <summary>
            Saves all linetype definitions to a LIN file.
            </summary>
            <param name="file">File where the linetype definitions will be saved.</param>
            <param name="overwrite">Defines if the file will be overwritten in case exits another one.</param>
            <remarks>Only non reserved linetypes will be saved, therefore Continuous, ByLayer, and ByBlock will be excluded.</remarks>
        </member>
        <member name="M:netDxf.Collections.Linetypes.Add(netDxf.Tables.Linetype,System.Boolean)">
            <summary>
            Adds a line type to the list.
            </summary>
            <param name="linetype"><see cref="T:netDxf.Tables.Linetype">Linetype</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the line type parameter.</param>
            <returns>
            If a line type already exists with the same name as the instance that is being added the method returns the existing line type,
            if not it will return the new line type.
            </returns>
        </member>
        <member name="M:netDxf.Collections.Linetypes.Remove(System.String)">
            <summary>
            Removes a line type.
            </summary>
            <param name="name"><see cref="T:netDxf.Tables.Linetype">Linetype</see> name to remove from the document.</param>
            <returns>True if the line type has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved line types or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.Linetypes.Remove(netDxf.Tables.Linetype)">
            <summary>
            Removes a line type.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.Linetype">Linetype</see> to remove from the document.</param>
            <returns>True if the line type has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved line types or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.MLineStyles">
            <summary>
            Represents a collection of multiline styles.
            </summary>
        </member>
        <member name="M:netDxf.Collections.MLineStyles.Add(netDxf.Objects.MLineStyle,System.Boolean)">
            <summary>
            Adds a multiline style to the list.
            </summary>
            <param name="style"><see cref="T:netDxf.Objects.MLineStyle">MLineStyle</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the multiline style parameter.</param>
            <returns>
            If a multiline style already exists with the same name as the instance that is being added the method returns the existing multiline style,
            if not it will return the new multiline style.
            </returns>
        </member>
        <member name="M:netDxf.Collections.MLineStyles.Remove(System.String)">
            <summary>
            Removes a multiline style.
            </summary>
            <param name="name"><see cref="T:netDxf.Objects.MLineStyle">MLineStyle</see> name to remove from the document.</param>
            <returns>True if the multiline style has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved multiline styles or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.MLineStyles.Remove(netDxf.Objects.MLineStyle)">
            <summary>
            Removes a multiline style.
            </summary>
            <param name="item"><see cref="T:netDxf.Objects.MLineStyle">MLineStyle</see> to remove from the document.</param>
            <returns>True if the multiline style has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved multiline styles or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.ObservableCollection`1">
            <summary>
            Represent a collection of items that fire events when it is modified. 
            </summary>
            <typeparam name="T">Type of items.</typeparam>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.#ctor">
            <summary>
            Initializes a new instance of <c>ObservableCollection</c>.
            </summary>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <c>ObservableCollection</c> and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of items the collection can initially store.</param>
        </member>
        <member name="P:netDxf.Collections.ObservableCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the object at the specified index.
            </summary>
            <param name="index"> The zero-based index of the element to get or set.</param>
            <returns>The object at the specified index.</returns>
        </member>
        <member name="P:netDxf.Collections.ObservableCollection`1.Count">
            <summary>
            Gets the number of object contained in the collection.
            </summary>
        </member>
        <member name="P:netDxf.Collections.ObservableCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Reverse">
            <summary>
            Reverses the order of the elements in the entire list.
            </summary>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the entire System.Collections.Generic.List&lt;T&gt; using the specified System.Comparison&lt;T&gt;.
            </summary>
            <param name="comparision">The System.Comparison&lt;T&gt; to use when comparing elements.</param>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in System.Collections.Generic.List&lt;T&gt; using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">The System.Collections.Generic.IComparer&lt;T&gt; implementation to use when comparing elements, or null to use the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default.</param>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in System.Collections.Generic.List&lt;T&gt; using the specified comparer.
            </summary>
            <param name="comparer">The System.Collections.Generic.IComparer&lt;T&gt; implementation to use when comparing elements, or null to use the default comparer System.Collections.Generic.Comparer&lt;T&gt;.Default.</param>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Sort">
            <summary>
            Sorts the elements in the entire System.Collections.Generic.List&lt;T&gt; using the default comparer.
            </summary>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Add(`0)">
            <summary>
            Adds an object to the collection.
            </summary>
            <param name="item"> The object to add to the collection.</param>
            <returns>True if the object has been added to the collection, or false otherwise.</returns>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds an object list to the end of the collection.
            </summary>
            <param name="collection">The collection whose elements should be added.</param>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an object into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can not be null.</param>
            <returns>True if the object has been inserted to the collection; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the collection
            </summary>
            <param name="item">The object to remove from the collection.</param>
            <returns>True if object is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the first occurrence of a specific object from the collection
            </summary>
            <param name="items">The list of objects to remove from the collection.</param>
            <returns>True if object is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the object at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the object to remove.</param>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Clear">
            <summary>
            Removes all object from the collection.
            </summary>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire collection.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>The zero-based index of the first occurrence of item within the entire collection, if found; otherwise, ‚Äì1.</returns>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.Contains(`0)">
            <summary>
            Determines whether an object is in the collection.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>True if item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array"> The one-dimensional System.Array that is the destination of the elements copied from the collection. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:netDxf.Collections.ObservableCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:netDxf.Collections.ObservableCollectionEventArgs`1">
            <summary>
            Represents the arguments thrown by the <c>ObservableCollection</c> events.
            </summary>
            <typeparam name="T">Type of items.</typeparam>
        </member>
        <member name="M:netDxf.Collections.ObservableCollectionEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of <c>ObservableCollectionEventArgs</c>.
            </summary>
            <param name="item">Item that is being added or removed from the collection.</param>
        </member>
        <member name="P:netDxf.Collections.ObservableCollectionEventArgs`1.Item">
            <summary>
            Get the item that is being added or removed from the collection.
            </summary>
        </member>
        <member name="P:netDxf.Collections.ObservableCollectionEventArgs`1.Cancel">
            <summary>
            Gets or sets if the operation must be canceled.
            </summary>
            <remarks>This property is used by the OnBeforeAdd and OnBeforeRemove events to cancel the add or remove operation.</remarks>
        </member>
        <member name="T:netDxf.Collections.ObservableDictionaryEventArgs`2">
            <summary>
            Represents the arguments thrown by the <c>ObservableDictionaryEventArgs</c> events.
            </summary>
            <typeparam name="TKey">Type of items.</typeparam>
            <typeparam name="TValue">Type of items.</typeparam>
        </member>
        <member name="M:netDxf.Collections.ObservableDictionaryEventArgs`2.#ctor(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Initializes a new instance of <c>ObservableDictionaryEventArgs</c>.
            </summary>
            <param name="item">Item that is being added or removed from the dictionary.</param>
        </member>
        <member name="P:netDxf.Collections.ObservableDictionaryEventArgs`2.Item">
            <summary>
            Get the item that is being added to or removed from the dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.ObservableDictionaryEventArgs`2.Cancel">
            <summary>
            Gets or sets if the operation must be canceled.
            </summary>
            <remarks>This property is used by the OnBeforeAdd and OnBeforeRemove events to cancel the add or remove operations.</remarks>
        </member>
        <member name="T:netDxf.Collections.ShapeStyles">
            <summary>
            Represents a collection of shape styles.
            </summary>
        </member>
        <member name="M:netDxf.Collections.ShapeStyles.ContainsShapeName(System.String)">
            <summary>
            Looks for a shape style that contains a shape with the specified name.
            </summary>
            <param name="name">Shape name.</param>
            <returns>The shape style that contains a shape with the specified name, null otherwise.</returns>
        </member>
        <member name="M:netDxf.Collections.ShapeStyles.Add(netDxf.Tables.ShapeStyle,System.Boolean)">
            <summary>
            Adds a shape style to the list.
            </summary>
            <param name="style"><see cref="T:netDxf.Tables.ShapeStyle">ShapeStyle</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the shape style parameter.</param>
            <returns>
            If a shape style already exists with the same name as the instance that is being added the method returns the existing shape style,
            if not it will return the new text style.
            </returns>
        </member>
        <member name="M:netDxf.Collections.ShapeStyles.Remove(System.String)">
            <summary>
            Removes a shape style.
            </summary>
            <param name="name"><see cref="T:netDxf.Tables.ShapeStyle">ShapeStyle</see> name to remove from the document.</param>
            <returns>True if the shape style has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved shape styles or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.ShapeStyles.Remove(netDxf.Tables.ShapeStyle)">
            <summary>
            Removes a shape style.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.ShapeStyle">ShapeStyle</see> to remove from the document.</param>
            <returns>True if the shape style has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved shape styles or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.SupportFolders">
            <summary>
            Represents a list of support folders for the document.
            </summary>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.#ctor">
            <summary>
            Initializes a new instance of <c>SupportFolders</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <c>SupportFolders</c> class.
            </summary>
            <param name="capacity">Initial capacity of the list.</param>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of <c>SupportFolders</c> class.
            </summary>
            <param name="folders">The collection whose elements should be added to the list. The items in the collection cannot be null.</param>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.FindFile(System.String)">
            <summary>
            Looks for a file in one of the support folders.
            </summary>
            <param name="file">File name to find in one of the support folders.</param>
            <returns>The path to the file found in one of the support folders. It includes both the path and the specified file name.</returns>
            <remarks>If the specified file already exists it return the same value, if neither it cannot be found in any of the support folders it will return an empty string.</remarks>
        </member>
        <member name="P:netDxf.Collections.SupportFolders.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:netDxf.Collections.SupportFolders.Count">
            <summary>
            Gets the number of elements contained in the list.
            </summary>
            <returns>The number of elements contained in the list.</returns>
        </member>
        <member name="P:netDxf.Collections.SupportFolders.IsReadOnly">
            <summary>
            Returns if the list is read only.
            </summary>
            <returns>Return always true.</returns>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the list.
            </summary>
            <returns>The enumerator for the list.</returns>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the list.
            </summary>
            <returns>The enumerator for the list.</returns>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.Add(System.String)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="item">Folder path to add to the list. The item cannot be null.</param>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the elements of the collection to the list.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the list. The items in the collection cannot be null.</param>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.Clear">
            <summary>
            Removes all elements from the list.
            </summary>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.Contains(System.String)">
            <summary>
            Determines whether an element is in the list.
            </summary>
            <param name="item">The object to locate in the list. The value cannot be null.</param>
            <returns>True if the item is found in the list; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.CopyTo(System.String[],System.Int32)">
            <summary>
            Copies the entire list to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from list. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.Remove(System.String)">
            <summary>
            Removes the first occurrence of a specific object from the list.
            </summary>
            <param name="item">The object to remove from the list. The value cannot be null.</param>
            <returns>True if the item is successfully removed; otherwise, false. This method also returns false the item was not found in the list.</returns>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.IndexOf(System.String)">
            <summary>
            Determines the index of a specific item in the list.
            </summary>
            <param name="item">The object to locate in the list.</param>
            <returns>The index of <paramref name="item"/> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.Insert(System.Int32,System.String)">
            <summary>
            Inserts an item to the list at the specified index.
            </summary>
            <param name="index">The zero-based index at which the item should be inserted.</param>
            <param name="item">The object to insert into the list.</param>
        </member>
        <member name="M:netDxf.Collections.SupportFolders.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index from the list.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="T:netDxf.Collections.TableObjects`1">
            <summary>
            Represents a list of table objects
            </summary>
            <typeparam name="T"><see cref="T:netDxf.Tables.TableObject">TableObject</see>.</typeparam>
        </member>
        <member name="P:netDxf.Collections.TableObjects`1.Item(System.String)">
            <summary>
            Gets a table object from the list by name.
            </summary>
            <param name="name">Table object name.</param>
            <returns>The table object with the specified name.</returns>
            <remarks>Table object names are case insensitive.</remarks>
        </member>
        <member name="P:netDxf.Collections.TableObjects`1.Items">
            <summary>
            Gets the table object list.
            </summary>
        </member>
        <member name="P:netDxf.Collections.TableObjects`1.Names">
            <summary>
            Gets the ObjectTable names.
            </summary>
        </member>
        <member name="P:netDxf.Collections.TableObjects`1.Count">
            <summary>
            Gets the number of table objects.
            </summary>
        </member>
        <member name="P:netDxf.Collections.TableObjects`1.MaxCapacity">
            <summary>
            Gets the maximum number of objects the collection can hold.
            </summary>
            <remarks>
            This is an approximate value, the actual exact value is unknown. In any case is not recommended to get even close to this number for any practical use.
            </remarks>
        </member>
        <member name="P:netDxf.Collections.TableObjects`1.Owner">
            <summary>
            Gets the owner of the actual DXF object.
            </summary>
        </member>
        <member name="P:netDxf.Collections.TableObjects`1.References">
            <summary>
            Gets the <see cref="T:netDxf.DxfObject">dxf objects</see> referenced by a T.
            </summary>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.GetReferences(System.String)">
            <summary>
            Gets the <see cref="T:netDxf.DxfObject">dxf objects</see> referenced by a T.
            </summary>
            <param name="name">Table object name.</param>
            <returns>The list of DxfObjects that reference the specified table object.</returns>
            <remarks>
            If there is no table object with the specified name in the list the method an empty list.<br />
            The Groups collection method GetReferences will always return an empty list since there are no DxfObjects that references them.
            </remarks>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.GetReferences(`0)">
            <summary>
            Gets the <see cref="T:netDxf.DxfObject">dxf objects</see> referenced by a T.
            </summary>
            <param name="item">Table object.</param>
            <returns>The list of DxfObjects that reference the specified table object.</returns>
            <remarks>
            If there is no table object with the specified name in the list the method an empty list.<br />
            The Groups collection method GetReferences will always return an empty list since there are no DxfObjects that references them.
            </remarks>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.Contains(System.String)">
            <summary>
            Checks if a table object already exists in the list. 
            </summary>
            <param name="name">Table object name.</param>
            <returns>True is a table object exists with the specified name, false otherwise.</returns>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.Contains(`0)">
            <summary>
            Checks if a table object already exists in the list. 
            </summary>
            <param name="item">Table object.</param>
            <returns>True is a table object exists, false otherwise.</returns>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.TryGetValue(System.String,`0@)">
            <summary>
            Gets the table object associated with the specified name.
            </summary>
            <param name="name"> The name of the table object to get.</param>
            <param name="item">When this method returns, contains the table object associated with the specified name, if the key is found;
            otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>True if the table contains an element with the specified name; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.Add(`0)">
            <summary>
            Adds a table object to the list.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.TableObject">Table object</see> to add to the list.</param>
            <returns>
            If a table object already exists with the same name as the instance that is being added the method returns the existing table object,
            if not it will return the new table object.
            </returns>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.Remove(System.String)">
            <summary>
            Removes a table object.
            </summary>
            <param name="name">Table object name to remove from the document.</param>
            <returns>True is the table object has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved table objects or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.Remove(`0)">
            <summary>
            Removes a table object.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.TableObject">Table object</see> to remove from the document.</param>
            <returns>True is the table object has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved table objects or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.Clear">
            <summary>
            Removes all table objects that are not reserved and have no references.
            </summary>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the table object collection.
            </summary>
            <returns>An enumerator for the table object collection.</returns>
        </member>
        <member name="M:netDxf.Collections.TableObjects`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the table object collection.
            </summary>
            <returns>An enumerator for the table object collection.</returns>
        </member>
        <member name="T:netDxf.Collections.TextStyles">
            <summary>
            Represents a collection of text styles.
            </summary>
        </member>
        <member name="M:netDxf.Collections.TextStyles.Add(netDxf.Tables.TextStyle,System.Boolean)">
            <summary>
            Adds a text style to the list.
            </summary>
            <param name="style"><see cref="T:netDxf.Tables.TextStyle">TextStyle</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the text style parameter.</param>
            <returns>
            If a text style already exists with the same name as the instance that is being added the method returns the existing text style,
            if not it will return the new text style.
            </returns>
        </member>
        <member name="M:netDxf.Collections.TextStyles.Remove(System.String)">
            <summary>
            Removes a text style.
            </summary>
            <param name="name"><see cref="T:netDxf.Tables.TextStyle">TextStyle</see> name to remove from the document.</param>
            <returns>True if the text style has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved text styles or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.TextStyles.Remove(netDxf.Tables.TextStyle)">
            <summary>
            Removes a text style.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.TextStyle">TextStyle</see> to remove from the document.</param>
            <returns>True if the text style has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved text styles or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.UCSs">
            <summary>
            Represents a collection of user coordinate systems.
            </summary>
            <remarks>The UCSs collection method GetReferences will always return an empty list since there are no DxfObjects that references them.</remarks>
        </member>
        <member name="M:netDxf.Collections.UCSs.Add(netDxf.Tables.UCS,System.Boolean)">
            <summary>
            Adds a user coordinate system to the list.
            </summary>
            <param name="ucs"><see cref="T:netDxf.Tables.UCS">User coordinate system</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the user coordinate system parameter.</param>
            <returns>
            If a user coordinate system already exists with the same name as the instance that is being added the method returns the existing user coordinate system,
            if not it will return the new user coordinate system.
            </returns>
        </member>
        <member name="M:netDxf.Collections.UCSs.Remove(System.String)">
            <summary>
            Removes a user coordinate system.
            </summary>
            <param name="name"><see cref="T:netDxf.Tables.UCS">User coordinate system</see> name to remove from the document.</param>
            <returns>True if the user coordinate system has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved user coordinate system or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.UCSs.Remove(netDxf.Tables.UCS)">
            <summary>
            Removes a user coordinate system.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.UCS">User coordinate system</see> to remove from the document.</param>
            <returns>True if the user coordinate system has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved user coordinate system or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.UnderlayDgnDefinitions">
            <summary>
            Represents a collection of DGN underlay definitions.
            </summary>
        </member>
        <member name="M:netDxf.Collections.UnderlayDgnDefinitions.Add(netDxf.Objects.UnderlayDgnDefinition,System.Boolean)">
            <summary>
            Adds a DGN underlay definition to the list.
            </summary>
            <param name="underlayDgnDefinition"><see cref="T:netDxf.Objects.UnderlayDgnDefinition">UnderlayDgnDefinition</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the underlay definition parameter.</param>
            <returns>
            If an underlay definition already exists with the same name as the instance that is being added the method returns the existing underlay definition,
            if not it will return the new underlay definition.
            </returns>
        </member>
        <member name="M:netDxf.Collections.UnderlayDgnDefinitions.Remove(System.String)">
            <summary>
            Removes an DGN underlay definition.
            </summary>
            <param name="name"><see cref="T:netDxf.Objects.UnderlayDgnDefinition">UnderlayDgnDefinition</see> name to remove from the document.</param>
            <returns>True if the underlay definition has been successfully removed, or false otherwise.</returns>
            <remarks>Any underlay definition referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.UnderlayDgnDefinitions.Remove(netDxf.Objects.UnderlayDgnDefinition)">
            <summary>
            Removes a DGN underlay definition.
            </summary>
            <param name="item"><see cref="T:netDxf.Objects.UnderlayDgnDefinition">UnderlayDgnDefinition</see> to remove from the document.</param>
            <returns>True if the underlay definition has been successfully removed, or false otherwise.</returns>
            <remarks>Any underlay definition referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.UnderlayDwfDefinitions">
            <summary>
            Represents a collection of DWF underlay definitions.
            </summary>
        </member>
        <member name="M:netDxf.Collections.UnderlayDwfDefinitions.Add(netDxf.Objects.UnderlayDwfDefinition,System.Boolean)">
            <summary>
            Adds a DWF underlay definition to the list.
            </summary>
            <param name="underlayDwfDefinition"><see cref="T:netDxf.Objects.UnderlayDwfDefinition">UnderlayDwfDefinition</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the underlay definition parameter.</param>
            <returns>
            If an underlay definition already exists with the same name as the instance that is being added the method returns the existing underlay definition,
            if not it will return the new underlay definition.
            </returns>
        </member>
        <member name="M:netDxf.Collections.UnderlayDwfDefinitions.Remove(System.String)">
            <summary>
            Removes a DWF underlay definition.
            </summary>
            <param name="name"><see cref="T:netDxf.Objects.UnderlayDwfDefinition">UnderlayDwfDefinition</see> name to remove from the document.</param>
            <returns>True if the underlay definition has been successfully removed, or false otherwise.</returns>
            <remarks>Any underlay definition referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.UnderlayDwfDefinitions.Remove(netDxf.Objects.UnderlayDwfDefinition)">
            <summary>
            Removes a DWF underlay definition.
            </summary>
            <param name="item"><see cref="T:netDxf.Objects.UnderlayDwfDefinition">UnderlayDwfDefinition</see> to remove from the document.</param>
            <returns>True if the underlay definition has been successfully removed, or false otherwise.</returns>
            <remarks>Any underlay definition referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.UnderlayPdfDefinitions">
            <summary>
            Represents a collection of PDF underlay definitions.
            </summary>
        </member>
        <member name="M:netDxf.Collections.UnderlayPdfDefinitions.Add(netDxf.Objects.UnderlayPdfDefinition,System.Boolean)">
            <summary>
            Adds a PDF underlay definition to the list.
            </summary>
            <param name="underlayPdfDefinition"><see cref="T:netDxf.Objects.UnderlayPdfDefinition">UnderlayPdfDefinition</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the underlay definition parameter.</param>
            <returns>
            If an underlay definition already exists with the same name as the instance that is being added the method returns the existing underlay definition,
            if not it will return the new underlay definition.
            </returns>
        </member>
        <member name="M:netDxf.Collections.UnderlayPdfDefinitions.Remove(System.String)">
            <summary>
            Removes a PDF underlay definition.
            </summary>
            <param name="name"><see cref="T:netDxf.Objects.UnderlayPdfDefinition">UnderlayPdfDefinition</see> name to remove from the document.</param>
            <returns>True if the underlay definition has been successfully removed, or false otherwise.</returns>
            <remarks>Any underlay definition referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.UnderlayPdfDefinitions.Remove(netDxf.Objects.UnderlayPdfDefinition)">
            <summary>
            Removes a PDF underlay definition.
            </summary>
            <param name="item"><see cref="T:netDxf.Objects.UnderlayPdfDefinition">UnderlayPdfDefinition</see> to remove from the document.</param>
            <returns>True if the underlay definition has been successfully removed, or false otherwise.</returns>
            <remarks>Any underlay definition referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.Views">
            <summary>
            Represents a collection of views.
            </summary>
        </member>
        <member name="M:netDxf.Collections.Views.Add(netDxf.Tables.View,System.Boolean)">
            <summary>
            Adds a view to the list.
            </summary>
            <param name="view"><see cref="T:netDxf.Tables.View">View</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the view parameter.</param>
            <returns>
            If a view already exists with the same name as the instance that is being added the method returns the existing view,
            if not it will return the new view.
            </returns>
        </member>
        <member name="M:netDxf.Collections.Views.Remove(System.String)">
            <summary>
            Removes view.
            </summary>
            <param name="name"><see cref="T:netDxf.Tables.View">View</see> name to remove from the document.</param>
            <returns>True if the view has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved views or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.Views.Remove(netDxf.Tables.View)">
            <summary>
            Removes a view.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.View">View</see> to remove from the document.</param>
            <returns>True if the view has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved views or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.VPorts">
            <summary>
            Represents a collection of viewports.
            </summary>
        </member>
        <member name="M:netDxf.Collections.VPorts.Add(netDxf.Tables.VPort,System.Boolean)">
            <summary>
            Adds an viewports to the list.
            </summary>
            <param name="vport"><see cref="T:netDxf.Tables.VPort">VPort</see> to add to the list.</param>
            <param name="assignHandle">Specifies if a handle needs to be generated for the viewport parameter.</param>
            <returns>
            If a viewports already exists with the same name as the instance that is being added the method returns the existing viewports,
            if not it will return the new viewports.
            </returns>
        </member>
        <member name="M:netDxf.Collections.VPorts.Remove(System.String)">
            <summary>
            Removes a viewports.
            </summary>
            <param name="name"><see cref="T:netDxf.Tables.VPort">VPort</see> name to remove from the document.</param>
            <returns>True if the viewports has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved viewports or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="M:netDxf.Collections.VPorts.Remove(netDxf.Tables.VPort)">
            <summary>
            Removes a viewports.
            </summary>
            <param name="item"><see cref="T:netDxf.Tables.VPort">VPort</see> to remove from the document.</param>
            <returns>True if the viewports has been successfully removed, or false otherwise.</returns>
            <remarks>Reserved viewports or any other referenced by objects cannot be removed.</remarks>
        </member>
        <member name="T:netDxf.Collections.XDataDictionary">
            <summary>
            Represents a dictionary of <see cref="T:netDxf.XData">XData</see>.
            </summary>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.#ctor">
            <summary>
            Initializes a new instance of <c>XDataDictionary</c>.
            </summary>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.#ctor(System.Collections.Generic.IEnumerable{netDxf.XData})">
            <summary>
            Initializes a new instance of <c>XDataDictionary</c> and has the specified items.
            </summary>
            <param name="items">The list of <see cref="T:netDxf.XData">extended data</see> items initially stored.</param>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <c>XDataDictionary</c> and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of items the collection can initially store.</param>
        </member>
        <member name="P:netDxf.Collections.XDataDictionary.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:netDxf.XData">extended data</see> with the specified application registry name.
            </summary>
            <param name="appId">The application registry name to get or set.</param>
            <returns>The <see cref="T:netDxf.XData">extended data</see> of the application registry.</returns>
        </member>
        <member name="P:netDxf.Collections.XDataDictionary.AppIds">
            <summary>
            Gets an ICollection containing the application registry names of the current dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.XDataDictionary.Values">
            <summary>
            Gets an ICollection containing the <see cref="T:netDxf.XData">extended data</see> list of the current dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.XDataDictionary.Count">
            <summary>
            Gets the number of <see cref="T:netDxf.XData">extended data</see> contained in the current dictionary.
            </summary>
        </member>
        <member name="P:netDxf.Collections.XDataDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the actual dictionary is read-only.
            </summary>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.Add(netDxf.XData)">
            <summary>
            Adds an <see cref="T:netDxf.XData">extended data</see> to the current dictionary.
            </summary>
            <param name="item">The <see cref="T:netDxf.XData">extended data</see> to add.</param>
            <remarks>
            If the current dictionary already contains an appId equals to the extended data that is being added
            the <see cref="T:netDxf.XDataRecord">XDataRecords</see> will be added to the existing one.
            </remarks>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.AddRange(System.Collections.Generic.IEnumerable{netDxf.XData})">
            <summary>
            Adds a list of <see cref="T:netDxf.XData">extended data</see> to the current dictionary.
            </summary>
            <param name="items">The list of <see cref="T:netDxf.XData">extended data</see> to add.</param>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.Remove(System.String)">
            <summary>
            Removes an <see cref="T:netDxf.XData">extended data</see> with the specified application registry name from the current dictionary.
            </summary>
            <param name="appId">The application registry name of the <see cref="T:netDxf.XData">extended data</see> to remove.</param>
            <returns>True if the <see cref="T:netDxf.XData">extended data</see> is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.Clear">
            <summary>
            Removes all <see cref="T:netDxf.XData">extended data</see> from the current dictionary.
            </summary>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.ContainsAppId(System.String)">
            <summary>
            Determines whether current dictionary contains an <see cref="T:netDxf.XData">extended data</see> with the specified application registry name.
            </summary>
            <param name="appId">The application registry name to locate in the current dictionary.</param>
            <returns>True if the current dictionary contains an <see cref="T:netDxf.XData">extended data</see> with the application registry name; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.ContainsValue(netDxf.XData)">
            <summary>
            Determines whether current dictionary contains a specified <see cref="T:netDxf.XData">extended data</see>.
            </summary>
            <param name="value">The <see cref="T:netDxf.XData">extended data</see> to locate in the current dictionary.</param>
            <returns>True if the current dictionary contains the <see cref="T:netDxf.XData">extended data</see>; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.TryGetValue(System.String,netDxf.XData@)">
            <summary>
            Gets the <see cref="T:netDxf.XData">extended data</see> associated with the specified application registry name.
            </summary>
            <param name="appId">The application registry name whose value to get.</param>
            <param name="value">When this method returns, the <see cref="T:netDxf.XData">extended data</see> associated with the specified application registry name,
            if the application registry name is found; otherwise, null. This parameter is passed uninitialized.</param>
            <returns>True if the current dictionary contains an <see cref="T:netDxf.XData">extended data</see> with the specified application registry name; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Collections.XDataDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the dictionary.
            </summary>
            <returns>An enumerator that can be used to iterate through the dictionary.</returns>
        </member>
        <member name="T:netDxf.CoordinateSystem">
            <summary>
            Defines the coordinate system reference.
            </summary>
        </member>
        <member name="F:netDxf.CoordinateSystem.World">
            <summary>
            World coordinates.
            </summary>
        </member>
        <member name="F:netDxf.CoordinateSystem.Object">
            <summary>
            Object coordinates.
            </summary>
        </member>
        <member name="T:netDxf.DxfDocument">
            <summary>
            Represents a document to read and write DXF files.
            </summary>
        </member>
        <member name="M:netDxf.DxfDocument.#ctor">
            <summary>
            Initializes a new instance of the <c>DxfDocument</c> class.
            </summary>
            <remarks>The default <see cref="T:netDxf.Header.HeaderVariables">drawing variables</see> of the document will be used.</remarks>
        </member>
        <member name="M:netDxf.DxfDocument.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <c>DxfDocument</c> class.
            </summary>
            <param name="supportFolders">List of the document support folders.</param>
            <remarks>The default <see cref="T:netDxf.Header.HeaderVariables">drawing variables</see> of the document will be used.</remarks>
        </member>
        <member name="M:netDxf.DxfDocument.#ctor(netDxf.Header.DxfVersion)">
            <summary>
            Initializes a new instance of the <c>DxfDocument</c> class.
            </summary>
            <param name="version">AutoCAD drawing database version number.</param>
        </member>
        <member name="M:netDxf.DxfDocument.#ctor(netDxf.Header.DxfVersion,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <c>DxfDocument</c> class.
            </summary>
            <param name="version">AutoCAD drawing database version number.</param>
            <param name="supportFolders">List of the document support folders.</param>
        </member>
        <member name="M:netDxf.DxfDocument.#ctor(netDxf.Header.HeaderVariables)">
            <summary>
            Initializes a new instance of the <c>DxfDocument</c> class.
            </summary>
            <param name="drawingVariables"><see cref="T:netDxf.Header.HeaderVariables">Drawing variables</see> of the document.</param>
        </member>
        <member name="M:netDxf.DxfDocument.#ctor(netDxf.Header.HeaderVariables,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <c>DxfDocument</c> class.
            </summary>
            <param name="drawingVariables"><see cref="T:netDxf.Header.HeaderVariables">Drawing variables</see> of the document.</param>
            <param name="supportFolders">List of the document support folders.</param>
        </member>
        <member name="M:netDxf.DxfDocument.#ctor(netDxf.Header.HeaderVariables,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <c>DxfDocument</c> class.
            </summary>
            <param name="drawingVariables"><see cref="T:netDxf.Header.HeaderVariables">Drawing variables</see> of the document.</param>
            <param name="createDefaultObjects">Check if the default objects need to be created.</param>
            <param name="supportFolders">List of the document support folders.</param>
        </member>
        <member name="P:netDxf.DxfDocument.NumHandles">
            <summary>
            Gets or sets the number of handles generated, this value is saved as an hexadecimal in the drawing variables HandleSeed property.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.SupportFolders">
            <summary>
            Gets the list of folders where the drawing support files are present.
            </summary>
            <remarks>
            When shape linetype segments are used, the shape number will be obtained reading the .shp file equivalent to the .shx file,
            that file will be looked for in the same folder as the .shx file or one of the document support folders.
            </remarks>
        </member>
        <member name="P:netDxf.DxfDocument.BuildDimensionBlocks">
            <remarks>
            By default this value is set to false, no dimension blocks will be generated when adding dimension entities to the document.
            It will be the responsibility of the program importing the DXF to generate the drawing that represent the dimensions.<br />
            When set to true the block that represents the dimension will be generated,
            keep in mind that this process is limited and not all options available in the dimension style will be reflected in the final result.<br />
            When importing a file if the dimension block is present it will be read, regardless of this value.
            If, later, the dimension is modified all updates will be done with the limited dimension drawing capabilities of the library,
            in this case, if you want that the new modifications to be reflected when the file is saved again you can set the dimension block to null,
            and the program reading the resulting file will regenerate the block with the new modifications.
            </remarks>
        </member>
        <member name="P:netDxf.DxfDocument.Viewport">
            <summary>
            Gets the document viewport.
            </summary>
            <remarks>
            This is the same as the *Active VPort in the VPorts list, it describes the current viewport.
            </remarks>
        </member>
        <member name="P:netDxf.DxfDocument.ActiveLayout">
            <summary>
            Gets or sets the name of the active layout.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.RasterVariables">
            <summary>
            Gets or sets the <see cref="P:netDxf.DxfDocument.RasterVariables">RasterVariables</see> applied to image entities.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Comments">
            <summary>
            Gets or sets the name of the document, once a file is saved or loaded this field is equals the file name without extension.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.DrawingVariables">
            <summary>
            Gets the DXF <see cref="T:netDxf.Header.HeaderVariables">drawing variables</see>.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Name">
            <summary>
            Gets or sets the name of the document.
            </summary>
            <remarks>
            When a file is loaded this field is equals the file name without extension.
            </remarks>
        </member>
        <member name="P:netDxf.DxfDocument.ApplicationRegistries">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.ApplicationRegistries">application registries</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Layers">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.Layers">layers</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Linetypes">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.Linetypes">line types</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.TextStyles">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.TextStyles">text styles</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.ShapeStyles">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.ShapeStyles">shape styles</see> collection.
            </summary>
            <remarks>
            The DXF stores the TextStyles and ShapeStyles in the same table list, here, they are separated since they serve a different role.
            Under normal circumstances you should not need to access this list.
            </remarks>
        </member>
        <member name="P:netDxf.DxfDocument.DimensionStyles">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.DimensionStyles">dimension styles</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.MlineStyles">
            <summary>
            Gets the <see cref="T:netDxf.Collections.MLineStyles">MLine styles</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.UCSs">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.UCSs">User coordinate systems</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Blocks">
            <summary>
            Gets the <see cref="T:netDxf.Collections.BlockRecords">block</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.ImageDefinitions">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.ImageDefinitions">image definitions</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.UnderlayDgnDefinitions">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.UnderlayDgnDefinitions">dgn underlay definitions</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.UnderlayDwfDefinitions">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.UnderlayDwfDefinitions">dwf underlay definitions</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.UnderlayPdfDefinitions">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.UnderlayPdfDefinitions">pdf underlay definitions</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Groups">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.Groups">groups</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Layouts">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.Layouts">layouts</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.VPorts">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.VPorts">viewports</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Views">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.Views">views</see> collection.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Arcs">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Arc">arcs</see> list contained in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.AttributeDefinitions">
            <summary>
            Gets the <see cref="T:netDxf.Entities.AttributeDefinition">attribute definitions</see> list in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Ellipses">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Ellipse">ellipses</see> list in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Circles">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Circle">circles</see> list in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Faces3d">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Face3d">3d faces</see> list in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Solids">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Solid">solids</see> list in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Traces">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Trace">traces</see> list in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Inserts">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Insert">inserts</see> list in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Lines">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Line">lines</see> list in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Shapes">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Shape">shapes</see> list in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Polylines">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Polyline">polylines</see> list in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.LwPolylines">
            <summary>
            Gets the <see cref="T:netDxf.Entities.LwPolyline">light weight polylines</see> list in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.PolyfaceMeshes">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.PolyfaceMeshes">polyface meshes</see> list in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Points">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Point">points</see> list in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Texts">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Text">texts</see> list in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.MTexts">
            <summary>
            Gets the <see cref="T:netDxf.Entities.MText">multiline texts</see> list in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Hatches">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Hatch">hatches</see> list in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Images">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Image">images</see> list in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Meshes">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Mesh">mesh</see> list in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Leaders">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Leader">leader</see> list in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Tolerances">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Tolerance">tolerance</see> list in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Underlays">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Underlay">underlay</see> list in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.MLines">
            <summary>
            Gets the <see cref="T:netDxf.Entities.MLine">multilines</see> list in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Dimensions">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Dimension">dimensions</see> list in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Splines">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Spline">splines</see> list in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Rays">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Ray">rays</see> list in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Viewports">
            <summary>
            Gets the <see cref="P:netDxf.DxfDocument.Viewport">viewports</see> list in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.XLines">
            <summary>
            Gets the <see cref="T:netDxf.Entities.XLine">extension lines</see> list in the active layout.
            </summary>
        </member>
        <member name="P:netDxf.DxfDocument.Wipeouts">
            <summary>
            Gets the <see cref="T:netDxf.Entities.Wipeout">wipeouts</see> list in the active layout.
            </summary>
        </member>
        <member name="M:netDxf.DxfDocument.GetObjectByHandle(System.String)">
            <summary>
            Gets a DXF object by its handle.
            </summary>
            <param name="objectHandle">DxfObject handle.</param>
            <returns>The DxfObject that has the provided handle, null otherwise.</returns>
        </member>
        <member name="M:netDxf.DxfDocument.AddEntity(System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject})">
            <summary>
            Adds a list of <see cref="T:netDxf.Entities.EntityObject">entities</see> to the document.
            </summary>
            <param name="entities">A list of <see cref="T:netDxf.Entities.EntityObject">entities</see> to add to the document.</param>
        </member>
        <member name="M:netDxf.DxfDocument.AddEntity(netDxf.Entities.EntityObject)">
            <summary>
            Adds an <see cref="T:netDxf.Entities.EntityObject">entity</see> to the document.
            </summary>
            <param name="entity">An <see cref="T:netDxf.Entities.EntityObject">entity</see> to add to the document.</param>
        </member>
        <member name="M:netDxf.DxfDocument.RemoveEntity(System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject})">
            <summary>
            Removes a list of <see cref="T:netDxf.Entities.EntityObject">entities</see> from the document.
            </summary>
            <param name="entities">A list of <see cref="T:netDxf.Entities.EntityObject">entities</see> to remove from the document.</param>
            <remarks>
            This function will not remove other tables objects that might be not in use as result from the elimination of the entity.<br />
            This includes empty layers, blocks not referenced anymore, line types, text styles, dimension styles, and application registries.<br />
            Entities that are part of a block definition will not be removed.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.RemoveEntity(netDxf.Entities.EntityObject)">
            <summary>
            Removes an <see cref="T:netDxf.Entities.EntityObject">entity</see> from the document.
            </summary>
            <param name="entity">The <see cref="T:netDxf.Entities.EntityObject">entity</see> to remove from the document.</param>
            <returns>True if item is successfully removed; otherwise, false. This method also returns false if item was not found.</returns>
            <remarks>
            This function will not remove other tables objects that might be not in use as result from the elimination of the entity.<br />
            This includes empty layers, blocks not referenced anymore, line types, text styles, dimension styles, multiline styles, groups, and application registries.<br />
            Entities that are part of a block definition will not be removed.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.Load(System.String)">
            <summary>
            Loads a DXF file.
            </summary>
            <param name="file">File name.</param>
            <returns>Returns a DxfDocument. It will return null if the file has not been able to load.</returns>
            <exception cref="T:netDxf.IO.DxfVersionNotSupportedException"></exception>
            <remarks>
            Loading DXF files prior to AutoCad 2000 is not supported.<br />
            The Load method will still raise an exception if they are unable to create the FileStream.<br />
            On Debug mode it will raise any exception that might occur during the whole process.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.Load(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads a DXF file.
            </summary>
            <param name="file">File name.</param>
            <param name="supportFolders">List of the document support folders.</param>
            <returns>Returns a DxfDocument. It will return null if the file has not been able to load.</returns>
            <exception cref="T:netDxf.IO.DxfVersionNotSupportedException"></exception>
            <remarks>
            Loading DXF files prior to AutoCad 2000 is not supported.<br />
            The Load method will still raise an exception if they are unable to create the FileStream.<br />
            On Debug mode it will raise any exception that might occur during the whole process.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.Load(System.IO.Stream)">
            <summary>
            Loads a DXF file.
            </summary>
            <param name="stream">Stream.</param>
            <returns>Returns a DxfDocument. It will return null if the file has not been able to load.</returns>
            <exception cref="T:netDxf.IO.DxfVersionNotSupportedException"></exception>
            <remarks>
            Loading DXF files prior to AutoCad 2000 is not supported.<br />
            On Debug mode it will raise any exception that might occur during the whole process.<br />
            The caller will be responsible of closing the stream.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.Load(System.IO.Stream,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads a DXF file.
            </summary>
            <param name="stream">Stream.</param>
            <param name="supportFolders">List of the document support folders.</param>
            <returns>Returns a DxfDocument. It will return null if the file has not been able to load.</returns>
            <exception cref="T:netDxf.IO.DxfVersionNotSupportedException"></exception>
            <remarks>
            Loading DXF files prior to AutoCad 2000 is not supported.<br />
            On Debug mode it will raise any exception that might occur during the whole process.<br />
            The caller will be responsible of closing the stream.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.Save(System.String)">
            <summary>
            Saves the database of the actual DxfDocument to a text DXF file.
            </summary>
            <param name="file">File name.</param>
            <returns>Return true if the file has been successfully save, false otherwise.</returns>
            <exception cref="T:netDxf.IO.DxfVersionNotSupportedException"></exception>
            <remarks>
            If the file already exists it will be overwritten.<br />
            The Save method will still raise an exception if they are unable to create the FileStream.<br />
            On Debug mode they will raise any exception that might occur during the whole process.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.Save(System.String,System.Boolean)">
            <summary>
            Saves the database of the actual DxfDocument to a DXF file.
            </summary>
            <param name="file">File name.</param>
            <param name="isBinary">Defines if the file will be saved as binary.</param>
            <returns>Return true if the file has been successfully save, false otherwise.</returns>
            <exception cref="T:netDxf.IO.DxfVersionNotSupportedException"></exception>
            <remarks>
            If the file already exists it will be overwritten.<br />
            The Save method will still raise an exception if they are unable to create the FileStream.<br />
            On Debug mode they will raise any exception that might occur during the whole process.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.Save(System.IO.Stream)">
            <summary>
            Saves the database of the actual DxfDocument to a text stream.
            </summary>
            <param name="stream">Stream.</param>
            <returns>Return true if the stream has been successfully saved, false otherwise.</returns>
            <exception cref="T:netDxf.IO.DxfVersionNotSupportedException"></exception>
            <remarks>
            On Debug mode it will raise any exception that might occur during the whole process.<br />
            The caller will be responsible of closing the stream.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.Save(System.IO.Stream,System.Boolean)">
            <summary>
            Saves the database of the actual DxfDocument to a stream.
            </summary>
            <param name="stream">Stream.</param>
            <param name="isBinary">Defines if the file will be saved as binary.</param>
            <returns>Return true if the stream has been successfully saved, false otherwise.</returns>
            <exception cref="T:netDxf.IO.DxfVersionNotSupportedException"></exception>
            <remarks>
            On Debug mode it will raise any exception that might occur during the whole process.<br />
            The caller will be responsible of closing the stream.
            </remarks>
        </member>
        <member name="M:netDxf.DxfDocument.CheckDxfFileVersion(System.String)">
            <summary>
            Checks the AutoCAD DXF file database version.
            </summary>
            <param name="file">File name.</param>
            <returns>String that represents the DXF file version.</returns>
        </member>
        <member name="M:netDxf.DxfDocument.CheckDxfFileVersion(System.String,System.Boolean@)">
            <summary>
            Checks the AutoCAD DXF file database version.
            </summary>
            <param name="file">File name.</param>
            <param name="isBinary">Returns true if the DXF is a binary file.</param>
            <returns>String that represents the DXF file version.</returns>
        </member>
        <member name="M:netDxf.DxfDocument.CheckDxfFileVersion(System.IO.Stream)">
            <summary>
            Checks the AutoCAD DXF file database version.
            </summary>
            <param name="stream">Stream</param>
            <returns>String that represents the DXF file version.</returns>
            <remarks>The caller will be responsible of closing the stream.</remarks>
        </member>
        <member name="M:netDxf.DxfDocument.CheckDxfFileVersion(System.IO.Stream,System.Boolean@)">
            <summary>
            Checks the AutoCAD DXF file database version.
            </summary>
            <param name="stream">Stream</param>
            <param name="isBinary">Returns true if the DXF is a binary file.</param>
            <returns>String that represents the DXF file version.</returns>
            <remarks>The caller will be responsible of closing the stream.</remarks>
        </member>
        <member name="T:netDxf.DxfObject">
            <summary>
            Represents the base class for all DXF objects.
            </summary>
        </member>
        <member name="M:netDxf.DxfObject.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>DxfObject</c> class.
            </summary>
            <param name="codename"><see cref="T:netDxf.DxfObjectCode">DXF object name</see>.</param>
        </member>
        <member name="P:netDxf.DxfObject.CodeName">
            <summary>
            Gets the <see cref="T:netDxf.DxfObjectCode">DXF object name</see>.
            </summary>
        </member>
        <member name="P:netDxf.DxfObject.Handle">
            <summary>
            Gets the handle assigned to the DXF object.
            </summary>
            <remarks>
            The handle is a unique hexadecimal number assigned automatically to every DXF object,
            that has been added to a <see cref="T:netDxf.DxfDocument">DxfDocument</see>.
            </remarks>
        </member>
        <member name="P:netDxf.DxfObject.Owner">
            <summary>
            Gets the owner of the actual <see cref="T:netDxf.DxfObject">DxfObject</see>.
            </summary>
        </member>
        <member name="M:netDxf.DxfObject.AssignHandle(System.Int64)">
            <summary>
            Assigns a handle to the object based in a integer counter.
            </summary>
            <param name="entityNumber">Number to assign to the actual object.</param>
            <returns>Next available entity number.</returns>
            <remarks>
            Some objects might consume more than one, is, for example, the case of polylines that will assign
            automatically a handle to its vertexes. The entity number will be converted to an hexadecimal number.
            </remarks>
        </member>
        <member name="M:netDxf.DxfObject.ToString">
            <summary>
            Obtains a string that represents the DXF object.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="T:netDxf.DxfObjectCode">
            <summary>
            DXF string codes.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Unknown">
            <summary>
            Not defined.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.HeaderSection">
            <summary>
            Header section.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ClassesSection">
            <summary>
            Classes section.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Class">
            <summary>
            Class entry.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.TablesSection">
            <summary>
            Tables section.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.BlocksSection">
            <summary>
            Blocks section.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.EntitiesSection">
            <summary>
            Entities section.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ObjectsSection">
            <summary>
            Objects section.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ThumbnailImageSection">
            <summary>
            Thumbnail section.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.AcdsDataSection">
            <summary>
            AcdsData section. Currently it is used for storing the data for solids, regions, surfaces, and the preview image.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.BeginSection">
            <summary>
            Begin section code.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.EndSection">
            <summary>
            End section code.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.LayerTable">
            <summary>
            Layers table.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.VportTable">
            <summary>
            Viewports table.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ViewTable">
            <summary>
            Views table.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UcsTable">
            <summary>
            User coordinate system table.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.BlockRecordTable">
            <summary>
            Block records table.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.LinetypeTable">
            <summary>
            Line types table.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.TextStyleTable">
            <summary>
            Text styles table.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.DimensionStyleTable">
            <summary>
            Dimension styles table.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ApplicationIdTable">
            <summary>
            Extended data application registries  table.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Table">
            <summary>
            Begin table code.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.EndTable">
            <summary>
            End table code.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.BeginBlock">
            <summary>
            Begin block code.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.EndBlock">
            <summary>
            End block code.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.GroupDictionary">
            <summary>
            Group dictionary.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.LayoutDictionary">
            <summary>
            Layouts dictionary.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.MLineStyleDictionary">
            <summary>
            Multiline styles dictionary.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ImageDefDictionary">
            <summary>
            Multiline styles dictionary.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ImageVarsDictionary">
            <summary>
            MLine styles dictionary.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UnderlayDgnDefinitionDictionary">
            <summary>
            DGN underlay definition dictionary.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UnderlayDwfDefinitionDictionary">
            <summary>
            DWF underlay definition styles dictionary.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UnderlayPdfDefinitionDictionary">
            <summary>
            PDF underlay definition styles dictionary.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.EndOfFile">
            <summary>
            End of file.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.AppId">
            <summary>
            Application registry.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.DimStyle">
            <summary>
            Dimension style.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.BlockRecord">
            <summary>
            Block record.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Linetype">
            <summary>
            Line type.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Layer">
            <summary>
            Layer.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.VPort">
            <summary>
            Viewport table object.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.TextStyle">
            <summary>
            Text style.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.MLineStyle">
            <summary>
            Multiline style.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.View">
            <summary>
            View.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Ucs">
            <summary>
            User coordinate system.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Block">
            <summary>
            Block.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.BlockEnd">
            <summary>
            End block.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Line">
            <summary>
            Line.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Ray">
            <summary>
            Ray.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.XLine">
            <summary>
            XLine.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Ellipse">
            <summary>
            Ellipse.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Polyline">
            <summary>
            Polyline.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.LightWeightPolyline">
            <summary>
            Lightweight polyline.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Circle">
            <summary>
            Circle.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Point">
            <summary>
            Point.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Arc">
            <summary>
            Arc.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Shape">
            <summary>
            Shape
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Spline">
            <summary>
            Spline (nonuniform rational B-splines NURBS).
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Solid">
            <summary>
            Solid.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.AcadTable">
            <summary>
            Table made of rows and columns.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Trace">
            <summary>
            Trace.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Text">
            <summary>
            Text string.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Mesh">
            <summary>
            Mesh.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.MText">
            <summary>
            Multiline text string.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.MLine">
            <summary>
            MLine.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Face3d">
            <summary>
            3d face.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Insert">
            <summary>
            Block insertion.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Hatch">
            <summary>
            Hatch.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Leader">
            <summary>
            Leader.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Tolerance">
            <summary>
            Tolerance.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Wipeout">
            <summary>
            Wipeout.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Underlay">
            <summary>
            Underlay.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UnderlayPdf">
            <summary>
            PDF underlay.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UnderlayDwf">
            <summary>
            DWF underlay.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UnderlayDgn">
            <summary>
            DGN underlay.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UnderlayDefinition">
            <summary>
            Underlay definition.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UnderlayPdfDefinition">
            <summary>
            PDF underlay definition.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UnderlayDwfDefinition">
            <summary>
            DWF underlay definition.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.UnderlayDgnDefinition">
            <summary>
            DGN underlay definition.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.AttributeDefinition">
            <summary>
            Attribute definition.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Attribute">
            <summary>
            Attribute.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Vertex">
            <summary>
            Vertex.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.EndSequence">
            <summary>
            End sequence.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Dimension">
            <summary>
            Dimension.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Dictionary">
            <summary>
            Dictionary.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Image">
            <summary>
            Raster image.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Viewport">
            <summary>
            Viewport entity.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ImageDef">
            <summary>
            Image definition.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.ImageDefReactor">
            <summary>
            Image definition reactor.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.RasterVariables">
            <summary>
            Raster variables.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Group">
            <summary>
            Groups.
            </summary>
        </member>
        <member name="F:netDxf.DxfObjectCode.Layout">
            <summary>
            Layouts.
            </summary>
        </member>
        <member name="T:netDxf.Entities.AlignedDimension">
            <summary>
            Represents a dimension <see cref="T:netDxf.Entities.EntityObject">entity</see> that is aligned the reference line.
            </summary>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.#ctor">
            <summary>
            Initializes a new instance of the <c>AlignedDimension</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.#ctor(netDxf.Entities.Line,System.Double)">
            <summary>
            Initializes a new instance of the <c>AlignedDimension</c> class.
            </summary>
            <param name="referenceLine">Reference <see cref="T:netDxf.Entities.Line">line</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.#ctor(netDxf.Entities.Line,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>AlignedDimension</c> class.
            </summary>
            <param name="referenceLine">Reference <see cref="T:netDxf.Entities.Line">line</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.#ctor(netDxf.Entities.Line,System.Double,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>AlignedDimension</c> class.
            </summary>
            <param name="referenceLine">Reference <see cref="T:netDxf.Entities.Line">line</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <param name="normal">Normal vector of the plane where the dimension is defined.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.#ctor(netDxf.Entities.Line,System.Double,netDxf.Vector3,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>AlignedDimension</c> class.
            </summary>
            <param name="referenceLine">Reference <see cref="T:netDxf.Entities.Line">line</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <param name="normal">Normal vector of the plane where the dimension is defined.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The reference line define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.#ctor(netDxf.Vector2,netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>AlignedDimension</c> class.
            </summary>
            <param name="firstPoint">First reference <see cref="T:netDxf.Vector2">point</see> of the dimension.</param>
            <param name="secondPoint">Second reference <see cref="T:netDxf.Vector2">point</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.#ctor(netDxf.Vector2,netDxf.Vector2,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>AlignedDimension</c> class.
            </summary>
            <param name="firstPoint">First reference <see cref="T:netDxf.Vector2">point</see> of the dimension.</param>
            <param name="secondPoint">Second reference <see cref="T:netDxf.Vector2">point</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="P:netDxf.Entities.AlignedDimension.FirstReferencePoint">
            <summary>
            Gets or sets the first definition point of the dimension in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.AlignedDimension.SecondReferencePoint">
            <summary>
            Gets or sets the second definition point of the dimension in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.AlignedDimension.DimLinePosition">
            <summary>
            Gets the location of the dimension line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AlignedDimension.Offset">
            <summary>
            Gets or sets the distance between the reference line and the dimension line.
            </summary>
            <remarks>
            The offset value must be equal or greater than zero.<br />
            The side at which the dimension line is drawn depends of the direction of its reference line.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.AlignedDimension.Measurement">
            <summary>
            Actual measurement.
            </summary>
            <remarks>The dimension is always measured in the plane defined by the normal.</remarks>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.SetDimensionLinePosition(netDxf.Vector2)">
            <summary>
            Calculates the dimension offset from a point along the dimension line.
            </summary>
            <param name="point">Point along the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.CalculateReferencePoints">
            <summary>
            Calculate the dimension reference points.
            </summary>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.BuildBlock(System.String)">
            <summary>
            Gets the block that contains the entities that make up the dimension picture.
            </summary>
            <param name="name">Name to be assigned to the generated block.</param>
            <returns>The block that represents the actual dimension.</returns>
        </member>
        <member name="M:netDxf.Entities.AlignedDimension.Clone">
            <summary>
            Creates a new AlignedDimension that is a copy of the current instance.
            </summary>
            <returns>A new AlignedDimension that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Angular2LineDimension">
            <summary>
            Represents a 3 point angular dimension <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.#ctor">
            <summary>
            Initializes a new instance of the <c>Angular2LineDimension</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.#ctor(netDxf.Entities.Line,netDxf.Entities.Line,System.Double)">
            <summary>
            Initializes a new instance of the <c>Angular2LineDimension</c> class.
            </summary>
            <param name="firstLine">First <see cref="T:netDxf.Entities.Line">line</see> that defines the angle to measure.</param>
            <param name="secondLine">Second <see cref="T:netDxf.Entities.Line">line</see> that defines the angle to measure.</param>
            <param name="offset">Distance between the center point and the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.#ctor(netDxf.Entities.Line,netDxf.Entities.Line,System.Double,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Angular2LineDimension</c> class.
            </summary>
            <param name="firstLine">First <see cref="T:netDxf.Entities.Line">line</see> that defines the angle to measure.</param>
            <param name="secondLine">Second <see cref="T:netDxf.Entities.Line">line</see> that defines the angle to measure.</param>
            <param name="offset">Distance between the center point and the dimension line.</param>
            <param name="normal">Normal vector of the plane where the dimension is defined.</param>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.#ctor(netDxf.Entities.Line,netDxf.Entities.Line,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>Angular2LineDimension</c> class.
            </summary>
            <param name="firstLine">First <see cref="T:netDxf.Entities.Line">line</see> that defines the angle to measure.</param>
            <param name="secondLine">Second <see cref="T:netDxf.Entities.Line">line</see> that defines the angle to measure.</param>
            <param name="offset">Distance between the center point and the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.#ctor(netDxf.Entities.Line,netDxf.Entities.Line,System.Double,netDxf.Vector3,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>Angular2LineDimension</c> class.
            </summary>
            <param name="firstLine">First <see cref="T:netDxf.Entities.Line">line</see> that defines the angle to measure.</param>
            <param name="secondLine">Second <see cref="T:netDxf.Entities.Line">line</see> that defines the angle to measure.</param>
            <param name="offset">Distance between the center point and the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>Angular2LineDimension</c> class.
            </summary>
            <param name="startFirstLine">Start <see cref="T:netDxf.Vector2">point</see> of the first line that defines the angle to measure.</param>
            <param name="endFirstLine">End <see cref="T:netDxf.Vector2">point</see> of the first line that defines the angle to measure.</param>
            <param name="startSecondLine">Start <see cref="T:netDxf.Vector2">point</see> of the second line that defines the angle to measure.</param>
            <param name="endSecondLine">End <see cref="T:netDxf.Vector2">point</see> of the second line that defines the angle to measure.</param>
            <param name="offset">Distance between the center point and the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>Angular2LineDimension</c> class.
            </summary>
            <param name="startFirstLine">Start <see cref="T:netDxf.Vector2">point</see> of the first line that defines the angle to measure.</param>
            <param name="endFirstLine">End <see cref="T:netDxf.Vector2">point</see> of the first line that defines the angle to measure.</param>
            <param name="startSecondLine">Start <see cref="T:netDxf.Vector2">point</see> of the second line that defines the angle to measure.</param>
            <param name="endSecondLine">End <see cref="T:netDxf.Vector2">point</see> of the second line that defines the angle to measure.</param>
            <param name="offset">Distance between the center point and the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
        </member>
        <member name="P:netDxf.Entities.Angular2LineDimension.CenterPoint">
            <summary>
            Gets the center <see cref="T:netDxf.Vector2">point</see> of the measured arc in local coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular2LineDimension.StartFirstLine">
            <summary>
            Start <see cref="T:netDxf.Vector2">point</see> of the first line that defines the angle to measure in local coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular2LineDimension.EndFirstLine">
            <summary>
            End <see cref="T:netDxf.Vector2">point</see> of the first line that defines the angle to measure in local coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular2LineDimension.StartSecondLine">
            <summary>
            Start <see cref="T:netDxf.Vector2">point</see> of the second line that defines the angle to measure in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular2LineDimension.EndSecondLine">
            <summary>
            End <see cref="T:netDxf.Vector2">point</see> of the second line that defines the angle to measure in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular2LineDimension.ArcDefinitionPoint">
            <summary>
            Gets the location of the dimension line arc.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular2LineDimension.Offset">
            <summary>
            Gets or sets the distance between the center point and the dimension line.
            </summary>
            <remarks>
            Offset values cannot be negative and, even thought, zero values are allowed, they are not recommended.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Angular2LineDimension.Measurement">
            <summary>
            Actual measurement.
            </summary>
            <remarks>The dimension is always measured in the plane defined by the normal.</remarks>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.SetDimensionLinePosition(netDxf.Vector2)">
            <summary>
            Calculates the dimension offset from a point along the dimension line.
            </summary>
            <param name="point">Point along the dimension line.</param>
            <remarks>
            The start and end points of the reference lines will be modified,
            the angle measurement is always made from the direction of the first line to the direction of the second line.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            Non-uniform and zero scaling local to the dimension entity are not supported.<br />
            The transformation will not be applied if the resulting reference lines are parallel.<br />
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.CalculateReferencePoints">
            <summary>
            Calculate the dimension reference points.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.BuildBlock(System.String)">
            <summary>
            Gets the block that contains the entities that make up the dimension picture.
            </summary>
            <param name="name">Name to be assigned to the generated block.</param>
            <returns>The block that represents the actual dimension.</returns>
        </member>
        <member name="M:netDxf.Entities.Angular2LineDimension.Clone">
            <summary>
            Creates a new Angular2LineDimension that is a copy of the current instance.
            </summary>
            <returns>A new Angular2LineDimension that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Angular3PointDimension">
            <summary>
            Represents a 3 point angular dimension <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.#ctor">
            <summary>
            Initializes a new instance of the <c>Angular3PointDimension</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.#ctor(netDxf.Entities.Arc,System.Double)">
            <summary>
            Initializes a new instance of the <c>Angular3PointDimension</c> class.
            </summary>
            <param name="arc"><see cref="T:netDxf.Entities.Arc">Arc</see> to measure.</param>
            <param name="offset">Distance between the center of the arc and the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.#ctor(netDxf.Entities.Arc,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>Angular3PointDimension</c> class.
            </summary>
            <param name="arc">Angle <see cref="T:netDxf.Entities.Arc">arc</see> to measure.</param>
            <param name="offset">Distance between the center of the arc and the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>Angular3PointDimension</c> class.
            </summary>
            <param name="centerPoint">Center of the angle arc to measure.</param>
            <param name="startPoint">Angle start point.</param>
            <param name="endPoint">Angle end point.</param>
            <param name="offset">Distance between the center point and the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>Angular3PointDimension</c> class.
            </summary>
            <param name="centerPoint">Center of the angle arc to measure.</param>
            <param name="startPoint">Angle start point.</param>
            <param name="endPoint">Angle end point.</param>
            <param name="offset">Distance between the center point and the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
        </member>
        <member name="P:netDxf.Entities.Angular3PointDimension.CenterPoint">
            <summary>
            Gets or sets the center <see cref="T:netDxf.Vector2">point</see> of the arc in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular3PointDimension.StartPoint">
            <summary>
            Gets or sets the angle start <see cref="T:netDxf.Vector2">point</see> of the dimension in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular3PointDimension.EndPoint">
            <summary>
            Gets or sets the angle end <see cref="T:netDxf.Vector2">point</see> of the dimension in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular3PointDimension.ArcDefinitionPoint">
            <summary>
            Gets the location of the dimension line arc.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Angular3PointDimension.Offset">
            <summary>
            Gets or sets the distance between the center point and the dimension line.
            </summary>
            <remarks>
            Offset values cannot be negative and, even thought, zero values are allowed, they are not recommended.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Angular3PointDimension.Measurement">
            <summary>
            Actual measurement.
            </summary>
            <remarks>The dimension is always measured in the plane defined by the normal.</remarks>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.SetDimensionLinePosition(netDxf.Vector2)">
            <summary>
            Calculates the dimension offset from a point along the dimension line.
            </summary>
            <param name="point">Point along the dimension line.</param>
            <remarks>
            The start and end points of the reference lines will be modified,
            the angle measurement is always made from the direction of the center-first point line to the direction of the center-second point line.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            Non-uniform and zero scaling local to the dimension entity are not supported.<br />
            The transformation will not be applied if the resulting reference lines are parallel.<br />
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.CalculateReferencePoints">
            <summary>
            Calculate the dimension reference points.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.BuildBlock(System.String)">
            <summary>
            Gets the block that contains the entities that make up the dimension picture.
            </summary>
            <param name="name">Name to be assigned to the generated block.</param>
            <returns>The block that represents the actual dimension.</returns>
        </member>
        <member name="M:netDxf.Entities.Angular3PointDimension.Clone">
            <summary>
            Creates a new Angular3PointDimension that is a copy of the current instance.
            </summary>
            <returns>A new Angular3PointDimension that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Arc">
            <summary>
            Represents a circular arc <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Arc.#ctor">
            <summary>
            Initializes a new instance of the <c>Arc</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Arc.#ctor(netDxf.Vector2,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Arc</c> class.
            </summary>
            <param name="center">Arc <see cref="T:netDxf.Vector2">center</see> in world coordinates.</param>
            <param name="radius">Arc radius.</param>
            <param name="startAngle">Arc start angle in degrees.</param>
            <param name="endAngle">Arc end angle in degrees.</param>
        </member>
        <member name="M:netDxf.Entities.Arc.#ctor(netDxf.Vector3,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Arc</c> class.
            </summary>
            <param name="center">Arc <see cref="T:netDxf.Vector3">center</see> in world coordinates.</param>
            <param name="radius">Arc radius.</param>
            <param name="startAngle">Arc start angle in degrees.</param>
            <param name="endAngle">Arc end angle in degrees.</param>
        </member>
        <member name="P:netDxf.Entities.Arc.Center">
            <summary>
            Gets or sets the arc <see cref="T:netDxf.Vector3">center</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.Radius">
            <summary>
            Gets or sets the arc radius.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.StartAngle">
            <summary>
            Gets or sets the arc start angle in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.EndAngle">
            <summary>
            Gets or sets the arc end angle in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Arc.Thickness">
            <summary>
            Gets or sets the arc thickness.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Arc.PolygonalVertexes(System.Int32)">
            <summary>
            Converts the arc in a list of vertexes.
            </summary>
            <param name="precision">Number of divisions.</param>
            <returns>A list vertexes that represents the arc expressed in object coordinate system.</returns>
        </member>
        <member name="M:netDxf.Entities.Arc.ToPolyline(System.Int32)">
            <summary>
            Converts the arc in a Polyline.
            </summary>
            <param name="precision">Number of divisions.</param>
            <returns>A new instance of <see cref="T:netDxf.Entities.LwPolyline">LightWeightPolyline</see> that represents the arc.</returns>
        </member>
        <member name="M:netDxf.Entities.Arc.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            Non-uniform scaling is not supported, create an ellipse arc from the arc data and transform that instead.<br />
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Arc.Clone">
            <summary>
            Creates a new Arc that is a copy of the current instance.
            </summary>
            <returns>A new Arc that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Attribute">
            <summary>
            Represents a attribute <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
            <remarks>
            The attribute position, rotation, height and width factor values also includes the transformation of the <see cref="T:netDxf.Entities.Insert">Insert</see> entity to which it belongs.<br />
            During the attribute initialization a copy of all attribute definition properties will be copied,
            so any changes made to the attribute definition will only be applied to new attribute instances and not to existing ones.
            This behavior is to allow imported <see cref="T:netDxf.Entities.Insert">Insert</see> entities to have attributes without definition in the block, 
            although this might sound not totally correct it is allowed by AutoCad.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Attribute.#ctor(netDxf.Entities.AttributeDefinition)">
            <summary>
            Initializes a new instance of the <c>Attribute</c> class.
            </summary>
            <param name="definition"><see cref="T:netDxf.Entities.AttributeDefinition">Attribute definition</see>.</param>
        </member>
        <member name="P:netDxf.Entities.Attribute.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Layer">
            <summary>
            Gets or sets the entity <see cref="P:netDxf.Entities.Attribute.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Linetype">
            <summary>
            Gets or sets the entity <see cref="P:netDxf.Entities.Attribute.Linetype">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Lineweight">
            <summary>
            Gets or sets the entity line weight, one unit is always 1/100 mm (default = ByLayer).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Transparency">
            <summary>
            Gets or sets layer transparency (default: ByLayer).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.LinetypeScale">
            <summary>
            Gets or sets the entity line type scale.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.IsVisible">
            <summary>
            Gets or set the entity visibility.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Normal">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Owner">
            <summary>
            Gets the owner of the actual DXF object.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Definition">
            <summary>
            Gets the attribute definition.
            </summary>
            <remarks>If the insert attribute has no definition it will return null.</remarks>
        </member>
        <member name="P:netDxf.Entities.Attribute.Tag">
            <summary>
            Gets the attribute tag.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Height">
            <summary>
            Gets or sets the text height.
            </summary>
            <remarks>
            Valid values must be greater than zero. Default: 1.0.<br />
            When Alignment.Aligned is used this value is not applicable, it will be automatically adjusted so the text will fit in the specified width.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Attribute.Width">
            <summary>
            Gets or sets the text width, only applicable for text Alignment.Fit and Alignment.Align.
            </summary>
            <remarks>Valid values must be greater than zero. Default: 1.0.</remarks>
        </member>
        <member name="P:netDxf.Entities.Attribute.WidthFactor">
            <summary>
            Gets or sets the width factor.
            </summary>
            <remarks>
            Valid values range from 0.01 to 100. Default: 1.0.<br />
            When Alignment.Fit is used this value is not applicable, it will be automatically adjusted so the text will fit in the specified width.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Attribute.ObliqueAngle">
            <summary>
            Gets or sets the font oblique angle.
            </summary>
            <remarks>Valid values range from -85 to 85. Default: 0.0.</remarks>
        </member>
        <member name="P:netDxf.Entities.Attribute.Value">
            <summary>
            Gets or sets the attribute value.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Style">
            <summary>
            Gets or sets the attribute text style.
            </summary>
            <remarks>
            The <see cref="T:netDxf.Tables.TextStyle">text style</see> defines the basic properties of the information text.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Attribute.Position">
            <summary>
            Gets or sets the attribute <see cref="T:netDxf.Vector3">position</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Flags">
            <summary>
            Gets or sets the attribute flags.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Rotation">
            <summary>
            Gets or sets the attribute text rotation in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.Alignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.IsBackward">
            <summary>
            Gets or sets if the attribute text is backward (mirrored in X).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Attribute.IsUpsideDown">
            <summary>
            Gets or sets if the attribute text is upside down (mirrored in Y).
            </summary>
        </member>
        <member name="M:netDxf.Entities.Attribute.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current attribute given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Attribute.TransformBy(netDxf.Matrix4)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 4x4 transformation matrix.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <remarks>Matrix4 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Attribute.Clone">
            <summary>
            Creates a new Attribute that is a copy of the current instance.
            </summary>
            <returns>A new Attribute that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Entities.AttributeChangeEventArgs.#ctor(netDxf.Entities.Attribute)">
            <summary>
            Initializes a new instance of <c>AttributeChangeEventArgs</c>.
            </summary>
            <param name="item">The attribute that is being added or removed from the insert.</param>
        </member>
        <member name="P:netDxf.Entities.AttributeChangeEventArgs.Item">
            <summary>
            Gets the attribute that is being added or removed.
            </summary>
        </member>
        <member name="T:netDxf.Entities.AttributeDefinition">
            <summary>
            Represents an attribute definition <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
            <remarks>
            AutoCad allows to have duplicate tags in the attribute definitions list, but this library does not.
            To have duplicate tags is not recommended in any way, since there will be now way to know which is the definition associated to the insert attribute.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.AttributeDefinition.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>AttributeDefinition</c> class.
            </summary>
            <param name="tag">Attribute identifier.</param>
        </member>
        <member name="M:netDxf.Entities.AttributeDefinition.#ctor(System.String,netDxf.Tables.TextStyle)">
            <summary>
            Initializes a new instance of the <c>AttributeDefinition</c> class.
            </summary>
            <param name="tag">Attribute identifier.</param>
            <param name="style">Attribute <see cref="T:netDxf.Tables.TextStyle">text style</see>.</param>
        </member>
        <member name="M:netDxf.Entities.AttributeDefinition.#ctor(System.String,System.Double,netDxf.Tables.TextStyle)">
            <summary>
            Initializes a new instance of the <c>AttributeDefinition</c> class.
            </summary>
            <param name="tag">Attribute identifier.</param>
            <param name="textHeight">Height of the attribute definition text.</param>
            <param name="style">Attribute <see cref="T:netDxf.Tables.TextStyle">text style</see>.</param>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Layer">
            <summary>
            Gets or sets the entity <see cref="P:netDxf.Entities.AttributeDefinition.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Linetype">
            <summary>
            Gets or sets the entity <see cref="P:netDxf.Entities.AttributeDefinition.Linetype">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Lineweight">
            <summary>
            Gets or sets the entity line weight, one unit is always 1/100 mm (default = ByLayer).
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Transparency">
            <summary>
            Gets or sets layer transparency (default: ByLayer).
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.LinetypeScale">
            <summary>
            Gets or sets the entity line type scale.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.IsVisible">
            <summary>
            Gets or set the entity visibility.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Normal">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Tag">
            <summary>
            Gets the attribute identifier.
            </summary>
            <remarks>
            Even thought the official DXF documentation clearly says that the attribute definition tag cannot contain spaces,
            most programs seems to allow them, but I cannot guarantee that all will behave this way.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Prompt">
            <summary>
            Gets or sets the attribute information text.
            </summary>
            <remarks>This is the text prompt shown to introduce the attribute value when new Insert entities are inserted into the drawing.</remarks>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Height">
            <summary>
            Gets or sets the text height.
            </summary>
            <remarks>
            Valid values must be greater than zero. Default: 1.0.<br />
            When Alignment.Aligned is used this value is not applicable, it will be automatically adjusted so the text will fit in the specified width.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Width">
            <summary>
            Gets or sets the text width, only applicable for text Alignment.Fit and Alignment.Align.
            </summary>
            <remarks>Valid values must be greater than zero. Default: 1.0.</remarks>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.WidthFactor">
            <summary>
            Gets or sets the width factor.
            </summary>
            <remarks>
            Valid values range from 0.01 to 100. Default: 1.0.<br />
            When Alignment.Fit is used this value is not applicable, it will be automatically adjusted so the text will fit in the specified width.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.ObliqueAngle">
            <summary>
            Gets or sets the font oblique angle.
            </summary>
            <remarks>Valid values range from -85 to 85. Default: 0.0.</remarks>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Value">
            <summary>
            Gets or sets the attribute default value.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Style">
            <summary>
            Gets or sets  the attribute text style.
            </summary>
            <remarks>
            The <see cref="T:netDxf.Tables.TextStyle">text style</see> defines the basic properties of the information text.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Position">
            <summary>
            Gets or sets the attribute <see cref="T:netDxf.Vector3">position</see> in object coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Flags">
            <summary>
            Gets or sets the attribute flags.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Rotation">
            <summary>
            Gets or sets the attribute text rotation in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Alignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.IsBackward">
            <summary>
            Gets or sets if the attribute definition text is backward (mirrored in X).
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.IsUpsideDown">
            <summary>
            Gets or sets if the attribute definition text is upside down (mirrored in Y).
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.Owner">
            <summary>
            Gets the owner of the actual DXF object.
            </summary>
        </member>
        <member name="P:netDxf.Entities.AttributeDefinition.XData">
            <summary>
            Gets the entity <see cref="T:netDxf.Collections.XDataDictionary">extended data</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.AttributeDefinition.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current attribute definition given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.AttributeDefinition.TransformBy(netDxf.Matrix4)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 4x4 transformation matrix.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <remarks>Matrix4 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.AttributeDefinition.Clone">
            <summary>
            Creates a new AttributeDefinition that is a copy of the current instance.
            </summary>
            <returns>A new AttributeDefinition that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.AttributeFlags">
            <summary>Attribute flags.</summary>
        </member>
        <member name="F:netDxf.Entities.AttributeFlags.Visible">
            <summary>
            Attribute is visible.
            </summary>
        </member>
        <member name="F:netDxf.Entities.AttributeFlags.Hidden">
            <summary>
            Attribute is invisible (does not appear).
            </summary>
        </member>
        <member name="F:netDxf.Entities.AttributeFlags.Constant">
            <summary>
            This is a constant attribute.
            </summary>
        </member>
        <member name="F:netDxf.Entities.AttributeFlags.Verify">
            <summary>
            Verification is required on input of this attribute.
            </summary>
        </member>
        <member name="F:netDxf.Entities.AttributeFlags.Predefined">
            <summary>
            Attribute is preset (no prompt during insertion).
            </summary>
        </member>
        <member name="T:netDxf.Entities.Circle">
            <summary>
            Represents a circle <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Circle.#ctor">
            <summary>
            Initializes a new instance of the <c>Circle</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Circle.#ctor(netDxf.Vector3,System.Double)">
            <summary>
            Initializes a new instance of the <c>Circle</c> class.
            </summary>
            <param name="center">Circle <see cref="T:netDxf.Vector3">center</see> in world coordinates.</param>
            <param name="radius">Circle radius.</param>
        </member>
        <member name="M:netDxf.Entities.Circle.#ctor(netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>Circle</c> class.
            </summary>
            <param name="center">Circle <see cref="T:netDxf.Vector2">center</see> in world coordinates.</param>
            <param name="radius">Circle radius.</param>
        </member>
        <member name="P:netDxf.Entities.Circle.Center">
            <summary>
            Gets or sets the circle <see cref="T:netDxf.Vector3">center</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Circle.Radius">
            <summary>
            Gets or set the circle radius.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Circle.Thickness">
            <summary>
            Gets or sets the circle thickness.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Circle.PolygonalVertexes(System.Int32)">
            <summary>
            Converts the circle in a list of vertexes.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A list vertexes that represents the circle expressed in object coordinate system.</returns>
        </member>
        <member name="M:netDxf.Entities.Circle.ToPolyline(System.Int32)">
            <summary>
            Converts the circle in a Polyline.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A new instance of <see cref="T:netDxf.Entities.LwPolyline">LightWeightPolyline</see> that represents the circle.</returns>
        </member>
        <member name="M:netDxf.Entities.Circle.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            Non-uniform scaling is not supported, create an ellipse from the circle data and transform that instead.<br />
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Circle.Clone">
            <summary>
            Creates a new Circle that is a copy of the current instance.
            </summary>
            <returns>A new Circle that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.DatumReferenceValue">
            <summary>
            Represents datum reference, a theoretically exact point, axis, or plane from which you make measurements and verify dimensions. 
            </summary>
        </member>
        <member name="M:netDxf.Entities.DatumReferenceValue.#ctor">
            <summary>
            Initializes a new instance of the <c>DatumReferenceValue</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.DatumReferenceValue.#ctor(System.String,netDxf.Entities.ToleranceMaterialCondition)">
            <summary>
            Initializes a new instance of the <c>DatumReferenceValue</c> class.
            </summary>
            <param name="value">Datum reference value.</param>
            <param name="materialCondition">Datum material condition.</param>
        </member>
        <member name="P:netDxf.Entities.DatumReferenceValue.Value">
            <summary>
            Gets or sets the datum value.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DatumReferenceValue.MaterialCondition">
            <summary>
            Gets or sets the datum material condition. 
            </summary>
        </member>
        <member name="M:netDxf.Entities.DatumReferenceValue.Clone">
            <summary>
            Creates a new DatumReferenceValue that is a copy of the current instance.
            </summary>
            <returns>A new DatumReferenceValue that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.DiametricDimension">
            <summary>
            Represents a diametric dimension <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.#ctor">
            <summary>
            Initializes a new instance of the <c>DiametricDimension</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.#ctor(netDxf.Entities.Arc,System.Double)">
            <summary>
            Initializes a new instance of the <c>DiametricDimension</c> class.
            </summary>
            <param name="arc"><see cref="T:netDxf.Entities.Arc">Arc</see> to measure.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.#ctor(netDxf.Entities.Arc,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>DiametricDimension</c> class.
            </summary>
            <param name="arc"><see cref="T:netDxf.Entities.Arc">Arc</see> to measure.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.#ctor(netDxf.Entities.Circle,System.Double)">
            <summary>
            Initializes a new instance of the <c>DiametricDimension</c> class.
            </summary>
            <param name="circle"><see cref="T:netDxf.Entities.Circle">Circle</see> to measure.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.#ctor(netDxf.Entities.Circle,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>DiametricDimension</c> class.
            </summary>
            <param name="circle"><see cref="T:netDxf.Entities.Circle">Circle</see> to measure.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.#ctor(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>DiametricDimension</c> class.
            </summary>
            <param name="centerPoint">Center <see cref="T:netDxf.Vector2">point</see> of the circumference.</param>
            <param name="referencePoint"><see cref="T:netDxf.Vector2">Point</see> on circle or arc.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>DiametricDimension</c> class.
            </summary>
            <param name="centerPoint">Center <see cref="T:netDxf.Vector2">point</see> of the circumference.</param>
            <param name="referencePoint"><see cref="T:netDxf.Vector2">Point</see> on circle or arc.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="P:netDxf.Entities.DiametricDimension.CenterPoint">
            <summary>
            Gets or sets the center <see cref="T:netDxf.Vector2">point</see> of the circumference in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.DiametricDimension.ReferencePoint">
            <summary>
            Gets or sets the <see cref="T:netDxf.Vector2">point</see> on circumference or arc in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.DiametricDimension.Measurement">
            <summary>
            Actual measurement.
            </summary>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.SetDimensionLinePosition(netDxf.Vector2)">
            <summary>
            Calculates the reference point and dimension offset from a point along the dimension line.
            </summary>
            <param name="point">Point along the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            Non-uniform and zero scaling local to the dimension entity are not supported.<br />
            The transformation will not be applied if the resulting center and reference points are the same.<br />
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.CalculateReferencePoints">
            <summary>
            Calculate the dimension reference points.
            </summary>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.BuildBlock(System.String)">
            <summary>
            Gets the block that contains the entities that make up the dimension picture.
            </summary>
            <param name="name">Name to be assigned to the generated block.</param>
            <returns>The block that represents the actual dimension.</returns>
        </member>
        <member name="M:netDxf.Entities.DiametricDimension.Clone">
            <summary>
            Creates a new DiametricDimension that is a copy of the current instance.
            </summary>
            <returns>A new DiametricDimension that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Dimension">
            <summary>
            Represents the base class for a dimension <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
            <reamarks>
            Once a dimension is added to the DXF document, its properties should not be modified or the changes will not be reflected in the saved DXF file.
            </reamarks>
        </member>
        <member name="M:netDxf.Entities.Dimension.#ctor(netDxf.Entities.DimensionType)">
            <summary>
            Initializes a new instance of the <c>Dimension</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.DefinitionPoint">
            <summary>
            Gets the reference <see cref="T:netDxf.Vector2">position</see> for the dimension line in local coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.TextPositionManuallySet">
            <summary>
            Gets or sets if the text reference point has been set by the user. Set to false to reset the dimension text to its original position.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.TextReferencePoint">
            <summary>
            Gets or sets the text reference <see cref="T:netDxf.Vector2">position</see>, the middle point of dimension text in local coordinates.
            </summary>
            <remarks>
            This value is related to the style property <c>FitTextMove</c>.
            If the style FitTextMove is set to BesidesDimLine the text reference point will take precedence over the offset value to place the dimension line.
            In case of Ordinate dimensions if the text has been manually set the text position will take precedence over the EndLeaderPoint only if FitTextMove
            has been set to OverDimLineWithoutLeader.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Dimension.Style">
            <summary>
            Gets or sets the style associated with the dimension.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.StyleOverrides">
            <summary>
            Gets the dimension style overrides list.
            </summary>
            <remarks>Any dimension style value stored in this list will override its corresponding value in the assigned style to the dimension.</remarks>
        </member>
        <member name="P:netDxf.Entities.Dimension.DimensionType">
            <summary>
            Gets the dimension type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.Measurement">
            <summary>
            Gets the actual measurement.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.AttachmentPoint">
            <summary>
            Gets or sets the dimension text attachment point.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.LineSpacingStyle">
            <summary>
            Get or sets the dimension text <see cref="T:netDxf.Entities.MTextLineSpacingStyle">line spacing style</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.LineSpacingFactor">
            <summary>
            Gets or sets the dimension text line spacing factor.
            </summary>
            <remarks>
            Percentage of default line spacing to be applied. Valid values range from 0.25 to 4.00, the default value 1.0.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Dimension.Block">
            <summary>
            Gets the block that contains the entities that make up the dimension picture.
            </summary>
            <remarks>
            Set this value to null to force the program that reads the resulting DXF file to generate the dimension drawing block,
            some programs do not even care about this block and will always generate their own dimension drawings.<br />
            You can even use your own dimension drawing setting this value with the resulting block.
            The assigned block name is irrelevant, it will be automatically modified to accommodate the naming conventions of the blocks for dimension (*D#).<br />
            The block will be overwritten when adding the dimension to a <see cref="T:netDxf.DxfDocument">DxfDocument</see> if <c>BuildDimensionBlocks</c> is set to true.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Dimension.TextRotation">
            <summary>
            Gets or sets the rotation angle in degrees of the dimension text away from its default orientation(the direction of the dimension line).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Dimension.UserText">
            <summary>
            Gets or sets the dimension text explicitly.
            </summary>
            <remarks>
            Dimension text explicitly entered by the user. Optional; default is the measurement.
            If null or "&lt;&gt;", the dimension measurement is drawn as the text,
            if " " (one blank space), the text is suppressed. Anything else is drawn as the text.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Dimension.Elevation">
            <summary>
            Gets or sets the dimension elevation, its position along its normal.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Dimension.CalculateReferencePoints">
            <summary>
            Calculate the dimension reference points.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Dimension.BuildBlock(System.String)">
            <summary>
            Gets the block that contains the entities that make up the dimension picture.
            </summary>
            <param name="name">Name to be assigned to the generated block.</param>
            <returns> The block that represents the actual dimension.</returns>
        </member>
        <member name="M:netDxf.Entities.Dimension.Update">
            <summary>
            Updates the internal data of the dimension and if needed it rebuilds the block definition of the actual dimension.
            </summary>
            <remarks>
            This method needs to be manually called to reflect any change made to the dimension properties (geometry and/or style).
            </remarks>
        </member>
        <member name="T:netDxf.Entities.DimensionArrowhead">
            <summary>
            Predefined shapes for dimension style arrowheads.
            </summary>
            <remarks>
            Arrowhead block names and its representation.<br/>
            "" = closed filled<br/>
            "_DOT" = dot<br/>
            "_DOTSMALL" = dot small<br/>
            "_DOTBLANK" = dot blank<br/>
            "_ORIGIN" = origin indicator<br/>
            "_ORIGIN2" = origin indicator 2<br/>
            "_OPEN" = open<br/>
            "_OPEN90" = open 90 (right angle)<br/>
            "_OPEN30" = open 30<br/>
            "_CLOSED" = closed<br/>
            "_SMALL" = dot small blank<br/>
            "_NONE" = none<br/>
            "_OBLIQUE" = oblique<br/>
            "_BOXFILLED" = box filled<br/>
            "_BOXBLANK" = box<br/>
            "_CLOSEDBLANK" = closed blank<br/>
            "_DATUMFILLED" = datum triangle filled<br/>
            "_DATUMBLANK" = datum triangle<br/>
            "_INTEGRAL" = integral<br/>
            "_ARCHTICK" = architectural tick<br/>
            </remarks>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.Dot">
            <summary>
            Dot arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.DotSmall">
            <summary>
            Small dot arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.DotBlank">
            <summary>
            Blank dot arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.OriginIndicator">
            <summary>
            Origin indicator arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.OriginIndicator2">
            <summary>
            Origin indicator 2 arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.Open">
            <summary>
            Open arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.Open90">
            <summary>
            Open 90 degree arrowhead (right angle arrowhead).
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.Open30">
            <summary>
            Open 30 degree angle arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.Closed">
            <summary>
            Closed arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.DotSmallBlank">
            <summary>
            Small blank dot arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.None">
            <summary>
            Empty arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.Oblique">
            <summary>
            Oblique arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.BoxFilled">
            <summary>
            Filled box arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.Box">
            <summary>
            Box arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.ClosedBlank">
            <summary>
            Blank closed arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.DatumTriangleFilled">
            <summary>
            Filled datum triangle arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.DatumTriangle">
            <summary>
            Datum triangle arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.Integral">
            <summary>
            Integral symbol arrowhead.
            </summary>
        </member>
        <member name="P:netDxf.Entities.DimensionArrowhead.ArchitecturalTick">
            <summary>
            Architectural tick arrowhead.
            </summary>
        </member>
        <member name="T:netDxf.Entities.DimensionBlock">
            <summary>
            Holds methods to build the dimension blocks.
            </summary>
        </member>
        <member name="M:netDxf.Entities.DimensionBlock.Build(netDxf.Entities.Dimension)">
            <summary>
            Creates a block that represents the drawing of the specified dimension.
            </summary>
            <param name="dim"><see cref="T:netDxf.Entities.Dimension">Dimension</see> from which the block will be created.</param>
            <returns>A block that represents the specified dimension.</returns>
            <remarks>
            By the fault the block will have the name "DimBlock". The block's name is irrelevant when the dimension belongs to a document,
            it will be automatically renamed to accommodate to the nomenclature of the DXF.<br />
            The dimension block creation only supports a limited number of <see cref="T:netDxf.Tables.DimensionStyle">dimension style</see> properties.
            Also the list of <see cref="T:netDxf.Tables.DimensionStyleOverride">dimension style overrides</see> associated with the specified dimension will be applied where necessary.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.DimensionBlock.Build(netDxf.Entities.Dimension,System.String)">
            <summary>
            Creates a block that represents the drawing of the specified dimension.
            </summary>
            <param name="dim"><see cref="T:netDxf.Entities.Dimension">Dimension</see> from which the block will be created.</param>
            <param name="name">The blocks name.</param>
            <returns>A block that represents the specified dimension.</returns>
            <remarks>
            The block's name is irrelevant when the dimension belongs to a document,
            it will be automatically renamed to accommodate to the nomenclature of the DXF.<br />
            The dimension block creation only supports a limited number of <see cref="T:netDxf.Tables.DimensionStyle">dimension style</see> properties.
            Also the list of <see cref="T:netDxf.Tables.DimensionStyleOverride">dimension style overrides</see> associated with the specified dimension will be applied where necessary.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.DimensionBlock.Build(netDxf.Entities.AlignedDimension,System.String)">
            <summary>
            Creates a block that represents the drawing of the specified dimension.
            </summary>
            <param name="dim"><see cref="T:netDxf.Entities.AlignedDimension">AlignedDimension</see> from which the block will be created.</param>
            <param name="name">The blocks name.</param>
            <returns>A block that represents the specified dimension.</returns>
            <remarks>
            The block's name is irrelevant when the dimension belongs to a document,
            it will be automatically renamed to accommodate to the nomenclature of the DXF.<br />
            The dimension block creation only supports a limited number of <see cref="T:netDxf.Tables.DimensionStyle">dimension style</see> properties.
            Also the list of <see cref="T:netDxf.Tables.DimensionStyleOverride">dimension style overrides</see> associated with the specified dimension will be applied where necessary.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.DimensionBlock.Build(netDxf.Entities.LinearDimension,System.String)">
            <summary>
            Creates a block that represents the drawing of the specified dimension.
            </summary>
            <param name="dim"><see cref="T:netDxf.Entities.LinearDimension">LinearDimension</see> from which the block will be created.</param>
            <param name="name">The blocks name.</param>
            <returns>A block that represents the specified dimension.</returns>
            <remarks>
            The block's name is irrelevant when the dimension belongs to a document,
            it will be automatically renamed to accommodate to the nomenclature of the DXF.<br />
            The dimension block creation only supports a limited number of <see cref="T:netDxf.Tables.DimensionStyle">dimension style</see> properties.
            Also the list of <see cref="T:netDxf.Tables.DimensionStyleOverride">dimension style overrides</see> associated with the specified dimension will be applied where necessary.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.DimensionBlock.Build(netDxf.Entities.Angular2LineDimension,System.String)">
            <summary>
            Creates a block that represents the drawing of the specified dimension.
            </summary>
            <param name="dim"><see cref="T:netDxf.Entities.Angular2LineDimension">Angular2LineDimension</see> from which the block will be created.</param>
            <param name="name">The blocks name.</param>
            <returns>A block that represents the specified dimension.</returns>
            <remarks>
            The block's name is irrelevant when the dimension belongs to a document,
            it will be automatically renamed to accommodate to the nomenclature of the DXF.<br />
            The dimension block creation only supports a limited number of <see cref="T:netDxf.Tables.DimensionStyle">dimension style</see> properties.
            Also the list of <see cref="T:netDxf.Tables.DimensionStyleOverride">dimension style overrides</see> associated with the specified dimension will be applied where necessary.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.DimensionBlock.Build(netDxf.Entities.Angular3PointDimension,System.String)">
            <summary>
            Creates a block that represents the drawing of the specified dimension.
            </summary>
            <param name="dim"><see cref="T:netDxf.Entities.Angular3PointDimension">Angular3PointDimension</see> from which the block will be created.</param>
            <param name="name">The blocks name.</param>
            <returns>A block that represents the specified dimension.</returns>
            <remarks>
            The block's name is irrelevant when the dimension belongs to a document,
            it will be automatically renamed to accommodate to the nomenclature of the DXF.<br />
            The dimension block creation only supports a limited number of <see cref="T:netDxf.Tables.DimensionStyle">dimension style</see> properties.
            Also the list of <see cref="T:netDxf.Tables.DimensionStyleOverride">dimension style overrides</see> associated with the specified dimension will be applied where necessary.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.DimensionBlock.Build(netDxf.Entities.DiametricDimension,System.String)">
            <summary>
            Creates a block that represents the drawing of the specified dimension.
            </summary>
            <param name="dim"><see cref="T:netDxf.Entities.DiametricDimension">DiametricDimension</see> from which the block will be created.</param>
            <param name="name">The blocks name.</param>
            <returns>A block that represents the specified dimension.</returns>
            <remarks>
            The block's name is irrelevant when the dimension belongs to a document,
            it will be automatically renamed to accommodate to the nomenclature of the DXF.<br />
            The dimension block creation only supports a limited number of <see cref="T:netDxf.Tables.DimensionStyle">dimension style</see> properties.
            Also the list of <see cref="T:netDxf.Tables.DimensionStyleOverride">dimension style overrides</see> associated with the specified dimension will be applied where necessary.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.DimensionBlock.Build(netDxf.Entities.RadialDimension,System.String)">
            <summary>
            Creates a block that represents the drawing of the specified dimension.
            </summary>
            <param name="dim"><see cref="T:netDxf.Entities.RadialDimension">RadialDimension</see> from which the block will be created.</param>
            <param name="name">The blocks name.</param>
            <returns>A block that represents the specified dimension.</returns>
            <remarks>
            The block's name is irrelevant when the dimension belongs to a document,
            it will be automatically renamed to accommodate to the nomenclature of the DXF.<br />
            The dimension block creation only supports a limited number of <see cref="T:netDxf.Tables.DimensionStyle">dimension style</see> properties.
            Also the list of <see cref="T:netDxf.Tables.DimensionStyleOverride">dimension style overrides</see> associated with the specified dimension will be applied where necessary.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.DimensionBlock.Build(netDxf.Entities.OrdinateDimension,System.String)">
            <summary>
            Creates a block that represents the drawing of the specified dimension.
            </summary>
            <param name="dim"><see cref="T:netDxf.Entities.OrdinateDimension">OrdinateDimension</see> from which the block will be created.</param>
            <param name="name">The blocks name.</param>
            <returns>A block that represents the specified dimension.</returns>
            <remarks>
            The block's name is irrelevant when the dimension belongs to a document,
            it will be automatically renamed to accommodate to the nomenclature of the DXF.<br />
            The dimension block creation only supports a limited number of <see cref="T:netDxf.Tables.DimensionStyle">dimension style</see> properties.
            Also the list of <see cref="T:netDxf.Tables.DimensionStyleOverride">dimension style overrides</see> associated with the specified dimension will be applied where necessary.
            </remarks>
        </member>
        <member name="T:netDxf.Entities.DimensionType">
            <summary>
            Dimension type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionType.Linear">
            <summary>
            Rotated, horizontal, or vertical.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionType.Aligned">
            <summary>
            Aligned.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionType.Angular">
            <summary>
            Angular 2 lines.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionType.Diameter">
            <summary>
            Diameter.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionType.Radius">
            <summary>
            Radius.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionType.Angular3Point">
            <summary>
            Angular 3 points.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionType.Ordinate">
            <summary>
            Ordinate.
            </summary>
        </member>
        <member name="T:netDxf.Entities.DimensionTypeFlags">
            <summary>
            Dimension type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlags.Linear">
            <summary>
            Rotated, horizontal, or vertical.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlags.Aligned">
            <summary>
            Aligned.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlags.Angular">
            <summary>
            Angular 2 lines.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlags.Diameter">
            <summary>
            Diameter.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlags.Radius">
            <summary>
            Radius.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlags.Angular3Point">
            <summary>
            Angular 3 points.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlags.Ordinate">
            <summary>
            Ordinate.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlags.BlockReference">
            <summary>
            Indicates that the block reference (group code 2) is referenced by this dimension only.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlags.OrdinateType">
            <summary>
            Ordinate type. This is a bit value (bit 7) used only with integer value 6. If set, ordinate is X-type; if not set, ordinate is Y-type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.DimensionTypeFlags.UserTextPosition">
            <summary>
            This is a bit value (bit 8) added to the other group 70 values if the dimension text has been positioned at a user-defined location rather than at the default location.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Ellipse">
            <summary>
            Represents an ellipse <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Ellipse.#ctor">
            <summary>
            Initializes a new instance of the <c>Ellipse</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Ellipse.#ctor(netDxf.Vector2,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Ellipse</c> class.
            </summary>
            <param name="center">Ellipse <see cref="T:netDxf.Vector2">center</see> in object coordinates.</param>
            <param name="majorAxis">Ellipse major axis.</param>
            <param name="minorAxis">Ellipse minor axis.</param>
            <remarks>The center Z coordinate represents the elevation of the arc along the normal.</remarks>
        </member>
        <member name="M:netDxf.Entities.Ellipse.#ctor(netDxf.Vector3,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Ellipse</c> class.
            </summary>
            <param name="center">Ellipse <see cref="T:netDxf.Vector3">center</see> in object coordinates.</param>
            <param name="majorAxis">Ellipse major axis.</param>
            <param name="minorAxis">Ellipse minor axis.</param>
            <remarks>The center Z coordinate represents the elevation of the arc along the normal.</remarks>
        </member>
        <member name="P:netDxf.Entities.Ellipse.Center">
            <summary>
            Gets or sets the ellipse <see cref="T:netDxf.Vector3">center</see>.
            </summary>
            <remarks>The center Z coordinate represents the elevation of the arc along the normal.</remarks>
        </member>
        <member name="P:netDxf.Entities.Ellipse.MajorAxis">
            <summary>
            Gets or sets the ellipse mayor axis.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ellipse.MinorAxis">
            <summary>
            Gets or sets the ellipse minor axis.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ellipse.Rotation">
            <summary>
            Gets or sets the ellipse local rotation in degrees along its normal.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ellipse.StartAngle">
            <summary>
            Gets or sets the ellipse start angle in degrees.
            </summary>
            <remarks>To get a full ellipse set the start angle equal to the end angle.</remarks>
        </member>
        <member name="P:netDxf.Entities.Ellipse.EndAngle">
            <summary>
            Gets or sets the ellipse end angle in degrees.
            </summary>
            <remarks>To get a full ellipse set the end angle equal to the start angle.</remarks>
        </member>
        <member name="P:netDxf.Entities.Ellipse.Thickness">
            <summary>
            Gets or sets the ellipse thickness.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ellipse.IsFullEllipse">
            <summary>
            Checks if the actual instance is a full ellipse.
            </summary>
            <remarks>An ellipse is considered full when its start and end angles are equal.</remarks>
        </member>
        <member name="M:netDxf.Entities.Ellipse.PolarCoordinateRelativeToCenter(System.Double)">
            <summary>
            Calculate the local point on the ellipse for a given angle relative to the center.
            </summary>
            <param name="angle">Angle in degrees.</param>
            <returns>A local point on the ellipse for the given angle relative to the center.</returns>
        </member>
        <member name="M:netDxf.Entities.Ellipse.PolygonalVertexes(System.Int32)">
            <summary>
            Converts the ellipse in a list of vertexes.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A list vertexes that represents the ellipse expressed in object coordinate system.</returns>
        </member>
        <member name="M:netDxf.Entities.Ellipse.ToPolyline(System.Int32)">
            <summary>
            Converts the ellipse in a Polyline.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A new instance of <see cref="T:netDxf.Entities.LwPolyline">LightWeightPolyline</see> that represents the ellipse.</returns>
        </member>
        <member name="M:netDxf.Entities.Ellipse.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Ellipse.Clone">
            <summary>
            Creates a new Ellipse that is a copy of the current instance.
            </summary>
            <returns>A new Ellipse that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.EndSequence">
            <summary>
            Represents the terminator element of a vertex sequence in polylines or attributes in a block reference.
            </summary>
        </member>
        <member name="M:netDxf.Entities.EndSequence.#ctor(netDxf.DxfObject)">
            <summary>
            Initializes a new instance of the <c>EndSequence</c> class.
            </summary>
        </member>
        <member name="T:netDxf.Entities.EntityChangeEventArgs">
            <summary>
            Represents the arguments thrown when the reference of an entity is added ore removed from another entity.
            </summary>
        </member>
        <member name="M:netDxf.Entities.EntityChangeEventArgs.#ctor(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of <c>EntityChangeEventArgs</c>.
            </summary>
            <param name="item">The entity that is being added or removed from another entity.</param>
        </member>
        <member name="P:netDxf.Entities.EntityChangeEventArgs.Item">
            <summary>
            Gets the entity that is being added or removed.
            </summary>
        </member>
        <member name="T:netDxf.Entities.EntityObject">
            <summary>
            Represents a generic entity.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Reactors">
            <summary>
            Gets the list of DXF objects that has been attached to this entity.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Type">
            <summary>
            Gets the entity <see cref="T:netDxf.Entities.EntityType">type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Color">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Layer">
            <summary>
            Gets or sets the entity <see cref="P:netDxf.Entities.EntityObject.Layer">layer</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Linetype">
            <summary>
            Gets or sets the entity <see cref="P:netDxf.Entities.EntityObject.Linetype">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Lineweight">
            <summary>
            Gets or sets the entity <see cref="P:netDxf.Entities.EntityObject.Lineweight">line weight</see>, one unit is always 1/100 mm (default = ByLayer).
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Transparency">
            <summary>
            Gets or sets layer <see cref="P:netDxf.Entities.EntityObject.Transparency">transparency</see> (default: ByLayer).
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.LinetypeScale">
            <summary>
            Gets or sets the entity line type scale.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.IsVisible">
            <summary>
            Gets or set the entity visibility.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Normal">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.Owner">
            <summary>
            Gets the owner of the actual DXF object.
            </summary>
        </member>
        <member name="P:netDxf.Entities.EntityObject.XData">
            <summary>
            Gets the entity <see cref="T:netDxf.Collections.XDataDictionary">extended data</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.EntityObject.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.EntityObject.TransformBy(netDxf.Matrix4)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 4x4 transformation matrix.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <remarks>Matrix4 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.EntityObject.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:netDxf.Entities.EntityObject.Clone">
            <summary>
            Creates a new entity that is a copy of the current instance.
            </summary>
            <returns>A new entity that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.EntityType">
            <summary>
            Defines the entity type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Arc">
            <summary>
            Arc entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Circle">
            <summary>
            Circle entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Dimension">
            <summary>
            Dimension entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Ellipse">
            <summary>
            Ellipse entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Face3D">
            <summary>
            3d face entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Hatch">
            <summary>
            Hatch entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Image">
            <summary>
            A raster image entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Insert">
            <summary>
            Block insertion entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Leader">
            <summary>
            Leader entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.LwPolyline">
            <summary>
            LwPolyline entity, aka lightweight polyline.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Line">
            <summary>
            Line entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Mesh">
            <summary>
            Mesh entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.MLine">
            <summary>
            Multiline entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.MText">
            <summary>
            Multiline text string entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Point">
            <summary>
            Point entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.PolyfaceMesh">
            <summary>
            Polyface mesh entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Polyline">
            <summary>
            3d polyline entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Ray">
            <summary>
            Ray entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Shape">
            <summary>
            Shape entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Solid">
            <summary>
            Solid entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Spline">
            <summary>
            Spline (nonuniform rational B-splines NURBS).
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Text">
            <summary>
            Text string entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Tolerance">
            <summary>
            Tolerance entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Trace">
            <summary>
            Trace entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Underlay">
            <summary>
            Underlay entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Viewport">
            <summary>
            Viewport entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.Wipeout">
            <summary>
            Wipeout entity.
            </summary>
        </member>
        <member name="F:netDxf.Entities.EntityType.XLine">
            <summary>
            XLine entity.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Face3d">
            <summary>
            Represents a 3dFace <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Face3d.#ctor">
            <summary>
            Initializes a new instance of the <c>Face3d</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Face3d.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Face3d</c> class.
            </summary>
            <param name="firstVertex">3d face <see cref="T:netDxf.Vector2">first vertex</see>.</param>
            <param name="secondVertex">3d face <see cref="T:netDxf.Vector2">second vertex</see>.</param>
            <param name="thirdVertex">3d face <see cref="T:netDxf.Vector2">third vertex</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Face3d.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Face3d</c> class.
            </summary>
            <param name="firstVertex">3d face <see cref="T:netDxf.Vector2">first vertex</see>.</param>
            <param name="secondVertex">3d face <see cref="T:netDxf.Vector2">second vertex</see>.</param>
            <param name="thirdVertex">3d face <see cref="T:netDxf.Vector2">third vertex</see>.</param>
            <param name="fourthVertex">3d face <see cref="T:netDxf.Vector2">fourth vertex</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Face3d.#ctor(netDxf.Vector3,netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Face3d</c> class.
            </summary>
            <param name="firstVertex">3d face <see cref="T:netDxf.Vector3">first vertex</see>.</param>
            <param name="secondVertex">3d face <see cref="T:netDxf.Vector3">second vertex</see>.</param>
            <param name="thirdVertex">3d face <see cref="T:netDxf.Vector3">third vertex</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Face3d.#ctor(netDxf.Vector3,netDxf.Vector3,netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Face3d</c> class.
            </summary>
            <param name="firstVertex">3d face <see cref="T:netDxf.Vector3">first vertex</see>.</param>
            <param name="secondVertex">3d face <see cref="T:netDxf.Vector3">second vertex</see>.</param>
            <param name="thirdVertex">3d face <see cref="T:netDxf.Vector3">third vertex</see>.</param>
            <param name="fourthVertex">3d face <see cref="T:netDxf.Vector3">fourth vertex</see>.</param>
        </member>
        <member name="P:netDxf.Entities.Face3d.FirstVertex">
            <summary>
            Gets or sets the first 3d face <see cref="T:netDxf.Vector3">vertex</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Face3d.SecondVertex">
            <summary>
            Gets or sets the second 3d face <see cref="T:netDxf.Vector3">vertex</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Face3d.ThirdVertex">
            <summary>
            Gets or sets the third 3d face <see cref="T:netDxf.Vector3">vertex</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Face3d.FourthVertex">
            <summary>
            Gets or sets the fourth 3d face <see cref="T:netDxf.Vector3">vertex</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Face3d.EdgeFlags">
            <summary>
            Gets or sets the 3d face edge visibility.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Face3d.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Face3d.Clone">
            <summary>
            Creates a new Face3d that is a copy of the current instance.
            </summary>
            <returns>A new Face3d that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Face3dEdgeFlags">
            <summary>
            Defines which edges are hidden.
            </summary>
        </member>
        <member name="F:netDxf.Entities.Face3dEdgeFlags.Visibles">
            <summary>
            All edges are visible (default).
            </summary>
        </member>
        <member name="F:netDxf.Entities.Face3dEdgeFlags.First">
            <summary>
            First edge is invisible.
            </summary>
        </member>
        <member name="F:netDxf.Entities.Face3dEdgeFlags.Second">
            <summary>
            Second edge is invisible.
            </summary>
        </member>
        <member name="F:netDxf.Entities.Face3dEdgeFlags.Third">
            <summary>
            Third edge is invisible.
            </summary>
        </member>
        <member name="F:netDxf.Entities.Face3dEdgeFlags.Fourth">
            <summary>
            Fourth edge is invisible.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Hatch">
            <summary>
            Represents a hatch <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Hatch.#ctor(netDxf.Entities.HatchPattern,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>Hatch</c> class.
            </summary>
            <remarks>
            This constructor is initialized with an empty list of boundary paths, remember a hatch without boundaries will be discarded when saving the file.<br/>
            When creating an associative hatch do not add the entities that make the boundary to the document, it will be done automatically. Doing so will throw an exception.<br/>
            The hatch boundary paths must be on the same plane as the hatch.
            The normal and the elevation of the boundary paths will be omitted (the hatch elevation and normal will be used instead).
            Only the x and y coordinates for the center of the line, ellipse, circle and arc will be used.
            </remarks>
            <param name="pattern"><see cref="T:netDxf.Entities.HatchPattern">Hatch pattern</see>.</param>
            <param name="associative">Defines if the hatch is associative or not.</param>
        </member>
        <member name="M:netDxf.Entities.Hatch.#ctor(netDxf.Entities.HatchPattern,System.Collections.Generic.IEnumerable{netDxf.Entities.HatchBoundaryPath},System.Boolean)">
            <summary>
            Initializes a new instance of the <c>Hatch</c> class.
            </summary>
            <remarks>
            The hatch boundary paths must be on the same plane as the hatch.
            The normal and the elevation of the boundary paths will be omitted (the hatch elevation and normal will be used instead).
            Only the x and y coordinates for the center of the line, ellipse, circle and arc will be used.
            </remarks>
            <param name="pattern"><see cref="T:netDxf.Entities.HatchPattern">Hatch pattern</see>.</param>
            <param name="paths">A list of <see cref="T:netDxf.Entities.HatchBoundaryPath">boundary paths</see>.</param>
            <param name="associative">Defines if the hatch is associative or not.</param>
        </member>
        <member name="P:netDxf.Entities.Hatch.Pattern">
            <summary>
            Gets the hatch pattern.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Hatch.BoundaryPaths">
            <summary>
            Gets the hatch boundary paths.
            </summary>
            <remarks>
            The hatch must contain at least on valid boundary path to be able to add it to the DxfDocument, otherwise it will be rejected.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Hatch.Associative">
            <summary>
            Gets if the hatch is associative or not, which means if the hatch object is associated with the hatch boundary entities.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Hatch.Elevation">
            <summary>
            Gets or sets the hatch elevation, its position along its normal.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Hatch.UnLinkBoundary">
            <summary>
            Unlinks the boundary from the hatch, turning the associative property to false.
            </summary>
            <returns>The list of unlinked entities from the boundary of the hatch.</returns>
            <remarks>The entities that make the hatch boundaries will not be deleted from the document if they already belong to one.</remarks>
        </member>
        <member name="M:netDxf.Entities.Hatch.CreateBoundary(System.Boolean)">
            <summary>
            Creates a list of entities that represents the boundary of the hatch and optionally associates to it.
            </summary>
            <param name="linkBoundary">Indicates if the new boundary will be associated with the hatch, turning the associative property to true.</param>
            <returns>A list of entities that makes the boundary of the hatch.</returns>
            <remarks>
            If the actual hatch is already associative, the old boundary entities will be unlinked, but not deleted from the hatch document.
            If linkBoundary is true, the new boundary entities will be added to the same layout and document as the hatch, in case it belongs to one,
            so, in this case, if you also try to add the return list to the document it will cause an error.<br/>
            All entities are in world coordinates except the LwPolyline boundary path since by definition its vertexes are expressed in object coordinates.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Hatch.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Hatch.Clone">
            <summary>
            Creates a new Hatch that is a copy of the current instance.
            </summary>
            <returns>A new Hatch that is a copy of this instance.</returns>
            <remarks>
            If the hatch is associative the referenced boundary entities will not be automatically cloned, its associative property will be set to false.
            Use CreateBoundary if required after cloning.
            </remarks>
        </member>
        <member name="T:netDxf.Entities.HatchBoundaryPath">
            <summary>
            Represent a loop of a <see cref="T:netDxf.Entities.Hatch">hatch</see> boundaries.
            </summary>
            <remarks>
            The entities that make a loop can be any combination of lines, light weight polylines, polylines, circles, arcs, ellipses, and splines.<br />
            The entities that define a loop should define a closed path, they have to be on the same plane as the hatch, and with the same normal;
            if these conditions are not met the result might be unpredictable. <br />
            Entities expressed in 3d coordinates like lines, polylines, and splines will be projected into its local plane.
            All edges that make a HatchBoundaryPath are 2d objects, only have X and Y coordinates.
            This is why to avoid unexpected results is important that all entities that define the paths have the same normal, same reference plane.
            </remarks>
        </member>
        <member name="T:netDxf.Entities.HatchBoundaryPath.EdgeType">
            <summary>
            Specifies the type of HatchBoundaryPath.Edge.
            </summary>
        </member>
        <member name="T:netDxf.Entities.HatchBoundaryPath.Edge">
            <summary>
            Base class for all types of HatchBoundaryPath edges.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Edge.Type">
            <summary>
            Gets the HatchBoundaryPath edge type
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Edge.ConvertTo">
            <summary>
            Converts the actual edge to its entity equivalent.
            </summary>
            <returns>An EntityObject equivalent to the actual edge.</returns>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Edge.Clone">
            <summary>
            Clones the actual edge.
            </summary>
            <returns>A copy of the actual edge.</returns>
        </member>
        <member name="T:netDxf.Entities.HatchBoundaryPath.Polyline">
            <summary>
            Represents a polyline edge of a HatchBoundaryPath.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Polyline.Vertexes">
            <summary>
            Gets or sets the list of polyline vertexes.
            </summary>
            <remarks>
            The position of the vertex is defined by the X and Y coordinates, the Z value represents the bulge at that vertex.
            </remarks>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Polyline.IsClosed">
            <summary>
            Gets if the polyline is closed.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Polyline.#ctor">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Polyline</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Polyline.#ctor(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Polyline</c> class.
            </summary>
            <param name="entity"><see cref="T:netDxf.Entities.EntityObject">Entity</see> that represents the edge.</param>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Polyline.ConvertFrom(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Polyline</c> class.
            </summary>
            <param name="entity"><see cref="T:netDxf.Entities.EntityObject">Entity</see> that represents the edge.</param>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Polyline.ConvertTo">
            <summary>
            Converts the actual edge to its entity equivalent.
            </summary>
            <returns>An <see cref="T:netDxf.Entities.EntityObject">entity</see> equivalent to the actual edge.</returns>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Polyline.Clone">
            <summary>
            Clones the actual edge.
            </summary>
            <returns>A copy of the actual edge.</returns>
        </member>
        <member name="T:netDxf.Entities.HatchBoundaryPath.Line">
            <summary>
            Represents a line edge of a HatchBoundaryPath.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Line.Start">
            <summary>
            Gets or sets the start point of the line.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Line.End">
            <summary>
            Gets or sets the end point of the line.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Line.#ctor">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Line</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Line.#ctor(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Line</c> class.
            </summary>
            <param name="entity"><see cref="T:netDxf.Entities.EntityObject">Entity</see> that represents the edge.</param>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Line.ConvertFrom(netDxf.Entities.EntityObject)">
            <summary>
            Creates a BoundaryBoundaryPath from an <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
            <param name="entity">An <see cref="T:netDxf.Entities.EntityObject">entity</see>.</param>
            <returns>A HatchBoundaryPath line.</returns>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Line.ConvertTo">
            <summary>
            Converts the actual edge to its entity equivalent.
            </summary>
            <returns>An <see cref="T:netDxf.Entities.EntityObject">entity</see> equivalent to the actual edge.</returns>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Line.Clone">
            <summary>
            Clones the actual edge.
            </summary>
            <returns>A copy of the actual edge.</returns>
        </member>
        <member name="T:netDxf.Entities.HatchBoundaryPath.Arc">
            <summary>
            Represents an arc edge of a HatchBoundaryPath.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Arc.Center">
            <summary>
            Gets or set the center of the arc.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Arc.Radius">
            <summary>
            Gets or sets the radius of the arc.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Arc.StartAngle">
            <summary>
            Gets or sets the start angle of the arc.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Arc.EndAngle">
            <summary>
            Gets or sets the end angle of the arc.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Arc.IsCounterclockwise">
            <summary>
            Gets or sets if the arc is counter clockwise.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Arc.#ctor">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Arc</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Arc.#ctor(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Arc</c> class.
            </summary>
            <param name="entity"><see cref="T:netDxf.Entities.EntityObject">Entity</see> that represents the edge.</param>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Arc.ConvertFrom(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Arc</c> class.
            </summary>
            <param name="entity"><see cref="T:netDxf.Entities.EntityObject">Entity</see> that represents the edge.</param>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Arc.ConvertTo">
            <summary>
            Converts the actual edge to its entity equivalent.
            </summary>
            <returns>An <see cref="T:netDxf.Entities.EntityObject">entity</see> equivalent to the actual edge.</returns>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Arc.Clone">
            <summary>
            Clones the actual edge.
            </summary>
            <returns>A copy of the actual edge.</returns>
        </member>
        <member name="T:netDxf.Entities.HatchBoundaryPath.Ellipse">
            <summary>
            Represents a ellipse edge of a HatchBoundaryPath.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Ellipse.Center">
            <summary>
            Gets or sets the center of the ellipse.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Ellipse.EndMajorAxis">
            <summary>
            Gets or sets the position of the end of the major axis.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Ellipse.MinorRatio">
            <summary>
            Gets or sets the scale of the minor axis in respect of the major axis.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Ellipse.StartAngle">
            <summary>
            Gets or sets the start angle of the ellipse.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Ellipse.EndAngle">
            <summary>
            Gets or sets the end angle of the ellipse.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Ellipse.IsCounterclockwise">
            <summary>
            Gets or sets if the ellipse is counter clockwise.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Ellipse.#ctor">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Ellipse</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Ellipse.#ctor(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Ellipse</c> class.
            </summary>
            <param name="entity"><see cref="T:netDxf.Entities.EntityObject">Entity</see> that represents the edge.</param>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Ellipse.ConvertFrom(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Ellipse</c> class.
            </summary>
            <param name="entity"><see cref="T:netDxf.Entities.EntityObject">Entity</see> that represents the edge.</param>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Ellipse.ConvertTo">
            <summary>
            Converts the actual edge to its entity equivalent.
            </summary>
            <returns>An <see cref="T:netDxf.Entities.EntityObject">entity</see> equivalent to the actual edge.</returns>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Ellipse.Clone">
            <summary>
            Clones the actual edge.
            </summary>
            <returns>A copy of the actual edge.</returns>
        </member>
        <member name="T:netDxf.Entities.HatchBoundaryPath.Spline">
            <summary>
            Represents a spline edge of a HatchBoundaryPath.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Spline.Degree">
            <summary>
            Gets or sets the degree of the spline
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Spline.IsRational">
            <summary>
            Gets or sets if the spline is rational.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Spline.IsPeriodic">
            <summary>
            Gets or sets if the spline is periodic.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Spline.Knots">
            <summary>
            Gets or sets the list of knots of the spline.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPath.Spline.ControlPoints">
            <summary>
            Gets or sets the list of control points of the spline.
            </summary>
            <remarks>
            The position of the control point is defined by the X and Y coordinates, the Z value represents its weight.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Spline.#ctor">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Spline</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Spline.#ctor(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Spline</c> class.
            </summary>
            <param name="entity"><see cref="T:netDxf.Entities.EntityObject">Entity</see> that represents the edge.</param>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Spline.ConvertFrom(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of the <c>HatchBoundaryPath.Spline</c> class.
            </summary>
            <param name="entity"><see cref="T:netDxf.Entities.EntityObject">Entity</see> that represents the edge.</param>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Spline.ConvertTo">
            <summary>
            Converts the actual edge to its entity equivalent.
            </summary>
            <returns>An <see cref="T:netDxf.Entities.EntityObject">entity</see> equivalent to the actual edge.</returns>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Spline.Clone">
            <summary>
            Clones the actual edge.
            </summary>
            <returns>A copy of the actual edge.</returns>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.#ctor(System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject})">
            <summary>
            Initializes a new instance of the <c>Hatch</c> class.
            </summary>
            <param name="edges">List of entities that makes a loop for the hatch boundary paths.</param>
        </member>
        <member name="P:netDxf.Entities.HatchBoundaryPath.Edges">
            <summary>
            Gets the list of entities that makes a loop for the hatch boundary paths.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchBoundaryPath.PathType">
            <summary>
            Gets the boundary path type flag.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchBoundaryPath.Entities">
            <summary>
            Gets the list of entities that makes the boundary.
            </summary>
            <remarks>If the boundary path belongs to a non-associative hatch this list will contain zero entities.</remarks>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Update">
            <summary>
            Updates the internal HatchBoundaryPath data. 
            </summary>
            <remarks>
            It is necessary to manually call this method when changes to the boundary entities are made. This is only applicable to associative hatches,
            non-associative hatches has no associated boundary entities.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.HatchBoundaryPath.Clone">
            <summary>
            Creates a new HatchBoundaryPath that is a copy of the current instance.
            </summary>
            <returns>A new HatchBoundaryPath that is a copy of this instance.</returns>
            <remarks>When cloning a HatchBoundaryPath, if it has entities that defines its contour, they will not be cloned.</remarks>
        </member>
        <member name="T:netDxf.Entities.HatchBoundaryPathTypeFlags">
            <summary>
            Defines the boundary path type of the hatch.
            </summary>
            <remarks>Bit flag.</remarks>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPathTypeFlags.Default">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPathTypeFlags.External">
            <summary>
            External.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPathTypeFlags.Polyline">
            <summary>
            Polyline.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPathTypeFlags.Derived">
            <summary>
            Derived.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPathTypeFlags.Textbox">
            <summary>
            Text box.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchBoundaryPathTypeFlags.Outermost">
            <summary>
            Outermost.
            </summary>
        </member>
        <member name="T:netDxf.Entities.HatchFillType">
            <summary>
            Hatch pattern fill type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchFillType.PatternFill">
            <summary>
            Pattern fill.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchFillType.SolidFill">
            <summary>
            Solid fill.
            </summary>
        </member>
        <member name="T:netDxf.Entities.HatchGradientPattern">
            <summary>
            Represents the hatch gradient pattern style.
            </summary>
            <remarks>
            Gradient patterns are only supported by AutoCad2004 and higher DXF versions. It will default to a solid pattern if saved as AutoCad2000.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.HatchGradientPattern.#ctor">
            <summary>
            Initializes a new instance of the <c>HatchGradientPattern</c> class as a default linear gradient. 
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchGradientPattern.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>HatchGradientPattern</c> class as a default linear gradient. 
            </summary>
            <param name="description">Description of the pattern (optional, this information is not saved in the DXF file). By default it will use the supplied name.</param>
        </member>
        <member name="M:netDxf.Entities.HatchGradientPattern.#ctor(netDxf.AciColor,System.Double,netDxf.Entities.HatchGradientPatternType)">
            <summary>
            Initializes a new instance of the <c>HatchGradientPattern</c> class as a single color gradient. 
            </summary>
            <param name="color">Gradient <see cref="T:netDxf.AciColor">color</see>.</param>
            <param name="tint">Gradient tint.</param>
            <param name="type">Gradient <see cref="T:netDxf.Entities.HatchGradientPatternType">type</see>.</param>
        </member>
        <member name="M:netDxf.Entities.HatchGradientPattern.#ctor(netDxf.AciColor,System.Double,netDxf.Entities.HatchGradientPatternType,System.String)">
            <summary>
            Initializes a new instance of the <c>HatchGradientPattern</c> class as a single color gradient. 
            </summary>
            <param name="color">Gradient <see cref="T:netDxf.AciColor">color</see>.</param>
            <param name="tint">Gradient tint.</param>
            <param name="type">Gradient <see cref="T:netDxf.Entities.HatchGradientPatternType">type</see>.</param>
            <param name="description">Description of the pattern (optional, this information is not saved in the DXF file). By default it will use the supplied name.</param>
        </member>
        <member name="M:netDxf.Entities.HatchGradientPattern.#ctor(netDxf.AciColor,netDxf.AciColor,netDxf.Entities.HatchGradientPatternType)">
            <summary>
            Initializes a new instance of the <c>HatchGradientPattern</c> class as a two color gradient. 
            </summary>
            <param name="color1">Gradient <see cref="T:netDxf.AciColor">color</see> 1.</param>
            <param name="color2">Gradient <see cref="T:netDxf.AciColor">color</see> 2.</param>
            <param name="type">Gradient <see cref="T:netDxf.Entities.HatchGradientPatternType">type</see>.</param>
        </member>
        <member name="M:netDxf.Entities.HatchGradientPattern.#ctor(netDxf.AciColor,netDxf.AciColor,netDxf.Entities.HatchGradientPatternType,System.String)">
            <summary>
            Initializes a new instance of the <c>HatchGradientPattern</c> class as a two color gradient. 
            </summary>
            <param name="color1">Gradient <see cref="T:netDxf.AciColor">color</see> 1.</param>
            <param name="color2">Gradient <see cref="T:netDxf.AciColor">color</see> 2.</param>
            <param name="type">Gradient <see cref="T:netDxf.Entities.HatchGradientPatternType">type</see>.</param>
            <param name="description">Description of the pattern (optional, this information is not saved in the DXF file). By default it will use the supplied name.</param>
        </member>
        <member name="P:netDxf.Entities.HatchGradientPattern.GradientType">
            <summary>
            Gets or set the gradient pattern <see cref="T:netDxf.Entities.HatchGradientPatternType">type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchGradientPattern.Color1">
            <summary>
            Gets or sets the gradient <see cref="T:netDxf.AciColor">color</see> 1.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchGradientPattern.Color2">
            <summary>
            Gets or sets the gradient <see cref="T:netDxf.AciColor">color</see> 2.
            </summary>
            <remarks>
            If color 2 is defined, automatically the single color property will be set to false.  
            </remarks>
        </member>
        <member name="P:netDxf.Entities.HatchGradientPattern.SingleColor">
            <summary>
            Gets or sets the gradient pattern color type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchGradientPattern.Tint">
            <summary>
            Gets or sets the gradient pattern tint.
            </summary>
            <remarks>It only applies to single color gradient patterns.</remarks>
        </member>
        <member name="P:netDxf.Entities.HatchGradientPattern.Centered">
            <summary>
            Gets or sets if the pattern is centered or not.
            </summary>
            <remarks>
            Each gradient has two definitions, shifted and unsifted. A shift value describes the blend of the two definitions that should be used.
            A value of 0.0 (false) means only the unsifted version should be used, and a value of 1.0 (true) means that only the shifted version should be used.
            </remarks>
        </member>
        <member name="T:netDxf.Entities.HatchGradientPatternType">
            <summary>
            Gradient pattern types.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.Linear">
            <summary>
            Linear.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.Cylinder">
            <summary>
            Cylinder.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.InvCylinder">
            <summary>
            Inverse cylinder.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.Spherical">
            <summary>
            Spherical.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.InvSpherical">
            <summary>
            Inverse spherical.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.Hemispherical">
            <summary>
            Hemispherical.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.InvHemispherical">
            <summary>
            Inverse hemispherical.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.Curved">
            <summary>
            Curved.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchGradientPatternType.InvCurved">
            <summary>
            Inverse curved.
            </summary>
        </member>
        <member name="T:netDxf.Entities.HatchPattern">
            <summary>
            Represents a <see cref="T:netDxf.Entities.Hatch">hatch</see> pattern style.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchPattern.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>HatchPattern</c> class.
            </summary>
            <param name="name">Pattern name, always stored as uppercase.</param>
        </member>
        <member name="M:netDxf.Entities.HatchPattern.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>HatchPattern</c> class.
            </summary>
            <param name="name">Pattern name, always stored as uppercase.</param>
            <param name="description">Description of the pattern (optional, this information is not saved in the DXF file). By default it will use the supplied name.</param>
        </member>
        <member name="M:netDxf.Entities.HatchPattern.#ctor(System.String,System.Collections.Generic.IEnumerable{netDxf.Entities.HatchPatternLineDefinition})">
            <summary>
            Initializes a new instance of the <c>HatchPattern</c> class.
            </summary>
            <param name="name">Pattern name, always stored as uppercase.</param>
            <param name="lineDefinitions">The definition of the lines that make up the pattern (not applicable in Solid fills).</param>
        </member>
        <member name="M:netDxf.Entities.HatchPattern.#ctor(System.String,System.Collections.Generic.IEnumerable{netDxf.Entities.HatchPatternLineDefinition},System.String)">
            <summary>
            Initializes a new instance of the <c>HatchPattern</c> class.
            </summary>
            <param name="name">Pattern name, always stored as uppercase.</param>
            <param name="lineDefinitions">The definition of the lines that make up the pattern (not applicable in Solid fills).</param>
            <param name="description">Description of the pattern (optional, this information is not saved in the DXF file). By default it will use the supplied name.</param>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Solid">
            <summary>
            Solid hatch pattern.
            </summary>
            <remarks>The predefined pattern values are based on the acad.pat file of AutoCAD.</remarks>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Line">
            <summary>
            Lines hatch pattern.
            </summary>
            <remarks>The predefined pattern values are based on the acad.pat file of AutoCAD.</remarks>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Net">
            <summary>
            Net or squares hatch pattern.
            </summary>
            <remarks>The predefined pattern values are based on the acad.pat file of AutoCAD.</remarks>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Dots">
            <summary>
            Dots hatch pattern.
            </summary>
            <remarks>The predefined pattern values are based on the acad.pat file of AutoCAD.</remarks>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Name">
            <summary>
            Gets or sets the hatch pattern name.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Description">
            <summary>
            Gets or sets the hatch description (optional, this information is not saved in the DXF file).
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Style">
            <summary>
            Gets the hatch style.
            </summary>
            <remarks>Only normal style is implemented.</remarks>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Type">
            <summary>
            Gets or sets the hatch pattern type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Fill">
            <summary>
            Gets the solid fill flag.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Origin">
            <summary>
            Gets or sets the pattern origin.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Angle">
            <summary>
            Gets or sets the pattern angle in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.Scale">
            <summary>
            Gets or sets the pattern scale (not applicable in Solid fills).
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPattern.LineDefinitions">
            <summary>
            Gets the definition of the lines that make up the pattern (not applicable in Solid fills).
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchPattern.NamesFromFile(System.String)">
            <summary>
            Gets the list of hatch pattern names defined in a PAT file.
            </summary>
            <param name="file">Hatch pattern definitions file.</param>
            <returns>List of hatch pattern names contained in the specified PAT file.</returns>
        </member>
        <member name="M:netDxf.Entities.HatchPattern.Load(System.String,System.String)">
            <summary>
            Creates a new hatch pattern from the definition in a PAT file.
            </summary>
            <param name="file">PAT file where the definition is located.</param>
            <param name="patternName">Name of the pattern definition that wants to be read (ignore case).</param>
            <returns>A Hatch pattern as defined in the PAT file.</returns>
        </member>
        <member name="M:netDxf.Entities.HatchPattern.Save(System.String)">
            <summary>
            Saves the current linetype to the specified file, if the file does not exist it creates a new one.
            </summary>
            <param name="file">File where the current linetype will be saved.</param>
        </member>
        <member name="T:netDxf.Entities.HatchPatternLineDefinition">
            <summary>
            Defines a single line thats is part of a <see cref="T:netDxf.Entities.HatchPattern">hatch pattern</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.HatchPatternLineDefinition.#ctor">
            <summary>
            Initializes a new instance of the <c>HatchPatternLineDefinition</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPatternLineDefinition.Angle">
            <summary>
            Gets or sets the angle of the line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPatternLineDefinition.Origin">
            <summary>
            Gets or sets the origin of the line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.HatchPatternLineDefinition.Delta">
            <summary>
            Gets or sets the local displacements between lines of the same family.
            </summary>
            <remarks>
            The Delta.X value indicates the displacement between members of the family in the direction of the line. It is used only for dashed lines.
            The Delta.Y value indicates the spacing between members of the family; that is, it is measured perpendicular to the lines. 
            </remarks>
        </member>
        <member name="P:netDxf.Entities.HatchPatternLineDefinition.DashPattern">
            <summary>
            Gets he dash pattern of the line it is equivalent as the segments of a <see cref="T:netDxf.Tables.Linetype">Linetype</see>.
            </summary>
            <remarks>
            Positive values means solid segments and negative values means spaces (one entry per element).
            </remarks>
        </member>
        <member name="M:netDxf.Entities.HatchPatternLineDefinition.Clone">
            <summary>
            Creates a new HatchPatternLineDefinition that is a copy of the current instance.
            </summary>
            <returns>A new HatchPatternLineDefinition that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.HatchStyle">
            <summary>
            Hatch pattern style.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchStyle.Normal">
            <summary>
            Hatch "odd parity" area.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchStyle.Outer">
            <summary>
            Hatch outermost area only.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchStyle.Ignore">
            <summary>
            Hatch through entire area.
            </summary>
        </member>
        <member name="T:netDxf.Entities.HatchType">
            <summary>
            Hatch pattern type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchType.UserDefined">
            <summary>
            User defined.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchType.Predefined">
            <summary>
            Predefined.
            </summary>
        </member>
        <member name="F:netDxf.Entities.HatchType.Custom">
            <summary>
            Custom.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Image">
            <summary>
            Represents a raster image <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Image.#ctor(netDxf.Objects.ImageDefinition,netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Image</c> class.
            </summary>
            <param name="imageDefinition">Image definition.</param>
            <param name="position">Image <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="size">Image <see cref="T:netDxf.Vector2">size</see> in world coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Image.#ctor(netDxf.Objects.ImageDefinition,netDxf.Vector3,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Image</c> class.
            </summary>
            <param name="imageDefinition">Image definition.</param>
            <param name="position">Image <see cref="T:netDxf.Vector3">position</see> in world coordinates.</param>
            <param name="size">Image <see cref="T:netDxf.Vector2">size</see> in world coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Image.#ctor(netDxf.Objects.ImageDefinition,netDxf.Vector2,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Image</c> class.
            </summary>
            <param name="imageDefinition">Image definition.</param>
            <param name="position">Image <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="width">Image width in world coordinates.</param>
            <param name="height">Image height in world coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Image.#ctor(netDxf.Objects.ImageDefinition,netDxf.Vector3,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Image</c> class.
            </summary>
            <param name="imageDefinition">Image definition.</param>
            <param name="position">Image <see cref="T:netDxf.Vector3">position</see> in world coordinates.</param>
            <param name="width">Image width in world coordinates.</param>
            <param name="height">Image height in world coordinates.</param>
        </member>
        <member name="P:netDxf.Entities.Image.Position">
            <summary>
            Gets or sets the image <see cref="T:netDxf.Vector3">position</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Uvector">
            <summary>
            Gets or sets the image <see cref="T:netDxf.Vector2">U-vector</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Vvector">
            <summary>
            Gets or sets the image <see cref="T:netDxf.Vector2">V-vector</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Height">
            <summary>
            Gets or sets the height of the image in drawing units.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Width">
            <summary>
            Gets or sets the width of the image in drawing units.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Rotation">
            <summary>
            Gets or sets the image rotation in degrees.
            </summary>
            <remarks>The image rotation is the angle of the U-vector.</remarks>
        </member>
        <member name="P:netDxf.Entities.Image.Definition">
            <summary>
            Gets the <see cref="T:netDxf.Objects.ImageDefinition">image definition</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Clipping">
            <summary>
            Gets or sets the clipping state: false = off, true = on.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Brightness">
            <summary>
            Gets or sets the brightness value (0-100; default = 50)
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Contrast">
            <summary>
            Gets or sets the contrast value (0-100; default = 50)
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.Fade">
            <summary>
            Gets or sets the fade value (0-100; default = 0)
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.DisplayOptions">
            <summary>
            Gets or sets the image display options.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Image.ClippingBoundary">
            <summary>
            Gets or sets the image clipping boundary.
            </summary>
            <remarks>
            The vertexes coordinates of the clipping boundary are expressed in local coordinates of the image in pixels.
            Set as null to restore the default clipping boundary, full image.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Image.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Image.Clone">
            <summary>
            Creates a new Image that is a copy of the current instance.
            </summary>
            <returns>A new Image that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.ImageDisplayFlags">
            <summary>
            Image display options.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ImageDisplayFlags.ShowImage">
            <summary>
            Show image.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ImageDisplayFlags.ShowImageWhenNotAlignedWithScreen">
            <summary>
            Show image when not aligned with screen.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ImageDisplayFlags.UseClippingBoundary">
            <summary>
            Use clipping boundary.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ImageDisplayFlags.TransparencyOn">
            <summary>
            Transparency on.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Insert">
            <summary>
            Represents a block insertion <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Insert.#ctor(netDxf.Blocks.Block)">
            <summary>
            Initializes a new instance of the <c>Insert</c> class.
            </summary>
            <param name="block">Insert <see cref="P:netDxf.Entities.Insert.Block">block definition</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Insert.#ctor(netDxf.Blocks.Block,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Insert</c> class.
            </summary>
            <param name="block">Insert block definition.</param>
            <param name="position">Insert <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Insert.#ctor(netDxf.Blocks.Block,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Insert</c> class.
            </summary>
            <param name="block">Insert block definition.</param>
            <param name="position">Insert <see cref="T:netDxf.Vector3">point</see> in world coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Insert.#ctor(netDxf.Blocks.Block,netDxf.Vector3,System.Double)">
            <summary>
            Initializes a new instance of the <c>Insert</c> class.
            </summary>
            <param name="block">Insert block definition.</param>
            <param name="position">Insert <see cref="T:netDxf.Vector3">point</see> in world coordinates.</param>
        </member>
        <member name="P:netDxf.Entities.Insert.DefaultInsUnits">
            <summary>
            Gets or sets the default drawing units to obtain the Insert transformation matrix, when the current Insert entity does not belong to a DXF document.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Insert.Attributes">
            <summary>
            Gets the insert list of <see cref="T:netDxf.Entities.Attribute">attributes</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Insert.Block">
            <summary>
            Gets the insert <see cref="P:netDxf.Entities.Insert.Block">block definition</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Insert.Position">
            <summary>
            Gets or sets the <see cref="T:netDxf.Vector3">position</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Insert.Scale">
            <summary>
            Gets or sets the insert <see cref="T:netDxf.Vector3">scale</see>.
            </summary>
            <remarks>None of the vector scale components can be zero.</remarks>
        </member>
        <member name="P:netDxf.Entities.Insert.Rotation">
            <summary>
            Gets or sets the insert rotation along the normal vector in degrees.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Insert.Sync">
            <summary>
            Updates the actual insert with the attribute properties currently defined in the block. This does not affect any values assigned to attributes in each block.
            </summary>
            <remarks>This method will automatically call the TransformAttributes method, to keep all attributes position and orientation up to date.</remarks>
            <remarks></remarks>
        </member>
        <member name="M:netDxf.Entities.Insert.GetTransformation">
            <summary>
            Calculates the insertion rotation matrix.
            </summary>
            <returns>The insert transformation matrix.</returns>
            <remarks>
            This method uses the DefaultInsUnits defined by the Insert class to obtain the scale between the drawing and the block units.
            Additionally, if the insert belongs to a block the units to use are the ones defined in the BlockRecord,
            and if the insert belongs to a layout the units to use are the ones defined in the document drawing variable InsUnits.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Insert.GetTransformation(netDxf.Units.DrawingUnits)">
            <summary>
            Calculates the insertion rotation matrix.
            </summary>
            <param name="insertionUnits">The insertion units.</param>
            <returns>The insert transformation matrix.</returns>
        </member>
        <member name="M:netDxf.Entities.Insert.TransformAttributes">
            <summary>
            Recalculate the attributes position, normal, rotation, text height, width factor, and oblique angle from the values applied to the insertion.
            </summary>
            <remarks>
            Changes to the insert, the block, or the document insertion units will require this method to be called manually.<br />
            The attributes position, normal, rotation, text height, width factor, and oblique angle values includes the transformations applied to the insertion,
            if required this method will calculate the proper values according to the ones defined by the attribute definition.<br />
            All the attribute values can be changed manually independently to its definition,
            but, usually, you will want them to be transformed with the insert based on the local values defined by the attribute definition.<br />
            This method only applies to attributes that have a definition, some DXF files might generate attributes that have no definition in the block.<br />
            At the moment the attribute width factor and oblique angle are not calculated, this is applied to inserts with non uniform scaling.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Insert.Explode">
            <summary>
            Explodes the current insert.
            </summary>
            <returns>A list of entities.</returns>
        </member>
        <member name="M:netDxf.Entities.Insert.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Insert.AssignHandle(System.Int64)">
            <summary>
            Assigns a handle to the object based in a integer counter.
            </summary>
            <param name="entityNumber">Number to assign.</param>
            <returns>Next available entity number.</returns>
            <remarks>
            Some objects might consume more than one, is, for example, the case of polylines that will assign
            automatically a handle to its vertexes. The entity number will be converted to an hexadecimal number.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Insert.Clone">
            <summary>
            Creates a new Insert that is a copy of the current instance.
            </summary>
            <returns>A new Insert that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Leader">
            <summary>
            Represents a leader <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Leader.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2})">
            <summary>
            Initializes a new instance of the <c>Leader</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Leader.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2},netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>Leader</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Leader.#ctor(System.String,System.Collections.Generic.IEnumerable{netDxf.Vector2})">
            <summary>
            Initializes a new instance of the <c>Leader</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Leader.#ctor(System.String,System.Collections.Generic.IEnumerable{netDxf.Vector2},netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>Leader</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Leader.#ctor(netDxf.Entities.ToleranceEntry,System.Collections.Generic.IEnumerable{netDxf.Vector2})">
            <summary>
            Initializes a new instance of the <c>Leader</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Leader.#ctor(netDxf.Entities.ToleranceEntry,System.Collections.Generic.IEnumerable{netDxf.Vector2},netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>Leader</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Leader.#ctor(netDxf.Blocks.Block,System.Collections.Generic.IEnumerable{netDxf.Vector2})">
            <summary>
            Initializes a new instance of the <c>Leader</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Leader.#ctor(netDxf.Blocks.Block,System.Collections.Generic.IEnumerable{netDxf.Vector2},netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>Leader</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Leader.Style">
            <summary>
            Gets or sets the leader style.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Leader.StyleOverrides">
            <summary>
            Gets the dimension style overrides list.
            </summary>
            <remarks>
            Any dimension style value stored in this list will override its corresponding value in the assigned style to
            the dimension.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Leader.ShowArrowhead">
            <summary>
            Gets or sets if the arrowhead is drawn.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Leader.PathType">
            <summary>
            Gets or sets the way the leader is drawn.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Leader.Vertexes">
            <summary>
            Gets the leader vertexes list in local coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Leader.Annotation">
            <summary>
            Gets or sets the leader annotation entity.
            </summary>
            <remarks>
            Only MText, Text, Tolerance, and Insert entities are supported as a leader annotation.
            Even if AutoCad allows a Text entity to be part of a Leader it is not recommended, always use a MText entity instead.
            <br />
            Set the annotation property to null to create a Leader without annotation.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Leader.Hook">
            <summary>
            Gets or sets the leader hook position (last leader vertex).
            </summary>
            <remarks>
            This property allows easy access to the last leader vertex, aka leader hook position.
            Remember the leader vertexes list must have at least two points.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Leader.HasHookline">
            <summary>
            Gets if the leader has a hook line.
            </summary>
            <remarks>
            If set to true an additional vertex point (StartHookLine) will be created before the leader end point (hook).
            By default, only leaders with text annotation have hook lines.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Leader.LineColor">
            <summary>
            Gets or sets the leader line color if the style parameter DIMCLRD is set as BYBLOCK.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Leader.Normal">
            <summary>
            Gets or sets the entity <see cref="T:netDxf.Vector3">normal</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Leader.Elevation">
            <summary>
            Gets or sets the leader elevation.
            </summary>
            <remarks>This is the distance from the origin to the plane of the leader.</remarks>
        </member>
        <member name="P:netDxf.Entities.Leader.Offset">
            <summary>
            Gets or sets the offset from the last leader vertex (hook) to the annotation position.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Leader.Update(System.Boolean)">
            <summary>
            Updates the leader entity to reflect the latest changes made to its properties.
            </summary>
            <param name="resetAnnotationPosition">
            If true the annotation position will be modified according to the position of the leader hook (last leader vertex),
            otherwise the leader hook will be moved according to the actual annotation position.
            </param>
            <remarks>
            This method should be manually called if the annotation position is modified, or the leader properties like Style, Annotation, TextVerticalPosition, and/or Offset.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Leader.ResetHookPosition">
            <summary>
            Resets the leader hook position according to the annotation position.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Leader.ResetAnnotationPosition">
            <summary>
            Resets the annotation position according to the leader hook.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Leader.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Leader.Clone">
            <summary>
            Creates a new Leader that is a copy of the current instance.
            </summary>
            <returns>A new Leader that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.LeaderPathType">
            <summary>
            Controls the way the leader is drawn.
            </summary>
        </member>
        <member name="F:netDxf.Entities.LeaderPathType.StraightLineSegments">
            <summary>
            Draws the leader line as a set of straight line segments.
            </summary>
        </member>
        <member name="F:netDxf.Entities.LeaderPathType.Spline">
            <summary>
            Draws the leader line as a spline.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Line">
            <summary>
            Represents a line <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Line.#ctor">
            <summary>
            Initializes a new instance of the <c>Line</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Line.#ctor(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Line</c> class.
            </summary>
            <param name="startPoint">Line <see cref="T:netDxf.Vector2">start point.</see></param>
            <param name="endPoint">Line <see cref="T:netDxf.Vector2">end point.</see></param>
        </member>
        <member name="M:netDxf.Entities.Line.#ctor(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Line</c> class.
            </summary>
            <param name="startPoint">Line start <see cref="T:netDxf.Vector3">point.</see></param>
            <param name="endPoint">Line end <see cref="T:netDxf.Vector3">point.</see></param>
        </member>
        <member name="P:netDxf.Entities.Line.StartPoint">
            <summary>
            Gets or sets the line <see cref="T:netDxf.Vector3">start point</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Line.EndPoint">
            <summary>
            Gets or sets the line <see cref="T:netDxf.Vector3">end point</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Line.Direction">
            <summary>
            Gets the direction of the line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Line.Thickness">
            <summary>
            Gets or sets the line thickness.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Line.Reverse">
            <summary>
            Switch the line direction.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Line.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Line.Clone">
            <summary>
            Creates a new Line that is a copy of the current instance.
            </summary>
            <returns>A new Line that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.LinearDimension">
            <summary>
            Represents a linear or rotated dimension <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.#ctor">
            <summary>
            Initializes a new instance of the <c>LinearDimension</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.#ctor(netDxf.Entities.Line,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>LinearDimension</c> class.
            </summary>
            <param name="referenceLine">Reference <see cref="T:netDxf.Entities.Line">line</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.#ctor(netDxf.Entities.Line,System.Double,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>LinearDimension</c> class.
            </summary>
            <param name="referenceLine">Reference <see cref="T:netDxf.Entities.Line">line</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.#ctor(netDxf.Entities.Line,System.Double,System.Double,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>LinearDimension</c> class.
            </summary>
            <param name="referenceLine">Reference <see cref="T:netDxf.Entities.Line">line</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <param name="normal">Normal vector of the plane where the dimension is defined.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.#ctor(netDxf.Entities.Line,System.Double,System.Double,netDxf.Vector3,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>LinearDimension</c> class.
            </summary>
            <param name="referenceLine">Reference <see cref="T:netDxf.Entities.Line">line</see> of the dimension.</param>
            <param name="offset">Distance between the reference line and the dimension line.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <param name="normal">Normal vector of the plane where the dimension is defined.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The reference line define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.#ctor(netDxf.Vector2,netDxf.Vector2,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>LinearDimension</c> class.
            </summary>
            <param name="firstPoint">First reference <see cref="T:netDxf.Vector2">point</see> of the dimension.</param>
            <param name="secondPoint">Second reference <see cref="T:netDxf.Vector2">point</see> of the dimension.</param>
            <param name="offset">Distance between the mid point reference line and the dimension line.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.#ctor(netDxf.Vector2,netDxf.Vector2,System.Double,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>LinearDimension</c> class.
            </summary>
            <param name="firstPoint">First reference <see cref="T:netDxf.Vector2">point</see> of the dimension.</param>
            <param name="secondPoint">Second reference <see cref="T:netDxf.Vector2">point</see> of the dimension.</param>
            <param name="offset">Distance between the mid point reference line and the dimension line.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The reference points define the distance to be measure.</remarks>
        </member>
        <member name="P:netDxf.Entities.LinearDimension.FirstReferencePoint">
            <summary>
            Gets or sets the first definition point of the dimension in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.LinearDimension.SecondReferencePoint">
            <summary>
            Gets or sets the second definition point of the dimension in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.LinearDimension.DimLinePosition">
            <summary>
            Gets the location of the dimension line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LinearDimension.Rotation">
            <summary>
            Gets or sets the rotation of the dimension line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LinearDimension.Offset">
            <summary>
            Gets or sets the distance between the mid point of the reference line and the dimension line.
            </summary>
            <remarks>
            The offset value must be equal or greater than zero.<br />
            The side at which the dimension line is drawn depends of its rotation.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.LinearDimension.Measurement">
            <summary>
            Gets the actual measurement.
            </summary>
            <remarks>The dimension is always measured in the plane defined by the normal.</remarks>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.SetDimensionLinePosition(netDxf.Vector2)">
            <summary>
            Calculates the dimension offset from a point along the dimension line.
            </summary>
            <param name="point">Point along the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.CalculateReferencePoints">
            <summary>
            Calculate the dimension reference points.
            </summary>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.BuildBlock(System.String)">
            <summary>
            Gets the block that contains the entities that make up the dimension picture.
            </summary>
            <param name="name">Name to be assigned to the generated block.</param>
            <returns>The block that represents the actual dimension.</returns>
        </member>
        <member name="M:netDxf.Entities.LinearDimension.Clone">
            <summary>
            Creates a new LinearDimension that is a copy of the current instance.
            </summary>
            <returns>A new LinearDimension that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.LwPolyline">
            <summary>
            Represents a light weight polyline <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
            <remarks>
            Light weight polylines are bidimensional polylines that can hold information about the width of the lines and arcs that compose them.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.LwPolyline.#ctor">
            <summary>
            Initializes a new instance of the <c>LwPolyline</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.LwPolyline.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2})">
            <summary>
            Initializes a new instance of the <c>LwPolyline</c> class.
            </summary>
            <param name="vertexes">LwPolyline <see cref="T:netDxf.Vector2">vertex</see> list in object coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.LwPolyline.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2},System.Boolean)">
            <summary>
            Initializes a new instance of the <c>LwPolyline</c> class.
            </summary>
            <param name="vertexes">LwPolyline <see cref="T:netDxf.Vector2">vertex</see> list in object coordinates.</param>
            <param name="isClosed">Sets if the polyline is closed, by default it will create an open polyline.</param>
        </member>
        <member name="M:netDxf.Entities.LwPolyline.#ctor(System.Collections.Generic.IEnumerable{netDxf.Entities.LwPolylineVertex})">
            <summary>
            Initializes a new instance of the <c>LwPolyline</c> class.
            </summary>
            <param name="vertexes">LwPolyline <see cref="T:netDxf.Entities.LwPolylineVertex">vertex</see> list in object coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.LwPolyline.#ctor(System.Collections.Generic.IEnumerable{netDxf.Entities.LwPolylineVertex},System.Boolean)">
            <summary>
            Initializes a new instance of the <c>LwPolyline</c> class.
            </summary>
            <param name="vertexes">LwPolyline <see cref="T:netDxf.Entities.LwPolylineVertex">vertex</see> list in object coordinates.</param>
            <param name="isClosed">Sets if the polyline is closed  (default: false).</param>
        </member>
        <member name="P:netDxf.Entities.LwPolyline.Vertexes">
            <summary>
            Gets or sets the light weight polyline <see cref="T:netDxf.Entities.LwPolylineVertex">vertex</see> list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LwPolyline.IsClosed">
            <summary>
            Gets or sets if the light weight polyline is closed.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LwPolyline.Thickness">
            <summary>
            Gets or sets the light weight polyline thickness.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LwPolyline.Elevation">
            <summary>
            Gets or sets the light weight polyline elevation.
            </summary>
            <remarks>This is the distance from the origin to the plane of the light weight polyline.</remarks>
        </member>
        <member name="P:netDxf.Entities.LwPolyline.LinetypeGeneration">
            <summary>
            Enable or disable if the line type pattern is generated continuously around the vertexes of the polyline.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LwPolyline.Flags">
            <summary>
            Gets the light weight polyline type.
            </summary>
        </member>
        <member name="M:netDxf.Entities.LwPolyline.Reverse">
            <summary>
            Switch the polyline direction.
            </summary>
        </member>
        <member name="M:netDxf.Entities.LwPolyline.SetConstantWidth(System.Double)">
            <summary>
            Sets a constant width for all the polyline segments.
            </summary>
            <param name="width">Polyline width.</param>
        </member>
        <member name="M:netDxf.Entities.LwPolyline.Explode">
            <summary>
            Decompose the actual polyline in its internal entities, <see cref="T:netDxf.Entities.Line">lines</see> and <see cref="T:netDxf.Entities.Arc">arcs</see>.
            </summary>
            <returns>A list of <see cref="T:netDxf.Entities.Line">lines</see> and <see cref="T:netDxf.Entities.Arc">arcs</see> that made up the polyline.</returns>
        </member>
        <member name="M:netDxf.Entities.LwPolyline.PolygonalVertexes(System.Int32,System.Double,System.Double)">
            <summary>
            Obtains a list of vertexes that represent the polyline approximating the curve segments as necessary.
            </summary>
            <param name="bulgePrecision">Curve segments precision (a value of zero means that no approximation will be made).</param>
            <param name="weldThreshold">Tolerance to consider if two new generated vertexes are equal.</param>
            <param name="bulgeThreshold">Minimum distance from which approximate curved segments of the polyline.</param>
            <returns>A list of vertexes expressed in object coordinate system.</returns>
        </member>
        <member name="M:netDxf.Entities.LwPolyline.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            Non-uniform scaling is not supported if a bulge different than zero is applied to any of the LwPolyline vertexes,
            a non-uniform scaling cannot be applied to the arc segments. Explode the entity and convert the arcs into ellipse arcs and transform them instead.<br />
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.LwPolyline.Clone">
            <summary>
            Creates a new LwPolyline that is a copy of the current instance.
            </summary>
            <returns>A new LwPolyline that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.LwPolylineVertex">
            <summary>
            Represents a <see cref="T:netDxf.Entities.LwPolyline">LwPolyline</see> vertex.
            </summary>
        </member>
        <member name="M:netDxf.Entities.LwPolylineVertex.#ctor">
            <summary>
            Initializes a new instance of the <c>LwPolylineVertex</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.LwPolylineVertex.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>LwPolylineVertex</c> class.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="M:netDxf.Entities.LwPolylineVertex.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>LwPolylineVertex</c> class.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="bulge">Vertex bulge  (default: 0.0).</param>
        </member>
        <member name="M:netDxf.Entities.LwPolylineVertex.#ctor(netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>LwPolylineVertex</c> class.
            </summary>
            <param name="position">Lightweight polyline <see cref="T:netDxf.Vector2">vertex</see> coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.LwPolylineVertex.#ctor(netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>LwPolylineVertex</c> class.
            </summary>
            <param name="position">Lightweight polyline <see cref="T:netDxf.Vector2">vertex</see> coordinates.</param>
            <param name="bulge">Vertex bulge  (default: 0.0).</param>
        </member>
        <member name="P:netDxf.Entities.LwPolylineVertex.Position">
            <summary>
            Gets or sets the light weight polyline vertex <see cref="T:netDxf.Vector2">position</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.LwPolylineVertex.StartWidth">
            <summary>
            Gets or sets the light weight polyline start segment width.
            </summary>
            <remarks>Widths greater than zero produce wide lines.</remarks>
        </member>
        <member name="P:netDxf.Entities.LwPolylineVertex.EndWidth">
            <summary>
            Gets or sets the light weight polyline end segment width.
            </summary>
            <remarks>Widths greater than zero produce wide lines.</remarks>
        </member>
        <member name="P:netDxf.Entities.LwPolylineVertex.Bulge">
            <summary>
            Gets or set the light weight polyline bulge.
            </summary>
            <remarks>
            The bulge is the tangent of one fourth the included angle for an arc segment, 
            made negative if the arc goes clockwise from the start point to the endpoint. 
            A bulge of 0 indicates a straight segment, and a bulge of 1 is a semicircle.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.LwPolylineVertex.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:netDxf.Entities.LwPolylineVertex.Clone">
            <summary>
            Creates a new LwPolylineVertex that is a copy of the current instance.
            </summary>
            <returns>A new LwPolylineVertex that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Mesh">
            <summary>
            Represents a mesh <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
            <remarks>
            Use this entity to overcome the limitations of the PolyfaceMesh, but, keep in mind that this entity was first introduced in AutoCad 2010.<br/>
            The maximum number of faces a mesh can have is 16000000 (16 millions).
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Mesh.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector3},System.Collections.Generic.IEnumerable{System.Int32[]})">
            <summary>
            Initializes a new instance of the <c>Mesh</c> class.
            </summary>
            <param name="vertexes">Mesh vertex list.</param>
            <param name="faces">Mesh faces list.</param>
        </member>
        <member name="M:netDxf.Entities.Mesh.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector3},System.Collections.Generic.IEnumerable{System.Int32[]},System.Collections.Generic.IEnumerable{netDxf.Entities.MeshEdge})">
            <summary>
            Initializes a new instance of the <c>Mesh</c> class.
            </summary>
            <param name="vertexes">Mesh vertex list.</param>
            <param name="faces">Mesh faces list.</param>
            <param name="edges">Mesh edges list, this parameter is only really useful when it is required to assign creases values to edges.</param>
        </member>
        <member name="P:netDxf.Entities.Mesh.Vertexes">
            <summary>
            Gets the mesh vertexes list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Mesh.Faces">
            <summary>
            Gets the mesh faces list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Mesh.Edges">
            <summary>
            Gets the mesh edges list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Mesh.SubdivisionLevel">
            <summary>
            Gets or sets the mesh subdivision level.
            </summary>
            <remarks>
            The valid range is from 0 to 255. The recommended range is 0-5 to prevent creating extremely dense meshes.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Mesh.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Mesh.Clone">
            <summary>
            Creates a new Mesh that is a copy of the current instance.
            </summary>
            <returns>A new Mesh that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.MeshEdge">
            <summary>
            Represents an edge of a <see cref="T:netDxf.Entities.EntityObject">mesh</see> entity.
            </summary>
        </member>
        <member name="M:netDxf.Entities.MeshEdge.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <c>MeshEdge</c> class.
            </summary>
            <param name="startVertexIndex">The edge start vertex index.</param>
            <param name="endVertexIndex">The edge end vertex index.</param>
        </member>
        <member name="M:netDxf.Entities.MeshEdge.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <c>MeshEdge</c> class.
            </summary>
            <param name="startVertexIndex">The edge start vertex index.</param>
            <param name="endVertexIndex">The edge end vertex index.</param>
            <param name="crease">The highest smoothing level at which the crease is retained  (default: 0.0).</param>
        </member>
        <member name="P:netDxf.Entities.MeshEdge.StartVertexIndex">
            <summary>
            Gets or sets the edge start vertex index.
            </summary>
            <remarks>
            This value must be positive represent the position of the vertex in the mesh vertex list.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MeshEdge.EndVertexIndex">
            <summary>
            Gets or sets the edge end vertex index.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MeshEdge.Crease">
            <summary>
            Get or set the highest smoothing level at which the crease is retained. If the smoothing level exceeds this value, the crease is also smoothed.
            </summary>
            <remarks>
            Enter a value of 0 to remove an existing crease (no edge sharpening).<br/>
            Enter a value of -1 (any negative number will be reset to -1) to specify that the crease is always retained, even if the object or sub-object is smoothed or refined.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.MeshEdge.ToString">
            <summary>
            Obtains a string that represents the mesh edge.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="M:netDxf.Entities.MeshEdge.ToString(System.IFormatProvider)">
            <summary>
            Obtains a string that represents the mesh edge.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>A string text.</returns>
        </member>
        <member name="M:netDxf.Entities.MeshEdge.Clone">
            <summary>
            Creates a new MeshEdge that is a copy of the current instance.
            </summary>
            <returns>A new MeshEdge that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.MLine">
            <summary>
            Represents a multiline <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.MLine.#ctor">
            <summary>
            Initializes a new instance of the <c>MLine</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.MLine.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2})">
            <summary>
            Initializes a new instance of the <c>MLine</c> class.
            </summary>
            <param name="vertexes">Multiline <see cref="T:netDxf.Vector2">vertex</see> location list in object coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.MLine.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2},System.Boolean)">
            <summary>
            Initializes a new instance of the <c>MLine</c> class.
            </summary>
            <param name="vertexes">Multiline <see cref="T:netDxf.Vector2">vertex</see> location list in object coordinates.</param>
            <param name="isClosed">Sets if the multiline is closed  (default: false).</param>
        </member>
        <member name="M:netDxf.Entities.MLine.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2},System.Double)">
            <summary>
            Initializes a new instance of the <c>MLine</c> class.
            </summary>
            <param name="vertexes">Multiline <see cref="T:netDxf.Vector2">vertex</see> location list in object coordinates.</param>
            <param name="scale">Multiline scale.</param>
        </member>
        <member name="M:netDxf.Entities.MLine.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2},System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>MLine</c> class.
            </summary>
            <param name="vertexes">Multiline <see cref="T:netDxf.Vector2">vertex</see> location list in object coordinates.</param>
            <param name="scale">Multiline scale.</param>
            <param name="isClosed">Sets if the multiline is closed  (default: false).</param>
        </member>
        <member name="M:netDxf.Entities.MLine.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2},netDxf.Objects.MLineStyle,System.Double)">
            <summary>
            Initializes a new instance of the <c>MLine</c> class.
            </summary>
            <param name="vertexes">MLine <see cref="T:netDxf.Vector2">vertex</see> location list in object coordinates.</param>
            <param name="style">MLine <see cref="T:netDxf.Objects.MLineStyle">style.</see></param>
            <param name="scale">MLine scale.</param>
        </member>
        <member name="M:netDxf.Entities.MLine.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2},netDxf.Objects.MLineStyle,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>MLine</c> class.
            </summary>
            <param name="vertexes">MLine <see cref="T:netDxf.Vector2">vertex</see> location list in object coordinates.</param>
            <param name="style">MLine <see cref="T:netDxf.Objects.MLineStyle">style.</see></param>
            <param name="scale">MLine scale.</param>
            <param name="isClosed">Sets if the multiline is closed  (default: false).</param>
        </member>
        <member name="P:netDxf.Entities.MLine.Vertexes">
            <summary>
            Gets the multiline <see cref="T:netDxf.Entities.MLineVertex">vertexes</see> list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.Elevation">
            <summary>
            Gets or sets the multiline elevation.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.Scale">
            <summary>
            Gets or sets the multiline scale.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.IsClosed">
            <summary>
            Gets or sets if the multiline is closed.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.NoStartCaps">
            <summary>
            Gets or sets the suppression of start caps.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.NoEndCaps">
            <summary>
            Gets or sets the suppression of end caps.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.Justification">
            <summary>
            Gets or sets the multiline justification.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.Style">
            <summary>
            Gets or set the multiline style.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLine.Flags">
            <summary>
            MLine flags.
            </summary>
        </member>
        <member name="M:netDxf.Entities.MLine.Update">
            <summary>
            Calculates the internal information of the multiline vertexes.
            </summary>
            <remarks>
            <para>
            This function needs to be called manually when any modification is done that affects the final shape of the multiline.
            </para>
            <para>
            If the vertex distance list needs to be edited to represent trimmed multilines this function needs to be called prior to any modification.
            It will calculate the minimum information needed to build a correct multiline.
            </para>
            </remarks>
        </member>
        <member name="M:netDxf.Entities.MLine.Explode">
            <summary>
            Decompose the actual multiline in its internal entities, <see cref="T:netDxf.Entities.Line">lines</see> and <see cref="T:netDxf.Entities.Arc">arcs</see>.
            </summary>
            <returns>A list of <see cref="T:netDxf.Entities.Line">lines</see> and <see cref="T:netDxf.Entities.Arc">arcs</see> that made up the multiline.</returns>
        </member>
        <member name="M:netDxf.Entities.MLine.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            Non-uniform scaling is not supported for multilines.
            Explode the entity and, in case round end caps has been applied, convert the arcs into ellipse arcs and transform them instead.<br />
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.MLine.Clone">
            <summary>
            Creates a new MLine that is a copy of the current instance.
            </summary>
            <returns>A new MLine that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.MLineFlags">
            <summary>
            Flags (bit-coded values).
            </summary>
        </member>
        <member name="F:netDxf.Entities.MLineFlags.Has">
            <summary>
            Has at least one vertex (code 72 is greater than 0).
            </summary>
        </member>
        <member name="F:netDxf.Entities.MLineFlags.Closed">
            <summary>
            Closed.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MLineFlags.NoStartCaps">
            <summary>
            Suppress start caps.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MLineFlags.NoEndCaps">
            <summary>
            Suppress end caps.
            </summary>
        </member>
        <member name="T:netDxf.Entities.MLineJustification">
            <summary>
            Justification.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MLineJustification.Top">
            <summary>
            Top.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MLineJustification.Zero">
            <summary>
            Zero.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MLineJustification.Bottom">
            <summary>
            Bottom.
            </summary>
        </member>
        <member name="T:netDxf.Entities.MLineVertex">
            <summary>
            Represents a <see cref="T:netDxf.Entities.MLine">multiline</see> vertex.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLineVertex.Position">
            <summary>
            Gets the MLine vertex position.
            </summary>
            <remarks>
            If this property is modified the function MLine.CalculateVertexesInfo() will need to be called manually to update the internal information.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MLineVertex.Direction">
            <summary>
            Gets the MLine vertex direction.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLineVertex.Miter">
            <summary>
            Gets the MLine vertex miter.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MLineVertex.Distances">
            <summary>
            Gets the <see cref="T:netDxf.Entities.MLine">multiline</see> vertex distances lists.
            </summary>
            <remarks>
            <para>
            There is a list for every MLineStyle element, and every list contains an array of real values
            that parametrize the start and end point of every element of the style.
            </para>
            <para>
            The first value (index 0) represents the distance from the segment vertex along the miter vector to the
            point where the line element's path intersects the miter vector.<br />
            The second value (index 1) is the distance along the line element's direction from the point,
            defined by the first value, to the actual start of the line element.<br />
            The successive values list the start and stop points of the line element breaks or cuts in this segment of the multiline.
            </para>
            </remarks>
        </member>
        <member name="M:netDxf.Entities.MLineVertex.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:netDxf.Entities.MLineVertex.Clone">
            <summary>
            Creates a new MLineVertex that is a copy of the current instance.
            </summary>
            <returns>A new MLineVertex that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.MText">
            <summary>
            Represents a multiline text <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
            <remarks>
            Formatting codes for MText, you can use them directly while setting the text value or use the Write() and EndParagraph() methods.<br />
            \L Start underline<br />
            \l Stop underline<br />
            \O Start overstrike<br />
            \o Stop overstrike<br />
            \K Start strike-through<br />
            \k Stop strike-through<br />
            \P New paragraph (new line)<br />
            \pxi Control codes for bullets, numbered paragraphs and columns<br />
            \X Paragraph wrap on the dimension line (only in dimensions)<br />
            \Q Slanting (obliquing) text by angle - e.g. \Q30;<br />
            \H Text height - e.g. \H3x;<br />
            \W Text width - e.g. \W0.8x;<br />
            \F Font selection<br />
            <br />
            e.g. \Fgdt;o - GDT-tolerance<br />
            e.g. \Fkroeger|b0|i0|c238|p10; - font Kroeger, non-bold, non-italic, code page 238, pitch 10<br />
            <br />
            \S Stacking, fractions<br />
            <br />
            e.g. \SA^B;<br />
            A<br />
            B<br />
            e.g. \SX/Y<br />
            X<br />
            -<br />
            Y<br />
            e.g. \S1#4;<br />
            1/4<br />
            <br />
            \A Alignment<br />
            \A0; = bottom<br />
            \A1; = center<br />
            \A2; = top<br />
            <br />
            \C Color change<br />
            \C1; = red<br />
            \C2; = yellow<br />
            \C3; = green<br />
            \C4; = cyan<br />
            \C5; = blue<br />
            \C6; = magenta<br />
            \C7; = white<br />
            <br />
            \T Tracking, char.spacing - e.g. \T2;<br />
            \~ Non-wrapping space, hard space<br />
            {} Braces - define the text area influenced by the code<br />
            \ Escape character - e.g. \\ = "\", \{ = "{"<br />
            <br />
            Codes and braces can be nested up to 8 levels deep.<br />
            </remarks>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="text">Text string.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(netDxf.Vector3,System.Double)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(netDxf.Vector3,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="rectangleWidth">Reference rectangle width.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(netDxf.Vector2,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="rectangleWidth">Reference rectangle width.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(netDxf.Vector3,System.Double,System.Double,netDxf.Tables.TextStyle)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="rectangleWidth">Reference rectangle width.</param>
            <param name="style">Text <see cref="T:netDxf.Tables.TextStyle">style</see>.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(netDxf.Vector2,System.Double,System.Double,netDxf.Tables.TextStyle)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="rectangleWidth">Reference rectangle width.</param>
            <param name="style">Text <see cref="T:netDxf.Tables.TextStyle">style</see>.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(System.String,netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(System.String,netDxf.Vector3,System.Double)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(System.String,netDxf.Vector2,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="rectangleWidth">Reference rectangle width.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(System.String,netDxf.Vector3,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="rectangleWidth">Reference rectangle width.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(System.String,netDxf.Vector2,System.Double,System.Double,netDxf.Tables.TextStyle)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="rectangleWidth">Reference rectangle width.</param>
            <param name="style">Text <see cref="T:netDxf.Tables.TextStyle">style</see>.</param>
        </member>
        <member name="M:netDxf.Entities.MText.#ctor(System.String,netDxf.Vector3,System.Double,System.Double,netDxf.Tables.TextStyle)">
            <summary>
            Initializes a new instance of the <c>MText</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="rectangleWidth">Reference rectangle width.</param>
            <param name="style">Text <see cref="T:netDxf.Tables.TextStyle">style</see>.</param>
        </member>
        <member name="P:netDxf.Entities.MText.DefaultMirrText">
            <summary>
            Gets or sets if the text will be mirrored when a symmetry is performed, when the current MText entity does not belong to a DXF document.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MText.Rotation">
            <summary>
            Gets or sets the text rotation in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MText.Height">
            <summary>
            Gets or sets the text height.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MText.LineSpacingFactor">
            <summary>
            Gets or sets the line spacing factor.
            </summary>
            <remarks>
            Percentage of default line spacing to be applied. Valid values range from 0.25 to 4.0, the default value 1.0.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MText.LineSpacingStyle">
            <summary>
            Get or sets the <see cref="T:netDxf.Entities.MTextLineSpacingStyle">line spacing style</see>.
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MText.DrawingDirection">
            <summary>
            Get or sets the <see cref="T:netDxf.Entities.MTextDrawingDirection">text drawing direction</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MText.RectangleWidth">
            <summary>
            Gets or sets the text reference rectangle width.
            </summary>
            <remarks>
            This value defines the width of the box where the text will fit.<br/>
            If a paragraph width is longer than the rectangle width it will be broken in several lines, using the word spaces as breaking points.<br/>
            If you specify a width of 0, word wrap is turned off and the width of the multiline text object is as wide as the longest line of text.
             </remarks>
        </member>
        <member name="P:netDxf.Entities.MText.AttachmentPoint">
            <summary>
            Gets or sets the text <see cref="T:netDxf.Entities.MTextAttachmentPoint">attachment point</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MText.Style">
            <summary>
            Gets or sets the <see cref="T:netDxf.Tables.TextStyle">text style</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MText.Position">
            <summary>
            Gets or sets the Text <see cref="T:netDxf.Vector3">position</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MText.Value">
            <summary>
            Gets or sets the raw text string.
            </summary>
        </member>
        <member name="M:netDxf.Entities.MText.WriteFraction(System.String,System.String,netDxf.Units.FractionFormatType)">
            <summary>
            Formats a text string to represent a fraction.
            </summary>
            <param name="numerator">Fraction numerator.</param>
            <param name="denominator">Fraction denominator.</param>
            <param name="fractionType">Style of the fraction.</param>
            <returns>A text string that represents the fraction.</returns>
            <remarks>
            In fractions the characters '/' and '#' are reserved if you need to write them you must write "\/" and "\#", respectively.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.MText.WriteFraction(System.String,System.String,netDxf.Units.FractionFormatType,netDxf.Entities.MTextFormattingOptions)">
            <summary>
            Formats a text string to represent a fraction.
            </summary>
            <param name="numerator">Fraction numerator.</param>
            <param name="denominator">Fraction denominator.</param>
            <param name="fractionType">Style of the fraction.</param>
            <param name="options">Text formatting options.</param>
            <returns>A text string that represents the fraction.</returns>
            <remarks>
            In fractions the characters '/' and '#' are reserved if you need to write them you must write "\/" and "\#", respectively.<br />
            Do not combine fractions with super or subscript options, it is not supported (stacking commands cannot be nested).
            </remarks>
        </member>
        <member name="M:netDxf.Entities.MText.Write(System.String)">
            <summary>
            Adds the text to the current paragraph. 
            </summary>
            <param name="txt">Text string.</param>
        </member>
        <member name="M:netDxf.Entities.MText.Write(System.String,netDxf.Entities.MTextFormattingOptions)">
            <summary>
            Adds the text to the current paragraph. 
            </summary>
            <param name="txt">Text string.</param>
            <param name="options">Text formatting options.</param>
        </member>
        <member name="M:netDxf.Entities.MText.EndParagraph">
            <summary>
            Ends the current paragraph. 
            </summary>
        </member>
        <member name="M:netDxf.Entities.MText.StartParagraph">
            <summary>
            Starts a new paragraph. 
            </summary>
            <remarks>
            When no paragraph options are used, strictly speaking, there is no need to call this method, the previous paragraph options will be inherited.<br />
            When there is no need to change the paragraph options from the previous, it is no necessary to pass again the same instance,
            the paragraph characteristics are inherited from the previous one.
            This way no codes needs to be written and it will save some characters in the final string.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.MText.StartParagraph(netDxf.Entities.MTextParagraphOptions)">
            <summary>
            Starts a new paragraph. 
            </summary>
            <param name="options">Paragraph options.</param>
            <remarks>
            When no paragraph options are used, strictly speaking, there is no need to call this method, the previous paragraph options will be inherited.<br />
            When there is no need to change the paragraph options from the previous, it is no necessary to pass again the same instance,
            the paragraph characteristics are inherited from the previous one.
            This way no codes needs to be written and it will save some characters in the final string.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.MText.PlainText">
            <summary>
            Obtains the MText text value without the formatting codes, control characters like tab '\t' will be preserved in the result,
            the new paragraph command "\P" will be converted to new line feed '\r\n'.
            </summary>
            <returns>MText text value without the formatting codes.</returns>
        </member>
        <member name="M:netDxf.Entities.MText.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            Non-uniform scaling is not supported, it would require to decompose each line into independent Text entities.
            When the current Text entity does not belong to a DXF document, the text will use the DefaultMirrText when a symmetry is performed;
            otherwise, the drawing variable MirrText will be used.<br />
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.MText.Clone">
            <summary>
            Creates a new MText that is a copy of the current instance.
            </summary>
            <returns>A new MText that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.MTextAttachmentPoint">
            <summary>
            Defines the multiline text attachment point.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextAttachmentPoint.TopLeft">
            <summary>
            Top left.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextAttachmentPoint.TopCenter">
            <summary>
            Top center.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextAttachmentPoint.TopRight">
            <summary>
            Top right.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextAttachmentPoint.MiddleLeft">
            <summary>
            Middle left.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextAttachmentPoint.MiddleCenter">
            <summary>
            Middle center.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextAttachmentPoint.MiddleRight">
            <summary>
            Middle right.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextAttachmentPoint.BottomLeft">
            <summary>
            Bottom left.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextAttachmentPoint.BottomCenter">
            <summary>
            Bottom center.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextAttachmentPoint.BottomRight">
            <summary>
            Bottom right.
            </summary>
        </member>
        <member name="T:netDxf.Entities.MTextDrawingDirection">
            <summary>
            Drawing direction.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextDrawingDirection.LeftToRight">
            <summary>
            Left to right.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextDrawingDirection.TopToBottom">
            <summary>
            Top to bottom.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextDrawingDirection.ByStyle">
            <summary>
            By style (the flow direction is inherited from the associated text style).
            </summary>
        </member>
        <member name="T:netDxf.Entities.MTextFormattingOptions">
            <summary>
            Options for the <see cref="T:netDxf.Entities.MText">multiline text</see> entity text formatting.
            </summary>
            <remarks>Old DXF versions might not support all available formatting codes.</remarks>
        </member>
        <member name="M:netDxf.Entities.MTextFormattingOptions.#ctor">
            <summary>
            Initializes a new instance of the <c>MTextFormattingOptions</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.Bold">
            <summary>
            Gets or sets if the text is bold.
            </summary>
            <remarks>The font style must support bold characters.</remarks>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.Italic">
            <summary>
            Gets or sets if the text is italic.
            </summary>
            <remarks>The font style must support italic characters.</remarks>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.Overline">
            <summary>
            Gets or sets the over line.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.Underline">
            <summary>
            Gets or sets underline.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.StrikeThrough">
            <summary>
            Gets or sets strike-through.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.Superscript">
            <summary>
            Get or set if the text is superscript.
            </summary>
            <remarks>
            The Superscript and subscript properties are mutually exclusive, if it is set to true the Subscript property will be set to false automatically.<br />
            Internally, superscripts and subscripts are written as stacking text (like fractions);
            therefore the characters '/' and '#' are reserved if you need to write them you must write '\/' and '\#' respectively.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.Subscript">
            <summary>
            Get or set if the text is subscript.
            </summary>
            <remarks>
            The Superscript and Subscript properties are mutually exclusive, if it is set to true the Superscript property will be set to false automatically.<br />
            Internally, superscripts and subscripts are written as stacking text (like fractions);
            therefore the characters '/' and '#' are reserved if you need to write them you must write '\/' and '\#' respectively.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.SuperSubScriptHeightFactor">
            <summary>
            Gets or sets the superscript and subscript text height as a multiple of the current text height.
            </summary>
            <remarks>By default it is set as 0.7 the current text height.</remarks>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.Color">
            <summary>
            Gets or sets the text color.
            </summary>
            <remarks>
            Set as null to apply the default color defined by the MText entity.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.FontName">
            <summary>
            Gets or sets the font that will override the default defined in the TextStyle. 
            </summary>
            <remarks>
            Set as null or empty to apply the default font.<br />
            When using SHX fonts use the font file with the SHX extension,
            when using TTF fonts use the font family name.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.HeightFactor">
            <summary>
            Gets or sets the text height as a multiple of the current text height.
            </summary>
            <remarks>Set as 1.0 to apply the default height factor.</remarks>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.ObliqueAngle">
            <summary>
            Gets or sets the obliquing angle in degrees.
            </summary>
            <remarks>Set as 0.0 to apply the default obliquing angle.</remarks>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.CharacterSpaceFactor">
            <summary>
             Gets or sets the space between characters as a multiple of the original spacing between characters.
            </summary>
            <remarks>
            Valid values range from a minimum of .75 to 4 times the original spacing between characters.
            Set as 1.0 to apply the default character space factor.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MTextFormattingOptions.WidthFactor">
            <summary>
            Gets or sets the width factor to produce wide text.
            </summary>
            <remarks>Set as 1.0 to apply the default width factor.</remarks>
        </member>
        <member name="T:netDxf.Entities.MTextLineSpacingStyle">
            <summary>
            MText line spacing style.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextLineSpacingStyle.Default">
            <summary>
            Default (only applicable in MTextParagraphOptions).
            </summary>
            <remarks>
            The default value defined by the MText property will be applied.
            </remarks>
        </member>
        <member name="F:netDxf.Entities.MTextLineSpacingStyle.AtLeast">
            <summary>
            At least (taller characters will override)
            </summary>
            <remarks>
            Takes both the user specified arbitrary value and the text height to determine spacing.
            </remarks>
        </member>
        <member name="F:netDxf.Entities.MTextLineSpacingStyle.Exact">
            <summary>
            Exact (taller characters will not override)
            </summary>
            <remarks>
            Defines the space with an arbitrary unit value the user specifies. Changing text height will not affect line spacing.
            </remarks>
        </member>
        <member name="F:netDxf.Entities.MTextLineSpacingStyle.Multiple">
            <summary>
            Multiple (only applicable in MTextParagraphOptions).
            </summary>
            <remarks>
            Instead of assigning a value to line spacing, you specify spacing according to text height.
            </remarks>
        </member>
        <member name="T:netDxf.Entities.MTextParagraphAlignment">
            <summary>
            Paragraph text horizontal alignment.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextParagraphAlignment.Default">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextParagraphAlignment.Left">
            <summary>
            Left.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextParagraphAlignment.Center">
            <summary>
            Center.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextParagraphAlignment.Right">
            <summary>
            Right.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextParagraphAlignment.Justified">
            <summary>
            Justified.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextParagraphAlignment.Distribute">
            <summary>
            Distribute.
            </summary>
        </member>
        <member name="T:netDxf.Entities.MTextParagraphOptions">
            <summary>
            Options for the <see cref="T:netDxf.Entities.MText">multiline text</see> entity paragraph formatting.
            </summary>
            <remarks>Old DXF versions might not support all available formatting codes.</remarks>
        </member>
        <member name="M:netDxf.Entities.MTextParagraphOptions.#ctor">
            <summary>
            Initializes a new instance of the <c>MTextParagraphOptions</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.MTextParagraphOptions.HeightFactor">
            <summary>
            Gets or sets the paragraph height factor.
            </summary>
            <remarks>Set as 1.0 to apply the default height factor.</remarks>
        </member>
        <member name="P:netDxf.Entities.MTextParagraphOptions.Alignment">
            <summary>
            Gets or sets the paragraph justification (text horizontal alignment).
            </summary>
        </member>
        <member name="P:netDxf.Entities.MTextParagraphOptions.VerticalAlignment">
            <summary>
            Gets or sets the paragraph line vertical alignment.
            </summary>
            <remarks>
            The vertical alignment affects how fractions, superscripts, subscripts, and characters of different heights are placed in a paragraph line.
            By default the paragraph vertical alignment is Center.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MTextParagraphOptions.SpacingBefore">
            <summary>
            Specifies the spacing before the paragraphs.
            </summary>
            <remarks>
            If set to zero no value will be applied and the default will be inherited. When it is non zero, valid values range from 0.25 to 4.0.<br />
            The distance between two paragraphs is determined by the total of the after paragraph spacing value of the upper paragraph
            and the before paragraph spacing value of the lower paragraph.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MTextParagraphOptions.SpacingAfter">
            <summary>
            Specifies the spacing before or after the paragraph.
            </summary>
            <remarks>
            If set to zero no value will be applied and the default will be inherited. When it is non zero, valid values range from 0.25 to 4.0.<br />
            The distance between two paragraphs is determined by the total of the after paragraph spacing value of the upper paragraph
            and the before paragraph spacing value of the lower paragraph.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MTextParagraphOptions.FirstLineIndent">
            <summary>
            Gets or sets the indent value for the first line of the paragraph.
            </summary>
            <remarks>
            Valid values range from -10000.0 to 10000.0, the default value 0.0.<br />
            Negative first line indent values are limited by the left indent,
            in the case its absolute value is larger than the left indent, when applied to the paragraph it will be automatically adjusted .
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MTextParagraphOptions.LeftIndent">
            <summary>
            Gets or sets the left indent of the current paragraph.
            </summary>
            <remarks>
            Valid values range from 0.0 to 10000.0, the default value 0.0.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MTextParagraphOptions.RightIndent">
            <summary>
            Gets or sets the right indent value of the paragraphs.
            </summary>
            <remarks>
            Valid values range from 0.0 to 10000.0, the default value 0.0.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MTextParagraphOptions.LineSpacingFactor">
            <summary>
            Gets or sets the paragraph line spacing factor.
            </summary>
            <remarks>
            Percentage of default line spacing to be applied. Valid values range from 0.25 to 4.0, the default value 1.0.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.MTextParagraphOptions.LineSpacingStyle">
            <summary>
            Get or sets the paragraph <see cref="T:netDxf.Entities.MTextLineSpacingStyle">line spacing style</see>.
            </summary>
        </member>
        <member name="T:netDxf.Entities.MTextParagraphVerticalAlignment">
            <summary>
            Paragraph text vertical alignment.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextParagraphVerticalAlignment.Bottom">
            <summary>
            Bottom.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextParagraphVerticalAlignment.Center">
            <summary>
            Center.
            </summary>
        </member>
        <member name="F:netDxf.Entities.MTextParagraphVerticalAlignment.Top">
            <summary>
            Top.
            </summary>
        </member>
        <member name="T:netDxf.Entities.OrdinateDimension">
            <summary>
            Represents an ordinate dimension <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.OrdinateDimension.#ctor">
            <summary>
            Initializes a new instance of the <c>OrdinateDimension</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.OrdinateDimension.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>OrdinateDimension</c> class.
            </summary>
            <param name="origin">Origin <see cref="T:netDxf.Vector2">point</see> in local coordinates of the ordinate dimension.</param>
            <param name="featurePoint">Base location <see cref="T:netDxf.Vector2">point</see> in local coordinates of the ordinate dimension.</param>
            <param name="leaderEndPoint">Leader end <see cref="T:netDxf.Vector2">point</see> in local coordinates of the ordinate dimension</param>
            <remarks>
            Uses the difference between the feature location and the leader endpoint to determine whether it is an X or a Y ordinate dimension.
            If the difference in the Y ordinate is greater, the dimension measures the X ordinate. Otherwise, it measures the Y ordinate.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.OrdinateDimension.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>OrdinateDimension</c> class.
            </summary>
            <param name="origin">Origin <see cref="T:netDxf.Vector2">point</see> in local coordinates of the ordinate dimension.</param>
            <param name="featurePoint">Base location <see cref="T:netDxf.Vector2">point</see> in local coordinates of the ordinate dimension.</param>
            <param name="leaderEndPoint">Leader end <see cref="T:netDxf.Vector2">point</see> in local coordinates of the ordinate dimension</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>
            Uses the difference between the feature location and the leader endpoint to determine whether it is an X or a Y ordinate dimension.
            If the difference in the Y ordinate is greater, the dimension measures the X ordinate. Otherwise, it measures the Y ordinate.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.OrdinateDimension.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,netDxf.Entities.OrdinateDimensionAxis,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>OrdinateDimension</c> class.
            </summary>
            <param name="origin">Origin <see cref="T:netDxf.Vector2">point</see> in local coordinates of the ordinate dimension.</param>
            <param name="featurePoint">Base location <see cref="T:netDxf.Vector2">point</see> in local coordinates of the ordinate dimension.</param>
            <param name="leaderEndPoint">Leader end <see cref="T:netDxf.Vector2">point</see> in local coordinates of the ordinate dimension</param>
            <param name="axis">Length of the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
        </member>
        <member name="M:netDxf.Entities.OrdinateDimension.#ctor(netDxf.Vector2,netDxf.Vector2,System.Double,netDxf.Entities.OrdinateDimensionAxis)">
            <summary>
            Initializes a new instance of the <c>OrdinateDimension</c> class.
            </summary>
            <param name="origin">Origin <see cref="T:netDxf.Vector2">point</see> of the ordinate dimension.</param>
            <param name="featurePoint">Base location <see cref="T:netDxf.Vector2">point</see> in local coordinates of the ordinate dimension.</param>
            <param name="length">Length of the dimension line.</param>
            <param name="axis">Length of the dimension line.</param>
            <remarks>The local coordinate system of the dimension is defined by the dimension normal and the rotation value.</remarks>
        </member>
        <member name="M:netDxf.Entities.OrdinateDimension.#ctor(netDxf.Vector2,netDxf.Vector2,System.Double,netDxf.Entities.OrdinateDimensionAxis,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>OrdinateDimension</c> class.
            </summary>
            <param name="origin">Origin <see cref="T:netDxf.Vector2">point</see> of the ordinate dimension.</param>
            <param name="featurePoint">Base location <see cref="T:netDxf.Vector2">point</see> in local coordinates of the ordinate dimension.</param>
            <param name="length">Length of the dimension line.</param>
            <param name="axis">Length of the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The local coordinate system of the dimension is defined by the dimension normal and the rotation value.</remarks>
        </member>
        <member name="M:netDxf.Entities.OrdinateDimension.#ctor(netDxf.Vector2,netDxf.Vector2,System.Double,netDxf.Entities.OrdinateDimensionAxis,System.Double)">
            <summary>
            Initializes a new instance of the <c>OrdinateDimension</c> class.
            </summary>
            <param name="origin">Origin <see cref="T:netDxf.Vector2">point</see> of the ordinate dimension.</param>
            <param name="featurePoint">Base location <see cref="T:netDxf.Vector2">point</see> in local coordinates of the ordinate dimension.</param>
            <param name="length">Length of the dimension line.</param>
            <param name="axis">Length of the dimension line.</param>
            <param name="rotation">Angle of rotation in degrees of the dimension lines.</param>
            <remarks>The local coordinate system of the dimension is defined by the dimension normal and the rotation value.</remarks>
        </member>
        <member name="M:netDxf.Entities.OrdinateDimension.#ctor(netDxf.Vector2,netDxf.Vector2,System.Double,netDxf.Entities.OrdinateDimensionAxis,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>OrdinateDimension</c> class.
            </summary>
            <param name="origin">Origin <see cref="T:netDxf.Vector3">point</see> in world coordinates of the ordinate dimension.</param>
            <param name="featurePoint">Base location <see cref="T:netDxf.Vector2">point</see> in local coordinates of the ordinate dimension.</param>
            <param name="length">Length of the dimension line.</param>
            <param name="axis">Local axis that measures the ordinate dimension.</param>
            <param name="rotation">Angle of rotation in degrees of the dimension lines.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The local coordinate system of the dimension is defined by the dimension normal and the rotation value.</remarks>
        </member>
        <member name="P:netDxf.Entities.OrdinateDimension.Origin">
            <summary>
            Gets or sets the origin <see cref="T:netDxf.Vector2">point</see> in local coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.OrdinateDimension.FeaturePoint">
            <summary>
            Gets or set the base <see cref="T:netDxf.Vector2">point</see> in local coordinates, a point on a feature such as an endpoint, intersection, or center of an object.
            </summary>
        </member>
        <member name="P:netDxf.Entities.OrdinateDimension.LeaderEndPoint">
            <summary>
            Gets or sets the leader end <see cref="T:netDxf.Vector2">point</see> in local coordinates
            </summary>
        </member>
        <member name="P:netDxf.Entities.OrdinateDimension.Rotation">
            <summary>
            Gets or sets the angle of rotation in degrees of the ordinate dimension local coordinate system.
            </summary>
        </member>
        <member name="P:netDxf.Entities.OrdinateDimension.Axis">
            <summary>
            Gets or sets the local axis that measures the ordinate dimension.
            </summary>
        </member>
        <member name="P:netDxf.Entities.OrdinateDimension.Measurement">
            <summary>
            Actual measurement.
            </summary>
        </member>
        <member name="M:netDxf.Entities.OrdinateDimension.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.OrdinateDimension.CalculateReferencePoints">
            <summary>
            Calculate the dimension reference points.
            </summary>
        </member>
        <member name="M:netDxf.Entities.OrdinateDimension.BuildBlock(System.String)">
            <summary>
            Gets the block that contains the entities that make up the dimension picture.
            </summary>
            <param name="name">Name to be assigned to the generated block.</param>
            <returns>The block that represents the actual dimension.</returns>
        </member>
        <member name="M:netDxf.Entities.OrdinateDimension.Clone">
            <summary>
            Creates a new OrdinateDimension that is a copy of the current instance.
            </summary>
            <returns>A new OrdinateDimension that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.OrdinateDimensionAxis">
            <summary>
            Defines the axis that measures the ordinate dimension.
            </summary>
        </member>
        <member name="F:netDxf.Entities.OrdinateDimensionAxis.X">
            <summary>
            The ordinate dimension measure the X distance and the dimension line is aligned to the Y axis.
            </summary>
        </member>
        <member name="F:netDxf.Entities.OrdinateDimensionAxis.Y">
            <summary>
            The ordinate dimension measure the Y distance and the dimension line is aligned to the X axis.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Point">
            <summary>
            Represents a point <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Point.#ctor(netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Point</c> class.
            </summary>
            <param name="position">Point <see cref="T:netDxf.Vector3">position</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Point.#ctor(netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Point</c> class.
            </summary>
            <param name="position">Point <see cref="T:netDxf.Vector2">position</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Point.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Point</c> class.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="z">Z coordinate.</param>
        </member>
        <member name="M:netDxf.Entities.Point.#ctor">
            <summary>
            Initializes a new instance of the <c>Point</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Point.Position">
            <summary>
            Gets or sets the point <see cref="T:netDxf.Vector3">position</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Point.Thickness">
            <summary>
            Gets or sets the point thickness.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Point.Rotation">
            <summary>
            Gets or sets the point local rotation in degrees along its normal.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Point.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Point.Clone">
            <summary>
            Creates a new Point that is a copy of the current instance.
            </summary>
            <returns>A new Point that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.PolyfaceMesh">
            <summary>
            Represents a polyface mesh <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
            <remarks>
            The maximum number of vertexes and faces that a PolyfaceMesh can have is short.MaxValue = 32767.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMesh.#ctor(System.Collections.Generic.IEnumerable{netDxf.Entities.PolyfaceMeshVertex},System.Collections.Generic.IEnumerable{netDxf.Entities.PolyfaceMeshFace})">
            <summary>
            Initializes a new instance of the <c>PolyfaceMesh</c> class.
            </summary>
            <param name="vertexes">Polyface mesh <see cref="T:netDxf.Entities.PolyfaceMeshVertex">vertex</see> list.</param>
            <param name="faces">Polyface mesh <see cref="T:netDxf.Entities.PolyfaceMeshFace">faces</see> list.</param>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMesh.Vertexes">
            <summary>
            Gets or sets the polyface mesh <see cref="T:netDxf.Entities.PolyfaceMeshVertex">vertexes</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMesh.Faces">
            <summary>
            Gets or sets the polyface mesh <see cref="T:netDxf.Entities.PolyfaceMeshFace">faces</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMesh.Flags">
            <summary>
            Gets the polyface mesh flag type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMesh.EndSequence">
            <summary>
            Gets the end vertex sequence.
            </summary>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMesh.AssignHandle(System.Int64)">
            <summary>
            Assigns a handle to the object based in a integer counter.
            </summary>
            <param name="entityNumber">Number to assign.</param>
            <returns>Next available entity number.</returns>
            <remarks>
            Some objects might consume more than one, is, for example, the case of polylines that will assign
            automatically a handle to its vertexes. The entity number will be converted to an hexadecimal number.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMesh.Explode">
            <summary>
            Decompose the actual polyface mesh faces in <see cref="T:netDxf.Entities.Point">points</see> (one vertex polyface mesh face),
            <see cref="T:netDxf.Entities.Line">lines</see> (two vertexes polyface mesh face) and <see cref="T:netDxf.Entities.Face3d">3d faces</see> (three or four vertexes polyface mesh face).
            </summary>
            <returns>A list of <see cref="T:netDxf.Entities.Face3d">3d faces</see> that made up the polyface mesh.</returns>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMesh.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMesh.Clone">
            <summary>
            Creates a new PolyfaceMesh that is a copy of the current instance.
            </summary>
            <returns>A new PolyfaceMesh that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.PolyfaceMeshFace">
            <summary>
            Represents a polyface mesh face. 
            </summary>
            <remarks>
            The way the vertex indexes for a polyface mesh are defined follows the DXF documentation.
            The values of the vertex indexes specify one of the previously defined vertexes by the index in the list plus one.
            If the index is negative, the edge that begins with that vertex is invisible.
            For example if the vertex index in the list is 0 the vertex index for the face will be 1, and
            if the edge between the vertexes 0 and 1 is hidden the vertex index for the face will be -1.<br/>
            The maximum number of vertexes per face is 4.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMeshFace.#ctor">
            <summary>
            Initializes a new instance of the <c>PolyfaceMeshFace</c> class.
            </summary>
            <remarks>
            By default the face is made up of four vertexes.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMeshFace.#ctor(System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            Initializes a new instance of the <c>PolyfaceMeshFace</c> class.
            </summary>
            <param name="vertexIndexes">Array of indexes to the vertex list of a polyface mesh that makes up the face.</param>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMeshFace.VertexIndexes">
            <summary>
            Gets the list of indexes to the vertex list of a polyface mesh that makes up the face.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMeshFace.Flags">
            <summary>
            Gets the vertex type.
            </summary>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMeshFace.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMeshFace.Clone">
            <summary>
            Creates a new PolyfaceMeshFace that is a copy of the current instance.
            </summary>
            <returns>A new PolyfaceMeshFace that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.PolyfaceMeshVertex">
            <summary>
            Represents a polyface mesh vertex. 
            </summary>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMeshVertex.#ctor">
            <summary>
            Initializes a new instance of the <c>PolylineVertex</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMeshVertex.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the PolylineVertex class.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="z">Z coordinate.</param>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMeshVertex.#ctor(netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>PolylineVertex</c> class.
            </summary>
            <param name="location">Polyface mesh vertex <see cref="T:netDxf.Vector3">location</see>.</param>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMeshVertex.Position">
            <summary>
            Gets or sets the polyface mesh vertex <see cref="T:netDxf.Vector3">position</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolyfaceMeshVertex.Flags">
            <summary>
            Gets the vertex type.
            </summary>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMeshVertex.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:netDxf.Entities.PolyfaceMeshVertex.Clone">
            <summary>
            Creates a new PolyfaceMeshVertex that is a copy of the current instance.
            </summary>
            <returns>A new PolyfaceMeshVertex that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Polyline">
            <summary>
            Represents a generic polyline <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Polyline.#ctor">
            <summary>
            Initializes a new instance of the <c>Polyline3d</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Polyline.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector3})">
            <summary>
            Initializes a new instance of the <c>Polyline3d</c> class.
            </summary>
            <param name="vertexes">3d polyline <see cref="T:netDxf.Vector3">vertex</see> list.</param>
        </member>
        <member name="M:netDxf.Entities.Polyline.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector3},System.Boolean)">
            <summary>
            Initializes a new instance of the <c>Polyline3d</c> class.
            </summary>
            <param name="vertexes">3d polyline <see cref="T:netDxf.Vector3">vertex</see> list.</param>
            <param name="isClosed">Sets if the polyline is closed, by default it will create an open polyline.</param>
        </member>
        <member name="M:netDxf.Entities.Polyline.#ctor(System.Collections.Generic.IEnumerable{netDxf.Entities.PolylineVertex})">
            <summary>
            Initializes a new instance of the <c>Polyline3d</c> class.
            </summary>
            <param name="vertexes">3d polyline <see cref="T:netDxf.Entities.PolylineVertex">vertex</see> list.</param>
        </member>
        <member name="M:netDxf.Entities.Polyline.#ctor(System.Collections.Generic.IEnumerable{netDxf.Entities.PolylineVertex},System.Boolean)">
            <summary>
            Initializes a new instance of the <c>Polyline3d</c> class.
            </summary>
            <param name="vertexes">3d polyline <see cref="T:netDxf.Entities.PolylineVertex">vertex</see> list.</param>
            <param name="isClosed">Sets if the polyline is closed  (default: false).</param>
        </member>
        <member name="P:netDxf.Entities.Polyline.Vertexes">
            <summary>
            Gets the polyline <see cref="T:netDxf.Entities.PolylineVertex">vertex</see> list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.IsClosed">
            <summary>
            Gets or sets if the polyline is closed.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.LinetypeGeneration">
            <summary>
            Enable or disable if the line type pattern is generated continuously around the vertexes of the polyline.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.SmoothType">
            <summary>
            Gets or sets the curve smooth type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.Flags">
            <summary>
            Gets the polyline type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Polyline.EndSequence">
            <summary>
            Gets the end vertex sequence.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Polyline.Reverse">
            <summary>
            Switch the polyline direction.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Polyline.Explode">
            <summary>
            Decompose the actual polyline in a list of <see cref="T:netDxf.Entities.Line">lines</see>.
            </summary>
            <returns>A list of <see cref="T:netDxf.Entities.Line">lines</see> that made up the polyline.</returns>
        </member>
        <member name="M:netDxf.Entities.Polyline.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Polyline.AssignHandle(System.Int64)">
            <summary>
            Assigns a handle to the object based in a integer counter.
            </summary>
            <param name="entityNumber">Number to assign.</param>
            <returns>Next available entity number.</returns>
            <remarks>
            Some objects might consume more than one, is, for example, the case of polylines that will assign
            automatically a handle to its vertexes. The entity number will be converted to an hexadecimal number.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Polyline.Clone">
            <summary>
            Creates a new Polyline that is a copy of the current instance.
            </summary>
            <returns>A new Polyline that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.PolylineSmoothType">
            <summary>
            Defines the curves type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineSmoothType.NoSmooth">
            <summary>
            No smooth curve.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineSmoothType.Quadratic">
            <summary>
            Quadratic B-spline curve.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineSmoothType.Cubic">
            <summary>
            Cubic B-spline curve.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineSmoothType.BezierSurface">
            <summary>
            Bezier surface.
            </summary>
        </member>
        <member name="T:netDxf.Entities.PolylineTypeFlags">
            <summary>
            Defines the polyline type.
            </summary>
            <remarks>Bit flag.</remarks>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.OpenPolyline">
            <summary>
            Default, open polyline.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.ClosedPolylineOrClosedPolygonMeshInM">
            <summary>
            This is a closed polyline (or a polygon mesh closed in the M direction).
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.CurveFit">
            <summary>
            Curve-fit vertexes have been added.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.SplineFit">
            <summary>
            Spline-fit vertexes have been added.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.Polyline3D">
            <summary>
            This is a 3D polyline.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.PolygonMesh">
            <summary>
            This is a 3D polygon mesh.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.ClosedPolygonMeshInN">
            <summary>
            The polygon mesh is closed in the N direction.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.PolyfaceMesh">
            <summary>
            The polyline is a polyface mesh.
            </summary>
        </member>
        <member name="F:netDxf.Entities.PolylineTypeFlags.ContinuousLinetypePattern">
            <summary>
            The line type pattern is generated continuously around the vertexes of this polyline.
            </summary>
        </member>
        <member name="T:netDxf.Entities.PolylineVertex">
            <summary>
            Represents a <see cref="T:netDxf.Entities.Polyline">polyline</see> vertex.
            </summary>
        </member>
        <member name="M:netDxf.Entities.PolylineVertex.#ctor">
            <summary>
            Initializes a new instance of the <c>PolylineVertex</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.PolylineVertex.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>PolylineVertex</c> class.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="z">Z coordinate.</param>
        </member>
        <member name="M:netDxf.Entities.PolylineVertex.#ctor(netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>PolylineVertex</c> class.
            </summary>
            <param name="position">Polyline <see cref="T:netDxf.Vector3">vertex</see> coordinates.</param>
        </member>
        <member name="P:netDxf.Entities.PolylineVertex.Position">
            <summary>
            Gets or sets the vertex <see cref="T:netDxf.Vector3">position</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.PolylineVertex.Flags">
            <summary>
            Gets the vertex type.
            </summary>
        </member>
        <member name="M:netDxf.Entities.PolylineVertex.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:netDxf.Entities.PolylineVertex.Clone">
            <summary>
            Creates a new PolylineVertex that is a copy of the current instance.
            </summary>
            <returns>A new PolylineVertex that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.RadialDimension">
            <summary>
            Represents a radial dimension <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.RadialDimension.#ctor">
            <summary>
            Initializes a new instance of the <c>RadialDimension</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.RadialDimension.#ctor(netDxf.Entities.Arc,System.Double)">
            <summary>
            Initializes a new instance of the <c>RadialDimension</c> class.
            </summary>
            <param name="arc"><see cref="T:netDxf.Entities.Arc">Arc</see> to measure.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.RadialDimension.#ctor(netDxf.Entities.Arc,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>RadialDimension</c> class.
            </summary>
            <param name="arc"><see cref="T:netDxf.Entities.Arc">Arc</see> to measure.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.RadialDimension.#ctor(netDxf.Entities.Circle,System.Double)">
            <summary>
            Initializes a new instance of the <c>RadialDimension</c> class.
            </summary>
            <param name="circle"><see cref="T:netDxf.Entities.Circle">Circle</see> to measure.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.RadialDimension.#ctor(netDxf.Entities.Circle,System.Double,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>RadialDimension</c> class.
            </summary>
            <param name="circle"><see cref="T:netDxf.Entities.Circle">Circle</see> to measure.</param>
            <param name="rotation">Rotation in degrees of the dimension line.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.RadialDimension.#ctor(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>RadialDimension</c> class.
            </summary>
            <param name="centerPoint">Center <see cref="T:netDxf.Vector2">point</see> of the circumference.</param>
            <param name="referencePoint"><see cref="T:netDxf.Vector2">Point</see> on circle or arc.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="M:netDxf.Entities.RadialDimension.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Tables.DimensionStyle)">
            <summary>
            Initializes a new instance of the <c>RadialDimension</c> class.
            </summary>
            <param name="centerPoint">Center <see cref="T:netDxf.Vector2">point</see> of the circumference.</param>
            <param name="referencePoint"><see cref="T:netDxf.Vector2">Point</see> on circle or arc.</param>
            <param name="style">The <see cref="T:netDxf.Tables.DimensionStyle">style</see> to use with the dimension.</param>
            <remarks>The center point and the definition point define the distance to be measure.</remarks>
        </member>
        <member name="P:netDxf.Entities.RadialDimension.CenterPoint">
            <summary>
            Gets or sets the center <see cref="T:netDxf.Vector2">point</see> of the circumference in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.RadialDimension.ReferencePoint">
            <summary>
            Gets or sets the <see cref="T:netDxf.Vector2">point</see> on circumference or arc in OCS (object coordinate system).
            </summary>
        </member>
        <member name="P:netDxf.Entities.RadialDimension.Measurement">
            <summary>
            Actual measurement.
            </summary>
        </member>
        <member name="M:netDxf.Entities.RadialDimension.SetDimensionLinePosition(netDxf.Vector2)">
            <summary>
            Calculates the reference point and dimension offset from a point along the dimension line.
            </summary>
            <param name="point">Point along the dimension line.</param>
        </member>
        <member name="M:netDxf.Entities.RadialDimension.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            Non-uniform and zero scaling local to the dimension entity are not supported.<br />
            The transformation will not be applied if the resulting center and reference points are the same.<br />
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.RadialDimension.BuildBlock(System.String)">
            <summary>
            Gets the block that contains the entities that make up the dimension picture.
            </summary>
            <param name="name">Name to be assigned to the generated block.</param>
            <returns>The block that represents the actual dimension.</returns>
        </member>
        <member name="M:netDxf.Entities.RadialDimension.Clone">
            <summary>
            Creates a new RadialDimension that is a copy of the current instance.
            </summary>
            <returns>A new RadialDimension that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Ray">
            <summary>
            Represents a ray <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
            <remarks>A ray is a line in three-dimensional space that starts in the specified origin and extends to infinity.</remarks>
        </member>
        <member name="M:netDxf.Entities.Ray.#ctor">
            <summary>
            Initializes a new instance of the <c>Ray</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Ray.#ctor(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Ray</c> class.
            </summary>
            <param name="origin">Ray <see cref="T:netDxf.Vector2">start point.</see></param>
            <param name="direction">Ray <see cref="T:netDxf.Vector2">end point.</see></param>
        </member>
        <member name="M:netDxf.Entities.Ray.#ctor(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Ray</c> class.
            </summary>
            <param name="origin">Ray start <see cref="T:netDxf.Vector3">point.</see></param>
            <param name="direction">Ray end <see cref="T:netDxf.Vector3">point.</see></param>
        </member>
        <member name="P:netDxf.Entities.Ray.Origin">
            <summary>
            Gets or sets the ray <see cref="T:netDxf.Vector3">origin</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Ray.Direction">
            <summary>
            Gets or sets the ray <see cref="T:netDxf.Vector3">direction</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Ray.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Ray.Clone">
            <summary>
            Creates a new Ray that is a copy of the current instance.
            </summary>
            <returns>A new Ray that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Shape">
            <summary>
            Represents a shape entity.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Shape.#ctor(System.String,netDxf.Tables.ShapeStyle)">
            <summary>
            Initializes a new instance of the <c>Shape</c> class.
            </summary>
            <param name="name">Name of the shape which geometry is defined in the shape <see cref="T:netDxf.Tables.ShapeStyle">style</see>.</param>
            <param name="style">Shape <see cref="T:netDxf.Tables.TextStyle">style</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Shape.#ctor(System.String,netDxf.Tables.ShapeStyle,netDxf.Vector3,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Shape</c> class.
            </summary>
            <param name="name">Name of the shape which geometry is defined in the shape <see cref="T:netDxf.Tables.ShapeStyle">style</see>.</param>
            <param name="style">Shape <see cref="T:netDxf.Tables.TextStyle">style</see>.</param>
            <param name="position">Shape insertion point.</param>
            <param name="size">Shape size.</param>
            <param name="rotation">Shape rotation.</param>
        </member>
        <member name="P:netDxf.Entities.Shape.Name">
            <summary>
            Gets the shape name.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Shape.Style">
            <summary>
            Gets the <see cref="T:netDxf.Tables.ShapeStyle">shape style</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Shape.Position">
            <summary>
            Gets or sets the shape <see cref="T:netDxf.Vector3">insertion point</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Shape.Size">
            <summary>
            Gets or sets the size of the shape.
            </summary>
            <remarks>
            The shape size is relative to the actual size of the shape definition.
            The size value works as an scale value applied to the dimensions of the shape definition.
            The DXF allows for negative values but that is the same as rotating the shape 180 degrees.<br />
            Size values must be greater than zero. Default: 1.0.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Shape.Rotation">
            <summary>
            Gets or sets the shape rotation in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Shape.ObliqueAngle">
            <summary>
            Gets or sets the shape oblique angle in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Shape.WidthFactor">
            <summary>
            Gets or sets the shape width factor.
            </summary>
            <remarks>Width factor values cannot be zero. Default: 1.0.</remarks>
        </member>
        <member name="P:netDxf.Entities.Shape.Thickness">
            <summary>
            Gets or set the shape thickness.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Shape.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="T:netDxf.Entities.Solid">
            <summary>
            Represents a solid <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Solid.#ctor">
            <summary>
            Initializes a new instance of the <c>Solid</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Solid.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Solid</c> class.
            </summary>
            <param name="firstVertex">Solid <see cref="T:netDxf.Vector2">first vertex</see> in OCS (object coordinate system).</param>
            <param name="secondVertex">Solid <see cref="T:netDxf.Vector2">second vertex</see> in OCS (object coordinate system).</param>
            <param name="thirdVertex">Solid <see cref="T:netDxf.Vector2">third vertex</see> in OCS (object coordinate system).</param>
        </member>
        <member name="M:netDxf.Entities.Solid.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Solid</c> class.
            </summary>
            <param name="firstVertex">Solid <see cref="T:netDxf.Vector2">first vertex</see> in OCS (object coordinate system).</param>
            <param name="secondVertex">Solid <see cref="T:netDxf.Vector2">second vertex</see> in OCS (object coordinate system).</param>
            <param name="thirdVertex">Solid <see cref="T:netDxf.Vector2">third vertex</see> in OCS (object coordinate system).</param>
            <param name="fourthVertex">Solid <see cref="T:netDxf.Vector2">fourth vertex</see> in OCS (object coordinate system).</param>
        </member>
        <member name="P:netDxf.Entities.Solid.FirstVertex">
            <summary>
            Gets or sets the first solid <see cref="T:netDxf.Vector2">vertex in OCS (object coordinate system).</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Solid.SecondVertex">
            <summary>
            Gets or sets the second solid <see cref="T:netDxf.Vector2">vertex in OCS (object coordinate system).</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Solid.ThirdVertex">
            <summary>
            Gets or sets the third solid <see cref="T:netDxf.Vector2">vertex in OCS (object coordinate system).</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Solid.FourthVertex">
            <summary>
            Gets or sets the fourth solid <see cref="T:netDxf.Vector2">vertex in OCS (object coordinate system).</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Solid.Elevation">
            <summary>
            Gets or sets the solid elevation.
            </summary>
            <remarks>This is the distance from the origin to the plane of the solid.</remarks>
        </member>
        <member name="P:netDxf.Entities.Solid.Thickness">
            <summary>
            Gets or sets the thickness of the solid.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Solid.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Solid.Clone">
            <summary>
            Creates a new Solid that is a copy of the current instance.
            </summary>
            <returns>A new Solid that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Spline">
            <summary>
            Represents a spline curve <see cref="T:netDxf.Entities.EntityObject">entity</see> (NURBS Non-Uniform Rational B-Splines).
            </summary>
        </member>
        <member name="M:netDxf.Entities.Spline.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector3})">
            <summary>
            Initializes a new instance of the <c>Spline</c> class.
            </summary>
            <param name="fitPoints">Spline fit points.</param>
            <remarks>Spline entities created with a list of fit points cannot be used as a boundary path in a hatch.</remarks>
        </member>
        <member name="M:netDxf.Entities.Spline.#ctor(System.Collections.Generic.List{netDxf.Entities.SplineVertex},System.Collections.Generic.List{System.Double},System.Int16)">
            <summary>
            Initializes a new instance of the <c>Spline</c> class.
            </summary>
            <param name="controlPoints">Spline control points.</param>
            <param name="knots">Spline knot vector.</param>
            <param name="degree">Degree of the spline curve.  Valid values are 1 (linear), degree 2 (quadratic), degree 3 (cubic), and so on up to degree 10.</param>
        </member>
        <member name="M:netDxf.Entities.Spline.#ctor(System.Collections.Generic.List{netDxf.Entities.SplineVertex})">
            <summary>
            Initializes a new instance of the <c>Spline</c> class.
            </summary>
            <param name="controlPoints">Spline control points.</param>
            <remarks>By default the degree of the spline is equal three.</remarks>
        </member>
        <member name="M:netDxf.Entities.Spline.#ctor(System.Collections.Generic.List{netDxf.Entities.SplineVertex},System.Boolean)">
            <summary>
            Initializes a new instance of the <c>Spline</c> class.
            </summary>
            <param name="controlPoints">Spline control points.</param>
            <param name="periodic">Sets if the spline as periodic closed (default false).</param>
            <remarks>By default the degree of the spline is equal three.</remarks>
        </member>
        <member name="M:netDxf.Entities.Spline.#ctor(System.Collections.Generic.List{netDxf.Entities.SplineVertex},System.Int16)">
            <summary>
            Initializes a new instance of the <c>Spline</c> class.
            </summary>
            <param name="controlPoints">Spline control points.</param>
            <param name="degree">Degree of the spline curve.  Valid values are 1 (linear), degree 2 (quadratic), degree 3 (cubic), and so on up to degree 10.</param>
        </member>
        <member name="M:netDxf.Entities.Spline.#ctor(System.Collections.Generic.List{netDxf.Entities.SplineVertex},System.Int16,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>Spline</c> class.
            </summary>
            <param name="controlPoints">Spline control points.</param>
            <param name="degree">Degree of the spline curve.  Valid values are 1 (linear), degree 2 (quadratic), degree 3 (cubic), and so on up to degree 10.</param>
            <param name="periodic">Sets if the spline as periodic closed (default false).</param>
        </member>
        <member name="M:netDxf.Entities.Spline.#ctor(System.Collections.Generic.List{netDxf.Entities.SplineVertex},System.Collections.Generic.List{System.Double},System.Int16,System.Collections.Generic.List{netDxf.Vector3},netDxf.Entities.SplineCreationMethod,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>Spline</c> class.
            </summary>
            <param name="controlPoints">Spline control points.</param>
            <param name="knots">Spline knot vector.</param>
            <param name="degree">Degree of the spline curve.  Valid values are 1 (linear), degree 2 (quadratic), degree 3 (cubic), and so on up to degree 10.</param>
        </member>
        <member name="P:netDxf.Entities.Spline.FitPoints">
            <summary>
            Gets the spline <see cref="T:netDxf.Vector3">fit points</see> list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Spline.StartTangent">
            <summary>
            Gets or sets the spline curve start tangent.
            </summary>
            <remarks>Only applicable to splines created with fit points.</remarks>
        </member>
        <member name="P:netDxf.Entities.Spline.EndTangent">
            <summary>
            Gets or sets the spline curve end tangent.
            </summary>
            <remarks>Only applicable to splines created with fit points.</remarks>
        </member>
        <member name="P:netDxf.Entities.Spline.KnotParameterization">
            <summary>
            Gets or set the knot parameterization computational method.
            </summary>
            <remarks>Only applicable to splines created with fit points.</remarks>
        </member>
        <member name="P:netDxf.Entities.Spline.CreationMethod">
            <summary>
            Gets the spline creation method.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Spline.KnotTolerance">
            <summary>
            Gets or sets the knot tolerance.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Spline.CtrlPointTolerance">
            <summary>
            Gets or sets the control point tolerance.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Spline.FitTolerance">
            <summary>
            Gets or sets the fit point tolerance.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Spline.Degree">
            <summary>
            Gets or sets the polynomial degree of the resulting spline.
            </summary>
            <remarks>
            Valid values are 1 (linear), degree 2 (quadratic), degree 3 (cubic), and so on up to degree 10.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Spline.IsClosed">
            <summary>
            Gets if the spline is closed.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Spline.IsPeriodic">
            <summary>
            Gets if the spline is periodic.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Spline.ControlPoints">
            <summary>
            Gets the spline <see cref="T:netDxf.Entities.SplineVertex">control points</see> list.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Spline.Knots">
            <summary>
            Gets the spline knot vector.
            </summary>
            <remarks>By default a uniform knot vector is created.</remarks>
        </member>
        <member name="P:netDxf.Entities.Spline.Flags">
            <summary>
            Gets the spline type.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Spline.Reverse">
            <summary>
            Switch the polyline direction.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Spline.SetUniformWeights(System.Double)">
            <summary>
            Sets all control point weights to the specified number.
            </summary>
            <param name="weight">Control point weight.</param>
        </member>
        <member name="M:netDxf.Entities.Spline.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Spline.Clone">
            <summary>
            Creates a new Spline that is a copy of the current instance.
            </summary>
            <returns>A new Spline that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Entities.Spline.PolygonalVertexes(System.Int32)">
            <summary>
            Converts the spline in a list of vertexes.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A list vertexes that represents the spline.</returns>
        </member>
        <member name="M:netDxf.Entities.Spline.ToPolyline(System.Int32)">
            <summary>
            Converts the spline in a Polyline.
            </summary>
            <param name="precision">Number of vertexes generated.</param>
            <returns>A new instance of <see cref="T:netDxf.Entities.Polyline">Polyline</see> that represents the spline.</returns>
        </member>
        <member name="T:netDxf.Entities.SplineCreationMethod">
            <summary>
            Defines how the spline entity was created.
            </summary>
        </member>
        <member name="F:netDxf.Entities.SplineCreationMethod.FitPoints">
            <summary>
            Creates a degree 3 (cubic) B-spline by specifying fit points that the spline must pass through.
            </summary>
        </member>
        <member name="F:netDxf.Entities.SplineCreationMethod.ControlPoints">
            <summary>
            Creates a spline by specifying control points.
            </summary>
        </member>
        <member name="T:netDxf.Entities.SplineKnotParameterization">
            <summary>
            Specifies the knot parameterization, computational methods that determines how the component curves between successive fit points within a spline are blended.
            </summary>
        </member>
        <member name="F:netDxf.Entities.SplineKnotParameterization.FitChord">
            <summary>
            Chord-Length method.
            </summary>
            <remarks>
            Spaces the knots connecting each component curve to be proportional to the distances between each associated pair of fit points.
            </remarks>
        </member>
        <member name="F:netDxf.Entities.SplineKnotParameterization.FitSqrtChord">
            <summary>
            Centripetal method.
            </summary>
            <remarks>
            Spaces the knots connecting each component curve to be proportional to the square root of the distance between each associated pair of fit points.
            This method usually produces "gentler" curves.
            </remarks>
        </member>
        <member name="F:netDxf.Entities.SplineKnotParameterization.FitUniform">
            <summary>
            Equidistant method.
            </summary>
            <remarks>
            Spaces the knots of each component curve to be equal, regardless of the spacing of the fit points.
            This method often produces curves that overshoot the fit points.
            </remarks>
        </member>
        <member name="F:netDxf.Entities.SplineKnotParameterization.FitCustom">
            <summary>
            Only applicable when a spline has been converted from the control points  to the fit point creation method.
            </summary>
        </member>
        <member name="T:netDxf.Entities.SplineTypeFlags">
            <summary>
            Defines the spline type.
            </summary>
            <remarks>Bit flag.</remarks>
        </member>
        <member name="F:netDxf.Entities.SplineTypeFlags.None">
            <summary>
            Default (open 3d spline).
            </summary>
        </member>
        <member name="F:netDxf.Entities.SplineTypeFlags.Closed">
            <summary>
            Closed spline.
            </summary>
        </member>
        <member name="F:netDxf.Entities.SplineTypeFlags.Periodic">
            <summary>
            Periodic spline.
            </summary>
        </member>
        <member name="F:netDxf.Entities.SplineTypeFlags.Rational">
            <summary>
            Rational spline.
            </summary>
        </member>
        <member name="F:netDxf.Entities.SplineTypeFlags.Planar">
            <summary>
            Planar.
            </summary>
        </member>
        <member name="F:netDxf.Entities.SplineTypeFlags.Linear">
            <summary>
            Linear (planar bit is also set).
            </summary>
        </member>
        <member name="F:netDxf.Entities.SplineTypeFlags.FitPointCreationMethod">
            <summary>
            Used by splines created by fit points.
            </summary>
        </member>
        <member name="F:netDxf.Entities.SplineTypeFlags.ClosedPeriodicSpline">
            <summary>
            Used for closed periodic splines.
            </summary>
        </member>
        <member name="T:netDxf.Entities.SplineVertex">
            <summary>
            Represents a control point of a <see cref="T:netDxf.Entities.Spline">spline</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.SplineVertex.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>SplineVertex</c> class.
            </summary>
            <param name="x">Control point x coordinate.</param>
            <param name="y">Control point y coordinate.</param>
            <param name="z">Control point z coordinate.</param>
        </member>
        <member name="M:netDxf.Entities.SplineVertex.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>SplineVertex</c> class.
            </summary>
            <param name="x">Control point x coordinate.</param>
            <param name="y">Control point y coordinate.</param>
            <param name="z">Control point z coordinate.</param>
            <param name="w">Control point weight (default 1.0).</param>
        </member>
        <member name="M:netDxf.Entities.SplineVertex.#ctor(netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>SplineVertex</c> class.
            </summary>
            <param name="position">Spline control point <see cref="T:netDxf.Vector2">vertex</see> coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.SplineVertex.#ctor(netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>SplineVertex</c> class.
            </summary>
            <param name="position">Spline control point <see cref="T:netDxf.Vector2">vertex</see> coordinates.</param>
            <param name="weight">Weight of the spline control point (default 1.0).</param>
        </member>
        <member name="M:netDxf.Entities.SplineVertex.#ctor(netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>SplineVertex</c> class.
            </summary>
            <param name="position">Spline control point <see cref="T:netDxf.Vector3">vertex</see> coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.SplineVertex.#ctor(netDxf.Vector3,System.Double)">
            <summary>
            Initializes a new instance of the <c>SplineVertex</c> class.
            </summary>
            <param name="position">Spline control point <see cref="T:netDxf.Vector3">vertex</see> coordinates.</param>
            <param name="weight">Weight of the spline control point (default 1.0).</param>
        </member>
        <member name="P:netDxf.Entities.SplineVertex.Position">
            <summary>
            Get or sets the spline control point <see cref="T:netDxf.Vector3">vertex</see> coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.SplineVertex.Weight">
            <summary>
            Gets or sets the weight of the spline control point.
            </summary>
        </member>
        <member name="M:netDxf.Entities.SplineVertex.ToString">
            <summary>
            Obtains a string that represents the spline vertex.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="M:netDxf.Entities.SplineVertex.Clone">
            <summary>
            Creates a new Spline that is a copy of the current instance.
            </summary>
            <returns>A new Spline that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Entities.SplineVertex.ToString(System.IFormatProvider)">
            <summary>
            Obtains a string that represents the spline vertex.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>A string text.</returns>
        </member>
        <member name="T:netDxf.Entities.Text">
            <summary>
            Represents a Text <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Text.#ctor">
            <summary>
            Initializes a new instance of the <c>Text</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Text.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>Text</c> class.
            </summary>
            <param name="text">Text string.</param>
        </member>
        <member name="M:netDxf.Entities.Text.#ctor(System.String,netDxf.Vector2,System.Double)">
            <summary>
            Initializes a new instance of the <c>Text</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
        </member>
        <member name="M:netDxf.Entities.Text.#ctor(System.String,netDxf.Vector3,System.Double)">
            <summary>
            Initializes a new instance of the <c>Text</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector3">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
        </member>
        <member name="M:netDxf.Entities.Text.#ctor(System.String,netDxf.Vector2,System.Double,netDxf.Tables.TextStyle)">
            <summary>
            Initializes a new instance of the <c>Text</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector2">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="style">Text <see cref="T:netDxf.Tables.TextStyle">style</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Text.#ctor(System.String,netDxf.Vector3,System.Double,netDxf.Tables.TextStyle)">
            <summary>
            Initializes a new instance of the <c>Text</c> class.
            </summary>
            <param name="text">Text string.</param>
            <param name="position">Text <see cref="T:netDxf.Vector3">position</see> in world coordinates.</param>
            <param name="height">Text height.</param>
            <param name="style">Text <see cref="T:netDxf.Tables.TextStyle">style</see>.</param>
        </member>
        <member name="P:netDxf.Entities.Text.DefaultMirrText">
            <summary>
            Gets or sets if the text will be mirrored when a symmetry is performed, when the current Text entity does not belong to a DXF document.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.Position">
            <summary>
            Gets or sets Text <see cref="T:netDxf.Vector3">position</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.Rotation">
            <summary>
            Gets or sets the text rotation in degrees.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.Height">
            <summary>
            Gets or sets the text height.
            </summary>
            <remarks>
            Valid values must be greater than zero. Default: 1.0.<br />
            When Alignment.Aligned is used this value is not applicable, it will be automatically adjusted so the text will fit in the specified width.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Text.Width">
            <summary>
            Gets or sets the text width, only applicable for text Alignment.Fit and Alignment.Align.
            </summary>
            <remarks>Valid values must be greater than zero. Default: 1.0.</remarks>
        </member>
        <member name="P:netDxf.Entities.Text.WidthFactor">
            <summary>
            Gets or sets the width factor.
            </summary>
            <remarks>
            Valid values range from 0.01 to 100. Default: 1.0.<br />
            When Alignment.Fit is used this value is not applicable, it will be automatically adjusted so the text will fit in the specified width.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Text.ObliqueAngle">
            <summary>
            Gets or sets the font oblique angle.
            </summary>
            <remarks>Valid values range from -85 to 85. Default: 0.0.</remarks>
        </member>
        <member name="P:netDxf.Entities.Text.Alignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.Style">
            <summary>
            Gets or sets the <see cref="T:netDxf.Tables.TextStyle">text style</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.Value">
            <summary>
            Gets or sets the text string.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.IsBackward">
            <summary>
            Gets or sets if the text is backward (mirrored in X).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Text.IsUpsideDown">
            <summary>
            Gets or sets if the text is upside down (mirrored in Y).
            </summary>
        </member>
        <member name="M:netDxf.Entities.Text.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            When the current Text entity does not belong to a DXF document, the text will use the DefaultMirrText when a symmetry is performed;
            otherwise, the drawing variable MirrText will be used.<br />
            A symmetry around the X axis when the text uses an Alignment.BaseLineLeft, Alignment.BaseLineCenter, Alignment.BaseLineRight, Alignment.Fit or an Alignment.Aligned.
            A symmetry around the Y axis when the text uses an Alignment.Fit or an Alignment.Aligned.<br />
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Text.Clone">
            <summary>
            Creates a new Text that is a copy of the current instance.
            </summary>
            <returns>A new Text that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.TextAlignment">
            <summary>
            Defines the text alignment.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.TopLeft">
            <summary>
            Top left.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.TopCenter">
            <summary>
            Top center.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.TopRight">
            <summary>
            Top right.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.MiddleLeft">
            <summary>
            Middle left.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.MiddleCenter">
            <summary>
            Middle center (uses the center of the text as uppercase characters).
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.MiddleRight">
            <summary>
            Middle right.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.BottomLeft">
            <summary>
            Bottom left.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.BottomCenter">
            <summary>
            Bottom center.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.BottomRight">
            <summary>
            Bottom right.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.BaselineLeft">
            <summary>
            Baseline left.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.BaselineCenter">
            <summary>
            Baseline center.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.BaselineRight">
            <summary>
            Baseline right.
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.Aligned">
            <summary>
            Aligned.
            </summary>
            <remarks>The text width factor will be automatically adjusted so the text will fit in the specified width.</remarks>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.Middle">
            <summary>
            Middle (uses the center of the text including descenders).
            </summary>
        </member>
        <member name="F:netDxf.Entities.TextAlignment.Fit">
            <summary>
            Fit.
            </summary>
            <remarks>The text height will be automatically adjusted so the text will fit in the specified width.</remarks>
        </member>
        <member name="T:netDxf.Entities.Tolerance">
            <summary>
            Represents a tolerance <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Tolerance.#ctor">
            <summary>
            Initializes a new instance of the <c>Tolerance</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Tolerance.#ctor(netDxf.Entities.ToleranceEntry)">
            <summary>
            Initializes a new instance of the <c>Tolerance</c> class.
            </summary>
            <param name="tolerance"></param>
        </member>
        <member name="M:netDxf.Entities.Tolerance.#ctor(netDxf.Entities.ToleranceEntry,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Tolerance</c> class.
            </summary>
            <param name="tolerance"></param>
            <param name="position"></param>
        </member>
        <member name="M:netDxf.Entities.Tolerance.#ctor(netDxf.Entities.ToleranceEntry,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Tolerance</c> class.
            </summary>
            <param name="tolerance"></param>
            <param name="position"></param>
        </member>
        <member name="P:netDxf.Entities.Tolerance.Entry1">
            <summary>
            Gets or sets the first tolerance entry.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Tolerance.Entry2">
            <summary>
            Gets or sets the second tolerance entry.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Tolerance.TextHeight">
            <summary>
            Gets or sets the text height.
            </summary>
            <remarks>
            Valid values must be greater than zero.
            By default it initially uses the text height defined in the style, when saved in the DXF this value is stored as extended data information.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Tolerance.ProjectedToleranceZoneValue">
            <summary>
            Gets or sets the projected tolerance zone value.
            </summary>
            <remarks>
            A projected tolerance zone controls the variation in height of the extended portion of a fixed perpendicular part
            and refines the tolerance to that specified by positional tolerances.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Tolerance.ShowProjectedToleranceZoneSymbol">
            <summary>
            Gets or sets if the projected tolerance zone symbol will be shown after the projected tolerance zone value.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Tolerance.DatumIdentifier">
            <summary>
            Gets or sets the datum identifying symbol.
            </summary>
            <remarks>
            A datum is a theoretically exact geometric reference from which you can establish the location and tolerance zones of other features.
            A point, line, plane, cylinder, or other geometry can serve as a datum.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Tolerance.Style">
            <summary>
            Gets or sets the <see cref="T:netDxf.Tables.DimensionStyle">leader style</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Tolerance.Position">
            <summary>
            Gets or sets the leader <see cref="T:netDxf.Vector3">position</see> in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Tolerance.Rotation">
            <summary>
            Gets or sets the leader rotation in degrees.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Tolerance.ToStringRepresentation">
            <summary>
            Converts the actual tolerance to its string representation.
            </summary>
            <returns>The tolerance string representation.</returns>
        </member>
        <member name="M:netDxf.Entities.Tolerance.ParseStringRepresentation(System.String)">
            <summary>
            Converts the string representation of a tolerance to its tolerance entity equivalent.
            </summary>
            <param name="s">A string that represents a tolerance to convert.</param>
            <returns>The Tolerance entity equivalent to the tolerance contained in s.</returns>
        </member>
        <member name="M:netDxf.Entities.Tolerance.TryParseStringRepresentation(System.String,netDxf.Entities.Tolerance@)">
            <summary>
            Tries to convert the specified string representation of a tolerance to its tolerance entity equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">A string that represents the tolerance to convert.</param>
            <param name="result">If the conversion has been successful, it contains the tolerance entity equivalent to the string representation; otherwise, null.</param>
            <returns>True if the string was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Entities.Tolerance.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            Non-uniform scaling is not supported, also is not possible to make a symmetry of a Tolerance.<br />
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.
            </remarks>
        </member>
        <member name="T:netDxf.Entities.ToleranceEntry">
            <summary>
            Represents an entry in a tolerance entity.
            </summary>
            <remarks>
            Each entry can be made of up to two tolerance values and three datum references, plus a symbol that represents the geometric characteristics.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.ToleranceEntry.#ctor">
            <summary>
            Initializes a new instance of the <c>ToleranceEntry</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Entities.ToleranceEntry.GeometricSymbol">
            <summary>
            Gets or sets the geometric characteristics symbol.
            </summary>
        </member>
        <member name="P:netDxf.Entities.ToleranceEntry.Tolerance1">
            <summary>
            Gets or sets the first tolerance value.
            </summary>
        </member>
        <member name="P:netDxf.Entities.ToleranceEntry.Tolerance2">
            <summary>
            Gets or sets the second tolerance value.
            </summary>
        </member>
        <member name="P:netDxf.Entities.ToleranceEntry.Datum1">
            <summary>
            Gets or sets the first datum reference value.
            </summary>
        </member>
        <member name="P:netDxf.Entities.ToleranceEntry.Datum2">
            <summary>
            Gets or sets the second datum reference value.
            </summary>
        </member>
        <member name="P:netDxf.Entities.ToleranceEntry.Datum3">
            <summary>
            Gets or sets the third datum reference value.
            </summary>
        </member>
        <member name="M:netDxf.Entities.ToleranceEntry.Clone">
            <summary>
            Creates a new ToleranceEntry that is a copy of the current instance.
            </summary>
            <returns>A new ToleranceEntry that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.ToleranceGeometricSymbol">
            <summary>
            Defines the geometric characteristic symbols for location, orientation, form, profile, and runout.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceGeometricSymbol.None">
            <summary>
            No geometric symbol.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceGeometricSymbol.Position">
            <summary>
            Position, type location.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceGeometricSymbol.Concentricity">
            <summary>
            Concentricity or coaxiality, type location.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceGeometricSymbol.Symmetry">
            <summary>
            Symmetry, type location.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceGeometricSymbol.Parallelism">
            <summary>
            Parallelism, type orientation.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceGeometricSymbol.Perpendicularity">
            <summary>
            Perpendicularity, type orientation.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceGeometricSymbol.Angularity">
            <summary>
            Angularity, type orientation.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceGeometricSymbol.Cylindricity">
            <summary>
            Cylindricity, type form.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceGeometricSymbol.Flatness">
            <summary>
            Flatness, type form.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceGeometricSymbol.Roundness">
            <summary>
            Circularity or roundness, type form.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceGeometricSymbol.Straightness">
            <summary>
            Straightness, type form.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceGeometricSymbol.ProfileSurface">
            <summary>
            Profile of a surface, type profile.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceGeometricSymbol.ProfileLine">
            <summary>
            Profile of a line, type profile.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceGeometricSymbol.CircularRunout">
            <summary>
            Circular runout, type runout.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceGeometricSymbol.TotalRunOut">
            <summary>
            Total runout, type runout.
            </summary>
        </member>
        <member name="T:netDxf.Entities.ToleranceMaterialCondition">
            <summary>
            Tolerance Material Condition.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceMaterialCondition.None">
            <summary>
            No material condition.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceMaterialCondition.Maximum">
            <summary>
            Maximum Material Condition (MMC). A feature contains the maximum amount of material stated in the limits. 
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceMaterialCondition.Least">
            <summary>
            Least Material Condition (LMC). A feature contains the minimum amount of material stated in the limits. 
            </summary>
        </member>
        <member name="F:netDxf.Entities.ToleranceMaterialCondition.Regardless">
            <summary>
            Regardless of feature size. A feature can be any size within the stated limits. 
            </summary>
        </member>
        <member name="T:netDxf.Entities.ToleranceValue">
            <summary>
            Represents a tolerance, indicates the amount by which the geometric characteristic can deviate from a perfect form.
            </summary>
        </member>
        <member name="M:netDxf.Entities.ToleranceValue.#ctor">
            <summary>
            Initializes a new instance of the <c>ToleranceValue</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.ToleranceValue.#ctor(System.Boolean,System.String,netDxf.Entities.ToleranceMaterialCondition)">
            <summary>
            Initializes a new instance of the <c>ToleranceValue</c> class.
            </summary>
            <param name="showDiameterSymbol">Show a diameter symbol before the tolerance value.</param>
            <param name="value">Tolerance value.</param>
            <param name="materialCondition">Tolerance material condition.</param>
        </member>
        <member name="P:netDxf.Entities.ToleranceValue.ShowDiameterSymbol">
            <summary>
            Gets or sets if the tolerance diameter symbol will be shown.
            </summary>
        </member>
        <member name="P:netDxf.Entities.ToleranceValue.Value">
            <summary>
            Gets or sets the tolerance value.
            </summary>
        </member>
        <member name="P:netDxf.Entities.ToleranceValue.MaterialCondition">
            <summary>
            Gets or sets the tolerance material condition.
            </summary>
        </member>
        <member name="M:netDxf.Entities.ToleranceValue.Clone">
            <summary>
            Creates a new ToleranceValue that is a copy of the current instance.
            </summary>
            <returns>A new ToleranceValue that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Trace">
            <summary>
            Represents a trace <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
            <remarks>
            The trace entity has exactly the same graphical representation as the Solid, and its functionality is exactly the same.
            It is recommended to use the more common Solid entity instead.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Trace.#ctor">
            <summary>
            Initializes a new instance of the <c>Trace</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Trace.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Trace</c> class.
            </summary>
            <param name="firstVertex">Trace <see cref="T:netDxf.Vector2">first vertex</see> in OCS (object coordinate system).</param>
            <param name="secondVertex">Trace <see cref="T:netDxf.Vector2">second vertex</see> in OCS (object coordinate system).</param>
            <param name="thirdVertex">Trace <see cref="T:netDxf.Vector2">third vertex</see> in OCS (object coordinate system).</param>
        </member>
        <member name="M:netDxf.Entities.Trace.#ctor(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Trace</c> class.
            </summary>
            <param name="firstVertex">Trace <see cref="T:netDxf.Vector2">first vertex</see> in OCS (object coordinate system).</param>
            <param name="secondVertex">Trace <see cref="T:netDxf.Vector2">second vertex</see> in OCS (object coordinate system).</param>
            <param name="thirdVertex">Trace <see cref="T:netDxf.Vector2">third vertex</see> in OCS (object coordinate system).</param>
            <param name="fourthVertex">Trace <see cref="T:netDxf.Vector2">fourth vertex</see> in OCS (object coordinate system).</param>
        </member>
        <member name="P:netDxf.Entities.Trace.FirstVertex">
            <summary>
            Gets or sets the first trace <see cref="T:netDxf.Vector3">vertex in OCS (object coordinate system).</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Trace.SecondVertex">
            <summary>
            Gets or sets the second trace <see cref="T:netDxf.Vector3">vertex in OCS (object coordinate system).</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Trace.ThirdVertex">
            <summary>
            Gets or sets the third trace <see cref="T:netDxf.Vector3">vertex in OCS (object coordinate system).</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Trace.FourthVertex">
            <summary>
            Gets or sets the fourth trace <see cref="T:netDxf.Vector3">vertex in OCS (object coordinate system).</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Trace.Elevation">
            <summary>
            Gets or sets the trace elevation.
            </summary>
            <remarks>This is the distance from the origin to the plane of the trace.</remarks>
        </member>
        <member name="P:netDxf.Entities.Trace.Thickness">
            <summary>
            Gets or sets the thickness of the trace.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Trace.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Trace.Clone">
            <summary>
            Creates a new Trace that is a copy of the current instance.
            </summary>
            <returns>A new Trace that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.Underlay">
            <summary>
            Represents an underlay <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Underlay.#ctor(netDxf.Objects.UnderlayDefinition)">
            <summary>
            Initializes a new instance of the <c>Underlay</c> class.
            </summary>
            <param name="definition"><see cref="T:netDxf.Objects.UnderlayDefinition">Underlay definition</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Underlay.#ctor(netDxf.Objects.UnderlayDefinition,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Underlay</c> class.
            </summary>
            <param name="definition"><see cref="T:netDxf.Objects.UnderlayDefinition">Underlay definition</see>.</param>
            <param name="position">Underlay <see cref="T:netDxf.Vector3">position</see> in world coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Underlay.#ctor(netDxf.Objects.UnderlayDefinition,netDxf.Vector3,System.Double)">
            <summary>
            Initializes a new instance of the <c>Underlay</c> class.
            </summary>
            <param name="definition"><see cref="T:netDxf.Objects.UnderlayDefinition">Underlay definition</see>.</param>
            <param name="position">Underlay <see cref="T:netDxf.Vector3">position</see> in world coordinates.</param>
            <param name="scale">Underlay scale.</param>
        </member>
        <member name="P:netDxf.Entities.Underlay.Definition">
            <summary>
            Gets the underlay definition.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Underlay.Position">
            <summary>
            Gets or sets the underlay position in world coordinates.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Underlay.Scale">
            <summary>
            Gets or sets the underlay scale.
            </summary>
            <remarks>
            Any of the vector scale components cannot be zero.<br />
            Even thought the DXF has a code for the Z scale it seems that it has no use.
            The X and Y components multiplied by the original size of the PDF page represent the width and height of the final underlay.
            The Z component even thought it is present in the DXF it seems it has no use.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Underlay.Rotation">
            <summary>
            Gets or sets the underlay rotation around its normal.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Underlay.Contrast">
            <summary>
            Gets or sets the underlay contrast.
            </summary>
            <remarks>Valid values range from 20 to 100.</remarks>
        </member>
        <member name="P:netDxf.Entities.Underlay.Fade">
            <summary>
            Gets or sets the underlay fade.
            </summary>
            <remarks>Valid values range from 0 to 80.</remarks>
        </member>
        <member name="P:netDxf.Entities.Underlay.DisplayOptions">
            <summary>
            Gets or sets the underlay display options.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Underlay.ClippingBoundary">
            <summary>
            Gets or sets the underlay clipping boundary.
            </summary>
            <remarks>
            Set as null to restore the default clipping boundary, show the full underlay without clipping.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Underlay.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>
            Non-uniform scaling for rotated underlays is not supported.
            This is not a limitation of the code but the DXF format, unlike the Image there is no way to define the local UV vectors.<br />
            Matrix3 adopts the convention of using column vectors to represent a transformation matrix.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Underlay.Clone">
            <summary>
            Creates a new Underlay that is a copy of the current instance.
            </summary>
            <returns>A new Underlay that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.UnderlayDisplayFlags">
            <summary>
            Underlay display options.
            </summary>
        </member>
        <member name="F:netDxf.Entities.UnderlayDisplayFlags.ClippingOn">
            <summary>
            Clipping is on.
            </summary>
        </member>
        <member name="F:netDxf.Entities.UnderlayDisplayFlags.ShowUnderlay">
            <summary>
            Underlay is on.
            </summary>
        </member>
        <member name="F:netDxf.Entities.UnderlayDisplayFlags.Monochrome">
            <summary>
            Show as monochrome.
            </summary>
        </member>
        <member name="F:netDxf.Entities.UnderlayDisplayFlags.AdjustForBackground">
            <summary>
            Adjust for background.
            </summary>
        </member>
        <member name="F:netDxf.Entities.UnderlayDisplayFlags.ClipInsideMode">
            <summary>
            Clip is inside mode.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Vertex">
            <summary>
            Represents a DXF Vertex.
            </summary>
            <remarks>
            The Vertex class holds all the information read from the DXF file even if its needed or not. For internal use only.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Vertex.#ctor">
            <summary>
            Initializes a new instance of the <c>Vertex</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.Vertex.#ctor(netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Vertex</c> class.
            </summary>
            <param name="position">Vertex <see cref="T:netDxf.Vector2">location</see>.</param>
        </member>
        <member name="M:netDxf.Entities.Vertex.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Vertex</c> class.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="z">Z coordinate.</param>
        </member>
        <member name="M:netDxf.Entities.Vertex.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Vertex</c> class.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="M:netDxf.Entities.Vertex.#ctor(netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>Vertex</c> class.
            </summary>
            <param name="position">Vertex <see cref="T:netDxf.Vector3">location</see>.</param>
        </member>
        <member name="P:netDxf.Entities.Vertex.Position">
            <summary>
            Gets or sets the polyline vertex <see cref="T:netDxf.Vector3">location</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.StartWidth">
            <summary>
            Gets or sets the light weight polyline start segment width.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.EndWidth">
            <summary>
            Gets or sets the light weight polyline end segment width.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.Bulge">
            <summary>
            Gets or set the light weight polyline bulge.Accepted values range from 0 to 1.
            </summary>
            <remarks>
            The bulge is the tangent of one fourth the included angle for an arc segment, 
            made negative if the arc goes clockwise from the start point to the endpoint. 
            A bulge of 0 indicates a straight segment, and a bulge of 1 is a semicircle.
            </remarks>
        </member>
        <member name="P:netDxf.Entities.Vertex.Flags">
            <summary>
            Gets or sets the vertex type.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.Color">
            <summary>
            Gets or sets the entity color.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.Layer">
            <summary>
            Gets or sets the entity layer.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Vertex.Linetype">
            <summary>
            Gets or sets the entity line type.
            </summary>
        </member>
        <member name="T:netDxf.Entities.VertexTypeFlags">
            <summary>
            Defines the vertex type.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.PolylineVertex">
            <summary>
            2d polyline vertex.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.CurveFittingExtraVertex">
            <summary>
            Extra vertex created by curve-fitting.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.CurveFitTangent">
            <summary>
            Curve-fit tangent defined for this vertex.
            A curve-fit tangent direction of 0 may be omitted from DXF output but is significant if this bit is set.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.NotUsed">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.SplineVertexFromSplineFitting">
            <summary>
            Spline vertex created by spline-fitting.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.SplineFrameControlPoint">
            <summary>
            Spline frame control point.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.Polyline3dVertex">
            <summary>
            3D polyline vertex.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.Polygon3dMesh">
            <summary>
            3D polygon mesh.
            </summary>
        </member>
        <member name="F:netDxf.Entities.VertexTypeFlags.PolyfaceMeshVertex">
            <summary>
            Polyface mesh vertex.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Viewport">
            <summary>
            Represents a view in paper space of the model.
            </summary>
            <remarks>
            The viewport with id equals 1 is the view of the paper space layout itself and it does not show the model.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Viewport.#ctor">
            <summary>
            Initializes a new viewport object.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.Center">
            <summary>
            Gets or sets the center point in paper space units.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.Width">
            <summary>
            Gets or sets the width in paper space units.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.Height">
            <summary>
            Gets or sets the height in paper space units.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.Stacking">
            <summary>
            Viewport status field:<br />
            -1 = On, but is fully off screen, or is one of the viewports that is not active because the $MAXACTVP count is currently being exceeded.<br />
            0 = Off<br />
            1 = Stacking value reserved for the layout view.
            positive value = On and active. The value indicates the order of stacking for the viewports, where 1 is the active viewport, 2 is the next, and so forth.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.Id">
            <summary>
            Gets or sets the viewport ID.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.ViewCenter">
            <summary>
            Gets or sets the view center point (in DCS).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.SnapBase">
            <summary>
            Gets or sets the snap base point.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.SnapSpacing">
            <summary>
            Gets or sets the snap spacing.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.GridSpacing">
            <summary>
            Gets or sets the grid spacing.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.ViewDirection">
            <summary>
            Gets or sets the view direction vector (in WCS).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.ViewTarget">
            <summary>
            Gets or sets the view target point (in WCS).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.LensLength">
            <summary>
            Gets or sets the perspective lens length.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.FrontClipPlane">
            <summary>
            Gets or sets the front clip plane Z value.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.BackClipPlane">
            <summary>
            Gets or sets the back clip plane Z value.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.ViewHeight">
            <summary>
            Gets or sets the view height (in model space units).
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.SnapAngle">
            <summary>
            Gets or sets the snap angle.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.TwistAngle">
            <summary>
            Gets or sets the view twist angle.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.CircleZoomPercent">
            <summary>
            Gets or sets the circle zoom percent.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.FrozenLayers">
            <summary>
            Gets the list of layers that are frozen in this viewport.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.Status">
            <summary>
            Gets or sets the <see cref="T:netDxf.Entities.ViewportStatusFlags">viewport status flags</see>:
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.UcsOrigin">
            <summary>
            Gets or sets the UCS origin.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.UcsXAxis">
            <summary>
            Gets or sets the UCS X axis.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.UcsYAxis">
            <summary>
            Gets or sets the UCS Y axis.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.Elevation">
            <summary>
            Gets or sets the elevation.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Viewport.ClippingBoundary">
            <summary>
            Entity that serves as the viewport clipping boundary (only present if viewport is non-rectangular).
            </summary>
            <remarks>
            AutoCad does not allow the creation of viewports from open shapes such as LwPolylines, Polylines, or ellipse arcs;
            but if they are edited afterward, making them open, it will not complain, and they will work without problems.
            So, it is possible to use open shapes as clipping boundaries, even if it is not recommended.
            It might not be supported by all programs that read DXF files and a redraw of the layout might be required to show them correctly inside AutoCad.<br />
            Only X and Y coordinates will be used the entity normal will be considered as UnitZ.<br />
            When the viewport is added to the document this entity will be added too.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Viewport.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Viewport.Clone">
            <summary>
            Creates a new viewport that is a copy of the current instance.
            </summary>
            <returns>A new viewport that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.ViewportStatusFlags">
            <summary>
            viewport status flags
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.PerspectiveMode">
            <summary>
            Enables perspective mode.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.FrontClipping">
            <summary>
            Enables front clipping.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.BackClipping">
            <summary>
            Enables back clipping.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.UcsFollow">
            <summary>
            Enables UCS follow.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.FrontClipNotAtEye">
            <summary>
            Enables front clip not at eye.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.UcsIconVisibility">
            <summary>
            Enables UCS icon visibility.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.UcsIconAtOrigin">
            <summary>
            Enables UCS icon at origin.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.FastZoom">
            <summary>
            Enables fast zoom.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.SnapMode">
            <summary>
            Enables snap mode.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.GridMode">
            <summary>
            Enables grid mode.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.IsometricSnapStyle">
            <summary>
            Enables isometric snap style.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.HidePlotMode">
            <summary>
            Enables hide plot mode.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.IsoPairTop">
            <summary>
            If set and IsoPairRight is not set, then isopair top is enabled. If both IsoPairTop and IsoPairRight are set, then isopair left is enabled
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.IsoPairRight">
            <summary>
            If set and IsoPairTop is not set, then isopair right is enabled.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.ViewportZoomLocking">
            <summary>
            Enables viewport zoom locking.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.CurrentlyAlwaysEnabled">
            <summary>
            Currently always enabled.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.NonRectangularClipping">
            <summary>
            Enables non-rectangular clipping.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.ViewportOff">
            <summary>
            Turns the viewport off.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.DisplayGridBeyondDrawingLimits">
            <summary>
            Enables the display of the grid beyond the drawing limits.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.AdaptiveGridDisplay">
            <summary>
            Enable adaptive grid display.
            </summary>
        </member>
        <member name="F:netDxf.Entities.ViewportStatusFlags.SubdivisionGridBelowSpacing">
            <summary>
            Enables subdivision of the grid below the set grid spacing when the grid display is adaptive.
            </summary>
        </member>
        <member name="T:netDxf.Entities.Wipeout">
            <summary>
            Represents a wipeout <see cref="T:netDxf.Entities.EntityObject">entity</see>.
            </summary>
            <remarks>
            The Wipeout DXF definition includes three variables for brightness, contrast, and fade but those variables have no effect; in AutoCad you cannot even change them.<br/>
            The Wipeout entity is related with the system variable WIPEOUTFRAME but this variable is not saved in a DXF.
            </remarks>
        </member>
        <member name="M:netDxf.Entities.Wipeout.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>Wipeout</c> class as a rectangular wipeout.
            </summary>
            <param name="x">Rectangle x-coordinate of the bottom-left corner in local coordinates.</param>
            <param name="y">Rectangle y-coordinate of the bottom-left corner in local coordinates.</param>
            <param name="width">Rectangle width in local coordinates.</param>
            <param name="height">Rectangle height in local coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Wipeout.#ctor(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>Wipeout</c> class as a rectangular wipeout from two opposite corners.
            </summary>
            <param name="firstCorner">Rectangle firstCorner in local coordinates.</param>
            <param name="secondCorner">Rectangle secondCorner in local coordinates.</param>
        </member>
        <member name="M:netDxf.Entities.Wipeout.#ctor(System.Collections.Generic.IEnumerable{netDxf.Vector2})">
            <summary>
            Initializes a new instance of the <c>Wipeout</c> class as a polygonal wipeout.
            </summary>
            <param name="vertexes">The list of vertexes of the wipeout.</param>
        </member>
        <member name="M:netDxf.Entities.Wipeout.#ctor(netDxf.ClippingBoundary)">
            <summary>
            Initializes a new instance of the <c>Wipeout</c> class.
            </summary>
            <param name="clippingBoundary">The wipeout clipping boundary.</param>
        </member>
        <member name="P:netDxf.Entities.Wipeout.ClippingBoundary">
            <summary>
            Gets or sets the wipeout clipping boundary.
            </summary>
        </member>
        <member name="P:netDxf.Entities.Wipeout.Elevation">
            <summary>
            Gets or sets the wipeout elevation.
            </summary>
            <remarks>This is the distance from the origin to the plane of the wipeout boundary.</remarks>
        </member>
        <member name="M:netDxf.Entities.Wipeout.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.Wipeout.Clone">
            <summary>
            Creates a new Wipeout that is a copy of the current instance.
            </summary>
            <returns>A new Wipeout that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Entities.XLine">
            <summary>
            Represents an extension line <see cref="T:netDxf.Entities.EntityObject">entity</see> (aka construction line).
            </summary>
            <remarks>An extension line is a line in three-dimensional space that starts in the specified origin and extends to infinity in both directions.</remarks>
        </member>
        <member name="M:netDxf.Entities.XLine.#ctor">
            <summary>
            Initializes a new instance of the <c>XLine</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Entities.XLine.#ctor(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Initializes a new instance of the <c>XLine</c> class.
            </summary>
            <param name="origin">XLine <see cref="T:netDxf.Vector2">origin.</see></param>
            <param name="direction">XLine <see cref="T:netDxf.Vector2">direction.</see></param>
        </member>
        <member name="M:netDxf.Entities.XLine.#ctor(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>XLine</c> class.
            </summary>
            <param name="origin">XLine <see cref="T:netDxf.Vector3">origin.</see></param>
            <param name="direction">XLine <see cref="T:netDxf.Vector3">direction.</see></param>
        </member>
        <member name="P:netDxf.Entities.XLine.Origin">
            <summary>
            Gets or sets the extension line <see cref="T:netDxf.Vector3">origin</see>.
            </summary>
        </member>
        <member name="P:netDxf.Entities.XLine.Direction">
            <summary>
            Gets or sets the extension line <see cref="T:netDxf.Vector3">direction</see>.
            </summary>
        </member>
        <member name="M:netDxf.Entities.XLine.TransformBy(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Moves, scales, and/or rotates the current entity given a 3x3 transformation matrix and a translation vector.
            </summary>
            <param name="transformation">Transformation matrix.</param>
            <param name="translation">Translation vector.</param>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Entities.XLine.Clone">
            <summary>
            Creates a new XLine that is a copy of the current instance.
            </summary>
            <returns>A new XLine that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Header.AttMode">
            <summary>
            Defines the attribute visibility.
            </summary>
        </member>
        <member name="F:netDxf.Header.AttMode.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:netDxf.Header.AttMode.Normal">
            <summary>
            Normal.
            </summary>
        </member>
        <member name="F:netDxf.Header.AttMode.All">
            <summary>
            All.
            </summary>
        </member>
        <member name="T:netDxf.Header.DxfVersion">
            <summary>
            The AutoCAD drawing database version number.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.Unknown">
            <summary>
            Unknown AutoCAD DXF file.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad10">
            <summary>
            AutoCAD R10 DXF file. AutoCAD release 10.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad12">
            <summary>
            AutoCAD R11 and R12 DXF file. AutoCAD release 11/12 (LT R1/R2).
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad13">
            <summary>
            AutoCAD R13 DXF file. AutoCAD release 13 (LT95).
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad14">
            <summary>
            AutoCAD R14 DXF file. AutoCAD release 14, 14.01 (LT97/LT98).
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad2000">
            <summary>
            AutoCAD 2000 DXF file. AutoCAD 2000/2000i/2002.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad2004">
            <summary>
            AutoCAD 2004 DXF file. AutoCAD 2004/2005/2006.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad2007">
            <summary>
            AutoCAD 2007 DXF file. AutoCAD 2007/2008/2009.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad2010">
            <summary>
            AutoCAD 2010 DXF file. AutoCAD 2010/2011/2012.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad2013">
            <summary>
            AutoCAD 2013 DXF file. AutoCAD 2013/2014/2015/2016/2017.
            </summary>
        </member>
        <member name="F:netDxf.Header.DxfVersion.AutoCad2018">
            <summary>
            AutoCAD 2018 DXF file. AutoCAD 2018/2019/2020.
            </summary>
        </member>
        <member name="T:netDxf.Header.HeaderVariable">
            <summary>
            Defines a header variable.
            </summary>
        </member>
        <member name="M:netDxf.Header.HeaderVariable.#ctor(System.String,System.Int16,System.Object)">
            <summary>
            Initializes a new instance of the <c>HeaderVariable</c> class.
            </summary>
            <param name="name">Header variable name.</param>
            <param name="groupCode">Header variable group code.</param>
            <param name="value">Header variable value.</param>
            <remarks>
            It is very important to match the group code with its corresponding value type,
            check the DXF documentation for details about what group code correspond to its associated type.
            For example, typical groups codes are 70, 40, and 2 that correspond to short, double, and string value types, respectively.<br />
            If the header value is a Vector3 use the group code 30, if it is a Vector2 use group code 20,
            when the variable is written to the DXF the codes 10, 20, and 30 will be added as necessary.
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariable.Name">
            <summary>
            Gets the header variable name.
            </summary>
            <remarks>The header variable name is case insensitive.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariable.GroupCode">
            <summary>
            Gets the header variable group code.
            </summary>
        </member>
        <member name="P:netDxf.Header.HeaderVariable.Value">
            <summary>
            Gets the header variable stored value.
            </summary>
            <remarks>
            It is very important to match the group code with its corresponding value type,
            check the DXF documentation for details about what group code correspond to its associated type.
            For example, typical groups codes are 70, 40, and 2 that correspond to short, double, and string value types, respectively.<br />
            If the header value is a Vector3 use the group code 30, if it is a Vector2 use group code 20,
            when the variable is written to the DXF the codes 10, 20, and 30 will be added as necessary.
            </remarks>
        </member>
        <member name="M:netDxf.Header.HeaderVariable.ToString">
            <summary>
            Obtains a string that represents the header variable.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="T:netDxf.Header.HeaderVariableCode">
            <summary>
            Strings system variables
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.AcadVer">
            <summary>
            The AutoCAD drawing database version number.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.HandleSeed">
            <summary>
            Next available handle.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.Angbase">
            <summary>
            Angle 0 direction.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.Angdir">
            <summary>
            1 = Clockwise angles, 0 = Counterclockwise.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.AttMode">
            <summary>
            Attribute visibility.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.AUnits">
            <summary>
            Units format for angles.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.AUprec">
            <summary>
            Units precision for angles.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.CeColor">
            <summary>
            Current entity color.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.CeLtScale">
            <summary>
            Current entity line type scale.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.CeLweight">
            <summary>
            Current entity lineweight.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.CeLtype">
            <summary>
            Current entity line type name.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.CLayer">
            <summary>
            Current layer name.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.CMLJust">
            <summary>
            Current multiline justification.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.CMLScale">
            <summary>
            Current multiline scale.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.CMLStyle">
            <summary>
            Current multiline style name.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.DimStyle">
            <summary>
            Current dimension style name.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.TextSize">
            <summary>
            Default text height.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.TextStyle">
            <summary>
            Current text style name.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.LUnits">
            <summary>
            Units format for coordinates and distances.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.LUprec">
            <summary>
            Units precision for coordinates and distances.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.DwgCodePage">
            <summary>
            Drawing code page; set to the system code page when a new drawing is created, but not otherwise maintained by AutoCAD.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.Extnames">
            <summary>
            Controls symbol table naming.
            </summary>
            <remarks>
            Controls symbol table naming:<br />
            0 = Release 14 compatibility. Limits names to 31 characters in length.<br />
            Names can include the letters A to Z, the numerals 0 to 9,
            and the special characters dollar sign ($), underscore (_), and hyphen (-).<br />
            1 = AutoCAD 2000.<br />
            Names can be up to 255 characters in length, 
            and can include the letters A to Z, the numerals 0 to 9, spaces, 
            and any special characters not used for other purposes by Microsoft Windows and AutoCAD.
            </remarks>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.InsBase">
            <summary>
            Insertion base point for the current drawing.
            </summary>
            <remarks>
            When you insert or externally reference the current drawing into other drawings, this base point is used as the insertion base point.
            </remarks>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.InsUnits">
            <summary>
            Default drawing units for AutoCAD DesignCenter blocks.
            </summary>
            <remarks>
            Also applies to raster image units, even thought they have the RasterVariables object and units in ImageDefinition.
            </remarks>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.LastSavedBy">
            <summary>
            User name that saved the file.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.LwDisplay">
            <summary>
            Controls the display of lineweights on the Model or Layout tab.
            </summary>
            <remarks>
            0 = Lineweight is not displayed
            1 = Lineweight is displayed
            </remarks>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.LtScale">
            <summary>
            Global line type scale.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.MirrText">
            <summary>
            Controls if the text will be mirrored during a symmetry.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.PdMode">
            <summary>
            Controls the <see cref="T:netDxf.Header.PointShape">shape</see> to draw a point entity.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.PdSize">
            <summary>
            Controls the size of the point figures, except for PDMODE values 0 (Dot) and 1 (Empty).
            </summary>
            <remarks>
            A setting of 0 generates the point at 5 percent of the drawing area height.<br />
            A positive PDSIZE value specifies an absolute size for the point figures.<br />
            A negative value is interpreted as a percentage of the viewport size.<br />
            </remarks>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.PLineGen">
            <summary>
            Governs the generation of line type patterns around the vertexes of a 2D polyline.
            </summary>
            <remarks>
            1 = Line type is generated in a continuous pattern around vertexes of the polyline.<br />
            0 = Each segment of the polyline starts and ends with a dash.
            </remarks>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.PsLtScale">
            <summary>
            Controls paper space line type scaling.
            </summary>
            <remarks>
            1 = No special line type scaling.<br />
            0 = Viewport scaling governs line type scaling.
            </remarks>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.TdCreate">
            <summary>
            Local date/time of drawing creation.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.TduCreate">
            <summary>
            Universal date/time the drawing was created.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.TdUpdate">
            <summary>
            Local date/time of last drawing update.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.TduUpdate">
            <summary>
            Universal date/time of the last update/save.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.TdinDwg">
            <summary>
            Cumulative editing time for this drawing.
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.UcsOrg">
            <summary>
            Origin of current UCS (in WCS).
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.UcsXDir">
            <summary>
            Direction of the current UCS X axis (in WCS).
            </summary>
        </member>
        <member name="F:netDxf.Header.HeaderVariableCode.UcsYDir">
            <summary>
            Direction of the current UCS Y axis (in WCS).
            </summary>
        </member>
        <member name="T:netDxf.Header.HeaderVariables">
            <summary>
            Represents the header variables of a DXF document.
            </summary>
        </member>
        <member name="M:netDxf.Header.HeaderVariables.#ctor">
            <summary>
            Initializes a new instance of the <c>SystemVariables</c>.
            </summary>
            <remarks>The default values are the same ones that are apply to a new AutoCad drawing.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.AcadVer">
            <summary>
            The AutoCAD drawing database version number.
            </summary>
            <remarks>Only AutoCad2000 and higher DXF versions are supported.</remarks>
            <exception cref="T:System.NotSupportedException">Only AutoCad2000 and higher DXF versions are supported.</exception>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.HandleSeed">
            <summary>
            Next available handle.
            </summary>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.Angbase">
            <summary>
            Angle 0 base.
            </summary>
            <remarks>Default value: 0.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.Angdir">
            <summary>
            The angle direction.
            </summary>
            <remarks>Default value: CCW.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.AttMode">
            <summary>
            Attribute visibility.
            </summary>
            <remarks>Default value: Normal.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.AUnits">
            <summary>
            Units format for angles.
            </summary>
            <remarks>Default value: Decimal degrees.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.AUprec">
            <summary>
            Units precision for angles.
            </summary>
            <remarks>Valid values are integers from 0 to 8. Default value: 0.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CeColor">
            <summary>
            Current entity color.
            </summary>
            <remarks>Default value: 256 (ByLayer). This header variable only supports indexed colors.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CeLtScale">
            <summary>
            Current entity line type scale.
            </summary>
            <remarks>Default value: 1.0.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CeLweight">
            <summary>
            Current entity line weight.
            </summary>
            <remarks>Default value: -1 (ByLayer).</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CeLtype">
            <summary>
            Current entity line type name.
            </summary>
            <remarks>Default value: ByLayer.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CLayer">
            <summary>
            Current layer name.
            </summary>
            <remarks>Default value: 0.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CMLJust">
            <summary>
            Current multiline justification.
            </summary>
            <remarks>Default value: 0 (Top).</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CMLScale">
            <summary>
            Current multiline scale.
            </summary>
            <remarks>Default value: 20.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.CMLStyle">
            <summary>
            Current multiline style.
            </summary>
            <remarks>Default value: Standard.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.DimStyle">
            <summary>
            Current dimension style.
            </summary>
            <remarks>Default value: Standard.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.TextSize">
            <summary>
            Default text height.
            </summary>
            <remarks>Default value: 2.5.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.TextStyle">
            <summary>
            Current text style.
            </summary>
            <remarks>Default value: Standard.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.LUnits">
            <summary>
            Units format for coordinates and distances.
            </summary>
            <remarks>
            Default value: Decimal.<br />
            If the LUnits is set to Architectural or Engineering the InsUnits variable will be set to Inches automatically.
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.LUprec">
            <summary>
            Units precision for coordinates and distances.
            </summary>
            <remarks>Valid values are integers from 0 to 8. Default value: 4.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.DwgCodePage">
            <summary>
            Drawing code page; set to the system code page when a new drawing is created, but not otherwise maintained by AutoCAD.
            </summary>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.Extnames">
            <summary>
            Controls symbol table naming.
            </summary>
            <remarks>
            Default value: 1.<br />
            Controls symbol table naming:<br />
            0 = Release 14 compatibility. Limits names to 31 characters in length.<br />
            Names can include the letters A to Z, the numerals 0 to 9,
            and the special characters dollar sign ($), underscore (_), and hyphen (-).<br />
            1 = AutoCAD 2000.<br />
            Names can be up to 255 characters in length, 
            and can include the letters A to Z, the numerals 0 to 9, spaces, 
            and any special characters not used for other purposes by Microsoft Windows and AutoCAD.
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.InsBase">
            <summary>
            Insertion base point for the current drawing.
            </summary>
            <remarks>
            When you insert or externally reference the current drawing into other drawings, this base point is used as the insertion base point.
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.InsUnits">
            <summary>
            Specifies a drawing units value for automatic scaling of blocks, images, or xRefs when inserted or attached to a drawing.
            </summary>
            <remarks>
            Default value: Unitless.<br />
            It is not recommend to change this value, if the LUnits variable has been set to Architectural or Engineering, they require the InsUnits to be set at Inches.
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.LastSavedBy">
            <summary>
            User name that saved the file.
            </summary>
            <remarks>
            By default it uses the user name of the person who is currently logged on to the Windows operating system.<br />
            This header variable is not compatible with AutoCad2000 or lower versions.
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.LtScale">
            <summary>
            Global line type scale.
            </summary>
            <remarks>Default value: 1.0.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.LwDisplay">
            <summary>
            Controls the display of line weights on the Model or Layout tab.
            </summary>
            <remarks>
            Default value: false.<br />
            false = Line weight is not displayed.<br />
            true = Line weight is displayed.<br />
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.MirrText">
            <summary>
            Controls if the text will be mirrored during a symmetry.
            </summary>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.PdMode">
            <summary>
            Controls the <see cref="T:netDxf.Header.PointShape">shape</see> to draw a point entity.
            </summary>
            <remarks>Default value: PointShape.Dot.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.PdSize">
            <summary>
            Controls the size of the point figures, except for PDMODE values 0 (Dot) and 1 (Empty).
            </summary>
            <remarks>
            Default value: 0.<br />
            A setting of 0 generates the point at 5 percent of the drawing area height.<br />
            A positive PDSIZE value specifies an absolute size for the point figures.<br />
            A negative value is interpreted as a percentage of the viewport size. <br />
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.PLineGen">
            <summary>
            Governs the generation of line type patterns around the vertexes of a 2D polyline.
            </summary>
            <remarks>
            Default value: 0.<br />
            1 = Line type is generated in a continuous pattern around vertexes of the polyline.<br />
            0 = Each segment of the polyline starts and ends with a dash.
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.PsLtScale">
            <summary>
            Controls paper space line type scaling.
            </summary>
            <remarks>
            Default value: 1.<br />
            1 = No special line type scaling.<br />
            0 = Viewport scaling governs line type scaling.
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.TdCreate">
            <summary>
            Local date/time of drawing creation.
            </summary>
            <remarks>This date/time is local to the time zone where the file was created.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.TduCreate">
            <summary>
            Universal date/time the drawing was created.
            </summary>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.TdUpdate">
            <summary>
            Local date/time of last drawing update.
            </summary>
            <remarks>This date/time is local to the time zone where the file was created.</remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.TduUpdate">
            <summary>
            Universal date/time the drawing was created.
            </summary>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.TdinDwg">
            <summary>
            Cumulative editing time for this drawing.
            </summary>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.UcsOrg">
            <summary>
            Origin of current UCS (in WCS).
            </summary>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.UcsXDir">
            <summary>
            Direction of the current UCS X axis (in WCS).
            </summary>
            <remarks>
            The vectors UcsXDir and UcsYDir must be perpendicular.
            </remarks>
        </member>
        <member name="P:netDxf.Header.HeaderVariables.UcsYDir">
            <summary>
            Direction of the current UCS Y axis (in WCS).
            </summary>
            <remarks>
            The vectors UcsXDir and UcsYDir must be perpendicular.
            </remarks>
        </member>
        <member name="M:netDxf.Header.HeaderVariables.KnownValues">
            <summary>
            Gets a collection of the known header variables.
            </summary>
            <returns>A list with the known header variables.</returns>
        </member>
        <member name="M:netDxf.Header.HeaderVariables.KnownNames">
            <summary>
            Gets a collection of the known header variables names.
            </summary>
            <returns>A list with the known header variables names.</returns>
        </member>
        <member name="M:netDxf.Header.HeaderVariables.CustomValues">
            <summary>
            Gets a collection of the custom header variables.
            </summary>
            <returns>A list with the custom header variables.</returns>
        </member>
        <member name="M:netDxf.Header.HeaderVariables.CustomNames">
            <summary>
            Gets a collection of the custom header variables names.
            </summary>
            <returns>A list with the custom header variables names.</returns>
        </member>
        <member name="M:netDxf.Header.HeaderVariables.AddCustomVariable(netDxf.Header.HeaderVariable)">
            <summary>
            Adds a custom <see cref="T:netDxf.Header.HeaderVariable">HeaderVariable</see> to the list.
            </summary>
            <param name="variable">Header variable to add to the list.</param>
            <remarks>
            All header variable names must start with the character '$'.<br />
            Header variable names that already exists in the known list cannot be added.
            </remarks>
        </member>
        <member name="M:netDxf.Header.HeaderVariables.ContainsCustomVariable(System.String)">
            <summary>
            Checks if a custom <see cref="T:netDxf.Header.HeaderVariable">HeaderVariable</see> name exits in the list.
            </summary>
            <param name="name">Header variable name.</param>
            <returns>True if a header variable name exits in the list; otherwise, false.</returns>
            <remarks>The header variable name is case insensitive.</remarks>
        </member>
        <member name="M:netDxf.Header.HeaderVariables.TryGetCustomVariable(System.String,netDxf.Header.HeaderVariable@)">
            <summary>Gets the header variable associated with the specified name.</summary>
            <param name="name">The name of the header variable to get.</param>
            <param name="variable">When this method returns, contains the header variable associated with the specified name, if the name is found; otherwise, it contains null.</param>
            <returns>True if the list contains a header variable with the specified name; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Header.HeaderVariables.RemoveCustomVariable(System.String)">
            <summary>
            Removes a custom <see cref="T:netDxf.Header.HeaderVariable">HeaderVariable</see> from the list.
            </summary>
            <param name="name">Header variable to add to the list.</param>
            <returns>True if the element is successfully found and removed; otherwise, false.</returns>
            <remarks>The header variable name is case insensitive.</remarks>
        </member>
        <member name="M:netDxf.Header.HeaderVariables.ClearCustomVariables">
            <summary>
            Removes all custom <see cref="T:netDxf.Header.HeaderVariable">HeaderVariable</see> from the list.
            </summary>
        </member>
        <member name="T:netDxf.Header.PointShape">
            <summary>
            Defines the shape of the point entities.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.Dot">
            <summary>
            A dot.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.Empty">
            <summary>
            No shape.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.Plus">
            <summary>
            Plus sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.Cross">
            <summary>
            Cross sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.Line">
            <summary>
            A line going upwards.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleDot">
            <summary>
            A circle and a dot.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleEmpty">
            <summary>
            Only a circle shape.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CirclePlus">
            <summary>
            A circle and a plus sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleCross">
            <summary>
            A circle and a cross sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleLine">
            <summary>
            A circle and a line.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.SquareDot">
            <summary>
            A square and a dot.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.SquareEmpty">
            <summary>
            Only a square shape.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.SquarePlus">
            <summary>
            A square and a plus sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.SquareCross">
            <summary>
            A square and a cross sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.SquareLine">
            <summary>
            A square and a line.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleSquareDot">
            <summary>
            A circle, a square, and a dot.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleSquareEmpty">
            <summary>
            A circle and a square.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleSquarePlus">
            <summary>
            A circle, a square, and a plus sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleSquareCross">
            <summary>
            A circle, a square, and a cross sign.
            </summary>
        </member>
        <member name="F:netDxf.Header.PointShape.CircleSquareLine">
            <summary>
            A circle, a square, and a line.
            </summary>
        </member>
        <member name="T:netDxf.IHasXData">
            <summary>
            Supports <see cref="T:netDxf.DxfObject">DxfObjects</see> that contain extended data information.
            </summary>
        </member>
        <member name="P:netDxf.IHasXData.XData">
            <summary>
            Gets the object <see cref="T:netDxf.Collections.XDataDictionary">extended data</see>.
            </summary>
        </member>
        <member name="T:netDxf.IO.DxfReader">
            <summary>
            Low level DXF reader
            </summary>
        </member>
        <member name="M:netDxf.IO.DxfReader.Read(System.IO.Stream,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reads the whole stream.
            </summary>
            <param name="stream">Stream.</param>
            <param name="supportFolders">List of the document support folders.</param>
        </member>
        <member name="T:netDxf.IO.DxfVersionNotSupportedException">
            <summary>
            Represents an error that occur when trying to load a DXF file which <see cref="T:netDxf.Header.DxfVersion">version</see> is not supported.
            </summary>
            <remarks>netDxf only supports DXF file versions AutoCad2000 and higher.</remarks>
        </member>
        <member name="M:netDxf.IO.DxfVersionNotSupportedException.#ctor(netDxf.Header.DxfVersion)">
            <summary>
            Initializes a new instance of <c>DxfVersionNotSupportedException</c>
            </summary>
            <param name="version">DXF file version.</param>
        </member>
        <member name="M:netDxf.IO.DxfVersionNotSupportedException.#ctor(System.String,netDxf.Header.DxfVersion)">
            <summary>
            Initializes a new instance of <c>DxfVersionNotSupportedException</c>
            </summary>
            <param name="message">Exception message.</param>
            <param name="version">DXF file version.</param>
        </member>
        <member name="P:netDxf.IO.DxfVersionNotSupportedException.Version">
            <summary>
            Gets the DXF file version that generated the exception.
            </summary>
        </member>
        <member name="T:netDxf.IO.DxfWriter">
            <summary>
            Low level DXF writer.
            </summary>
        </member>
        <member name="M:netDxf.IO.DxfWriter.Open(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Open the DXF writer.
            </summary>
        </member>
        <member name="M:netDxf.IO.DxfWriter.Close">
            <summary>
            Closes the DXF writer.
            </summary>
        </member>
        <member name="M:netDxf.IO.DxfWriter.BeginSection(System.String)">
            <summary>
            Opens a new section.
            </summary>
            <param name="section">Section type to open.</param>
            <remarks>There can be only one type section.</remarks>
        </member>
        <member name="M:netDxf.IO.DxfWriter.EndSection">
            <summary>
            Closes the active section.
            </summary>
        </member>
        <member name="M:netDxf.IO.DxfWriter.BeginTable(System.String,System.Int16,System.String)">
            <summary>
            Opens a new table.
            </summary>
            <param name="table">Table type to open.</param>
            <param name="handle">Handle assigned to this table</param>
        </member>
        <member name="M:netDxf.IO.DxfWriter.EndTable">
            <summary>
            Closes the active table.
            </summary>
        </member>
        <member name="M:netDxf.IO.DxfWriter.WriteApplicationRegistry(netDxf.Tables.ApplicationRegistry)">
            <summary>
            Writes a new extended data application registry to the table section.
            </summary>
            <param name="appReg">Name of the application registry.</param>
        </member>
        <member name="M:netDxf.IO.DxfWriter.WriteVPort(netDxf.Tables.VPort)">
            <summary>
            Writes a new viewport to the table section.
            </summary>
            <param name="vp">viewport.</param>
        </member>
        <member name="M:netDxf.IO.DxfWriter.WriteDimensionStyle(netDxf.Tables.DimensionStyle)">
            <summary>
            Writes a new dimension style to the table section.
            </summary>
            <param name="style">DimensionStyle.</param>
        </member>
        <member name="M:netDxf.IO.DxfWriter.WriteBlockRecord(netDxf.Blocks.BlockRecord)">
            <summary>
            Writes a new block record to the table section.
            </summary>
            <param name="blockRecord">Block.</param>
        </member>
        <member name="M:netDxf.IO.DxfWriter.WriteLinetype(netDxf.Tables.Linetype)">
            <summary>
            Writes a new line type to the table section.
            </summary>
            <param name="linetype">Line type.</param>
        </member>
        <member name="M:netDxf.IO.DxfWriter.WriteLayer(netDxf.Tables.Layer)">
            <summary>
            Writes a new layer to the table section.
            </summary>
            <param name="layer">Layer.</param>
        </member>
        <member name="M:netDxf.IO.DxfWriter.WriteTextStyle(netDxf.Tables.TextStyle)">
            <summary>
            Writes a new text style to the table section.
            </summary>
            <param name="style">TextStyle.</param>
        </member>
        <member name="M:netDxf.IO.DxfWriter.WriteShapeStyle(netDxf.Tables.ShapeStyle)">
            <summary>
            Writes a new shape style to the table section.
            </summary>
            <param name="style">ShapeStyle.</param>
        </member>
        <member name="M:netDxf.IO.DxfWriter.WriteUCS(netDxf.Tables.UCS)">
            <summary>
            Writes a new user coordinate system to the table section.
            </summary>
            <param name="ucs">UCS.</param>
        </member>
        <member name="P:netDxf.IO.ICodeValueReader.Code">
            <summary>
            Gets the dxf code.
            </summary>
        </member>
        <member name="P:netDxf.IO.ICodeValueReader.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:netDxf.IO.ICodeValueReader.CurrentPosition">
            <summary>
            Gets the line that has been read.
            </summary>
        </member>
        <member name="P:netDxf.IO.ICodeValueWriter.Code">
            <summary>
            Gets the dxf code.
            </summary>
        </member>
        <member name="P:netDxf.IO.ICodeValueWriter.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:netDxf.IO.ICodeValueWriter.CurrentPosition">
            <summary>
            Gets the line that has been written.
            </summary>
        </member>
        <member name="T:netDxf.Lineweight">
            <summary>
            Represents the line weight of a layer or an entity.
            </summary>
            <remarks>The enum numeric value correspond to 1/100 mm.</remarks>
        </member>
        <member name="F:netDxf.Lineweight.Default">
            <summary>
            Default lineweight.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.ByBlock">
            <summary>
            Lineweight defined by block.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.ByLayer">
            <summary>
            Lineweight defined by layer.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W0">
            <summary>
            Lineweight value 0.00 mm (hairline).
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W5">
            <summary>
            Lineweight value 0.05 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W9">
            <summary>
            Lineweight value 0.09 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W13">
            <summary>
            Lineweight value 0.13 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W15">
            <summary>
            Lineweight value 0.15 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W18">
            <summary>
            Lineweight value 0.18 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W20">
            <summary>
            Lineweight value 0.20 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W25">
            <summary>
            Lineweight value 0.25 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W30">
            <summary>
            Lineweight value 0.30 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W35">
            <summary>
            Lineweight value 0.35 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W40">
            <summary>
            Lineweight value 0.40 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W50">
            <summary>
            Lineweight value 0.50 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W53">
            <summary>
            Lineweight value 0.53 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W60">
            <summary>
            Lineweight value 0.60 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W70">
            <summary>
            Lineweight value 0.70 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W80">
            <summary>
            Lineweight value 0.80 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W90">
            <summary>
            Lineweight value 0.90 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W100">
            <summary>
            Lineweight value 1.00 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W106">
            <summary>
            Lineweight value 1.06 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W120">
            <summary>
            Lineweight value 1.20 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W140">
            <summary>
            Lineweight value 1.40 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W158">
            <summary>
            Lineweight value 1.58 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W200">
            <summary>
            Lineweight value 2.00 mm.
            </summary>
        </member>
        <member name="F:netDxf.Lineweight.W211">
            <summary>
            Lineweight value 2.11 mm.
            </summary>
        </member>
        <member name="T:netDxf.MathHelper">
            <summary>
            Utility math functions and constants.
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.DegToRad">
            <summary>
            Constant to transform an angle between degrees and radians.
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.RadToDeg">
            <summary>
            Constant to transform an angle between degrees and radians.
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.DegToGrad">
            <summary>
            Constant to transform an angle between degrees and gradians.
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.GradToDeg">
            <summary>
            Constant to transform an angle between degrees and gradians.
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.HalfPI">
            <summary>
            PI/2 (90 degrees)
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.PI">
            <summary>
            PI (180 degrees)
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.ThreeHalfPI">
            <summary>
            3*PI/2 (270 degrees)
            </summary>
        </member>
        <member name="F:netDxf.MathHelper.TwoPI">
            <summary>
            2*PI (360 degrees)
            </summary>
        </member>
        <member name="P:netDxf.MathHelper.Epsilon">
            <summary>
            Represents the smallest number used for comparison purposes.
            </summary>
            <remarks>
            The epsilon value must be a positive number greater than zero.
            </remarks>
        </member>
        <member name="M:netDxf.MathHelper.Sign(System.Double)">
            <summary>
            Returns a value indicating the sign of a double-precision floating-point number.
            </summary>
            <param name="number">Double precision number.
            </param>
            <returns>
            A number that indicates the sign of value.
            Return value Meaning -1 value is less than zero.
            0 value is equal to zero.
            1 value is greater than zero.
            </returns>
            <remarks>This method will test for values of numbers very close to zero.</remarks>
        </member>
        <member name="M:netDxf.MathHelper.Sign(System.Double,System.Double)">
            <summary>
            Returns a value indicating the sign of a double-precision floating-point number.
            </summary>
            <param name="number">Double precision number.
            <param name="threshold">Tolerance.</param>
            </param>
            <returns>
            A number that indicates the sign of value.
            Return value Meaning -1 value is less than zero.
            0 value is equal to zero.
            1 value is greater than zero.
            </returns>
            <remarks>This method will test for values of numbers very close to zero.</remarks>
        </member>
        <member name="M:netDxf.MathHelper.IsOne(System.Double)">
            <summary>
            Checks if a number is close to one.
            </summary>
            <param name="number">Double precision number.</param>
            <returns>True if its close to one or false in any other case.</returns>
        </member>
        <member name="M:netDxf.MathHelper.IsOne(System.Double,System.Double)">
            <summary>
            Checks if a number is close to one.
            </summary>
            <param name="number">Double precision number.</param>
            <param name="threshold">Tolerance.</param>
            <returns>True if its close to one or false in any other case.</returns>
        </member>
        <member name="M:netDxf.MathHelper.IsZero(System.Double)">
            <summary>
            Checks if a number is close to zero.
            </summary>
            <param name="number">Double precision number.</param>
            <returns>True if its close to one or false in any other case.</returns>
        </member>
        <member name="M:netDxf.MathHelper.IsZero(System.Double,System.Double)">
            <summary>
            Checks if a number is close to zero.
            </summary>
            <param name="number">Double precision number.</param>
            <param name="threshold">Tolerance.</param>
            <returns>True if its close to one or false in any other case.</returns>
        </member>
        <member name="M:netDxf.MathHelper.IsEqual(System.Double,System.Double)">
            <summary>
            Checks if a number is equal to another.
            </summary>
            <param name="a">Double precision number.</param>
            <param name="b">Double precision number.</param>
            <returns>True if its close to one or false in any other case.</returns>
        </member>
        <member name="M:netDxf.MathHelper.IsEqual(System.Double,System.Double,System.Double)">
            <summary>
            Checks if a number is equal to another.
            </summary>
            <param name="a">Double precision number.</param>
            <param name="b">Double precision number.</param>
            <param name="threshold">Tolerance.</param>
            <returns>True if its close to one or false in any other case.</returns>
        </member>
        <member name="M:netDxf.MathHelper.Transform(netDxf.Vector2,System.Double,netDxf.CoordinateSystem,netDxf.CoordinateSystem)">
            <summary>
            Transforms a point between coordinate systems.
            </summary>
            <param name="point">Point to transform.</param>
            <param name="rotation">Rotation angle in radians.</param>
            <param name="from">Point coordinate system.</param>
            <param name="to">Coordinate system of the transformed point.</param>
            <returns>Transformed point.</returns>
        </member>
        <member name="M:netDxf.MathHelper.Transform(System.Collections.Generic.IEnumerable{netDxf.Vector2},System.Double,netDxf.CoordinateSystem,netDxf.CoordinateSystem)">
            <summary>
            Transforms a point list between coordinate systems.
            </summary>
            <param name="points">Point list to transform.</param>
            <param name="rotation">Rotation angle in radians.</param>
            <param name="from">Point coordinate system.</param>
            <param name="to">Coordinate system of the transformed point.</param>
            <returns>Transformed point list.</returns>
        </member>
        <member name="M:netDxf.MathHelper.Transform(netDxf.Vector3,netDxf.Vector3,netDxf.CoordinateSystem,netDxf.CoordinateSystem)">
            <summary>
            Transforms a point between coordinate systems.
            </summary>
            <param name="point">Point to transform.</param>
            <param name="zAxis">Object normal vector.</param>
            <param name="from">Point coordinate system.</param>
            <param name="to">Coordinate system of the transformed point.</param>
            <returns>Transformed point.</returns>
        </member>
        <member name="M:netDxf.MathHelper.Transform(System.Collections.Generic.IEnumerable{netDxf.Vector3},netDxf.Vector3,netDxf.CoordinateSystem,netDxf.CoordinateSystem)">
            <summary>
            Transforms a point list between coordinate systems.
            </summary>
            <param name="points">Points to transform.</param>
            <param name="zAxis">Object normal vector.</param>
            <param name="from">Points coordinate system.</param>
            <param name="to">Coordinate system of the transformed points.</param>
            <returns>Transformed point list.</returns>
        </member>
        <member name="M:netDxf.MathHelper.ArbitraryAxis(netDxf.Vector3)">
            <summary>
            Gets the rotation matrix from the normal vector (extrusion direction) of an entity.
            </summary>
            <param name="zAxis">Normal vector.</param>
            <returns>Rotation matrix.</returns>
        </member>
        <member name="M:netDxf.MathHelper.PointLineDistance(netDxf.Vector3,netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Calculates the minimum distance between a point and a line.
            </summary>
            <param name="p">A point.</param>
            <param name="origin">Line origin point.</param>
            <param name="dir">Line direction.</param>
            <returns>The minimum distance between the point and the line.</returns>
        </member>
        <member name="M:netDxf.MathHelper.PointLineDistance(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Calculates the minimum distance between a point and a line.
            </summary>
            <param name="p">A point.</param>
            <param name="origin">Line origin point.</param>
            <param name="dir">Line direction.</param>
            <returns>The minimum distance between the point and the line.</returns>
        </member>
        <member name="M:netDxf.MathHelper.PointInSegment(netDxf.Vector3,netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Checks if a point is inside a line segment.
            </summary>
            <param name="p">A point.</param>
            <param name="start">Segment start point.</param>
            <param name="end">Segment end point.</param>
            <returns>Zero if the point is inside the segment, 1 if the point is after the end point, and -1 if the point is before the start point.</returns>
            <remarks>
            For testing purposes a point is considered inside a segment,
            if it falls inside the volume from start to end of the segment that extends infinitely perpendicularly to its direction.
            Later, if needed, you can use the PointLineDistance method, if the distance is zero the point is along the line defined by the start and end points.
            </remarks>
        </member>
        <member name="M:netDxf.MathHelper.PointInSegment(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Checks if a point is inside a line segment.
            </summary>
            <param name="p">A point.</param>
            <param name="start">Segment start point.</param>
            <param name="end">Segment end point.</param>
            <returns>Zero if the point is inside the segment, 1 if the point is after the end point, and -1 if the point is before the start point.</returns>
            <remarks>
            For testing purposes a point is considered inside a segment,
            if it falls inside the area from start to end of the segment that extends infinitely perpendicularly to its direction.
            Later, if needed, you can use the PointLineDistance method, if the distance is zero the point is along the line defined by the start and end points.
            </remarks>
        </member>
        <member name="M:netDxf.MathHelper.FindIntersection(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Calculates the intersection point of two lines.
            </summary>
            <param name="point0">First line origin point.</param>
            <param name="dir0">First line direction.</param>
            <param name="point1">Second line origin point.</param>
            <param name="dir1">Second line direction.</param>
            <returns>The intersection point between the two lines.</returns>
            <remarks>If the lines are parallel the method will return a <see cref="P:netDxf.Vector2.NaN">Vector2.NaN</see>.</remarks>
        </member>
        <member name="M:netDxf.MathHelper.FindIntersection(netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,netDxf.Vector2,System.Double)">
            <summary>
            Calculates the intersection point of two lines.
            </summary>
            <param name="point0">First line origin point.</param>
            <param name="dir0">First line direction.</param>
            <param name="point1">Second line origin point.</param>
            <param name="dir1">Second line direction.</param>
            <param name="threshold">Tolerance.</param>
            <returns>The intersection point between the two lines.</returns>
            <remarks>If the lines are parallel the method will return a <see cref="P:netDxf.Vector2.NaN">Vector2.NaN</see>.</remarks>
        </member>
        <member name="M:netDxf.MathHelper.NormalizeAngle(System.Double)">
            <summary>
            Normalizes the value of an angle in degrees between [0, 360[.
            </summary>
            <param name="angle">Angle in degrees.</param>
            <returns>The equivalent angle in the range [0, 360[.</returns>
            <remarks>Negative angles will be converted to its positive equivalent.</remarks>
        </member>
        <member name="M:netDxf.MathHelper.RoundToNearest(System.Double,System.Double)">
            <summary>
            Round off a numeric value to the nearest of another value.
            </summary>
            <param name="number">Number to round off.</param>
            <param name="roundTo">The number will be rounded to the nearest of this value.</param>
            <returns>The number rounded to the nearest value.</returns>
        </member>
        <member name="M:netDxf.MathHelper.RotateAboutAxis(netDxf.Vector3,netDxf.Vector3,System.Double)">
            <summary>
            Rotate given vector of angle in radians about a specified axis.
            </summary>
            <param name="v">Vector to rotate.</param>
            <param name="axis">Rotation axis. This vector should be normalized.</param>
            <param name="angle">Rotation angle in radians.</param>        
            <returns>A copy of the vector, rotated.</returns>
            <remarks>Method provided by: Idelana. Original Author: Paul Bourke ( http://paulbourke.net/geometry/rotate/ )</remarks>
        </member>
        <member name="M:netDxf.MathHelper.Swap``1(``0@,``0@)">
            <summary>
            Swaps two variables.
            </summary>
            <typeparam name="T">Variable type.</typeparam>
            <param name="obj1">An object of type T.</param>
            <param name="obj2">An object of type T.</param>
        </member>
        <member name="T:netDxf.Matrix2">
            <summary>
            Represents a 2x2 double precision matrix.
            </summary>
        </member>
        <member name="M:netDxf.Matrix2.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of Matrix2.
            </summary>
            <param name="m11">Element [0,0].</param>
            <param name="m12">Element [0,1].</param>
            <param name="m21">Element [1,0].</param>
            <param name="m22">Element [1,1].</param>
        </member>
        <member name="P:netDxf.Matrix2.Zero">
            <summary>
            Gets the zero matrix.
            </summary>
        </member>
        <member name="P:netDxf.Matrix2.Identity">
            <summary>
            Gets the identity matrix.
            </summary>
        </member>
        <member name="P:netDxf.Matrix2.M11">
            <summary>
            Gets or sets the matrix element [0,0].
            </summary>
        </member>
        <member name="P:netDxf.Matrix2.M12">
            <summary>
            Gets or sets the matrix element [0,1].
            </summary>
        </member>
        <member name="P:netDxf.Matrix2.M21">
            <summary>
            Gets or sets the matrix element [1,0].
            </summary>
        </member>
        <member name="P:netDxf.Matrix2.M22">
            <summary>
            Gets or sets the matrix element [1,1].
            </summary>
        </member>
        <member name="P:netDxf.Matrix2.Item(System.Int32,System.Int32)">
            <summary>Gets or sets the component at the given row and column index in the matrix.</summary>
            <param name="row">The row index of the matrix.</param>
            <param name="column">The column index of the matrix.</param>
            <returns>The component at the given row and column index in the matrix.</returns>
        </member>
        <member name="P:netDxf.Matrix2.IsIdentity">
            <summary>
            Gets if the actual matrix is the identity.
            </summary>
            <remarks>
            The checks to see if the matrix is the identity uses the MathHelper.Epsilon as a the threshold for testing values close to one and zero.
            </remarks>
        </member>
        <member name="M:netDxf.Matrix2.op_Addition(netDxf.Matrix2,netDxf.Matrix2)">
            <summary>
            Matrix addition.
            </summary>
            <param name="a">Matrix2.</param>
            <param name="b">Matrix2.</param>
            <returns>Matrix2.</returns>
        </member>
        <member name="M:netDxf.Matrix2.Add(netDxf.Matrix2,netDxf.Matrix2)">
            <summary>
            Matrix addition.
            </summary>
            <param name="a">Matrix2.</param>
            <param name="b">Matrix2.</param>
            <returns>Matrix2.</returns>
        </member>
        <member name="M:netDxf.Matrix2.op_Subtraction(netDxf.Matrix2,netDxf.Matrix2)">
            <summary>
            Matrix subtraction.
            </summary>
            <param name="a">Matrix2.</param>
            <param name="b">Matrix2.</param>
            <returns>Matrix2.</returns>
        </member>
        <member name="M:netDxf.Matrix2.Subtract(netDxf.Matrix2,netDxf.Matrix2)">
            <summary>
            Matrix subtraction.
            </summary>
            <param name="a">Matrix2.</param>
            <param name="b">Matrix2.</param>
            <returns>Matrix2.</returns>
        </member>
        <member name="M:netDxf.Matrix2.op_Multiply(netDxf.Matrix2,netDxf.Matrix2)">
            <summary>
            Product of two matrices.
            </summary>
            <param name="a">Matrix2.</param>
            <param name="b">Matrix2.</param>
            <returns>Matrix2.</returns>
        </member>
        <member name="M:netDxf.Matrix2.Multiply(netDxf.Matrix2,netDxf.Matrix2)">
            <summary>
            Product of two matrices.
            </summary>
            <param name="a">Matrix2.</param>
            <param name="b">Matrix2.</param>
            <returns>Matrix2.</returns>
        </member>
        <member name="M:netDxf.Matrix2.op_Multiply(netDxf.Matrix2,netDxf.Vector2)">
            <summary>
            Product of a matrix with a vector.
            </summary>
            <param name="a">Matrix2.</param>
            <param name="u">Vector2.</param>
            <returns>Matrix2.</returns>
            <remarks>Matrix2 adopts the convention of using column vectors.</remarks>
        </member>
        <member name="M:netDxf.Matrix2.Multiply(netDxf.Matrix2,netDxf.Vector2)">
            <summary>
            Product of a matrix with a vector.
            </summary>
            <param name="a">Matrix2.</param>
            <param name="u">Vector2.</param>
            <returns>Matrix2.</returns>
            <remarks>Matrix2 adopts the convention of using column vectors.</remarks>
        </member>
        <member name="M:netDxf.Matrix2.op_Multiply(netDxf.Matrix2,System.Double)">
            <summary>
            Product of a matrix with a scalar.
            </summary>
            <param name="m">Matrix2.</param>
            <param name="a">Scalar.</param>
            <returns>Matrix2.</returns>
        </member>
        <member name="M:netDxf.Matrix2.Multiply(netDxf.Matrix2,System.Double)">
            <summary>
            Product of a matrix with a scalar.
            </summary>
            <param name="m">Matrix2.</param>
            <param name="a">Scalar.</param>
            <returns>Matrix2.</returns>
        </member>
        <member name="M:netDxf.Matrix2.op_Equality(netDxf.Matrix2,netDxf.Matrix2)">
            <summary>
            Check if the components of two matrices are equal.
            </summary>
            <param name="u">Matrix2.</param>
            <param name="v">Matrix2.</param>
            <returns>True if the matrix components are equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix2.op_Inequality(netDxf.Matrix2,netDxf.Matrix2)">
            <summary>
            Check if the components of two matrices are different.
            </summary>
            <param name="u">Matrix2.</param>
            <param name="v">Matrix2.</param>
            <returns>True if the matrix components are different or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix2.Determinant">
            <summary>
            Calculate the determinant of the actual matrix.
            </summary>
            <returns>Determinant.</returns>
        </member>
        <member name="M:netDxf.Matrix2.Inverse">
            <summary>
            Calculates the inverse matrix.
            </summary>
            <returns>Inverse Matrix2.</returns>
        </member>
        <member name="M:netDxf.Matrix2.Transpose">
            <summary>
            Obtains the transpose matrix.
            </summary>
            <returns>Transpose matrix.</returns>
        </member>
        <member name="M:netDxf.Matrix2.Rotation(System.Double)">
            <summary>
            Builds a rotation matrix for a rotation.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix2 instance.</returns>
            <remarks>Matrix2 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Matrix2.Scale(System.Double)">
            <summary>
            Build a scaling matrix.
            </summary>
            <param name="value">Single scale factor for x and y axis.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:netDxf.Matrix2.Scale(netDxf.Vector2)">
            <summary>
            Build a scaling matrix.
            </summary>
            <param name="value">Scale factors for x and y axis.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:netDxf.Matrix2.Scale(System.Double,System.Double)">
            <summary>
            Build a scaling matrix.
            </summary>
            <param name="x">Scale factor for x-axis.</param>
            <param name="y">Scale factor for y-axis.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:netDxf.Matrix2.Equals(netDxf.Matrix2,netDxf.Matrix2)">
            <summary>
            Check if the components of two matrices are approximate equal.
            </summary>
            <param name="a">Matrix2.</param>
            <param name="b">Matrix2.</param>
            <returns>True if the matrix components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix2.Equals(netDxf.Matrix2,netDxf.Matrix2,System.Double)">
            <summary>
            Check if the components of two matrices are approximate equal.
            </summary>
            <param name="a">Matrix2.</param>
            <param name="b">Matrix2.</param>
            <param name="threshold">Maximum tolerance.</param>
            <returns>True if the matrix components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix2.Equals(netDxf.Matrix2)">
            <summary>
            Check if the components of two matrices are approximate equal.
            </summary>
            <param name="other">Matrix2.</param>
            <returns>True if the matrix components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix2.Equals(netDxf.Matrix2,System.Double)">
            <summary>
            Check if the components of two matrices are approximate equal.
            </summary>
            <param name="obj">Matrix2.</param>
            <param name="threshold">Maximum tolerance.</param>
            <returns>True if the matrix components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix2.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Matrix2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:netDxf.Matrix2.ToString">
            <summary>
            Obtains a string that represents the matrix.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="M:netDxf.Matrix2.ToString(System.IFormatProvider)">
            <summary>
            Obtains a string that represents the matrix.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>A string text.</returns>
        </member>
        <member name="T:netDxf.Matrix3">
            <summary>
            Represents a 3x3 double precision matrix.
            </summary>
        </member>
        <member name="M:netDxf.Matrix3.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of Matrix3.
            </summary>
            <param name="m11">Element [0,0].</param>
            <param name="m12">Element [0,1].</param>
            <param name="m13">Element [0,2].</param>
            <param name="m21">Element [1,0].</param>
            <param name="m22">Element [1,1].</param>
            <param name="m23">Element [1,2].</param>
            <param name="m31">Element [2,0].</param>
            <param name="m32">Element [2,1].</param>
            <param name="m33">Element [2,2].</param>
        </member>
        <member name="P:netDxf.Matrix3.Zero">
            <summary>
            Gets the zero matrix.
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.Identity">
            <summary>
            Gets the identity matrix.
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M11">
            <summary>
            Gets or sets the matrix element [0,0].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M12">
            <summary>
            Gets or sets the matrix element [0,1].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M13">
            <summary>
            Gets or sets the matrix element [0,2].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M21">
            <summary>
            Gets or sets the matrix element [1,0].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M22">
            <summary>
            Gets or sets the matrix element [1,1].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M23">
            <summary>
            Gets or sets the matrix element [1,2].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M31">
            <summary>
            Gets or sets the matrix element [2,0].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M32">
            <summary>
            Gets or sets the matrix element [2,1].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.M33">
            <summary>
            Gets or sets the matrix element [2,2].
            </summary>
        </member>
        <member name="P:netDxf.Matrix3.Item(System.Int32,System.Int32)">
            <summary>Gets or sets the component at the given row and column index in the matrix.</summary>
            <param name="row">The row index of the matrix.</param>
            <param name="column">The column index of the matrix.</param>
            <returns>The component at the given row and column index in the matrix.</returns>
        </member>
        <member name="P:netDxf.Matrix3.IsIdentity">
            <summary>
            Gets if the actual matrix is the identity.
            </summary>
            <remarks>
            The checks to see if the matrix is the identity uses the MathHelper.Epsilon as a the threshold for testing values close to one and zero.
            </remarks>
        </member>
        <member name="M:netDxf.Matrix3.op_Addition(netDxf.Matrix3,netDxf.Matrix3)">
            <summary>
            Matrix addition.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="b">Matrix3.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Add(netDxf.Matrix3,netDxf.Matrix3)">
            <summary>
            Matrix addition.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="b">Matrix3.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.op_Subtraction(netDxf.Matrix3,netDxf.Matrix3)">
            <summary>
            Matrix subtraction.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="b">Matrix3.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Subtract(netDxf.Matrix3,netDxf.Matrix3)">
            <summary>
            Matrix subtraction.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="b">Matrix3.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.op_Multiply(netDxf.Matrix3,netDxf.Matrix3)">
            <summary>
            Product of two matrices.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="b">Matrix3.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Multiply(netDxf.Matrix3,netDxf.Matrix3)">
            <summary>
            Product of two matrices.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="b">Matrix3.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.op_Multiply(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Product of a matrix with a vector.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="u">Vector3.</param>
            <returns>Matrix3.</returns>
            <remarks>Matrix3 adopts the convention of using column vectors.</remarks>
        </member>
        <member name="M:netDxf.Matrix3.Multiply(netDxf.Matrix3,netDxf.Vector3)">
            <summary>
            Product of a matrix with a vector.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="u">Vector3.</param>
            <returns>Matrix3.</returns>
            <remarks>Matrix3 adopts the convention of using column vectors.</remarks>
        </member>
        <member name="M:netDxf.Matrix3.op_Multiply(netDxf.Matrix3,System.Double)">
            <summary>
            Product of a matrix with a scalar.
            </summary>
            <param name="m">Matrix3.</param>
            <param name="a">Scalar.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Multiply(netDxf.Matrix3,System.Double)">
            <summary>
            Product of a matrix with a scalar.
            </summary>
            <param name="m">Matrix3.</param>
            <param name="a">Scalar.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.op_Equality(netDxf.Matrix3,netDxf.Matrix3)">
            <summary>
            Check if the components of two matrices are equal.
            </summary>
            <param name="u">Matrix3.</param>
            <param name="v">Matrix3.</param>
            <returns>True if the matrix components are equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix3.op_Inequality(netDxf.Matrix3,netDxf.Matrix3)">
            <summary>
            Check if the components of two matrices are different.
            </summary>
            <param name="u">Matrix3.</param>
            <param name="v">Matrix3.</param>
            <returns>True if the matrix components are different or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Determinant">
            <summary>
            Calculate the determinant of the actual matrix.
            </summary>
            <returns>Determinant.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Inverse">
            <summary>
            Calculates the inverse matrix.
            </summary>
            <returns>Inverse Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Transpose">
            <summary>
            Obtains the transpose matrix.
            </summary>
            <returns>Transpose matrix.</returns>
        </member>
        <member name="M:netDxf.Matrix3.RotationX(System.Double)">
            <summary>
            Builds a rotation matrix for a rotation around the x-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix3 instance.</returns>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Matrix3.RotationY(System.Double)">
            <summary>
            Builds a rotation matrix for a rotation around the y-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix3 instance.</returns>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Matrix3.RotationZ(System.Double)">
            <summary>
            Builds a rotation matrix for a rotation around the z-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix3 instance.</returns>
            <remarks>Matrix3 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Matrix3.Scale(System.Double)">
            <summary>
            Build a scaling matrix.
            </summary>
            <param name="value">Single scale factor for x, y, and z axis.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Scale(netDxf.Vector3)">
            <summary>
            Build a scaling matrix.
            </summary>
            <param name="value">Scale factors for x, y, and z axis.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Build a scaling matrix.
            </summary>
            <param name="x">Scale factor for x-axis.</param>
            <param name="y">Scale factor for y-axis.</param>
            <param name="z">Scale factor for z-axis.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Equals(netDxf.Matrix3,netDxf.Matrix3)">
            <summary>
            Check if the components of two matrices are approximate equal.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="b">Matrix3.</param>
            <returns>True if the matrix components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Equals(netDxf.Matrix3,netDxf.Matrix3,System.Double)">
            <summary>
            Check if the components of two matrices are approximate equal.
            </summary>
            <param name="a">Matrix3.</param>
            <param name="b">Matrix3.</param>
            <param name="threshold">Maximum tolerance.</param>
            <returns>True if the matrix components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Equals(netDxf.Matrix3)">
            <summary>
            Check if the components of two matrices are approximate equal.
            </summary>
            <param name="other">Matrix3.</param>
            <returns>True if the matrix components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Equals(netDxf.Matrix3,System.Double)">
            <summary>
            Check if the components of two matrices are approximate equal.
            </summary>
            <param name="obj">Matrix3.</param>
            <param name="threshold">Maximum tolerance.</param>
            <returns>True if the matrix components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix3.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Matrix3.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:netDxf.Matrix3.ToString">
            <summary>
            Obtains a string that represents the matrix.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="M:netDxf.Matrix3.ToString(System.IFormatProvider)">
            <summary>
            Obtains a string that represents the matrix.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>A string text.</returns>
        </member>
        <member name="T:netDxf.Matrix4">
            <summary>
            Represents a 4x4 double precision matrix.
            </summary>
        </member>
        <member name="M:netDxf.Matrix4.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of Matrix4.
            </summary>
            <param name="m11">Element [0,0].</param>
            <param name="m12">Element [0,1].</param>
            <param name="m13">Element [0,2].</param>
            <param name="m14">Element [0,3].</param>
            <param name="m21">Element [1,0].</param>
            <param name="m22">Element [1,1].</param>
            <param name="m23">Element [1,2].</param>
            <param name="m24">Element [1,3].</param>
            <param name="m31">Element [2,0].</param>
            <param name="m32">Element [2,1].</param>
            <param name="m33">Element [2,2].</param>
            <param name="m34">Element [2,3].</param>
            <param name="m41">Element [3,0].</param>
            <param name="m42">Element [3,1].</param>
            <param name="m43">Element [3,2].</param>
            <param name="m44">Element [3,3].</param>
        </member>
        <member name="P:netDxf.Matrix4.Zero">
            <summary>
            Gets the zero matrix.
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.Identity">
            <summary>
            Gets the identity matrix.
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M11">
            <summary>
            Gets or sets the matrix element [0,0].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M12">
            <summary>
            Gets or sets the matrix element [0,1].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M13">
            <summary>
            Gets or sets the matrix element [0,2].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M14">
            <summary>
            Gets or sets the matrix element [0,3].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M21">
            <summary>
            Gets or sets the matrix element [1,0].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M22">
            <summary>
            Gets or sets the matrix element [1,1].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M23">
            <summary>
            Gets or sets the matrix element [1,2].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M24">
            <summary>
            Gets or sets the matrix element [1,3].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M31">
            <summary>
            Gets or sets the matrix element [2,0].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M32">
            <summary>
            Gets or sets the matrix element [2,1].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M33">
            <summary>
            Gets or sets the matrix element [2,2].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M34">
            <summary>
            Gets or sets the matrix element [2,3].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M41">
            <summary>
            Gets or sets the matrix element [3,0].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M42">
            <summary>
            Gets or sets the matrix element [3,1].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M43">
            <summary>
            Gets or sets the matrix element [3,2].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.M44">
            <summary>
            Gets or sets the matrix element [3,3].
            </summary>
        </member>
        <member name="P:netDxf.Matrix4.Item(System.Int32,System.Int32)">
            <summary>Gets or sets the component at the given row and column index in the matrix.</summary>
            <param name="row">The row index of the matrix.</param>
            <param name="column">The column index of the matrix.</param>
            <returns>The component at the given row and column index in the matrix.</returns>
        </member>
        <member name="P:netDxf.Matrix4.IsIdentity">
            <summary>
            Gets if the actual matrix is the identity.
            </summary>
            <remarks>
            The checks to see if the matrix is the identity uses the MathHelper.Epsilon as a the threshold for testing values close to one and zero.
            </remarks>
        </member>
        <member name="M:netDxf.Matrix4.op_Addition(netDxf.Matrix4,netDxf.Matrix4)">
            <summary>
            Matrix addition.
            </summary>
            <param name="a">Matrix4.</param>
            <param name="b">Matrix4.</param>
            <returns>Matrix4.</returns>
        </member>
        <member name="M:netDxf.Matrix4.Add(netDxf.Matrix4,netDxf.Matrix4)">
            <summary>
            Matrix addition.
            </summary>
            <param name="a">Matrix4.</param>
            <param name="b">Matrix4.</param>
            <returns>Matrix4.</returns>
        </member>
        <member name="M:netDxf.Matrix4.op_Subtraction(netDxf.Matrix4,netDxf.Matrix4)">
            <summary>
            Matrix subtraction.
            </summary>
            <param name="a">Matrix4.</param>
            <param name="b">Matrix4.</param>
            <returns>Matrix4.</returns>
        </member>
        <member name="M:netDxf.Matrix4.Subtract(netDxf.Matrix4,netDxf.Matrix4)">
            <summary>
            Matrix subtraction.
            </summary>
            <param name="a">Matrix4.</param>
            <param name="b">Matrix4.</param>
            <returns>Matrix4.</returns>
        </member>
        <member name="M:netDxf.Matrix4.op_Multiply(netDxf.Matrix4,netDxf.Matrix4)">
            <summary>
            Product of two matrices.
            </summary>
            <param name="a">Matrix4.</param>
            <param name="b">Matrix4.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix4.Multiply(netDxf.Matrix4,netDxf.Matrix4)">
            <summary>
            Product of two matrices.
            </summary>
            <param name="a">Matrix4.</param>
            <param name="b">Matrix4.</param>
            <returns>Matrix4.</returns>
        </member>
        <member name="M:netDxf.Matrix4.op_Multiply(netDxf.Matrix4,netDxf.Vector4)">
            <summary>
            Product of a matrix with a vector.
            </summary>
            <param name="a">Matrix4.</param>
            <param name="u">Vector4.</param>
            <returns>Matrix4.</returns>
            <remarks>Matrix4 adopts the convention of using column vectors.</remarks>
        </member>
        <member name="M:netDxf.Matrix4.Multiply(netDxf.Matrix4,netDxf.Vector4)">
            <summary>
            Product of a matrix with a vector.
            </summary>
            <param name="a">Matrix4.</param>
            <param name="u">Vector4.</param>
            <returns>Matrix4.</returns>
            <remarks>Matrix4 adopts the convention of using column vectors to represent three dimensional points.</remarks>
        </member>
        <member name="M:netDxf.Matrix4.op_Multiply(netDxf.Matrix4,System.Double)">
            <summary>
            Product of a matrix with a scalar.
            </summary>
            <param name="m">Matrix4.</param>
            <param name="a">Scalar.</param>
            <returns>Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix4.Multiply(netDxf.Matrix4,System.Double)">
            <summary>
            Product of a matrix with a scalar.
            </summary>
            <param name="m">Matrix4.</param>
            <param name="a">Scalar.</param>
            <returns>Matrix4.</returns>
        </member>
        <member name="M:netDxf.Matrix4.op_Equality(netDxf.Matrix4,netDxf.Matrix4)">
            <summary>
            Check if the components of two matrices are equal.
            </summary>
            <param name="u">Matrix4.</param>
            <param name="v">Matrix4.</param>
            <returns>True if the matrix components are equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix4.op_Inequality(netDxf.Matrix4,netDxf.Matrix4)">
            <summary>
            Check if the components of two matrices are different.
            </summary>
            <param name="u">Matrix4.</param>
            <param name="v">Matrix4.</param>
            <returns>True if the matrix components are different or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix4.Determinant">
            <summary>
            Calculate the determinant of the actual matrix.
            </summary>
            <returns>Determinant.</returns>
        </member>
        <member name="M:netDxf.Matrix4.Inverse">
            <summary>
            Calculates the inverse matrix.
            </summary>
            <returns>Inverse Matrix3.</returns>
        </member>
        <member name="M:netDxf.Matrix4.Transpose">
            <summary>
            Obtains the transpose matrix.
            </summary>
            <returns>Transpose matrix.</returns>
        </member>
        <member name="M:netDxf.Matrix4.RotationX(System.Double)">
            <summary>
            Builds a rotation matrix for a rotation around the x-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix4 instance.</returns>
            <remarks>Matrix4 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Matrix4.RotationY(System.Double)">
            <summary>
            Builds a rotation matrix for a rotation around the y-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix4 instance.</returns>
            <remarks>Matrix4 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Matrix4.RotationZ(System.Double)">
            <summary>
            Builds a rotation matrix for a rotation around the z-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix4 instance.</returns>
            <remarks>Matrix4 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Matrix4.Scale(System.Double)">
            <summary>
            Build a scaling matrix.
            </summary>
            <param name="value">Single scale factor for x, y, and z axis.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:netDxf.Matrix4.Scale(netDxf.Vector3)">
            <summary>
            Build a scaling matrix.
            </summary>
            <param name="value">Scale factors for x, y, and z axis.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:netDxf.Matrix4.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Build a scaling matrix.
            </summary>
            <param name="x">Scale factor for x-axis.</param>
            <param name="y">Scale factor for y-axis.</param>
            <param name="z">Scale factor for z-axis.</param>
            <returns>A scaling matrix.</returns>
        </member>
        <member name="M:netDxf.Matrix4.Translation(netDxf.Vector3)">
            <summary>
            Build a translation matrix.
            </summary>
            <param name="vector">Translation vector along the X, Y, and Z axis.</param>
            <returns>A translation matrix.</returns>
            <remarks>Matrix4 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Matrix4.Translation(System.Double,System.Double,System.Double)">
            <summary>
            Build a translation matrix.
            </summary>
            <param name="x">Translation along the X axis.</param>
            <param name="y">Translation along the Y axis.</param>
            <param name="z">Translation along the Z axis.</param>
            <returns>A translation matrix.</returns>
            <remarks>Matrix4 adopts the convention of using column vectors to represent a transformation matrix.</remarks>
        </member>
        <member name="M:netDxf.Matrix4.Equals(netDxf.Matrix4,netDxf.Matrix4)">
            <summary>
            Check if the components of two matrices are approximate equal.
            </summary>
            <param name="a">Matrix4.</param>
            <param name="b">Matrix4.</param>
            <returns>True if the matrix components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix4.Equals(netDxf.Matrix4,netDxf.Matrix4,System.Double)">
            <summary>
            Check if the components of two matrices are approximate equal.
            </summary>
            <param name="a">Matrix4.</param>
            <param name="b">Matrix4.</param>
            <param name="threshold">Maximum tolerance.</param>
            <returns>True if the matrix components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix4.Equals(netDxf.Matrix4)">
            <summary>
            Check if the components of two matrices are approximate equal.
            </summary>
            <param name="other">Matrix4.</param>
            <returns>True if the matrix components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix4.Equals(netDxf.Matrix4,System.Double)">
            <summary>
            Check if the components of two matrices are approximate equal.
            </summary>
            <param name="obj">Matrix4.</param>
            <param name="threshold">Maximum tolerance.</param>
            <returns>True if the matrix components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Matrix4.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Matrix4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:netDxf.Matrix4.ToString">
            <summary>
            Obtains a string that represents the matrix.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="M:netDxf.Matrix4.ToString(System.IFormatProvider)">
            <summary>
            Obtains a string that represents the matrix.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>A string text.</returns>
        </member>
        <member name="T:netDxf.Objects.DictionaryCloningFlags">
            <summary>
            Duplicate record cloning flag (determines how to merge duplicate entries).
            </summary>
        </member>
        <member name="F:netDxf.Objects.DictionaryCloningFlags.NotApplicable">
            <summary>
            Not applicable.
            </summary>
        </member>
        <member name="F:netDxf.Objects.DictionaryCloningFlags.KeepExisting">
            <summary>
            Keep existing.
            </summary>
        </member>
        <member name="F:netDxf.Objects.DictionaryCloningFlags.UseClone">
            <summary>
            Use clone.
            </summary>
        </member>
        <member name="F:netDxf.Objects.DictionaryCloningFlags.XrefName">
            <summary>
            External reference name.
            </summary>
        </member>
        <member name="F:netDxf.Objects.DictionaryCloningFlags.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="F:netDxf.Objects.DictionaryCloningFlags.UnmangleName">
            <summary>
            Unmangle name.
            </summary>
        </member>
        <member name="P:netDxf.Objects.DictionaryObject.Entries">
            <summary>
            Gets the entries dictionary (key: owner entry handle, value: name)
            </summary>
        </member>
        <member name="P:netDxf.Objects.DictionaryObject.IsHardOwner">
            <summary>
            Gets or sets if the dictionary object is hard owner.
            </summary>
        </member>
        <member name="P:netDxf.Objects.DictionaryObject.Cloning">
            <summary>
            Gets or sets the dictionary object cloning flags.
            </summary>
        </member>
        <member name="T:netDxf.Objects.Group">
            <summary>
            Represents a group of entities.
            </summary>
        </member>
        <member name="M:netDxf.Objects.Group.#ctor">
            <summary>
            Initialized a new unnamed empty group.
            </summary>
            <remarks>
            A unique name will be generated when the group is added to the document.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.Group.#ctor(System.String)">
            <summary>
            Initialized a new empty group.
            </summary>
            <param name="name">Group name.</param>
            <remarks>
            If the name is set to null or empty, a unique name will be generated when the group is added to the document.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.Group.#ctor(System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject})">
            <summary>
            Initialized a new group with the specified entities.
            </summary>
            <param name="entities">The list of entities contained in the group.</param>
            <remarks>
            A unique name will be generated when the group is added to the document.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.Group.#ctor(System.String,System.Collections.Generic.IEnumerable{netDxf.Entities.EntityObject})">
            <summary>
            Initialized a new group with the specified entities.
            </summary>
            <param name="name">Group name (optional).</param>
            <param name="entities">The list of entities contained in the group.</param>
            <remarks>
            If the name is set to null or empty, a unique name will be generated when the group is added to the document.
            </remarks>
        </member>
        <member name="P:netDxf.Objects.Group.Name">
            <summary>
            Gets the name of the table object.
            </summary>
            <remarks>Table object names are case insensitive.</remarks>
        </member>
        <member name="P:netDxf.Objects.Group.Description">
            <summary>
            Gets or sets the description of the group.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Group.IsUnnamed">
            <summary>
            Gets if the group has an automatic generated name.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Group.IsSelectable">
            <summary>
            Gets or sets if the group is selectable.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Group.Entities">
            <summary>
            Gets the list of entities contained in the group.
            </summary>
            <remarks>
            When the group is added to the document the entities in it will be automatically added too.<br/>
            An entity may be contained in different groups.
            </remarks>
        </member>
        <member name="P:netDxf.Objects.Group.Owner">
            <summary>
            Gets the owner of the actual DXF object.
            </summary>
        </member>
        <member name="M:netDxf.Objects.Group.Clone(System.String)">
            <summary>
            Creates a new Group that is a copy of the current instance.
            </summary>
            <param name="newName">Group name of the copy.</param>
            <returns>A new Group that is a copy of this instance.</returns>
            <remarks>The entities that belong to the group will also be cloned.</remarks>
        </member>
        <member name="M:netDxf.Objects.Group.Clone">
            <summary>
            Creates a new Group that is a copy of the current instance.
            </summary>
            <returns>A new Group that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Objects.GroupEntityChangeEventArgs.#ctor(netDxf.Entities.EntityObject)">
            <summary>
            Initializes a new instance of <c>BlockEntityChangeEventArgs</c>.
            </summary>
            <param name="item">The entity that is being added or removed from the block.</param>
        </member>
        <member name="P:netDxf.Objects.GroupEntityChangeEventArgs.Item">
            <summary>
            Gets the entity that is being added or removed.
            </summary>
        </member>
        <member name="T:netDxf.Objects.ImageDefinition">
            <summary>
            Represents an image definition.
            </summary>
        </member>
        <member name="M:netDxf.Objects.ImageDefinition.#ctor(System.String,System.Int32,System.Double,System.Int32,System.Double,netDxf.Units.ImageResolutionUnits)">
            <summary>
            Initializes a new instance of the <c>ImageDefinition</c> class.
            </summary>
            <param name="file">Image file name with full or relative path.</param>
            <param name="width">Image width in pixels.</param>
            <param name="horizontalResolution">Image horizontal resolution in pixels.</param>
            <param name="height">Image height in pixels.</param>
            <param name="verticalResolution">Image vertical resolution in pixels.</param>
            <param name="units">Image resolution units.</param>
            <remarks>
            <para>
            The name of the file without extension will be used as the name of the image definition.
            </para>
            <para>
            This is a generic constructor for all image formats supported by AutoCAD, note that not all AutoCAD versions support the same image formats.
            </para>
            <para>
            Note (this is from the ACAD docs): AutoCAD 2000, AutoCAD LT 2000, and later releases do not support LZW-compressed TIFF files,
            with the exception of English language versions sold in the US and Canada.<br />
            If you have TIFF files that were created using LZW compression and want to insert them into a drawing 
            you must save the TIFF files with LZW compression disabled.
            </para>
            </remarks>
        </member>
        <member name="M:netDxf.Objects.ImageDefinition.#ctor(System.String,System.String,System.Int32,System.Double,System.Int32,System.Double,netDxf.Units.ImageResolutionUnits)">
            <summary>
            Initializes a new instance of the <c>ImageDefinition</c> class.
            </summary>
            <param name="name">Image definition name.</param>
            <param name="file">Image file name with full or relative path.</param>
            <param name="width">Image width in pixels.</param>
            <param name="horizontalResolution">Image horizontal resolution in pixels.</param>
            <param name="height">Image height in pixels.</param>
            <param name="verticalResolution">Image vertical resolution in pixels.</param>
            <param name="units">Image resolution units.</param>
            <remarks>
            <para>
            The name assigned to the image definition must be unique.
            </para>
            <para>
            This is a generic constructor for all image formats supported by AutoCAD, note that not all AutoCAD versions support the same image formats.
            </para>
            <para>
            Note (this is from the ACAD docs): AutoCAD 2000, AutoCAD LT 2000, and later releases do not support LZW-compressed TIFF files,
            with the exception of English language versions sold in the US and Canada.<br />
            If you have TIFF files that were created using LZW compression and want to insert them into a drawing 
            you must save the TIFF files with LZW compression disabled.
            </para>
            </remarks>
        </member>
        <member name="M:netDxf.Objects.ImageDefinition.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <c>ImageDefinition</c> class.
             </summary>
             <param name="file">Image file name with full or relative path.</param>
            <remarks>
             <para>
             The name of the file without extension will be used as the name of the image definition.
             </para>
             <para>
             Supported image formats: BMP, JPG, PNG, TIFF.<br />
             Even thought AutoCAD supports more image formats, this constructor is restricted to the ones the net framework supports in common with AutoCAD.
             Use the generic constructor instead.
             </para>
             <para>
             Note (this is from the ACAD docs): AutoCAD 2000, AutoCAD LT 2000, and later releases do not support LZW-compressed TIFF files,
             with the exception of English language versions sold in the US and Canada.<br />
             If you have TIFF files that were created using LZW compression and want to insert them into a drawing 
             you must save the TIFF files with LZW compression disabled.
             </para>
            </remarks>
        </member>
        <member name="M:netDxf.Objects.ImageDefinition.#ctor(System.String,System.String)">
             <summary>
             Initializes a new instance of the <c>ImageDefinition</c> class.
             </summary>
            <param name="name">Image definition name.</param>
            <param name="file">Image file name with full or relative path.</param>
            <remarks>
             <para>
             The name assigned to the image definition must be unique.
             </para>
             <para>
             Supported image formats: BMP, JPG, PNG, TIFF.<br />
             Even thought AutoCAD supports more image formats, this constructor is restricted to the ones the .net library supports in common with AutoCAD.
             Use the generic constructor instead.
             </para>
             <para>
             Note (this is from the ACAD docs): AutoCAD 2000, AutoCAD LT 2000, and later releases do not support LZW-compressed TIFF files,
             with the exception of English language versions sold in the US and Canada.<br />
             If you have TIFF files that were created using LZW compression and want to insert them into a drawing 
             you must save the TIFF files with LZW compression disabled.
             </para>
            </remarks>
        </member>
        <member name="P:netDxf.Objects.ImageDefinition.File">
            <summary>
            Gets the image file.
            </summary>
        </member>
        <member name="P:netDxf.Objects.ImageDefinition.Width">
            <summary>
            Gets the image width in pixels.
            </summary>
        </member>
        <member name="P:netDxf.Objects.ImageDefinition.Height">
            <summary>
            Gets the image height in pixels.
            </summary>
        </member>
        <member name="P:netDxf.Objects.ImageDefinition.ResolutionUnits">
            <summary>
            Gets or sets the image resolution units.
            </summary>
        </member>
        <member name="P:netDxf.Objects.ImageDefinition.HorizontalResolution">
            <summary>
            Gets the image horizontal resolution in pixels per unit.
            </summary>
        </member>
        <member name="P:netDxf.Objects.ImageDefinition.VerticalResolution">
            <summary>
            Gets the image vertical resolution in pixels per unit.
            </summary>
        </member>
        <member name="P:netDxf.Objects.ImageDefinition.Owner">
            <summary>
            Gets the owner of the actual image definition.
            </summary>
        </member>
        <member name="M:netDxf.Objects.ImageDefinition.Clone(System.String)">
            <summary>
            Creates a new ImageDefinition that is a copy of the current instance.
            </summary>
            <param name="newName">ImageDefinition name of the copy.</param>
            <returns>A new ImageDefinition that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Objects.ImageDefinition.Clone">
            <summary>
            Creates a new ImageDefinition that is a copy of the current instance.
            </summary>
            <returns>A new ImageDefinition that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Objects.ImageDisplayQuality">
            <summary>
            Image display quality (screen only).
            </summary>
        </member>
        <member name="F:netDxf.Objects.ImageDisplayQuality.Draft">
            <summary>
            Draft quality.
            </summary>
        </member>
        <member name="F:netDxf.Objects.ImageDisplayQuality.High">
            <summary>
            High quality.
            </summary>
        </member>
        <member name="T:netDxf.Objects.Layout">
            <summary>
            Represents a layout.
            </summary>
        </member>
        <member name="F:netDxf.Objects.Layout.ModelSpaceName">
            <summary>
            Layout ModelSpace name.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Layout.ModelSpace">
            <summary>
            Gets the ModelSpace layout.
            </summary>
            <remarks>
            There can be only one model space layout and it is always called "Model".
            </remarks>
        </member>
        <member name="M:netDxf.Objects.Layout.#ctor(System.String)">
            <summary>
            Initializes a new layout.
            </summary>
            <param name="name">Layout name.</param>
        </member>
        <member name="P:netDxf.Objects.Layout.TabOrder">
            <summary>
            Gets or sets the tab order.
            </summary>
            <remarks>
            This number is an ordinal indicating this layout's ordering in the tab control that is
            attached to the AutoCAD drawing frame window. Note that the "Model" tab always appears
            as the first tab regardless of its tab order (always zero).
            </remarks>
        </member>
        <member name="P:netDxf.Objects.Layout.PlotSettings">
            <summary>
            Gets or sets the plot settings
            </summary>
        </member>
        <member name="P:netDxf.Objects.Layout.MinLimit">
            <summary>
            Gets or sets the minimum limits for this layout.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Layout.MaxLimit">
            <summary>
            Gets or sets the maximum limits for this layout.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Layout.MinExtents">
            <summary>
            Gets or sets the maximum extents for this layout.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Layout.MaxExtents">
            <summary>
            Gets or sets the maximum extents for this layout.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Layout.BasePoint">
            <summary>
            Gets or sets the insertion base point for this layout.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Layout.Elevation">
            <summary>
            Gets or sets the elevation.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Layout.UcsOrigin">
            <summary>
            Gets or sets the UCS origin.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Layout.UcsXAxis">
            <summary>
            Gets or sets the UCS X axis.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Layout.UcsYAxis">
            <summary>
            Gets or sets the UCS Y axis.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Layout.IsPaperSpace">
            <summary>
            Defines if this layout is a paper space.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Layout.Viewport">
            <summary>
            Gets the viewport associated with this layout. This is the viewport with Id 1 that represents the paper space itself,
            it has no graphical representation, and does not show the model.
            </summary>
            <remarks>The ModelSpace layout does not require a viewport and it will always return null.</remarks>
        </member>
        <member name="P:netDxf.Objects.Layout.Owner">
            <summary>
            Gets the owner of the actual layout.
            </summary>
        </member>
        <member name="P:netDxf.Objects.Layout.AssociatedBlock">
            <summary>
            Gets the associated ModelSpace or PaperSpace block.
            </summary>
        </member>
        <member name="M:netDxf.Objects.Layout.Clone(System.String)">
            <summary>
            Creates a new Layout that is a copy of the current instance.
            </summary>
            <param name="newName">Layout name of the copy.</param>
            <returns>A new Layout that is a copy of this instance.</returns>
            <remarks>
            The Model Layout cannot be cloned.<br />
            When cloning a PaperSpace layout the contents of the layout will not be cloned.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.Layout.Clone">
            <summary>
            Creates a new Layout that is a copy of the current instance.
            </summary>
            <returns>A new Layout that is a copy of this instance.</returns>
            <remarks>
            The Model Layout cannot be cloned.<br />
            When cloning a PaperSpace layout the contents of the layout will not be cloned.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.Layout.AssignHandle(System.Int64)">
            <summary>
            Assigns a handle to the object based in a integer counter.
            </summary>
            <param name="entityNumber">Number to assign.</param>
            <returns>Next available entity number.</returns>
            <remarks>
            Some objects might consume more than one, is, for example, the case of polylines that will assign
            automatically a handle to its vertexes. The entity number will be converted to an hexadecimal number.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.Layout.CompareTo(netDxf.Objects.Layout)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared.
            The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.
            Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="T:netDxf.Objects.MLineStyle">
            <summary>
            Represents as MLine style.
            </summary>
        </member>
        <member name="F:netDxf.Objects.MLineStyle.DefaultName">
            <summary>
            Default multiline style name.
            </summary>
        </member>
        <member name="P:netDxf.Objects.MLineStyle.Default">
            <summary>
            Gets the default MLine style.
            </summary>
        </member>
        <member name="M:netDxf.Objects.MLineStyle.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>MLineStyle</c> class.
            </summary>
            <param name="name">MLine style name.</param>
            <remarks>By default the multiline style has to elements with offsets 0.5 y -0.5.</remarks>
        </member>
        <member name="M:netDxf.Objects.MLineStyle.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>MLineStyle</c> class.
            </summary>
            <param name="name">MLine style name.</param>
            <param name="description">MLine style description.</param>
            <remarks>By default the multiline style has to elements with offsets 0.5 y -0.5.</remarks>
        </member>
        <member name="M:netDxf.Objects.MLineStyle.#ctor(System.String,System.Collections.Generic.IEnumerable{netDxf.Objects.MLineStyleElement})">
            <summary>
            Initializes a new instance of the <c>MLineStyle</c> class.
            </summary>
            <param name="name">MLine style name.</param>
            <param name="elements">Elements of the multiline, if null two default elements will be added.</param>
        </member>
        <member name="M:netDxf.Objects.MLineStyle.#ctor(System.String,System.Collections.Generic.IEnumerable{netDxf.Objects.MLineStyleElement},System.String)">
            <summary>
            Initializes a new instance of the <c>MLineStyle</c> class.
            </summary>
            <param name="name">MLine style name.</param>
            <param name="elements">Elements of the multiline, if null two default elements will be added.</param>
            <param name="description">MLine style description (optional).</param>
        </member>
        <member name="P:netDxf.Objects.MLineStyle.Flags">
            <summary>
            Gets or sets the MLine style flags.
            </summary>
        </member>
        <member name="P:netDxf.Objects.MLineStyle.Description">
            <summary>
            Gets or sets the line type description (optional).
            </summary>
        </member>
        <member name="P:netDxf.Objects.MLineStyle.FillColor">
            <summary>
            Gets or sets the MLine fill color.
            </summary>
            <remarks>
            AutoCad2000 DXF version does not support true colors for MLineStyle fill color.
            </remarks>
        </member>
        <member name="P:netDxf.Objects.MLineStyle.StartAngle">
            <summary>
            Gets or sets the MLine start angle in degrees.
            </summary>
            <remarks>Valid values range from 10.0 to 170.0 degrees. Default: 90.0.</remarks>
        </member>
        <member name="P:netDxf.Objects.MLineStyle.EndAngle">
            <summary>
            Gets or sets the MLine end angle in degrees.
            </summary>
            <remarks>Valid values range from 10.0 to 170.0 degrees. Default: 90.0.</remarks>
        </member>
        <member name="P:netDxf.Objects.MLineStyle.Elements">
            <summary>
            Gets the list of elements that make up the multiline.
            </summary>
            <remarks>
            The elements list must be ordered from larger to smaller <see cref="P:netDxf.Objects.MLineStyleElement.Offset">offset</see> values.
            During the initialization process the list will be sorted automatically,
            but if new elements are added individually to the list or the offset values of individual elements are modified,
            it will have to be sorted manually calling the Sort() method.
            </remarks>
        </member>
        <member name="P:netDxf.Objects.MLineStyle.Owner">
            <summary>
            Gets the owner of the actual multi line style.
            </summary>
        </member>
        <member name="M:netDxf.Objects.MLineStyle.Clone(System.String)">
            <summary>
            Creates a new MLineStyle that is a copy of the current instance.
            </summary>
            <param name="newName">MLineStyle name of the copy.</param>
            <returns>A new MLineStyle that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Objects.MLineStyle.Clone">
            <summary>
            Creates a new MLineStyle that is a copy of the current instance.
            </summary>
            <returns>A new MLineStyle that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Objects.MLineStyleElement">
            <summary>
            Represent each of the elements that make up a MLineStyle.
            </summary>
        </member>
        <member name="M:netDxf.Objects.MLineStyleElement.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <c>MLineStyleElement</c> class.
            </summary>
            <param name="offset">Element offset.</param>
        </member>
        <member name="M:netDxf.Objects.MLineStyleElement.#ctor(System.Double,netDxf.AciColor,netDxf.Tables.Linetype)">
            <summary>
            Initializes a new instance of the <c>MLineStyleElement</c> class.
            </summary>
            <param name="offset">Element offset.</param>
            <param name="color">Element color.</param>
            <param name="linetype">Element line type.</param>
        </member>
        <member name="P:netDxf.Objects.MLineStyleElement.Offset">
            <summary>
            Gets or sets the element offset.
            </summary>
        </member>
        <member name="P:netDxf.Objects.MLineStyleElement.Color">
            <summary>
            Gets or sets the element color.
            </summary>
            <remarks>
            AutoCad2000 DXF version does not support true colors for MLineStyleElement color.
            </remarks>
        </member>
        <member name="P:netDxf.Objects.MLineStyleElement.Linetype">
            <summary>
            Gets or sets the element line type.
            </summary>
        </member>
        <member name="M:netDxf.Objects.MLineStyleElement.CompareTo(netDxf.Objects.MLineStyleElement)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            The MLineStyleElements are ordered from larger to smaller offset values.
            A 32-bit signed integer that indicates the relative order of the objects being compared.
            The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.
            Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="M:netDxf.Objects.MLineStyleElement.Equals(System.Object)">
            <summary>
            Check if two MLineStyleElement are equal.
            </summary>
            <param name="other">Another MLineStyleElement to compare to.</param>
            <returns>True if two MLineStyleElement are equal or false in any other case.</returns>
            <remarks>
            Two MLineStyleElement are considered equals if their offsets are the same.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.MLineStyleElement.Equals(netDxf.Objects.MLineStyleElement)">
            <summary>
            Check if two MLineStyleElement are equal.
            </summary>
            <param name="other">Another MLineStyleElement to compare to.</param>
            <returns>True if two MLineStyleElement are equal or false in any other case.</returns>
            <remarks>
            Two MLineStyleElement are considered equals if their offsets are the same.
            </remarks>
        </member>
        <member name="M:netDxf.Objects.MLineStyleElement.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:netDxf.Objects.MLineStyleElement.Clone">
            <summary>
            Creates a MLineStyleElement that is a copy of the current instance.
            </summary>
            <returns>A new MLineStyleElement is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Objects.MLineStyleElement.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:netDxf.Objects.MLineStyleElementChangeEventArgs.#ctor(netDxf.Objects.MLineStyleElement)">
            <summary>
            Initializes a new instance of <c>MLineStyleElementChangeEventArgs</c>.
            </summary>
            <param name="item">The item that is being added or removed from the MLineStyle elements list.</param>
        </member>
        <member name="P:netDxf.Objects.MLineStyleElementChangeEventArgs.Item">
            <summary>
            Gets the item that is being added or removed from the MLineStyle elements list.
            </summary>
        </member>
        <member name="T:netDxf.Objects.MLineStyleFlags">
            <summary>
            Flags (bit-coded).
            </summary>
        </member>
        <member name="F:netDxf.Objects.MLineStyleFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:netDxf.Objects.MLineStyleFlags.FillOn">
            <summary>
            Fill on.
            </summary>
        </member>
        <member name="F:netDxf.Objects.MLineStyleFlags.DisplayJoints">
            <summary>
            Display miters at the joints (inner vertexes).
            </summary>
        </member>
        <member name="F:netDxf.Objects.MLineStyleFlags.StartSquareCap">
            <summary>
            Start square (line) cap.
            </summary>
        </member>
        <member name="F:netDxf.Objects.MLineStyleFlags.StartInnerArcsCap">
            <summary>
            Start inner arcs cap.
            </summary>
        </member>
        <member name="F:netDxf.Objects.MLineStyleFlags.StartRoundCap">
            <summary>
            Start round (outer arcs) cap.
            </summary>
        </member>
        <member name="F:netDxf.Objects.MLineStyleFlags.EndSquareCap">
            <summary>
            End square (line) cap.
            </summary>
        </member>
        <member name="F:netDxf.Objects.MLineStyleFlags.EndInnerArcsCap">
            <summary>
            End inner arcs cap.
            </summary>
        </member>
        <member name="F:netDxf.Objects.MLineStyleFlags.EndRoundCap">
            <summary>
            End round (outer arcs) cap.
            </summary>
        </member>
        <member name="T:netDxf.Objects.PaperMargin">
            <summary>
            Represents the unprintable margins of a paper. 
            </summary>
        </member>
        <member name="M:netDxf.Objects.PaperMargin.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of <c>PaperMargin</c>.
            </summary>
            <param name="left">Margin on left side of paper.</param>
            <param name="bottom">Margin on bottom side of paper.</param>
            <param name="right">Margin on right side of paper.</param>
            <param name="top">Margin on top side of paper.</param>
        </member>
        <member name="P:netDxf.Objects.PaperMargin.Left">
            <summary>
            Gets or set the size, in millimeters, of unprintable margin on left side of paper.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PaperMargin.Bottom">
            <summary>
            Gets or set the size, in millimeters, of unprintable margin on bottom side of paper.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PaperMargin.Right">
            <summary>
            Gets or set the size, in millimeters, of unprintable margin on right side of paper.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PaperMargin.Top">
            <summary>
            Gets or set the size, in millimeters, of unprintable margin on top side of paper.
            </summary>
        </member>
        <member name="T:netDxf.Objects.PlotFlags">
            <summary>
            Defines the plot settings flag.
            </summary>
            <remarks>Bit flag.</remarks>
        </member>
        <member name="F:netDxf.Objects.PlotFlags.PlotViewportBorders">
            <summary>
            Plot viewport borders.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotFlags.ShowPlotStyles">
            <summary>
            Show plot styles.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotFlags.PlotCentered">
            <summary>
            Plot centered.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotFlags.PlotHidden">
            <summary>
            Plot hidden.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotFlags.UseStandardScale">
            <summary>
            Use standard scale.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotFlags.PlotPlotStyles">
            <summary>
            Plot styles.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotFlags.ScaleLineweights">
            <summary>
            Scale line weights.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotFlags.PrintLineweights">
            <summary>
            Print line weights.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotFlags.DrawViewportsFirst">
            <summary>
            Draw viewports first.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotFlags.ModelType">
            <summary>
            Model type.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotFlags.UpdatePaper">
            <summary>
            Update paper.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotFlags.ZoomToPaperOnUpdate">
            <summary>
            Soon to paper on update.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotFlags.Initializing">
            <summary>
            Initializing.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotFlags.PrevPlotInit">
            <summary>
            Preview plot initialization.
            </summary>
        </member>
        <member name="T:netDxf.Objects.PlotPaperUnits">
            <summary>
            Plot paper units.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotPaperUnits.Inches">
            <summary>
            Inches.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotPaperUnits.Milimeters">
            <summary>
            Millimeters.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotPaperUnits.Pixels">
            <summary>
            Pixels, only applicable for raster outputs.
            </summary>
        </member>
        <member name="T:netDxf.Objects.PlotRotation">
            <summary>
            Plot rotation
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotRotation.NoRotation">
            <summary>
            No rotation.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotRotation.Degrees90">
            <summary>
            90 degrees counterclockwise.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotRotation.Degrees180">
            <summary>
            Upside-down.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotRotation.Degrees270">
            <summary>
            90 degrees clockwise.
            </summary>
        </member>
        <member name="T:netDxf.Objects.PlotSettings">
            <summary>
            Represents the plot settings of a layout.
            </summary>
        </member>
        <member name="M:netDxf.Objects.PlotSettings.#ctor">
            <summary>
            Initializes a new instance of <c>PlotSettings</c>.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.PageSetupName">
            <summary>
            Gets or sets the page setup name.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.PlotterName">
            <summary>
            Gets or sets the name of system printer or plot configuration file.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.PaperSizeName">
            <summary>
            Gets or set the paper size name.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.ViewName">
            <summary>
            Gets or sets the plot view name.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.CurrentStyleSheet">
            <summary>
            Gets or sets the current style sheet name.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.PaperMargin">
            <summary>
            Gets or set the size, in millimeters, of unprintable margins of paper.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.PaperSize">
            <summary>
            Gets or sets the plot paper size: physical paper width and height in millimeters.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.Origin">
            <summary>
            Gets or sets the plot origin in millimeters.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.WindowUpRight">
            <summary>
            Gets or sets the plot upper-right window corner.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.WindowBottomLeft">
            <summary>
            Gets or sets the plot lower-left window corner.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.ScaleToFit">
            <summary>
            Gets or sets if the plot scale will be automatically computed show the drawing fits the media.
            </summary>
            <remarks>
            If <c>ScaleToFit</c> is set to false the values specified by <c>PrintScaleNumerator</c> and <c>PrintScaleDenomiator</c> will be used.
            </remarks>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.PrintScaleNumerator">
            <summary>
            Gets or sets the numerator of custom print scale: real world paper units.
            </summary>
            <remarks>
            The paper units used are specified by the <c>PaperUnits</c> value.
            </remarks>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.PrintScaleDenominator">
            <summary>
            Gets or sets the denominator of custom print scale: drawing units.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.PrintScale">
            <summary>
            Gets the scale factor.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.Flags">
            <summary>
            Gets or sets the plot layout flags.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.PlotType">
            <summary>
            Gets or sets the portion of paper space to output to the media.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.PaperUnits">
            <summary>
            Gets or sets the paper units.
            </summary>
            <remarks>This value is only applicable to the scale parameter <c>PrintScaleNumerator</c>.</remarks>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.PaperRotation">
            <summary>
            Gets or sets the paper rotation.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.ShadePlotMode">
            <summary>
            Gets or sets the shade plot mode.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.ShadePlotResolutionMode">
            <summary>
            Gets or sets the plot resolution mode.
            </summary>
            <remarks>
            if the <c>ShadePlotResolutionMode</c> is set to Custom the value specified by the <c>ShadPloDPI</c> will be used.
            </remarks>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.ShadePlotDPI">
            <summary>
            Gets or sets the shade plot custom DPI.
            </summary>
        </member>
        <member name="P:netDxf.Objects.PlotSettings.PaperImageOrigin">
            <summary>
            Gets or sets the paper image origin.
            </summary>
        </member>
        <member name="M:netDxf.Objects.PlotSettings.Clone">
            <summary>
            Creates a new plot settings that is a copy of the current instance.
            </summary>
            <returns>A new plot settings that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Objects.PlotType">
            <summary>
            Defines the portion of paper space to output to the media.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotType.LastScreenDisplay">
            <summary>
            Last screen display
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotType.DrawingExtents">
            <summary>
            Drawing extents.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotType.DrawingLimits">
            <summary>
            Drawing limits.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotType.View">
            <summary>
            View specified by the plot view name.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotType.Window">
            <summary>
            Window specified by the upper-right and bottom-left window corners.
            </summary>
        </member>
        <member name="F:netDxf.Objects.PlotType.LayoutInformation">
            <summary>
            Layout information.
            </summary>
        </member>
        <member name="T:netDxf.Objects.RasterVariables">
            <summary>
            Represents the variables applied to bitmaps.
            </summary>
        </member>
        <member name="M:netDxf.Objects.RasterVariables.#ctor">
            <summary>
            Initializes a new instance of the <c>RasterVariables</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Objects.RasterVariables.DisplayFrame">
            <summary>
            Gets or sets if the image frame is shown.
            </summary>
        </member>
        <member name="P:netDxf.Objects.RasterVariables.DisplayQuality">
            <summary>
            Gets or sets the image display quality (screen only).
            </summary>
        </member>
        <member name="P:netDxf.Objects.RasterVariables.Units">
            <summary>
            Gets or sets the AutoCAD units for inserting images.
            </summary>
            <remarks>
            Default: None<br />
            This is what one AutoCAD unit is equal to for the purpose of inserting and scaling images with an associated resolution.
            It is recommended to use the same units as the header variable InsUnits, or just use none to avoid any unwanted scaling when inserting images into the drawing.
            </remarks>
        </member>
        <member name="T:netDxf.Objects.ShadePlotMode">
            <summary>
            Defines the shade plot mode
            </summary>
        </member>
        <member name="F:netDxf.Objects.ShadePlotMode.AsDisplayed">
            <summary>
            As displayed.
            </summary>
        </member>
        <member name="F:netDxf.Objects.ShadePlotMode.Wireframe">
            <summary>
            Wireframe.
            </summary>
        </member>
        <member name="F:netDxf.Objects.ShadePlotMode.Hidden">
            <summary>
            Hidden.
            </summary>
        </member>
        <member name="F:netDxf.Objects.ShadePlotMode.Rendered">
            <summary>
            Rendered.
            </summary>
        </member>
        <member name="T:netDxf.Objects.ShadePlotResolutionMode">
            <summary>
            Defines the shade plot resolution mode.
            </summary>
        </member>
        <member name="F:netDxf.Objects.ShadePlotResolutionMode.Draft">
            <summary>
            Draft.
            </summary>
        </member>
        <member name="F:netDxf.Objects.ShadePlotResolutionMode.Preview">
            <summary>
            Preview.
            </summary>
        </member>
        <member name="F:netDxf.Objects.ShadePlotResolutionMode.Normal">
            <summary>
            Normal.
            </summary>
        </member>
        <member name="F:netDxf.Objects.ShadePlotResolutionMode.Presentation">
            <summary>
            Presentation.
            </summary>
        </member>
        <member name="F:netDxf.Objects.ShadePlotResolutionMode.Maximum">
            <summary>
            Maximum
            </summary>
        </member>
        <member name="F:netDxf.Objects.ShadePlotResolutionMode.Custom">
            <summary>
            Custom as specified by the shade plot DPI.
            </summary>
        </member>
        <member name="T:netDxf.Objects.SupportedImageFormats">
            <summary>
            Supported image formats.
            </summary>
            <remarks>
            These are the image formats in common between the net framework and AutoCAD.
            </remarks>
        </member>
        <member name="F:netDxf.Objects.SupportedImageFormats.Bmp">
            <summary>
            BMP image format.
            </summary>
        </member>
        <member name="F:netDxf.Objects.SupportedImageFormats.Jpeg">
            <summary>
            JPG image format.
            </summary>
        </member>
        <member name="F:netDxf.Objects.SupportedImageFormats.Png">
            <summary>
            PNG image format.
            </summary>
        </member>
        <member name="F:netDxf.Objects.SupportedImageFormats.Tiff">
            <summary>
            Tiff image format.
            </summary>
        </member>
        <member name="T:netDxf.Objects.UnderlayDefinition">
            <summary>
            Represents an underlay definition.
            </summary>
        </member>
        <member name="M:netDxf.Objects.UnderlayDefinition.#ctor(System.String,System.String,netDxf.Objects.UnderlayType)">
            <summary>
            Initializes a new instance of the <c>UnderlayDefinition</c> class.
            </summary>
            <param name="name">Underlay name.</param>
            <param name="file">Underlay file name with full or relative path.</param>
            <param name="type">Underlay type.</param>
        </member>
        <member name="P:netDxf.Objects.UnderlayDefinition.Type">
            <summary>
            Get the underlay type.
            </summary>
        </member>
        <member name="P:netDxf.Objects.UnderlayDefinition.File">
            <summary>
            Gets the underlay file.
            </summary>
        </member>
        <member name="T:netDxf.Objects.UnderlayDgnDefinition">
            <summary>
            Represents a DGN underlay definition.
            </summary>
        </member>
        <member name="M:netDxf.Objects.UnderlayDgnDefinition.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>UnderlayDgnDefinition</c> class.
            </summary>
            <param name="file">Underlay file name with full or relative path.</param>
        </member>
        <member name="M:netDxf.Objects.UnderlayDgnDefinition.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>UnderlayDgnDefinition</c> class.
            </summary>
            <param name="name">Underlay definition name.</param>
            <param name="file">Underlay file name with full or relative path.</param>
        </member>
        <member name="P:netDxf.Objects.UnderlayDgnDefinition.Layout">
            <summary>
            Gets or sets the layout name to show.
            </summary>
        </member>
        <member name="P:netDxf.Objects.UnderlayDgnDefinition.Owner">
            <summary>
            Gets the owner of the actual underlay DGN definition.
            </summary>
        </member>
        <member name="M:netDxf.Objects.UnderlayDgnDefinition.Clone(System.String)">
            <summary>
            Creates a new UnderlayDgnDefinition that is a copy of the current instance.
            </summary>
            <param name="newName">UnderlayDgnDefinition name of the copy.</param>
            <returns>A new UnderlayDgnDefinition that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Objects.UnderlayDgnDefinition.Clone">
            <summary>
            Creates a new UnderlayDgnDefinition that is a copy of the current instance.
            </summary>
            <returns>A new UnderlayDgnDefinition that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Objects.UnderlayDwfDefinition">
            <summary>
            Represents a DWF underlay definition.
            </summary>
        </member>
        <member name="M:netDxf.Objects.UnderlayDwfDefinition.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>UnderlayDwfDefinition</c> class.
            </summary>
            <param name="file">Underlay file name with full or relative path.</param>
        </member>
        <member name="M:netDxf.Objects.UnderlayDwfDefinition.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>UnderlayDwfDefinition</c> class.
            </summary>
            <param name="name">Underlay definition name.</param>
            <param name="file">Underlay file name with full or relative path.</param>
        </member>
        <member name="P:netDxf.Objects.UnderlayDwfDefinition.Owner">
            <summary>
            Gets the owner of the actual underlay DWF definition.
            </summary>
        </member>
        <member name="M:netDxf.Objects.UnderlayDwfDefinition.Clone(System.String)">
            <summary>
            Creates a new UnderlayDwfDefinition that is a copy of the current instance.
            </summary>
            <param name="newName">UnderlayDwfDefinition name of the copy.</param>
            <returns>A new UnderlayDwfDefinition that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Objects.UnderlayDwfDefinition.Clone">
            <summary>
            Creates a new UnderlayDwfDefinition that is a copy of the current instance.
            </summary>
            <returns>A new UnderlayDwfDefinition that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Objects.UnderlayPdfDefinition">
            <summary>
            Represents a PDF underlay definition.
            </summary>
        </member>
        <member name="M:netDxf.Objects.UnderlayPdfDefinition.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>UnderlayPdfDefinition</c> class.
            </summary>
            <param name="file">Underlay file name with full or relative path.</param>
        </member>
        <member name="M:netDxf.Objects.UnderlayPdfDefinition.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>UnderlayPdfDefinition</c> class.
            </summary>
            <param name="name">Underlay definition name.</param>
            <param name="file">Underlay file name with full or relative path.</param>
        </member>
        <member name="P:netDxf.Objects.UnderlayPdfDefinition.Page">
            <summary>
            Gets or sets the PDF page to show.
            </summary>
        </member>
        <member name="P:netDxf.Objects.UnderlayPdfDefinition.Owner">
            <summary>
            Gets the owner of the actual underlay PDF definition.
            </summary>
        </member>
        <member name="M:netDxf.Objects.UnderlayPdfDefinition.Clone(System.String)">
            <summary>
            Creates a new UnderlayPdfDefinition that is a copy of the current instance.
            </summary>
            <param name="newName">UnderlayPdfDefinition name of the copy.</param>
            <returns>A new UnderlayPdfDefinition that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Objects.UnderlayPdfDefinition.Clone">
            <summary>
            Creates a new UnderlayPdfDefinition that is a copy of the current instance.
            </summary>
            <returns>A new UnderlayPdfDefinition that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Objects.UnderlayType">
            <summary>
            Defines the different underlay documents available.
            </summary>
        </member>
        <member name="F:netDxf.Objects.UnderlayType.DGN">
            <summary>
            DGN
            </summary>
        </member>
        <member name="F:netDxf.Objects.UnderlayType.DWF">
            <summary>
            DWF
            </summary>
        </member>
        <member name="F:netDxf.Objects.UnderlayType.PDF">
            <summary>
            PDF
            </summary>
        </member>
        <member name="T:netDxf.StringEnum`1">
            <summary>
            Helper class for working with 'extended' enums using <see cref="T:netDxf.StringValueAttribute"/> attributes.
            </summary>
        </member>
        <member name="M:netDxf.StringEnum`1.#ctor">
            <summary>
            Creates a new <see cref="T:netDxf.StringEnum`1"/> instance.
            </summary>
        </member>
        <member name="P:netDxf.StringEnum`1.EnumType">
            <summary>
            Gets the underlying enum type for this instance.
            </summary>
            <value></value>
        </member>
        <member name="M:netDxf.StringEnum`1.GetStringValues">
            <summary>
            Gets the string values associated with the enum.
            </summary>
            <returns>String value array</returns>
        </member>
        <member name="M:netDxf.StringEnum`1.GetValues">
            <summary>
            Gets the enum entry and string value pairs.
            </summary>
            <returns>A dictionary containing each enum entry with its corresponding string value.</returns>
        </member>
        <member name="M:netDxf.StringEnum`1.IsStringDefined(System.String)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="value">String value.</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="M:netDxf.StringEnum`1.IsStringDefined(System.String,System.StringComparison)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="value">String value.</param>
            <param name="comparisonType">Specifies how to conduct a case-insensitive match on the supplied string value</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="M:netDxf.StringEnum`1.GetStringValue(`0)">
            <summary>
            Gets a string value for a particular enum value.
            </summary>
            <param name="value">Value.</param>
            <returns>String Value associated via a <see cref="T:netDxf.StringValueAttribute"/> attribute, or null if not found.</returns>
        </member>
        <member name="M:netDxf.StringEnum`1.Parse(System.String)">
            <summary>
            Parses the supplied enum and string value to find an associated enum value.
            </summary>
            <param name="value">String value.</param>
            <returns>Enum value associated with the string value, if not found the default enum will be returned.</returns>
        </member>
        <member name="M:netDxf.StringEnum`1.Parse(System.String,System.StringComparison)">
            <summary>
            Parses the supplied enum and string value to find an associated enum value.
            </summary>
            <param name="value">String value.</param>
            <param name="comparisonType">Specifies how to conduct a case-insensitive match on the supplied string value.</param>
            <returns>Enum value associated with the string value, if not found the default enum will be returned.</returns>
        </member>
        <member name="T:netDxf.StringValueAttribute">
            <summary>
            Simple attribute class for storing String Values
            </summary>
        </member>
        <member name="M:netDxf.StringValueAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:netDxf.StringValueAttribute"/> instance.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="P:netDxf.StringValueAttribute.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:netDxf.SubclassMarker">
            <summary>
            Dxf object subclass string markers (code 100).
            </summary>
        </member>
        <member name="T:netDxf.Symbols">
            <summary>
            Symbols for dxf text strings.
            </summary>
            <remarks>
            These special strings translates to symbols in AutoCad. They are obsolete since Unicode characters are supported.
            </remarks>
        </member>
        <member name="F:netDxf.Symbols.Diameter">
            <summary>
            Text string that shows as a diameter '√ò' character.
            </summary>
        </member>
        <member name="F:netDxf.Symbols.Degree">
            <summary>
            Text string that shows as a degree '¬∞' character.
            </summary>
        </member>
        <member name="F:netDxf.Symbols.PlusMinus">
            <summary>
            Text string that shows as a plus-minus '¬±' character.
            </summary>
        </member>
        <member name="T:netDxf.Tables.ApplicationRegistry">
            <summary>
            Represents a registered application name to which the <see cref="T:netDxf.XData">extended data</see> is associated.
            </summary>
            <remarks>
            Do not use the default "ACAD" application registry name for your own extended data, it is sometimes used by AutoCad to store internal data.
            Instead, create your own application registry name and store your extended data there.
            </remarks>
        </member>
        <member name="F:netDxf.Tables.ApplicationRegistry.DefaultName">
            <summary>
            Default application registry name.
            </summary>
        </member>
        <member name="P:netDxf.Tables.ApplicationRegistry.Default">
            <summary>
            Gets the default application registry.
            </summary>
        </member>
        <member name="M:netDxf.Tables.ApplicationRegistry.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>ApplicationRegistry</c> class.
            </summary>
            <param name="name">Layer name.</param>
        </member>
        <member name="P:netDxf.Tables.ApplicationRegistry.Owner">
            <summary>
            Gets the owner of the actual DXF object.
            </summary>
        </member>
        <member name="M:netDxf.Tables.ApplicationRegistry.Clone(System.String)">
            <summary>
            Creates a new ApplicationRegistry that is a copy of the current instance.
            </summary>
            <param name="newName">ApplicationRegistry name of the copy.</param>
            <returns>A new ApplicationRegistry that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Tables.ApplicationRegistry.Clone">
            <summary>
            Creates a new ApplicationRegistry that is a copy of the current instance.
            </summary>
            <returns>A new ApplicationRegistry that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Tables.DimensionStyle">
            <summary>
            Represents a dimension style.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyle.DefaultName">
            <summary>
            Default dimension style name.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.Default">
            <summary>
            Gets the default dimension style.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.Iso25">
            <summary>
            Gets the ISO-25 dimension style as defined in AutoCad.
            </summary>
        </member>
        <member name="M:netDxf.Tables.DimensionStyle.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>DimensionStyle</c> class.
            </summary>
            <param name="name">The dimension style name.</param>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimLineColor">
            <summary>
            Gets or set the color assigned to dimension lines, arrowheads, and dimension leader lines. (DIMCLRD)
            </summary>
            <remarks>
            Default: ByBlock<br />
            Only indexed AciColors are supported.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimLineLinetype">
            <summary>
            Gets or sets the line type of the dimension line. (DIMLTYPE)
            </summary>
            <remarks>
            Default: ByBlock
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimLineLineweight">
            <summary>
            Gets or sets the line weight to dimension lines. (DIMLWD)
            </summary>
            <remarks>
            Default: ByBlock
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimLine1Off">
            <summary>
            Suppresses display of the first dimension line. (DIMSD1)
            </summary>
            <remarks>
            Default: false<br />
            To completely suppress the dimension line set both <c>DimLine1Off</c> and <c>DimLine2Off</c> to false.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimLine2Off">
            <summary>
            Suppresses display of the second dimension line. (DIMSD2)
            </summary>
            <remarks>
            Default: false<br />
            To completely suppress the dimension line set both <c>DimLine1Off</c> and <c>DimLine2Off</c> to false.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimLineExtend">
            <summary>
            Gets or sets the distance the dimension line extends beyond the extension line when
            oblique, architectural tick, integral, or no marks are drawn for arrowheads. (DIMDLE)
            </summary>
            <remarks>
            Default: 0.0
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimBaselineSpacing">
            <summary>
            Gets or sets the spacing of the dimension lines in baseline dimensions. (DIMDLI)
            </summary>
            <remarks>
            Default: 0.38<br />
            This value is stored only for information purposes.
            Base dimensions are a compound entity made of several dimensions, there is no actual DXF entity that represents that.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.ExtLineColor">
            <summary>
            Gets or sets the color assigned to extension lines, center marks, and centerlines. (DIMCLRE)
            </summary>
            <remarks>
            Default: ByBlock<br />
            Only indexed AciColors are supported.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.ExtLine1Linetype">
            <summary>
            Gets or sets the line type of the first extension line. (DIMLTEX1)
            </summary>
            <remarks>
            Default: ByBlock
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.ExtLine2Linetype">
            <summary>
            Gets or sets the line type of the second extension line. (DIMLTEX2)
            </summary>
            <remarks>
            Default: ByBlock
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.ExtLineLineweight">
            <summary>
            Gets or sets line weight of extension lines. (DIMLWE)
            </summary>
            <remarks>
            Default: ByBlock
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.ExtLine1Off">
            <summary>
            Suppresses display of the first extension line. (DIMSE1)
            </summary>
            <remarks>
            Default: false
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.ExtLine2Off">
            <summary>
            Suppresses display of the second extension line. (DIMSE2)
            </summary>
            <remarks>
            Default: false
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.ExtLineOffset">
            <summary>
            Gets or sets how far extension lines are offset from origin points. (DIMEXO)
            </summary>
            <remarks>
            Default: 0.0625
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.ExtLineExtend">
            <summary>
            Gets or sets how far to extend the extension line beyond the dimension line. (DIMEXE)
            </summary>
            <remarks>
            Default: 0.18
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.ExtLineFixed">
            <summary>
            Enables fixed length extension lines. (DIMFXLON)
            </summary>
            <remarks>
            Default: false
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.ExtLineFixedLength">
            <summary>
            Gets or sets the total length of the extension lines starting from the dimension line toward the dimension origin. (DIMFXL)
            </summary>
            <remarks>
            Default: 1.0
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimArrow1">
            <summary>
            Gets or sets the arrowhead block for the first end of the dimension line. (DIMBLK1)
            </summary>
            <remarks>
            Default: null. Closed filled.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimArrow2">
            <summary>
            Gets or sets the arrowhead block for the second end of the dimension line. (DIMBLK2)
            </summary>
            <remarks>
            Default: null. Closed filled.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.LeaderArrow">
            <summary>
            Gets or sets the arrowhead block for leaders. (DIMLDRBLK)
            </summary>
            <remarks>
            Default: null. Closed filled.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.ArrowSize">
            <summary>
            Controls the size of dimension line and leader line arrowheads. Also controls the size of hook lines. (DIMASZ)
            </summary>
            <remarks>
            Default: 0.18
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.CenterMarkSize">
            <summary>
            Controls the drawing of circle or arc center marks and centerlines. (DIMCEN)
            </summary>
            <remarks>
            Default: 0.09<br/>
            0 - No center marks or lines are drawn.<br />
            greater than 0 - Center marks are drawn.<br />
            lower than 0 - Center marks and centerlines are drawn.<br />
            The absolute value specifies the size of the center mark or centerline. 
            The size of the centerline is the length of the centerline segment that extends outside the circle or arc.
            It is also the size of the gap between the center mark and the start of the centerline. 
            The size of the center mark is the distance from the center of the circle or arc to the end of the center mark.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.TextStyle">
            <summary>
            Gets or sets the text style of the dimension. (DIMTXTSTY)
            </summary>
            <remarks>
            Default: Standard
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.TextColor">
            <summary>
            Gets or set the color of dimension text. (DIMCLRT)
            </summary>
            <remarks>
            Default: ByBlock<br />
            Only indexed AciColors are supported.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.TextFillColor">
            <summary>
            Gets or set the background color of dimension text. Set to null to specify no color. (DIMTFILLCLR)
            </summary>
            <remarks>
            Default: null<br />
            Only indexed AciColors are supported.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.TextHeight">
            <summary>
            Gets or sets the height of dimension text, unless the current text style has a fixed height. (DIMTXT)
            </summary>
            <remarks>
            Default: 0.18
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.TextHorizontalPlacement">
            <summary>
            Gets or sets the horizontal positioning of dimension text. (DIMJUST)
            </summary>
            <remarks>
            Default: Centered
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.TextVerticalPlacement">
            <summary>
            Gets or sets the vertical position of text in relation to the dimension line. (DIMTAD)
            </summary>
            <remarks>
            Default: Centered
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.TextOffset">
            <summary>
            Gets or sets the distance around the dimension text when the dimension line breaks to accommodate dimension text. (DIMGAP)
            </summary>
            <remarks>
            Default: 0.09<br />
            Displays a rectangular frame around the dimension text when negative values are used.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.TextInsideAlign">
            <summary>
            Gets or sets the positioning of the dimension text inside extension lines. (DIMTIH)
            </summary>
            <remarks>
            Default: false
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.TextOutsideAlign">
            <summary>
            Gets or sets the positioning of the dimension text outside extension lines. (DIMTOH)
            </summary>
            <remarks>
            Default: false
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.TextDirection">
            <summary>
            Gets or sets the direction of the dimension text. (DIMTXTDIRECTION)
            </summary>
            <remarks>
            Default: LeftToRight
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.TextFractionHeightScale">
            <summary>
            Gets or sets the scale of fractions relative to dimension text height. (DIMTFAC)
            </summary>
            <remarks>
            Default: 1.0<br />
            This value is only applicable to Architectural and Fractional units, and also
            controls the height factor applied to the tolerance text in relation with the dimension text height.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.FitDimLineForce">
            <summary>
            Gets or sets the drawing of a dimension line between the extension lines even when the text is placed outside the extension lines. (DIMTOFL)
            </summary>
            <remarks>
            Default: false
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.FitDimLineInside">
            <summary>
            Gets or sets the drawing of the dimension line and arrowheads even if not enough space is available inside the extension lines. (DIMSOXD)
            </summary>
            <remarks>
            Default: true<br />
            If not enough space is available inside the extension lines and FitTextInside is true,
            setting FitDimLineInside to false suppresses the arrowheads. If FitDimLineInside is false,
            FitDimLineInside has no effect.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimScaleOverall">
            <summary>
            Get or set the overall scale factor applied to dimensioning variables that specify sizes, distances, or offsets. (DIMSCALE)
            </summary>
            <remarks>
            Default: 1.0<br/>
            DIMSCALE does not affect measured lengths, coordinates, or angles.<br/>
            DIMSCALE values of zero are not supported, any imported drawing with a zero value will set the scale to the default 1.0.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.FitOptions">
            <summary>
            Gets or sets the placement of text and arrowheads based on the space available between the extension lines. (DIMATFIT)
            </summary>
            <remarks>
            Default: BestFit<br/>
            Not implemented in the dimension drawing.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.FitTextInside">
            <summary>
            Gets or sets the drawing of text between the extension lines. (DIMTIX)
            </summary>
            <remarks>
            Default: false
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.FitTextMove">
            <summary>
            Gets or sets the position of the text when it's moved either manually or automatically. (DIMTMOVE)
            </summary>
            <remarks>
            Default: BesideDimLine
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.AngularPrecision">
            <summary>
            Gets or sets the number of precision places displayed in angular dimensions. (DIMADEC)
            </summary>
            <remarks>
            Default: 0<br/>
            If set to -1 angular dimensions display the number of decimal places specified by LengthPrecision.
            It is recommended to use values in the range 0 to 8.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.LengthPrecision">
            <summary>
            Gets or sets the number of decimal places displayed for the primary units of a dimension. (DIMDEC)
            </summary>
            <remarks>
            Default: 2<br/>
            It is recommended to use values in the range 0 to 8.<br/>
            For architectural and fractional the precision used for the minimum fraction is 1/2^LinearDecimalPlaces.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimPrefix">
            <summary>
            Gets or sets the text prefix for the dimension. (DIMPOST)
            </summary>
            <remarks>
            Default: string.Empty
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimSuffix">
            <summary>
            Gets or sets the text suffix for the dimension. (DIMPOST)
            </summary>
            <remarks>
            Default: string.Empty
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DecimalSeparator">
            <summary>
            Gets or sets a single-character decimal separator to use when creating dimensions whose unit format is decimal. (DIMDSEP)
            </summary>
            <remarks>
            Default: "."
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimScaleLinear">
            <summary>
            Gets or sets a scale factor for linear dimension measurements. (DIMLFAC)
            </summary>
            <remarks>
            All linear dimension distances, including radii, diameters, and coordinates, are multiplied by DimScaleLinear before being converted to dimension text.<br />
            Positive values of DimScaleLinear are applied to dimensions in both model space and paper space; negative values are applied to paper space only.<br />
            DimScaleLinear has no effect on angular dimensions.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimLengthUnits">
            <summary>
            Gets or sets the units for all dimension types except angular. (DIMLUNIT)
            </summary>
            <remarks>
            Scientific<br/>
            Decimal<br/>
            Engineering<br/>
            Architectural<br/>
            Fractional
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimAngularUnits">
            <summary>
            Gets or sets the units format for angular dimensions. (DIMAUNIT)
            </summary>
            <remarks>
            Decimal degrees<br/>
            Degrees/minutes/seconds<br/>
            Gradians<br/>
            Radians
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.FractionType">
            <summary>
            Gets or sets the fraction format when DIMLUNIT is set to Architectural or Fractional. (DIMFRAC)
            </summary>
            <remarks>
            Horizontal stacking<br/>
            Diagonal stacking<br/>
            Not stacked (for example, 1/2)
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.SuppressLinearLeadingZeros">
            <summary>
            Suppresses leading zeros in linear decimal dimensions; for example, 0.5000 becomes .5000. (DIMZIN)
            </summary>
            <remarks>
            This value is part of the DIMZIN variable.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.SuppressLinearTrailingZeros">
            <summary>
            Suppresses trailing zeros in linear decimal dimensions. (DIMZIN)
            </summary>
            <remarks>
            This value is part of the DIMZIN variable.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.SuppressZeroFeet">
            <summary>
            Suppresses zero feet in architectural dimensions. (DIMZIN)
            </summary>
            <remarks>
            This value is part of the DIMZIN variable.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.SuppressZeroInches">
            <summary>
            Suppresses zero inches in architectural dimensions. (DIMZIN)
            </summary>
            <remarks>
            This value is part of the DIMZIN variable.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.SuppressAngularLeadingZeros">
            <summary>
            Suppresses leading zeros in angular decimal dimensions. (DIMZIN)
            </summary>
            <remarks>
            This value is part of the DIMAZIN variable.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.SuppressAngularTrailingZeros">
            <summary>
            Suppresses trailing zeros in angular decimal dimensions. (DIMZIN)
            </summary>
            <remarks>
            This value is part of the DIMAZIN variable.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.DimRoundoff">
            <summary>
            Gets or sets the value to round all dimensioning distances. (DIMRND)
            </summary>
            <remarks>
            Default: 0 (no rounding off).<br/>
            If DIMRND is set to 0.25, all distances round to the nearest 0.25 unit.
            If you set DIMRND to 1.0, all distances round to the nearest integer.
            Note that the number of digits edited after the decimal point depends on the precision set by DIMDEC.
            DIMRND does not apply to angular dimensions.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.AlternateUnits">
            <summary>
            Gets or sets the alternate units format for dimensions.
            </summary>
            <remarks>Alternative units are not applicable for angular dimensions.</remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.Tolerances">
            <summary>
            Gets or sets the tolerances format for dimensions.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyle.Owner">
            <summary>
            Gets the owner of the actual dimension style.
            </summary>
        </member>
        <member name="M:netDxf.Tables.DimensionStyle.Clone(System.String)">
            <summary>
            Creates a new DimensionStyle that is a copy of the current instance.
            </summary>
            <param name="newName">DimensionStyle name of the copy.</param>
            <returns>A new DimensionStyle that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Tables.DimensionStyle.Clone">
            <summary>
            Creates a new DimensionStyle that is a copy of the current instance.
            </summary>
            <returns>A new DimensionStyle that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Tables.DimensionStyleAlternateUnits">
            <summary>
            Represents the way alternate units are formatted in dimension entities.
            </summary>
            <remarks>Alternative units are not applicable for angular dimensions.</remarks>
        </member>
        <member name="M:netDxf.Tables.DimensionStyleAlternateUnits.#ctor">
            <summary>
            Initializes a new instance of the <c>DimensionStyleUnitsFormat</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleAlternateUnits.Enabled">
            <summary>
            Gets or sets if the alternate measurement units are added to the dimension text.  (DIMALT)
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleAlternateUnits.LengthPrecision">
            <summary>
            Sets the number of decimal places displayed for the alternate units of a dimension. (DIMALTD)
            </summary>
            <remarks>
            Default: 4<br/>
            It is recommended to use values in the range 0 to 8.<br/>
            For architectural and fractional the precision used for the minimum fraction is 1/2^LinearDecimalPlaces.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleAlternateUnits.Prefix">
            <summary>
            Specifies the text prefix for the dimension. (DIMAPOST)
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleAlternateUnits.Suffix">
            <summary>
            Specifies the text suffix for the dimension. (DIMAPOST)
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleAlternateUnits.Multiplier">
            <summary>
            Gets or sets the multiplier used as the conversion factor between primary and alternate units. (DIMALTF)
            </summary>
            <remarks>
            to convert inches to millimeters, enter 25.4.
            The value has no effect on angular dimensions, and it is not applied to the rounding value or the plus or minus tolerance values. 
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleAlternateUnits.LengthUnits">
            <summary>
            Gets or sets the alternate units for all dimension types except angular. (DIMALTU)
            </summary>
            <remarks>
            Scientific<br/>
            Decimal<br/>
            Engineering<br/>
            Architectural<br/>
            Fractional
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleAlternateUnits.StackUnits">
            <summary>
            Gets or set if the Architectural or Fractional linear units will be shown stacked or not. (DIMALTU)
            </summary>
            <remarks>
            This value only is applicable if the <c>DimLengthUnits</c> property has been set to Architectural or Fractional,
            for any other value this parameter is not applicable.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleAlternateUnits.SuppressLinearLeadingZeros">
            <summary>
            Suppresses leading zeros in linear decimal alternate units. (DIMALTZ)
            </summary>
            <remarks>This value is part of the DIMALTZ variable.</remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleAlternateUnits.SuppressLinearTrailingZeros">
            <summary>
            Suppresses trailing zeros in linear decimal alternate units. (DIMALTZ)
            </summary>
            <remarks>This value is part of the DIMALTZ variable.</remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleAlternateUnits.SuppressZeroFeet">
            <summary>
            Suppresses zero feet in architectural alternate units. (DIMALTZ)
            </summary>
            <remarks>This value is part of the DIMALTZ variable.</remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleAlternateUnits.SuppressZeroInches">
            <summary>
            Suppresses zero inches in architectural alternate units. (DIMALTZ)
            </summary>
            <remarks>This value is part of the DIMALTZ variable.</remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleAlternateUnits.Roundoff">
            <summary>
            Gets or sets the value to round all dimensioning distances. (DIMALTRND)
            </summary>
            <remarks>
            Default: 0 (no rounding off).<br/>
            If DIMRND is set to 0.25, all distances round to the nearest 0.25 unit.
            If you set DIMRND to 1.0, all distances round to the nearest integer.
            Note that the number of digits edited after the decimal point depends on the precision set by DIMDEC.
            DIMRND does not apply to angular dimensions.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.DimensionStyleAlternateUnits.Clone">
            <summary>
            Creates a new <c>DimensionStyle.DimensionStyleAlternateUnits</c> that is a copy of the current instance.
            </summary>
            <returns>A new <c>DimensionStyle.DimensionStyleAlternateUnits</c> that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Tables.DimensionStyleFitOptions">
            <summary>
            Controls dimension text and arrow placement when space is not sufficient to place both within the extension lines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleFitOptions.TextAndArrows">
            <summary>
            Places both text and arrows outside extension lines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleFitOptions.Arrows">
            <summary>
            Moves arrows first, then text.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleFitOptions.Text">
            <summary>
            Moves text first, then arrows.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleFitOptions.BestFit">
            <summary>
            Moves either text or arrows, whichever fits best.
            </summary>
        </member>
        <member name="T:netDxf.Tables.DimensionStyleFitTextMove">
            <summary>
            Controls the placement of dimension text when it is moved from the default position, that is, the position defined by the dimension style.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleFitTextMove.BesideDimLine">
            <summary>
            Moves the dimension line with dimension text.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleFitTextMove.OverDimLineWithLeader">
            <summary>
            Adds a leader when dimension text is moved.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleFitTextMove.OverDimLineWithoutLeader">
            <summary>
            Allows text to be moved freely without a leader.
            </summary>
        </member>
        <member name="T:netDxf.Tables.DimensionStyleOverride">
            <summary>
            Represents a dimension style value that overrides a property of the style associated with a dimension.
            </summary>
        </member>
        <member name="M:netDxf.Tables.DimensionStyleOverride.#ctor(netDxf.Tables.DimensionStyleOverrideType,System.Object)">
            <summary>
            Initializes a new instance of <c>DimensionStyleOverride</c>.
            </summary>
            <param name="type">Type of the dimension style to override.</param>
            <param name="value">Value of the dimension style to override.</param>
        </member>
        <member name="M:netDxf.Tables.DimensionStyleOverride.ToString">
            <summary>
            Obtains a string that represents the actual dimension style override.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleOverride.Type">
            <summary>
            Gets the type of the dimension style to override.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleOverride.Value">
            <summary>
            Gets the value of the dimension style to override.
            </summary>
        </member>
        <member name="M:netDxf.Tables.DimensionStyleOverrideChangeEventArgs.#ctor(netDxf.Tables.DimensionStyleOverride)">
            <summary>
            Initializes a new instance of <c>DimensionStyleOverrideChangeEventArgs</c>.
            </summary>
            <param name="item">The DimensionStyleOverride that is being added or removed from the insert.</param>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleOverrideChangeEventArgs.Item">
            <summary>
            Gets the DimensionStyleOverride that is being added or removed.
            </summary>
        </member>
        <member name="T:netDxf.Tables.DimensionStyleOverrideType">
            <summary>
            Dimension style override types.
            </summary>
            <remarks>
            There is one dimension style override type for each property of the <see cref="T:netDxf.Tables.DimensionStyle">DimensionStyle</see> class.
            The dimension style properties DIMBLK and DIMSAH are not available.
            The overrides always make use of the DIMBLK1 and DIMBLK2 setting the DIMSAH to true even when both arrow ends are the same.
            </remarks>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DimLineColor">
            <summary>
            Assigns colors to dimension lines, arrowheads, and dimension leader lines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DimLineLinetype">
            <summary>
            Linetype of the dimension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DimLineLineweight">
            <summary>
            Lineweight to dimension lines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DimLine1Off">
            <summary>
            Suppresses display of the first dimension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DimLine2Off">
            <summary>
            Suppresses display of the second dimension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DimLineExtend">
            <summary>
            Distance the dimension line extends beyond the extension line when oblique, architectural tick, integral, or no marks are drawn for arrowheads.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.ExtLineColor">
            <summary>
            Colors to extension lines, center marks, and centerlines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.ExtLine1Linetype">
            <summary>
            Linetype of the first extension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.ExtLine2Linetype">
            <summary>
            Linetype of the second extension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.ExtLineLineweight">
            <summary>
            Lineweight to extension lines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.ExtLine1Off">
            <summary>
            Suppresses display of the first extension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.ExtLine2Off">
            <summary>
            Suppresses display of the second extension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.ExtLineOffset">
            <summary>
            Specifies how far extension lines are offset from origin points.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.ExtLineExtend">
            <summary>
            Specifies how far to extend the extension line beyond the dimension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.ExtLineFixed">
            <summary>
            Enables fixed length extension lines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.ExtLineFixedLength">
            <summary>
            Total length of the extension lines starting from the dimension line toward the dimension origin.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DimArrow1">
            <summary>
            Arrowhead block for the first end of the dimension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DimArrow2">
            <summary>
            Arrowhead block for the second end of the dimension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.LeaderArrow">
            <summary>
            Arrowhead block for leaders.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.ArrowSize">
            <summary>
            Size of dimension line and leader line arrowheads. Also controls the size of hook lines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.CenterMarkSize">
            <summary>
            Drawing of circle or arc center marks and centerlines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TextStyle">
            <summary>
            Text style of the dimension.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TextColor">
            <summary>
            Color of dimension text.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TextFillColor">
            <summary>
            Color of background dimension text.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TextHeight">
            <summary>
            Height of dimension text, unless the current text style has a fixed height.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TextVerticalPlacement">
            <summary>
            Vertical position of text in relation to the dimension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TextHorizontalPlacement">
            <summary>
            Horizontal positioning of dimension text.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TextInsideAlign">
            <summary>
            Positioning of the dimension text inside extension lines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TextOutsideAlign">
            <summary>
            Positioning of the dimension text outside extension lines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TextOffset">
            <summary>
            Distance around the dimension text when the dimension line breaks to accommodate dimension text.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TextDirection">
            <summary>
            Specifies the direction of the dimension text.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TextFractionHeightScale">
            <summary>
            Controls the scale of fractions relative to dimension text height.
            </summary>
            <remarks>
            This value is only applicable to Architectural and Fractional units, and also
            controls the height factor applied to the tolerance text in relation with the dimension text height.
            </remarks>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.FitDimLineForce">
            <summary>
            Controls the drawing of the dimension lines even when the text are placed outside the extension lines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.FitDimLineInside">
            <summary>
            Controls the drawing of dimension lines outside extension lines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DimScaleOverall">
            <summary>
            Overall scale factor applied to dimensioning variables that specify sizes, distances, or offsets.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.FitOptions">
            <summary>
            Controls the placement of text and arrowheads based on the space available between the extension lines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.FitTextInside">
            <summary>
            Controls the drawing of text between the extension lines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.FitTextMove">
            <summary>
            Controls the position of the text when it's moved either manually or automatically.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.AngularPrecision">
            <summary>
            Number of precision places displayed in angular dimensions.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.LengthPrecision">
            <summary>
            Number of decimal places displayed for the primary units of a dimension.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DimPrefix">
            <summary>
            Specifies the text prefix for the dimension.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DimSuffix">
            <summary>
            Specifies the text suffix for the dimension.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DecimalSeparator">
            <summary>
            Single-character decimal separator to use when creating dimensions whose unit format is decimal.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DimScaleLinear">
            <summary>
            Scale factor for linear dimension measurements
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DimLengthUnits">
            <summary>
            Units for all dimension types except angular.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DimAngularUnits">
            <summary>
            Units format for angular dimensions.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.FractionalType">
            <summary>
            Fraction format when DIMLUNIT is set to Architectural or Fractional.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.SuppressLinearLeadingZeros">
            <summary>
            Suppresses leading zeros in linear decimal dimensions (for example, 0.5000 becomes .5000).
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.SuppressLinearTrailingZeros">
            <summary>
            Suppresses trailing zeros in linear decimal dimensions (for example, 12.5000 becomes 12.5).
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.SuppressAngularLeadingZeros">
            <summary>
            Suppresses leading zeros in angular decimal dimensions (for example, 0.5000 becomes .5000).
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.SuppressAngularTrailingZeros">
            <summary>
            Suppresses trailing zeros in angular decimal dimensions (for example, 12.5000 becomes 12.5).
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.SuppressZeroFeet">
            <summary>
            Suppresses zero feet in architectural dimensions.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.SuppressZeroInches">
            <summary>
            Suppresses zero inches in architectural dimensions.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.DimRoundoff">
            <summary>
            Value to round all dimensioning distances.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.AltUnitsEnabled">
            <summary>
            Controls the display of the alternate units.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.AltUnitsLengthUnits">
            <summary>
            Alternate units for all dimension types except angular.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.AltUnitsStackedUnits">
            <summary>
            Controls if the Architectural or Fractional linear units will be shown stacked or not.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.AltUnitsLengthPrecision">
            <summary>
            Number of decimal places displayed for the alternate units of a dimension.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.AltUnitsMultiplier">
            <summary>
            Multiplier used as the conversion factor between primary and alternate units.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.AltUnitsRoundoff">
            <summary>
            Value to round all alternate units of a dimension  except angular.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.AltUnitsPrefix">
            <summary>
            Specifies the alternate units text prefix for the dimension.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.AltUnitsSuffix">
            <summary>
            Specifies the alternate units text suffix for the dimension.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.AltUnitsSuppressLinearLeadingZeros">
            <summary>
            Suppresses alternate units leading zeros in linear decimal dimensions (for example, 0.5000 becomes .5000).
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.AltUnitsSuppressLinearTrailingZeros">
            <summary>
            Suppresses alternate units trailing zeros in linear decimal dimensions (for example, 0.5000 becomes .5000).
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.AltUnitsSuppressZeroFeet">
            <summary>
            Suppresses alternate units zero feet in architectural dimensions.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.AltUnitsSuppressZeroInches">
            <summary>
            Suppresses alternate units zero inches in architectural dimensions.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TolerancesDisplayMethod">
            <summary>
            Method for calculating the tolerance.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TolerancesUpperLimit">
            <summary>
            Maximum or upper tolerance value. When you select Symmetrical in DisplayMethod, this value is used for the tolerance.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TolerancesLowerLimit">
            <summary>
            Minimum or lower tolerance value.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TolerancesVerticalPlacement">
            <summary>
            Text vertical placement for symmetrical and deviation tolerances.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TolerancesPrecision">
            <summary>
            Gets or sets the number of decimal places.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TolerancesSuppressLinearLeadingZeros">
            <summary>
            Suppresses leading zeros in linear decimal tolerance units (for example, 0.5000 becomes .5000).
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TolerancesSuppressLinearTrailingZeros">
            <summary>
            Suppresses trailing zeros in linear decimal tolerance units (for example, 12.5000 becomes 12.5).
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TolerancesSuppressZeroFeet">
            <summary>
            Suppresses zero feet in architectural tolerance units.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TolerancesSuppressZeroInches">
            <summary>
            Suppresses zero inches in architectural tolerance units.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TolerancesAlternatePrecision">
            <summary>
            Number of decimal places of the tolerance alternate units.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TolerancesAltSuppressLinearLeadingZeros">
            <summary>
            Suppresses leading zeros in linear decimal alternate tolerance units (for example, 0.5000 becomes .5000).
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TolerancesAltSuppressLinearTrailingZeros">
            <summary>
            Suppresses trailing zeros in linear decimal alternate tolerance units (for example, 12.5000 becomes 12.5).
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TolerancesAltSuppressZeroFeet">
            <summary>
            Suppresses zero feet in architectural alternate tolerance units.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleOverrideType.TolerancesAltSuppressZeroInches">
            <summary>
            Suppresses zero inches in architectural alternate tolerance units.
            </summary>
        </member>
        <member name="T:netDxf.Tables.DimensionStyleTextDirection">
            <summary>
            Specifies the direction of the dimension text.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTextDirection.LeftToRight">
            <summary>
            Displays dimension text in a Left-to-Right reading style.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTextDirection.RightToLeft">
            <summary>
            Displays dimension text in a Right-to-Left reading style.
            </summary>
        </member>
        <member name="T:netDxf.Tables.DimensionStyleTextHorizontalPlacement">
            <summary>
            Controls the vertical placement of dimension text in relation to the dimension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTextHorizontalPlacement.Centered">
            <summary>
            Centers the dimension text along the dimension line between the extension lines.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTextHorizontalPlacement.AtExtLines1">
            <summary>
            Left-justifies the text with the first extension line along the dimension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTextHorizontalPlacement.AtExtLine2">
            <summary>
            Right-justifies the text with the second extension line along the dimension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTextHorizontalPlacement.OverExtLine1">
            <summary>
            Positions the text over or along the first extension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTextHorizontalPlacement.OverExtLine2">
            <summary>
            Positions the text over or along the second extension line.
            </summary>
        </member>
        <member name="T:netDxf.Tables.DimensionStyleTextVerticalPlacement">
            <summary>
            Controls the placement of dimension text.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTextVerticalPlacement.Centered">
            <summary>
            Centers the dimension text between the two parts of the dimension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTextVerticalPlacement.Above">
            <summary>
            Places the dimension text above the dimension line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTextVerticalPlacement.Outside">
            <summary>
            Places the dimension text on the side of the dimension line farthest away from the first defining point.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTextVerticalPlacement.JIS">
            <summary>
            Places the dimension text to conform to a Japanese Industrial Standards (JIS) representation.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTextVerticalPlacement.Below">
            <summary>
            Places the dimension text under the dimension line.
            </summary>
        </member>
        <member name="T:netDxf.Tables.DimensionStyleTolerances">
            <summary>
            Represents the way tolerances are formatted in dimension entities
            </summary>
        </member>
        <member name="M:netDxf.Tables.DimensionStyleTolerances.#ctor">
            <summary>
            Initializes a new instance of the <c>TolerancesFormat</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleTolerances.DisplayMethod">
            <summary>
            Gets or sets the method for calculating the tolerance. (DIMTOL)
            </summary>
            <remarks>
            Default: None
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleTolerances.UpperLimit">
            <summary>
            Gets or sets the maximum or upper tolerance value. When you select Symmetrical in DisplayMethod, this value is used for the tolerance. (DIMTP)
            </summary>
            <remarks>
            Default: 0.0
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleTolerances.LowerLimit">
            <summary>
            Gets or sets the minimum or lower tolerance value. (DIMTM)
            </summary>
            <remarks>
            Default: 0.0
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleTolerances.VerticalPlacement">
            <summary>
            Gets or sets the text vertical placement for symmetrical and deviation tolerances. (DIMTOLJ)
            </summary>
            <remarks>
            Default: Middle
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleTolerances.Precision">
            <summary>
            Gets or sets the number of decimal places. (DIMTDEC)
            </summary>
            <remarks>
            Default: 4<br/>
            It is recommended to use values in the range 0 to 8.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleTolerances.SuppressLinearLeadingZeros">
            <summary>
            Suppresses leading zeros in linear decimal tolerance units. (DIMTZIN)
            </summary>
            <remarks>
            This value is part of the DIMTZIN variable.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleTolerances.SuppressLinearTrailingZeros">
            <summary>
            Suppresses trailing zeros in linear decimal tolerance units. (DIMTZIN)
            </summary>
            <remarks>
            This value is part of the DIMTZIN variable.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleTolerances.SuppressZeroFeet">
            <summary>
            Suppresses zero feet in architectural tolerance units. (DIMTZIN)
            </summary>
            <remarks>
            This value is part of the DIMTZIN variable.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleTolerances.SuppressZeroInches">
            <summary>
            Suppresses zero inches in architectural tolerance units. (DIMTZIN)
            </summary>
            <remarks>
            This value is part of the DIMTZIN variable.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleTolerances.AlternatePrecision">
            <summary>
            Gets or sets the number of decimal places of the tolerance alternate units. (DIMALTTD)
            </summary>
            <remarks>
            Default: 2<br/>
            It is recommended to use values in the range 0 to 8.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleTolerances.AlternateSuppressLinearLeadingZeros">
            <summary>
            Suppresses leading zeros in linear decimal alternate tolerance units. (DIMALTTZ)
            </summary>
            <remarks>This value is part of the DIMALTTZ variable.</remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleTolerances.AlternateSuppressLinearTrailingZeros">
            <summary>
            Suppresses trailing zeros in linear decimal alternate tolerance units. (DIMALTTZ)
            </summary>
            <remarks>This value is part of the DIMALTTZ variable.</remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleTolerances.AlternateSuppressZeroFeet">
            <summary>
            Suppresses zero feet in architectural alternate tolerance units. (DIMALTTZ)
            </summary>
            <remarks>This value is part of the DIMALTTZ variable.</remarks>
        </member>
        <member name="P:netDxf.Tables.DimensionStyleTolerances.AlternateSuppressZeroInches">
            <summary>
            Suppresses zero inches in architectural alternate tolerance units. (DIMALTTZ)
            </summary>
            <remarks>This value is part of the DIMALTTZ variable.</remarks>
        </member>
        <member name="M:netDxf.Tables.DimensionStyleTolerances.Clone">
            <summary>
            Creates a new <c>DimensionStyle.TolerancesFormat</c> that is a copy of the current instance.
            </summary>
            <returns>A new <c>DimensionStyle.TolerancesFormat</c> that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Tables.DimensionStyleTolerancesDisplayMethod">
            <summary>
            Defines the method for calculating the tolerance.
            </summary>
            <remarks>
            The Basic method for displaying tolerances in dimensions is not available,
            use a negative number for the <c>TextOffset</c> of the dimension style. The result is exactly the same.
            </remarks>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTolerancesDisplayMethod.None">
            <summary>
            Does not add a tolerance.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTolerancesDisplayMethod.Symmetrical">
            <summary>
            Adds a plus/minus expression of tolerance in which a single value of variation is applied to the dimension measurement.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTolerancesDisplayMethod.Deviation">
            <summary>
            Adds a plus/minus tolerance expression. Different plus and minus values of variation are applied to the dimension measurement.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTolerancesDisplayMethod.Limits">
            <summary>
            Creates a limit dimension. A maximum and a minimum value are displayed, one over the other.
            </summary>
        </member>
        <member name="T:netDxf.Tables.DimensionStyleTolerancesVerticalPlacement">
            <summary>
            Controls text justification for symmetrical and deviation tolerances.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTolerancesVerticalPlacement.Bottom">
            <summary>
            Aligns the tolerance text with the bottom of the main dimension text.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTolerancesVerticalPlacement.Middle">
            <summary>
            Aligns the tolerance text with the middle of the main dimension text.
            </summary>
        </member>
        <member name="F:netDxf.Tables.DimensionStyleTolerancesVerticalPlacement.Top">
            <summary>
            Aligns the tolerance text with the top of the main dimension text.
            </summary>
        </member>
        <member name="T:netDxf.Tables.FontStyle">
            <summary>
            Represent the font character formatting, such as italic, bold, or regular.
            </summary>
        </member>
        <member name="F:netDxf.Tables.FontStyle.Regular">
            <summary>
            Regular.
            </summary>
        </member>
        <member name="F:netDxf.Tables.FontStyle.Italic">
            <summary>
            Italic or oblique.
            </summary>
        </member>
        <member name="F:netDxf.Tables.FontStyle.Bold">
            <summary>
            Bold.
            </summary>
        </member>
        <member name="T:netDxf.Tables.Layer">
            <summary>
            Represents a layer.
            </summary>
        </member>
        <member name="F:netDxf.Tables.Layer.DefaultName">
            <summary>
            Default layer name.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Layer.Default">
            <summary>
            Gets the default Layer 0.
            </summary>
        </member>
        <member name="M:netDxf.Tables.Layer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>Layer</c> class.
            </summary>
            <param name="name">Layer name.</param>
        </member>
        <member name="P:netDxf.Tables.Layer.Linetype">
            <summary>
            Gets or sets the layer <see cref="P:netDxf.Tables.Layer.Linetype">line type</see>.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Layer.Color">
            <summary>
            Gets or sets the layer <see cref="T:netDxf.AciColor">color</see>.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Layer.IsVisible">
            <summary>
            Gets or sets the layer visibility.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Layer.IsFrozen">
            <summary>
            Gets or sets if the layer is frozen; otherwise layer is thawed.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Layer.IsLocked">
            <summary>
            Gets or sets if the layer is locked.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Layer.Plot">
            <summary>
            Gets or sets if the plotting flag.
            </summary>
            <remarks>If set to false, do not plot this layer.</remarks>
        </member>
        <member name="P:netDxf.Tables.Layer.Lineweight">
            <summary>
            Gets or sets the layer line weight, one unit is always 1/100 mm (default = Default).
            </summary>
        </member>
        <member name="P:netDxf.Tables.Layer.Transparency">
            <summary>
            Gets or sets layer transparency (default: 0, opaque).
            </summary>
        </member>
        <member name="P:netDxf.Tables.Layer.Owner">
            <summary>
            Gets the owner of the actual layer.
            </summary>
        </member>
        <member name="M:netDxf.Tables.Layer.Clone(System.String)">
            <summary>
            Creates a new Layer that is a copy of the current instance.
            </summary>
            <param name="newName">Layer name of the copy.</param>
            <returns>A new Layer that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Tables.Layer.Clone">
            <summary>
            Creates a new Layer that is a copy of the current instance.
            </summary>
            <returns>A new Layer that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Tables.LayerFlags">
            <summary>
            Standard layer flags (bit-coded values).
            </summary>
        </member>
        <member name="F:netDxf.Tables.LayerFlags.None">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:netDxf.Tables.LayerFlags.Frozen">
            <summary>
            Layer is frozen; otherwise layer is thawed.
            </summary>
        </member>
        <member name="F:netDxf.Tables.LayerFlags.FrozenNewViewports">
            <summary>
            Layer is frozen by default in new viewports.
            </summary>
        </member>
        <member name="F:netDxf.Tables.LayerFlags.Locked">
            <summary>
            Layer is locked.
            </summary>
        </member>
        <member name="F:netDxf.Tables.LayerFlags.XrefDependent">
            <summary>
            If set, table entry is externally dependent on an xRef.
            </summary>
        </member>
        <member name="F:netDxf.Tables.LayerFlags.XrefResolved">
            <summary>
            If both this bit and bit 16 are set, the externally dependent xRef has been successfully resolved.
            </summary>
        </member>
        <member name="F:netDxf.Tables.LayerFlags.Referenced">
            <summary>
            If set, the table entry was referenced by at least one entity in the drawing the last time the 
            drawing was edited. (This flag is for the benefit of AutoCAD commands. It can be ignored by 
            most programs that read DXF files and need not be set by programs that write DXF files)
            </summary>
        </member>
        <member name="T:netDxf.Tables.Linetype">
            <summary>
            Represents a line type. Simple and complex line types are supported.
            </summary>
        </member>
        <member name="F:netDxf.Tables.Linetype.ByLayerName">
            <summary>
            ByLayer line type name.
            </summary>
        </member>
        <member name="F:netDxf.Tables.Linetype.ByBlockName">
            <summary>
            ByBlock line type name.
            </summary>
        </member>
        <member name="F:netDxf.Tables.Linetype.DefaultName">
            <summary>
            Default line type name.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Linetype.ByLayer">
            <summary>
            Gets the ByLayer line type.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Linetype.ByBlock">
            <summary>
            Gets the ByBlock line type.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Linetype.Continuous">
            <summary>
            Gets the predefined continuous line.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Linetype.Center">
            <summary>
            Gets a predefined center line.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Linetype.DashDot">
            <summary>
            Gets a predefined dash dot line.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Linetype.Dashed">
            <summary>
            Gets a predefined dashed line
            </summary>
        </member>
        <member name="P:netDxf.Tables.Linetype.Dot">
            <summary>
            Gets a predefined dot line
            </summary>
        </member>
        <member name="M:netDxf.Tables.Linetype.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>Linetype</c> class.
            </summary>
            <param name="name">Line type name.</param>
        </member>
        <member name="M:netDxf.Tables.Linetype.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>Linetype</c> class.
            </summary>
            <param name="name">Line type name.</param>
            <param name="description">Line type description.</param>
        </member>
        <member name="M:netDxf.Tables.Linetype.#ctor(System.String,System.Collections.Generic.IEnumerable{netDxf.Tables.LinetypeSegment})">
            <summary>
            Initializes a new instance of the <c>Linetype</c> class.
            </summary>
            <param name="name">Line type name.</param>
        </member>
        <member name="M:netDxf.Tables.Linetype.#ctor(System.String,System.Collections.Generic.IEnumerable{netDxf.Tables.LinetypeSegment},System.String)">
            <summary>
            Initializes a new instance of the <c>Linetype</c> class.
            </summary>
            <param name="name">Line type name.</param>
            <param name="description">Line type description.</param>
        </member>
        <member name="P:netDxf.Tables.Linetype.IsByLayer">
            <summary>
            Defines if the line type is defined by layer.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Linetype.IsByBlock">
            <summary>
            Defines if the line type is defined by block.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Linetype.Description">
            <summary>
            Gets or sets the line type description.
            </summary>
            <remarks>
            New line characters are not allowed.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.Linetype.Length">
            <summary>
            Gets the total length of the line type.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Linetype.Segments">
            <summary>
            Gets the list of line type segments.
            </summary>
        </member>
        <member name="P:netDxf.Tables.Linetype.Owner">
            <summary>
            Gets the owner of the actual DXF object.
            </summary>
        </member>
        <member name="M:netDxf.Tables.Linetype.NamesFromFile(System.String)">
            <summary>
            Gets the list of linetype names defined in a LIN file.
            </summary>
            <param name="file">Linetype definitions file.</param>
            <returns>List of linetype names contained in the specified LIN file.</returns>
        </member>
        <member name="M:netDxf.Tables.Linetype.Load(System.String,System.String)">
            <summary>
            Creates a new line type from the definition in a LIN file.
            </summary>
            <param name="file">Lin file where the definition is located.</param>
            <param name="linetypeName">Name of the line type definition to read (ignore case).</param>
            <returns>The linetype defined in the LIN file with the specified name, null if the linetype has not been found in the linetype definitions file.</returns>
        </member>
        <member name="M:netDxf.Tables.Linetype.Save(System.String)">
            <summary>
            Saves the current linetype to the specified file, if the file does not exist it creates a new one.
            </summary>
            <param name="file">File where the current linetype will be saved.</param>
        </member>
        <member name="M:netDxf.Tables.Linetype.Clone(System.String)">
            <summary>
            Creates a new Linetype that is a copy of the current instance.
            </summary>
            <param name="newName">Linetype name of the copy.</param>
            <returns>A new Linetype that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Tables.Linetype.Clone">
            <summary>
            Creates a new Linetype that is a copy of the current instance.
            </summary>
            <returns>A new Linetype that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Tables.LinetypeSegment">
            <summary>
            Base class for the three kinds of linetype segments simple, text, and shape.
            </summary>
        </member>
        <member name="M:netDxf.Tables.LinetypeSegment.#ctor(netDxf.Tables.LinetypeSegmentType,System.Double)">
            <summary>
            Initializes a new instance of the <c>LinetypeSegment</c> class.
            </summary>
            <param name="type">Type of the linetype segment.</param>
            <param name="length">Dash or space length of the segment.</param>
        </member>
        <member name="P:netDxf.Tables.LinetypeSegment.Type">
            <summary>
            Gets the linetype segment simple, text, or shape.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LinetypeSegment.Length">
            <summary>
            Gets or sets the dash, dot or space length.
            </summary>
            <remarks>
            A positive decimal number denotes a pen-down (dash) segment of that length. 
            A negative decimal number denotes a pen-up (space) segment of that length. 
            A dash length of 0 draws a dot. 
            </remarks>
        </member>
        <member name="M:netDxf.Tables.LinetypeSegment.Clone">
            <summary>
            Creates a new <c>LinetypeSegment</c> that is a copy of the current instance.
            </summary>
            <returns>A new <c>LinetypeSegment</c> that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Tables.LinetypeSegmentChangeEventArgs.#ctor(netDxf.Tables.LinetypeSegment)">
            <summary>
            Initializes a new instance of <c>LinetypeSegmentChangeEventArgs</c>.
            </summary>
            <param name="item">The item that is being added or removed from the line type segment list.</param>
        </member>
        <member name="P:netDxf.Tables.LinetypeSegmentChangeEventArgs.Item">
            <summary>
            Gets the item that is being added or removed from the line type segment list.
            </summary>
        </member>
        <member name="T:netDxf.Tables.LinetypeSegmentRotationType">
            <summary>
            Define the type of rotation specified by the rotation value of the text or shape linetype segment.
            </summary>
        </member>
        <member name="F:netDxf.Tables.LinetypeSegmentRotationType.Upright">
            <summary>
            Specifies upright or easy-to-read text.
            </summary>
            <remarks>The dxf seems to store the rotation value only as relative or absolute, therefore upright and relative will be considered equivalent.</remarks>
        </member>
        <member name="F:netDxf.Tables.LinetypeSegmentRotationType.Relative">
            <summary>
            Specifies relative or tangential rotation with respect to the line.
            </summary>
        </member>
        <member name="F:netDxf.Tables.LinetypeSegmentRotationType.Absolute">
            <summary>
            Specifies absolute rotation of the text with respect to the origin; that is, all text has the same rotation regardless of its position relative to the line.
            </summary>
        </member>
        <member name="T:netDxf.Tables.LinetypeSegmentType">
            <summary>
            Define the linetype segment type simple, text, or shape.
            </summary>
        </member>
        <member name="F:netDxf.Tables.LinetypeSegmentType.Simple">
            <summary>
            Linetype segment made only of a simple dash, dot, or space.
            </summary>
        </member>
        <member name="F:netDxf.Tables.LinetypeSegmentType.Text">
            <summary>
            Linetype segment made of a text string.
            </summary>
        </member>
        <member name="F:netDxf.Tables.LinetypeSegmentType.Shape">
            <summary>
            Linetype segment made of a shape.
            </summary>
        </member>
        <member name="T:netDxf.Tables.LinetypeShapeSegment">
            <summary>
            Represents a shape linetype segment.
            </summary>
        </member>
        <member name="M:netDxf.Tables.LinetypeShapeSegment.#ctor(System.String,netDxf.Tables.ShapeStyle)">
            <summary>
            Initializes a new instance of the <c>LinetypeShapeSegment</c> class.
            </summary>
            <param name="name">Shape name of the linetype segment.</param>
            <param name="style">File where the shape of the linetype segment is defined.</param>
            <remarks>
            The shape must be defined in the .shx shape definitions file.<br />
            The DXF instead of saving the shape name, as the Shape entity or the shape linetype segments definition in a .lin file,
            it stores the shape number. Therefore when saving a DXF file the shape number will be obtained reading the .shp file.<br />
            It is required that the equivalent .shp file to be also present in the same folder or one of the support folders defined in the DxfDocument.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.LinetypeShapeSegment.#ctor(System.String,netDxf.Tables.ShapeStyle,System.Double)">
            <summary>
            Initializes a new instance of the <c>LinetypeShapeSegment</c> class.
            </summary>
            <param name="name">Shape name of the linetype segment.</param>
            <param name="style">File where the shape of the linetype segment is defined.</param>
            <param name="length">Dash, dot, or space length of the linetype segment.</param>
            <remarks>
            The shape must be defined in the .shx shape definitions file.<br />
            The DXF instead of saving the shape name, as the Shape entity or the shape linetype segments definition in a .lin file,
            it stores the shape number. Therefore when saving a DXF file the shape number will be obtained reading the .shp file.<br />
            It is required that the equivalent .shp file to be also present in the same folder or one of the support folders defined in the DxfDocument.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.LinetypeShapeSegment.#ctor(System.String,netDxf.Tables.ShapeStyle,System.Double,netDxf.Vector2,netDxf.Tables.LinetypeSegmentRotationType,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>LinetypeShapeSegment</c> class.
            </summary>
            <param name="name">Shape name of the linetype segment.</param>
            <param name="style">File where the shape of the linetype segment is defined.</param>
            <param name="length">Dash, dot, or space length of the linetype segment.</param>
            <param name="offset">Shift of the shape along the line.</param>
            <param name="rotationType">Type of rotation defined by the rotation value.</param>
            <param name="rotation">Rotation of the shape.</param>
            <param name="scale">Scale of the shape.</param>
            <remarks>
            The shape must be defined in the .shx shape definitions file.<br />
            The DXF instead of saving the shape name, as the Shape entity or the shape linetype segments definition in a .lin file,
            it stores the shape number. Therefore when saving a DXF file the shape number will be obtained reading the .shp file.<br />
            It is required that the equivalent .shp file to be also present in the same folder or one of the support folders defined in the DxfDocument.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.LinetypeShapeSegment.Name">
            <summary>
            Gets the name of the shape.
            </summary>
            <remarks>
            The shape must be defined in the .shx shape definitions file.<br />
            The DXF instead of saving the shape name, as the Shape entity or the shape linetype segments definition in a .lin file,
            it stores the shape number. Therefore when saving a DXF file the shape number will be obtained reading the .shp file.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.LinetypeShapeSegment.Style">
            <summary>
            Gets the shape style.
            </summary>
            <remarks>
            It is required that the equivalent .shp file to be also present in the same folder or one of the support folders defined in the DxfDocument.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.LinetypeShapeSegment.Offset">
            <summary>
            Gets or sets the shift of the shape along the line.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LinetypeShapeSegment.RotationType">
            <summary>
            Gets or sets the type of rotation defined by the rotation value upright, relative, or absolute.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LinetypeShapeSegment.Rotation">
            <summary>
            Gets or sets the angle in degrees of the shape.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LinetypeShapeSegment.Scale">
            <summary>
            Gets or sets the scale of the shape relative to the scale of the line type.
            </summary>
        </member>
        <member name="M:netDxf.Tables.LinetypeShapeSegment.Clone">
            <summary>
            Creates a new <c>LinetypeShapeSegment</c> that is a copy of the current instance.
            </summary>
            <returns>A new <c>LinetypeShapeSegment</c> that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Tables.LinetypeSimpleSegment">
            <summary>
            Represents a simple linetype segment.
            </summary>
        </member>
        <member name="M:netDxf.Tables.LinetypeSimpleSegment.#ctor">
            <summary>
            Initializes a new instance of the <c>LinetypeSimpleSegment</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Tables.LinetypeSimpleSegment.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <c>LinetypeSimpleSegment</c> class.
            </summary>
            <param name="length">Dash or space length of the segment.</param>
        </member>
        <member name="M:netDxf.Tables.LinetypeSimpleSegment.Clone">
            <summary>
            Creates a new <c>LinetypeSimpleSegment</c> that is a copy of the current instance.
            </summary>
            <returns>A new <c>LinetypeSimpleSegment</c> that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Tables.LinetypeTextSegment">
            <summary>
            Represents a text linetype segment.
            </summary>
        </member>
        <member name="M:netDxf.Tables.LinetypeTextSegment.#ctor">
            <summary>
            Initializes a new instance of the <c>LinetypeShapeSegment</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Tables.LinetypeTextSegment.#ctor(System.String,netDxf.Tables.TextStyle,System.Double)">
            <summary>
            Initializes a new instance of the <c>LinetypeShapeSegment</c> class.
            </summary>
            <param name="text">Text to display on the linetype segment.</param>
            <param name="style">Name of the TextStyle.</param>
            <param name="length">Dash, dot, or space length of the linetype segment.</param>
        </member>
        <member name="M:netDxf.Tables.LinetypeTextSegment.#ctor(System.String,netDxf.Tables.TextStyle,System.Double,netDxf.Vector2,netDxf.Tables.LinetypeSegmentRotationType,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <c>LinetypeShapeSegment</c> class.
            </summary>
            <param name="text">Text to display on the linetype segment.</param>
            <param name="style">Name of the TextStyle.</param>
            <param name="length">Dash, dot, or space length of the linetype segment.</param>
            <param name="offset">Shift of the shape along the line.</param>
            <param name="rotationType">Type of rotation defined by the rotation value.</param>
            <param name="rotation">Rotation of the text.</param>
            <param name="scale">Scale of the text.</param>
        </member>
        <member name="P:netDxf.Tables.LinetypeTextSegment.Text">
            <summary>
            Gets or sets the text displayed by the linetype.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LinetypeTextSegment.Style">
            <summary>
            Gets or sets the TextStyle of the text to be displayed by the linetype.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LinetypeTextSegment.Offset">
            <summary>
            Gets or sets the shift of the text along the line.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LinetypeTextSegment.RotationType">
            <summary>
            Gets or sets the type of rotation defined by the rotation value upright, relative, or absolute.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LinetypeTextSegment.Rotation">
            <summary>
            Gets or sets the angle in degrees of the text.
            </summary>
        </member>
        <member name="P:netDxf.Tables.LinetypeTextSegment.Scale">
            <summary>
            Gets or sets the scale of the text relative to the scale of the linetype.
            </summary>
        </member>
        <member name="M:netDxf.Tables.LinetypeTextSegment.Clone">
            <summary>
            Creates a new <c>LinetypeShapeSegment</c> that is a copy of the current instance.
            </summary>
            <returns>A new <c>LinetypeShapeSegment</c> that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Tables.ShapeStyle">
            <summary>
            Represent a shape style.
            </summary>
        </member>
        <member name="P:netDxf.Tables.ShapeStyle.Default">
            <summary>
            Gets the default shape style
            </summary>
            <remarks>AutoCad stores the shapes for the predefined complex linetypes in the ltypeshp.shx file.</remarks>
        </member>
        <member name="M:netDxf.Tables.ShapeStyle.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>ShapeStyle</c> class.
            </summary>
            <param name="file">Shape definitions SHX file.</param>
        </member>
        <member name="M:netDxf.Tables.ShapeStyle.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>ShapeStyle</c> class.
            </summary>
            <param name="name">Shape style name.</param>
            <param name="file">Shape definitions SHX file.</param>
        </member>
        <member name="P:netDxf.Tables.ShapeStyle.File">
            <summary>
            Gets the shape SHX file name.
            </summary>
        </member>
        <member name="P:netDxf.Tables.ShapeStyle.Size">
            <summary>
            Gets the shape size.
            </summary>
            <remarks>This value seems to have no effect on shapes or complex line types with shapes. Default: 0.0.</remarks>
        </member>
        <member name="P:netDxf.Tables.ShapeStyle.WidthFactor">
            <summary>
            Gets the shape width factor.
            </summary>
            <remarks>This value seems to have no effect on shapes or complex line types with shapes. Default: 1.0.</remarks>
        </member>
        <member name="P:netDxf.Tables.ShapeStyle.ObliqueAngle">
            <summary>
            Gets the shape oblique angle in degrees.
            </summary>
            <remarks>This value seems to have no effect on shapes or complex line types with shapes. Default: 0.0.</remarks>
        </member>
        <member name="P:netDxf.Tables.ShapeStyle.Owner">
            <summary>
            Gets the owner of the actual shape style.
            </summary>
        </member>
        <member name="M:netDxf.Tables.ShapeStyle.ContainsShapeName(System.String)">
            <summary>
            Checks if the actual shape style contains a shape with the specified name.
            </summary>
            <param name="name">Shape name.</param>
            <returns>True if the shape style that contains a shape with the specified name, false otherwise.</returns>
            <remarks>If the actual shape style belongs to a document, it will look for the SHP file also in the document support folders.</remarks>
        </member>
        <member name="M:netDxf.Tables.ShapeStyle.ShapeNumber(System.String)">
            <summary>
            Gets the number of the shape with the specified name.
            </summary>
            <param name="name">Name of the shape.</param>
            <returns>The number of the shape, 0 in case the shape has not been found.</returns>
            <remarks>If the actual shape style belongs to a document, it will look for the SHP file also in the document support folders.</remarks>
        </member>
        <member name="M:netDxf.Tables.ShapeStyle.ShapeName(System.Int16)">
            <summary>
            Gets the name of the shape with the specified number.
            </summary>
            <param name="number">Number of the shape.</param>
            <returns>The name of the shape, empty in case the shape has not been found.</returns>
            <remarks>If the actual shape style belongs to a document, it will look for the SHP file also in the document support folders.</remarks>
        </member>
        <member name="M:netDxf.Tables.ShapeStyle.Clone(System.String)">
            <summary>
            Creates a new TextStyle that is a copy of the current instance.
            </summary>
            <param name="newName">TextStyle name of the copy.</param>
            <returns>A new TextStyle that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Tables.ShapeStyle.Clone">
            <summary>
            Creates a new TextStyle that is a copy of the current instance.
            </summary>
            <returns>A new TextStyle that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Tables.TableObject">
            <summary>
            Defines classes that can be accessed by name. They are usually part of the DXF TABLE section but can also be part of the OBJECTS section.
            </summary>
        </member>
        <member name="M:netDxf.Tables.TableObject.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>TableObject</c> class.
            </summary>
            <param name="name">Table name. The following characters \&lt;&gt;/?":;*|,=` are not supported for table object names.</param>
            <param name="codeName">Table <see cref="T:netDxf.DxfObjectCode">code name</see>.</param>
            <param name="checkName">Defines if the table object name needs to be checked for invalid characters.</param>
        </member>
        <member name="P:netDxf.Tables.TableObject.Name">
            <summary>
            Gets the name of the table object.
            </summary>
            <remarks>Table object names are case insensitive.</remarks>
        </member>
        <member name="P:netDxf.Tables.TableObject.IsReserved">
            <summary>
            Gets if the table object is reserved and cannot be deleted.
            </summary>
        </member>
        <member name="P:netDxf.Tables.TableObject.InvalidCharacters">
            <summary>
            Gets the array of characters not supported as table object names.
            </summary>
        </member>
        <member name="P:netDxf.Tables.TableObject.XData">
            <summary>
            Gets the table <see cref="T:netDxf.Collections.XDataDictionary">extended data</see>.
            </summary>
        </member>
        <member name="M:netDxf.Tables.TableObject.IsValidName(System.String)">
            <summary>
            Checks if a string is valid as a table object name.
            </summary>
            <param name="name">String to check.</param>
            <returns>True if the string is valid as a table object name, or false otherwise.</returns>
        </member>
        <member name="M:netDxf.Tables.TableObject.SetName(System.String,System.Boolean)">
            <summary>
            Hack to change the table name without having to check its name. Some invalid characters are used for internal purposes only.
            </summary>
            <param name="newName">Table object new name.</param>
        </member>
        <member name="M:netDxf.Tables.TableObject.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:netDxf.Tables.TableObject.CompareTo(System.Object)">
            <summary>
            Compares the current TableObject with another TableObject of the same type.
            </summary>
            <param name="other">A TableObject to compare with this TableObject.</param>
            <returns>
            An integer that indicates the relative order of the table objects being compared.
            The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.
            Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
            <remarks>If both table objects are no of the same type it will return zero. The comparison is made by their names.</remarks>
        </member>
        <member name="M:netDxf.Tables.TableObject.CompareTo(netDxf.Tables.TableObject)">
            <summary>
            Compares the current TableObject with another TableObject of the same type.
            </summary>
            <param name="other">A TableObject to compare with this TableObject.</param>
            <returns>
            An integer that indicates the relative order of the table objects being compared.
            The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.
            Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
            <remarks>If both table objects are not of the same type it will return zero. The comparison is made by their names.</remarks>
        </member>
        <member name="M:netDxf.Tables.TableObject.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:netDxf.Tables.TableObject.Equals(System.Object)">
            <summary>
            Check if two TableObject are equal.
            </summary>
            <param name="other">Another TableObject to compare to.</param>
            <returns>True if two TableObject are equal or false in any other case.</returns>
            <remarks>
            Two TableObjects are considered equals if their names are the same, regardless of their internal values.
            This is done this way because in a dxf two TableObjects cannot have the same name.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.TableObject.Equals(netDxf.Tables.TableObject)">
            <summary>
            Check if two TableObject are equal.
            </summary>
            <param name="other">Another TableObject to compare to.</param>
            <returns>True if two TableObject are equal or false in any other case.</returns>
            <remarks>
            Two TableObjects are considered equals if their names are the same, regardless of their internal values.
            This is done this way because in a dxf two TableObjects cannot have the same name.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.TableObject.Clone(System.String)">
            <summary>
            Creates a new table object that is a copy of the current instance.
            </summary>
            <param name="newName">TableObject name of the copy.</param>
            <returns>A new table object that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Tables.TableObject.Clone">
            <summary>
            Creates a new table object that is a copy of the current instance.
            </summary>
            <returns>A new table object that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Tables.TableObjectChangedEventArgs`1">
            <summary>
            Event data for changes or substitutions of table objects in entities or other tables.
            </summary>
            <typeparam name="T">A table object</typeparam>
        </member>
        <member name="M:netDxf.Tables.TableObjectChangedEventArgs`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of <c>TableObjectModifiedEventArgs</c>.
            </summary>
            <param name="oldTable">The previous table object.</param>
            <param name="newTable">The new table object.</param>
        </member>
        <member name="P:netDxf.Tables.TableObjectChangedEventArgs`1.OldValue">
            <summary>
            Gets the previous property value.
            </summary>
        </member>
        <member name="P:netDxf.Tables.TableObjectChangedEventArgs`1.NewValue">
            <summary>
            Gets or sets the new property value.
            </summary>
        </member>
        <member name="T:netDxf.Tables.TextStyle">
            <summary>
            Represents a text style.
            </summary>
        </member>
        <member name="F:netDxf.Tables.TextStyle.DefaultName">
            <summary>
            Default text style name.
            </summary>
        </member>
        <member name="P:netDxf.Tables.TextStyle.Default">
            <summary>
            Gets the default text style.
            </summary>
        </member>
        <member name="M:netDxf.Tables.TextStyle.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>TextStyle</c> class.
            </summary>
            <param name="font">Text style font file name with full or relative path.</param>
            <remarks>
            The font file name, without the extension, will also be used as the name of the text style.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.TextStyle.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>TextStyle</c> class.
            </summary>
            <param name="name">Text style name.</param>
            <param name="font">Text style font file name with full or relative path.</param>
        </member>
        <member name="M:netDxf.Tables.TextStyle.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>TextStyle</c> class.
            </summary>
            <param name="name">Text style name.</param>
            <param name="font">Text style font file name with full or relative path.</param>
            <param name="checkName">Specifies if the style name has to be checked.</param>
        </member>
        <member name="M:netDxf.Tables.TextStyle.#ctor(System.String,netDxf.Tables.FontStyle)">
            <summary>
            Initializes a new instance of the <c>TextStyle</c> class exclusively to be used with true type fonts.
            </summary>
            <param name="fontFamily">True type font family name.</param>
            <param name="fontStyle">True type font style</param>
            <remarks>
            This constructor is to be use only with true type fonts.
            The fontFamily value will also be used as the name of the text style.
            </remarks>
        </member>
        <member name="M:netDxf.Tables.TextStyle.#ctor(System.String,System.String,netDxf.Tables.FontStyle)">
            <summary>
            Initializes a new instance of the <c>TextStyle</c> class exclusively to be used with true type fonts.
            </summary>
            <param name="name">Text style name.</param>
            <param name="fontFamily">True type font family name.</param>
            <param name="fontStyle">True type font style</param>
            <remarks>This constructor is to be use only with true type fonts.</remarks>
        </member>
        <member name="M:netDxf.Tables.TextStyle.#ctor(System.String,System.String,netDxf.Tables.FontStyle,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>TextStyle</c> class exclusively to be used with true type fonts.
            </summary>
            <param name="name">Text style name.</param>
            <param name="fontFamily">True type font family name.</param>
            <param name="fontStyle">True type font style</param>
            <param name="checkName">Specifies if the style name has to be checked.</param>
            <remarks>This constructor is to be use only with true type fonts.</remarks>
        </member>
        <member name="P:netDxf.Tables.TextStyle.FontFile">
            <summary>
            Gets or sets the text style font file name.
            </summary>
            <remarks>
            When this value is used for true type fonts should be present in the Font system folder.<br />
            When the style does not contain any information for the file the font information will be saved in the extended data when saved to a DXF,
            this is only applicable for true type fonts.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.TextStyle.BigFont">
            <summary>
            Gets or sets an Asian-language Big Font file.
            </summary>
            <remarks>Only ACAD compiled shape SHX fonts are valid for creating Big Fonts.</remarks>
        </member>
        <member name="P:netDxf.Tables.TextStyle.FontFamilyName">
            <summary>
            Gets or sets the true type font family name.
            </summary>
            <remarks>
            When the font family name is manually specified the file font will not be used and it will be set to empty,
            the font style will also we set to FontStyle.Regular.
            In this case the font information will be stored in the style extended data when saved to a DXF.<br />
            This value is only applicable for true type fonts.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.TextStyle.FontStyle">
            <summary>
            Gets or sets the true type font style.
            </summary>
            <remarks>
            The font style value is ignored and will always return FontStyle.Regular when a font file has been specified.<br />
            All styles might or might not be available for the current font family.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.TextStyle.Height">
            <summary>
            Gets or sets the text height.
            </summary>
            <remarks>Fixed text height; 0 if not fixed.</remarks>
        </member>
        <member name="P:netDxf.Tables.TextStyle.WidthFactor">
            <summary>
            Gets or sets the text width factor.
            </summary>
            <remarks>Valid values range from 0.01 to 100. Default: 1.0.</remarks>
        </member>
        <member name="P:netDxf.Tables.TextStyle.ObliqueAngle">
            <summary>
            Gets or sets the font oblique angle in degrees.
            </summary>
            <remarks>Valid values range from -85 to 85. Default: 0.0.</remarks>
        </member>
        <member name="P:netDxf.Tables.TextStyle.IsVertical">
            <summary>
            Gets or sets the text is vertical.
            </summary>
        </member>
        <member name="P:netDxf.Tables.TextStyle.IsBackward">
            <summary>
            Gets or sets if the text is backward (mirrored in X).
            </summary>
        </member>
        <member name="P:netDxf.Tables.TextStyle.IsUpsideDown">
            <summary>
            Gets or sets if the text is upside down (mirrored in Y).
            </summary>
        </member>
        <member name="P:netDxf.Tables.TextStyle.Owner">
            <summary>
            Gets the owner of the actual text style.
            </summary>
        </member>
        <member name="M:netDxf.Tables.TextStyle.TrueTypeFontFamilyName(System.String)">
            <summary>
            Find the font family name of an specified TTF font file.
            </summary>
            <param name="ttfFont">TTF font file.</param>
            <returns>The font family name of the specified TTF font file.</returns>
            <remarks>This method will return an empty string if the specified font is not found in its path or the system font folder or if it is not a valid TTF font.</remarks>
        </member>
        <member name="M:netDxf.Tables.TextStyle.Clone(System.String)">
            <summary>
            Creates a new TextStyle that is a copy of the current instance.
            </summary>
            <param name="newName">TextStyle name of the copy.</param>
            <returns>A new TextStyle that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Tables.TextStyle.Clone">
            <summary>
            Creates a new TextStyle that is a copy of the current instance.
            </summary>
            <returns>A new TextStyle that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Tables.UCS">
            <summary>
            Represents a User Coordinate System.
            </summary>
        </member>
        <member name="M:netDxf.Tables.UCS.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>UCS</c> class.
            </summary>
            <param name="name">User coordinate system name.</param>
        </member>
        <member name="M:netDxf.Tables.UCS.#ctor(System.String,netDxf.Vector3,netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Initializes a new instance of the <c>UCS</c> class.
            </summary>
            <param name="name">User coordinate system name.</param>
            <param name="origin">Origin in WCS.</param>
            <param name="xDirection">X-axis direction in WCS.</param>
            <param name="yDirection">Y-axis direction in WCS.</param>
            <remarks>
            The x-axis direction and y-axis direction must be perpendicular.
            </remarks>
        </member>
        <member name="P:netDxf.Tables.UCS.Origin">
            <summary>
            Gets or sets the user coordinate system origin in WCS.
            </summary>
        </member>
        <member name="P:netDxf.Tables.UCS.XAxis">
            <summary>
            Gets the user coordinate system x-axis direction in WCS.
            </summary>
        </member>
        <member name="P:netDxf.Tables.UCS.YAxis">
            <summary>
            Gets the user coordinate system y-axis direction in WCS.
            </summary>
        </member>
        <member name="P:netDxf.Tables.UCS.ZAxis">
            <summary>
            Gets the user coordinate system z-axis direction in WCS.
            </summary>
        </member>
        <member name="P:netDxf.Tables.UCS.Elevation">
            <summary>
            Gets or sets the user coordinate system elevation.
            </summary>
        </member>
        <member name="P:netDxf.Tables.UCS.Owner">
            <summary>
            Gets the owner of the actual user coordinate system.
            </summary>
        </member>
        <member name="M:netDxf.Tables.UCS.SetAxis(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Sets the user coordinate system x-axis and y-axis direction.
            </summary>
            <param name="xDirection">X-axis direction in WCS.</param>
            <param name="yDirection">Y-axis direction in WCS.</param>
        </member>
        <member name="M:netDxf.Tables.UCS.FromXAxisAndPointOnXYplane(System.String,netDxf.Vector3,netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Creates a new user coordinate system from the x-axis and a point on XY plane.
            </summary>
            <param name="name">User coordinate system name.</param>
            <param name="origin">Origin in WCS.</param>
            <param name="xDirection">X-axis direction in WCS.</param>
            <param name="pointOnPlaneXY">Point on the XYplane.</param>
            <returns>A new user coordinate system.</returns>
        </member>
        <member name="M:netDxf.Tables.UCS.FromNormal(System.String,netDxf.Vector3,netDxf.Vector3,System.Double)">
            <summary>
            Creates a new user coordinate system from the XY plane normal (z-axis).
            </summary>
            <param name="name">User coordinate system name.</param>
            <param name="origin">Origin in WCS.</param>
            <param name="normal">XY plane normal (z-axis).</param>
            <param name="rotation">The counter-clockwise angle in radians along the normal (z-axis).</param>
            <returns>A new user coordinate system.</returns>
            <remarks>This method uses the ArbitraryAxis algorithm to obtain the user coordinate system x-axis and y-axis.</remarks>
        </member>
        <member name="M:netDxf.Tables.UCS.Clone(System.String)">
            <summary>
            Creates a new UCS that is a copy of the current instance.
            </summary>
            <param name="newName">UCS name of the copy.</param>
            <returns>A new UCS that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Tables.UCS.Clone">
            <summary>
            Creates a new UCS that is a copy of the current instance.
            </summary>
            <returns>A new UCS that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Tables.View.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>View</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Tables.View.Owner">
            <summary>
            Gets the owner of the actual view.
            </summary>
        </member>
        <member name="M:netDxf.Tables.View.Clone(System.String)">
            <summary>
            Creates a new View that is a copy of the current instance.
            </summary>
            <param name="newName">View name of the copy.</param>
            <returns>A new View that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Tables.View.Clone">
            <summary>
            Creates a new View that is a copy of the current instance.
            </summary>
            <returns>A new View that is a copy of this instance.</returns>
        </member>
        <member name="F:netDxf.Tables.ViewModeFlags.Off">
            <summary>
            Turned off.
            </summary>
        </member>
        <member name="F:netDxf.Tables.ViewModeFlags.Perspective">
            <summary>
            Perspective view active.
            </summary>
        </member>
        <member name="F:netDxf.Tables.ViewModeFlags.FrontClippingPlane">
            <summary>
            Front clipping on.
            </summary>
        </member>
        <member name="F:netDxf.Tables.ViewModeFlags.BackClippingPlane">
            <summary>
            Back clipping on.
            </summary>
        </member>
        <member name="F:netDxf.Tables.ViewModeFlags.UCSFollow">
            <summary>
            UCS Follow mode on.
            </summary>
        </member>
        <member name="F:netDxf.Tables.ViewModeFlags.FrontClipNotAtEye">
            <summary>
            Front clip not at eye. If on, the front clip distance (FRONTZ) determines the front clipping plane.
            If off, FRONTZ is ignored, and the front clipping plane is set to pass through the camera point (vectors behind the camera are not displayed).
            This flag is ignored if the front-clipping bit (2) is off.
            </summary>
        </member>
        <member name="T:netDxf.Tables.VPort">
            <summary>
            Represents a document viewport.
            </summary>
        </member>
        <member name="F:netDxf.Tables.VPort.DefaultName">
            <summary>
            Default VPort name.
            </summary>
        </member>
        <member name="P:netDxf.Tables.VPort.Active">
            <summary>
            Gets the active viewport.
            </summary>
        </member>
        <member name="M:netDxf.Tables.VPort.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>VPort</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Tables.VPort.ViewCenter">
            <summary>
            Gets or sets the view center point in DCS (Display Coordinate System)
            </summary>
        </member>
        <member name="P:netDxf.Tables.VPort.SnapBasePoint">
            <summary>
            Gets or sets the snap base point in DCS (Display Coordinate System)
            </summary>
        </member>
        <member name="P:netDxf.Tables.VPort.SnapSpacing">
            <summary>
            Gets or sets the snap spacing X and Y.
            </summary>
        </member>
        <member name="P:netDxf.Tables.VPort.GridSpacing">
            <summary>
            Gets or sets the grid spacing X and Y.
            </summary>
        </member>
        <member name="P:netDxf.Tables.VPort.ViewDirection">
            <summary>
            Gets or sets the view direction from target point in WCS (World Coordinate System).
            </summary>
        </member>
        <member name="P:netDxf.Tables.VPort.ViewTarget">
            <summary>
            Gets or sets the view target point in WCS (World Coordinate System).
            </summary>
        </member>
        <member name="P:netDxf.Tables.VPort.ViewHeight">
            <summary>
            Gets or sets the view height.
            </summary>
        </member>
        <member name="P:netDxf.Tables.VPort.ViewAspectRatio">
            <summary>
            Gets or sets the view aspect ratio (view width/view height).
            </summary>
        </member>
        <member name="P:netDxf.Tables.VPort.ShowGrid">
            <summary>
            Gets or sets the grid on/off.
            </summary>
        </member>
        <member name="P:netDxf.Tables.VPort.SnapMode">
            <summary>
            Gets or sets the snap mode on/off.
            </summary>
        </member>
        <member name="P:netDxf.Tables.VPort.Owner">
            <summary>
            Gets the owner of the actual viewport.
            </summary>
        </member>
        <member name="M:netDxf.Tables.VPort.Clone(System.String)">
            <summary>
            Creates a new VPort that is a copy of the current instance.
            </summary>
            <param name="newName">VPort name of the copy.</param>
            <returns>A new VPort that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Tables.VPort.Clone">
            <summary>
            Creates a new VPort that is a copy of the current instance.
            </summary>
            <returns>A new VPort that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.Transparency">
            <summary>
            Represents the transparency of a layer or an entity.
            </summary>
            <remarks>
            When the transparency of an entity is ByLayer the code 440 will not appear in the dxf,
            but for comparison purposes the ByLayer transparency is assigned a value of -1.
            </remarks>
        </member>
        <member name="P:netDxf.Transparency.ByLayer">
            <summary>
            Gets the ByLayer transparency.
            </summary>
        </member>
        <member name="P:netDxf.Transparency.ByBlock">
            <summary>
            Gets the ByBlock transparency.
            </summary>
        </member>
        <member name="M:netDxf.Transparency.#ctor">
            <summary>
            Initializes a new instance of the <c>Transparency</c> class.
            </summary>
        </member>
        <member name="M:netDxf.Transparency.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <c>Transparency</c> class.
            </summary>
            <param name="value">Alpha value range from 0 to 90.</param>
            <remarks>
            Accepted transparency values range from 0 (opaque) to 90 (almost transparent), the reserved values -1 and 100 represents ByLayer and ByBlock transparency.
            </remarks>
        </member>
        <member name="P:netDxf.Transparency.IsByLayer">
            <summary>
            Defines if the transparency is defined by layer.
            </summary>
        </member>
        <member name="P:netDxf.Transparency.IsByBlock">
            <summary>
            Defines if the transparency is defined by block.
            </summary>
        </member>
        <member name="P:netDxf.Transparency.Value">
            <summary>
            Gets or sets the transparency value range from 0 to 90.
            </summary>
            <remarks>
            Accepted transparency values range from 0 to 90, the reserved values -1 and 100 represents ByLayer and ByBlock.
            </remarks>
        </member>
        <member name="M:netDxf.Transparency.ToAlphaValue(netDxf.Transparency)">
            <summary>
            Gets the transparency value from a <see cref="T:netDxf.Transparency">transparency</see> object.
            </summary>
            <param name="transparency">A <see cref="T:netDxf.Transparency">transparency</see>.</param>
            <returns>A transparency value.</returns>
        </member>
        <member name="M:netDxf.Transparency.FromAlphaValue(System.Int32)">
            <summary>
            Gets the <see cref="T:netDxf.Transparency">transparency</see> object from a transparency value.
            </summary>
            <param name="value">A transparency value.</param>
            <returns>A <see cref="T:netDxf.Transparency">transparency</see></returns>
        </member>
        <member name="M:netDxf.Transparency.Clone">
            <summary>
            Creates a new transparency that is a copy of the current instance.
            </summary>
            <returns>A new transparency that is a copy of this instance.</returns>
        </member>
        <member name="M:netDxf.Transparency.Equals(netDxf.Transparency)">
            <summary>
            Check if the components of two transparencies are equal.
            </summary>
            <param name="other">Another transparency to compare to.</param>
            <returns>True if their indexes are equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Transparency.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:netDxf.Units.AngleDirection">
            <summary>
            Specifies the direction of an angle.
            </summary>
        </member>
        <member name="F:netDxf.Units.AngleDirection.CCW">
            <summary>
            Counterclockwise (right handedness).
            </summary>
        </member>
        <member name="F:netDxf.Units.AngleDirection.CW">
            <summary>
            Clockwise (left handedness).
            </summary>
        </member>
        <member name="T:netDxf.Units.AngleUnitFormat">
            <summary>
            Utility methods to format a decimal angle in degrees to its different string representations.
            </summary>
        </member>
        <member name="M:netDxf.Units.AngleUnitFormat.ToDecimal(System.Double,netDxf.Units.UnitStyleFormat)">
            <summary>
            Converts an angle value in degrees into its decimal string representation.
            </summary>
            <param name="angle">The angle value in degrees.</param>
            <param name="format">The unit style format.</param>
            <returns>A string that represents the angle in decimal units.</returns>
        </member>
        <member name="M:netDxf.Units.AngleUnitFormat.ToDegreesMinutesSeconds(System.Double,netDxf.Units.UnitStyleFormat)">
            <summary>
            Converts an angle value in degrees into its degrees, minutes and seconds string representation.
            </summary>
            <param name="angle">The angle value in degrees.</param>
            <param name="format">The unit style format.</param>
            <returns>A string that represents the angle in degrees, minutes and seconds.</returns>
        </member>
        <member name="M:netDxf.Units.AngleUnitFormat.ToGradians(System.Double,netDxf.Units.UnitStyleFormat)">
            <summary>
            Converts an angle value in degrees into its gradians string representation.
            </summary>
            <param name="angle">The angle value in degrees.</param>
            <param name="format">The unit style format.</param>
            <returns>A string that represents the angle in gradians.</returns>
        </member>
        <member name="M:netDxf.Units.AngleUnitFormat.ToRadians(System.Double,netDxf.Units.UnitStyleFormat)">
            <summary>
            Converts an angle value in degrees into its radians string representation.
            </summary>
            <param name="angle">The angle value in degrees.</param>
            <param name="format">The unit style format.</param>
            <returns>A string that represents the angle in radians.</returns>
        </member>
        <member name="T:netDxf.Units.AngleUnitType">
            <summary>
            Angular units format for creating objects.
            </summary>
        </member>
        <member name="F:netDxf.Units.AngleUnitType.DecimalDegrees">
            <summary>
            Decimal degrees.
            </summary>
        </member>
        <member name="F:netDxf.Units.AngleUnitType.DegreesMinutesSeconds">
            <summary>
            Degrees/minutes/seconds.
            </summary>
        </member>
        <member name="F:netDxf.Units.AngleUnitType.Gradians">
            <summary>
            Gradians
            </summary>
        </member>
        <member name="F:netDxf.Units.AngleUnitType.Radians">
            <summary>
            Radians
            </summary>
        </member>
        <member name="F:netDxf.Units.AngleUnitType.SurveyorUnits">
            <summary>
            Surveyor's units.
            </summary>
        </member>
        <member name="T:netDxf.Units.DrawingTime">
            <summary>
            Utility functions to handle DateTime conversions.
            </summary>
        </member>
        <member name="M:netDxf.Units.DrawingTime.ToJulianCalendar(System.DateTime)">
            <summary>
            Calculates a date represented as &lt;Julian date&gt;.&lt;Fraction of day&gt; from a <see cref="T:System.DateTime">DateTime</see> instance.
            </summary>
            <param name="date"><see cref="T:System.DateTime">DateTime</see> instance.</param>
            <returns>The date represented as &lt;Julian date&gt;.&lt;Fraction of day&gt; equivalent to the <see cref="T:System.DateTime">DateTime</see> instance.</returns>
        </member>
        <member name="M:netDxf.Units.DrawingTime.FromJulianCalendar(System.Double)">
            <summary>
            Calculates the <see cref="T:System.DateTime">DateTime</see> from a date represented as &lt;Julian date&gt;&lt;.Fraction of day&gt;.
            </summary>
            <param name="date">A date represented as &lt;Julian date&gt;.&lt;Fraction of day&gt;.</param>
            <returns>The <see cref="T:System.DateTime">DateTime</see> equivalent to the Julian date.</returns>
        </member>
        <member name="M:netDxf.Units.DrawingTime.EditingTime(System.Double)">
            <summary>
            Calculates the <see cref="T:System.TimeSpan">TimeSpan</see> from a elapsed time represented as &lt;Number of days&gt;.&lt;Fraction of day&gt;.
            </summary>
            <param name="elapsed">An elapsed time represented as &lt;Number of days&gt;.&lt;Fraction of day&gt;.</param>
            <returns>The <see cref="T:System.TimeSpan">TimeSpan</see> equivalent to the elapsed time.</returns>
        </member>
        <member name="T:netDxf.Units.DrawingUnits">
            <summary>
            Default drawing units for AutoCAD DesignCenter blocks.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Unitless">
            <summary>
            Unitless.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Inches">
            <summary>
            Inches.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Feet">
            <summary>
            Feet.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Miles">
            <summary>
            Miles.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Millimeters">
            <summary>
            Millimeters.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Centimeters">
            <summary>
            Centimeters.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Meters">
            <summary>
            Meters.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Kilometers">
            <summary>
            Kilometers.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Microinches">
            <summary>
            Microinches.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Mils">
            <summary>
            Mils (a thousandth of an inch).
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Yards">
            <summary>
            Yards.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Angstroms">
            <summary>
            Angstroms.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Nanometers">
            <summary>
            Nanometers.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Microns">
            <summary>
            Microns.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Decimeters">
            <summary>
            Decimeters.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Decameters">
            <summary>
            Decameters
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Hectometers">
            <summary>
            Hectometers.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Gigameters">
            <summary>
            Gigameters.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.AstronomicalUnits">
            <summary>
            AstronomicalUnits.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.LightYears">
            <summary>
            LightYears.
            </summary>
        </member>
        <member name="F:netDxf.Units.DrawingUnits.Parsecs">
            <summary>
            Parsecs.
            </summary>
        </member>
        <member name="T:netDxf.Units.FractionFormatType">
            <summary>
            Defines the fraction format when DIMLUNIT is set to 4 (Architectural) or 5 (Fractional).
            </summary>
        </member>
        <member name="F:netDxf.Units.FractionFormatType.Horizontal">
            <summary>
            Horizontal stacking.
            </summary>
        </member>
        <member name="F:netDxf.Units.FractionFormatType.Diagonal">
            <summary>
            Diagonal stacking.
            </summary>
        </member>
        <member name="F:netDxf.Units.FractionFormatType.NotStacked">
            <summary>
            Not stacked (for example, 1/2).
            </summary>
        </member>
        <member name="T:netDxf.Units.ImageResolutionUnits">
            <summary>
            Defines the image resolution units.
            </summary>
        </member>
        <member name="F:netDxf.Units.ImageResolutionUnits.Unitless">
            <summary>
            No units.
            </summary>
        </member>
        <member name="F:netDxf.Units.ImageResolutionUnits.Centimeters">
            <summary>
            Centimeters.
            </summary>
        </member>
        <member name="F:netDxf.Units.ImageResolutionUnits.Inches">
            <summary>
            Inches.
            </summary>
        </member>
        <member name="T:netDxf.Units.ImageUnits">
            <summary>
            AutoCAD units for inserting images.
            </summary>
            <remarks>This is what one AutoCAD unit is equal to for the purpose of inserting and scaling images with an associated resolution.</remarks>
        </member>
        <member name="F:netDxf.Units.ImageUnits.Unitless">
            <summary>
            No units.
            </summary>
        </member>
        <member name="F:netDxf.Units.ImageUnits.Millimeters">
            <summary>
            Millimeters.
            </summary>
        </member>
        <member name="F:netDxf.Units.ImageUnits.Centimeters">
            <summary>
            Centimeters.
            </summary>
        </member>
        <member name="F:netDxf.Units.ImageUnits.Meters">
            <summary>
            Meters.
            </summary>
        </member>
        <member name="F:netDxf.Units.ImageUnits.Kilometers">
            <summary>
            Kilometers.
            </summary>
        </member>
        <member name="F:netDxf.Units.ImageUnits.Inches">
            <summary>
            Inches.
            </summary>
        </member>
        <member name="F:netDxf.Units.ImageUnits.Feet">
            <summary>
            Feet.
            </summary>
        </member>
        <member name="F:netDxf.Units.ImageUnits.Yards">
            <summary>
            Yards.
            </summary>
        </member>
        <member name="F:netDxf.Units.ImageUnits.Miles">
            <summary>
            Miles.
            </summary>
        </member>
        <member name="T:netDxf.Units.LinearUnitFormat">
            <summary>
            Utility methods to format a decimal number to its different string representations.
            </summary>
        </member>
        <member name="M:netDxf.Units.LinearUnitFormat.ToScientific(System.Double,netDxf.Units.UnitStyleFormat)">
            <summary>
            Converts a length value into its scientific string representation.
            </summary>
            <param name="length">The length value.</param>
            <param name="format">The unit style format.</param>
            <returns>A string that represents the length in scientific units.</returns>
        </member>
        <member name="M:netDxf.Units.LinearUnitFormat.ToDecimal(System.Double,netDxf.Units.UnitStyleFormat)">
            <summary>
            Converts a length value into its decimal string representation.
            </summary>
            <param name="length">The length value.</param>
            <param name="format">The unit style format.</param>
            <returns>A string that represents the length in decimal units.</returns>
        </member>
        <member name="M:netDxf.Units.LinearUnitFormat.ToArchitectural(System.Double,netDxf.Units.UnitStyleFormat)">
            <summary>
            Converts a length value into its feet and fractional inches string representation.
            </summary>
            <param name="length">The length value.</param>
            <param name="format">The unit style format.</param>
            <returns>A string that represents the length in feet and fractional inches.</returns>
            <remarks>The Architectural format assumes that each drawing unit represents one inch.</remarks>
        </member>
        <member name="M:netDxf.Units.LinearUnitFormat.ToEngineering(System.Double,netDxf.Units.UnitStyleFormat)">
            <summary>
            Converts a length value into its feet and decimal inches string representation.
            </summary>
            <param name="length">The length value.</param>
            <param name="format">The unit style format.</param>
            <returns>A string that represents the length in feet and decimal inches.</returns>
            <remarks>The Engineering format assumes that each drawing unit represents one inch.</remarks>
        </member>
        <member name="M:netDxf.Units.LinearUnitFormat.ToFractional(System.Double,netDxf.Units.UnitStyleFormat)">
            <summary>
            Converts a length value into its fractional string representation.
            </summary>
            <param name="length">The length value.</param>
            <param name="format">The unit style format.</param>
            <returns>A string that represents the length in fractional units.</returns>
        </member>
        <member name="T:netDxf.Units.LinearUnitType">
            <summary>
            Linear units format for creating objects.
            </summary>
        </member>
        <member name="F:netDxf.Units.LinearUnitType.Scientific">
            <summary>
            Scientific.
            </summary>
        </member>
        <member name="F:netDxf.Units.LinearUnitType.Decimal">
            <summary>
            Decimal.
            </summary>
        </member>
        <member name="F:netDxf.Units.LinearUnitType.Engineering">
            <summary>
            Engineering.
            </summary>
        </member>
        <member name="F:netDxf.Units.LinearUnitType.Architectural">
            <summary>
            Architectural.
            </summary>
        </member>
        <member name="F:netDxf.Units.LinearUnitType.Fractional">
            <summary>
            Fractional.
            </summary>
        </member>
        <member name="F:netDxf.Units.LinearUnitType.WindowsDesktop">
            <summary>
            Microsoft Windows Desktop (decimal format using Control Panel settings for decimal separator and number grouping symbols).
            </summary>
        </member>
        <member name="T:netDxf.Units.UnitHelper">
            <summary>
            Helper methods for unit conversion.
            </summary>
        </member>
        <member name="M:netDxf.Units.UnitHelper.ConvertUnit(System.Double,netDxf.Units.DrawingUnits,netDxf.Units.DrawingUnits)">
            <summary>
            Converts a value from one drawing unit to another.
            </summary>
            <param name="value">Number to convert.</param>
            <param name="from">Original drawing units.</param>
            <param name="to">Destination drawing units.</param>
            <returns>The converted value to the new drawing units.</returns>
        </member>
        <member name="M:netDxf.Units.UnitHelper.ConversionFactor(netDxf.Units.DrawingUnits,netDxf.Units.DrawingUnits)">
            <summary>
            Gets the conversion factor between drawing units.
            </summary>
            <param name="from">Original drawing units.</param>
            <param name="to">Destination drawing units.</param>
            <returns>The conversion factor between the drawing units.</returns>
        </member>
        <member name="M:netDxf.Units.UnitHelper.ConversionFactor(netDxf.Units.ImageUnits,netDxf.Units.DrawingUnits)">
            <summary>
            Gets the conversion factor between image and drawing units.
            </summary>
            <param name="from">Original image units.</param>
            <param name="to">Destination drawing units.</param>
            <returns>The conversion factor between the units.</returns>
        </member>
        <member name="M:netDxf.Units.UnitHelper.ConversionFactor(netDxf.Units.DrawingUnits,netDxf.Units.ImageUnits)">
            <summary>
            Gets the conversion factor between units.
            </summary>
            <param name="from">Original value units.</param>
            <param name="to">Destination value units.</param>
            <returns>The conversion factor between the passed units.</returns>
        </member>
        <member name="T:netDxf.Units.UnitStyleFormat">
            <summary>
            Represents the parameters to convert linear and angular units to its string representation.
            </summary>
        </member>
        <member name="M:netDxf.Units.UnitStyleFormat.#ctor">
            <summary>
            Initializes a new instance of the <c>UnitStyleFormat</c> class.
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.LinearDecimalPlaces">
            <summary>
            Gets or sets the number of decimal places for linear units.
            </summary>
            <remarks>
            For architectural and fractional the precision used for the minimum fraction is 1/2^LinearDecimalPlaces.
            </remarks>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.AngularDecimalPlaces">
            <summary>
            Gets or sets the number of decimal places for angular units.
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.DecimalSeparator">
            <summary>
            Gets or set the decimal separator.
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.FeetInchesSeparator">
            <summary>
            Gets or sets the separator between feet and inches.
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.DegreesSymbol">
            <summary>
            Gets or set the angle degrees symbol.
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.MinutesSymbol">
            <summary>
            Gets or set the angle minutes symbol.
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.SecondsSymbol">
            <summary>
            Gets or set the angle seconds symbol.
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.RadiansSymbol">
            <summary>
            Gets or set the angle radians symbol.
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.GradiansSymbol">
            <summary>
            Gets or set the angle gradians symbol.
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.FeetSymbol">
            <summary>
            Gets or set the feet symbol.
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.InchesSymbol">
            <summary>
            Gets or set the inches symbol.
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.FractionHeightScale">
            <summary>
            Gets or sets the scale of fractions relative to dimension text height.
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.FractionType">
            <summary>
            Gets or sets the fraction format for architectural or fractional units.
            </summary>
            <remarks>
            Horizontal stacking<br/>
            Diagonal stacking<br/>
            Not stacked (for example, 1/2)
            </remarks>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.SuppressLinearLeadingZeros">
            <summary>
            Suppresses leading zeros in linear decimal dimensions (for example, 0.5000 becomes .5000).
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.SuppressLinearTrailingZeros">
            <summary>
            Suppresses trailing zeros in linear decimal dimensions (for example, 12.5000 becomes 12.5).
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.SuppressAngularLeadingZeros">
            <summary>
            Suppresses leading zeros in angular decimal dimensions (for example, 0.5000 becomes .5000).
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.SuppressAngularTrailingZeros">
            <summary>
            Suppresses trailing zeros in angular decimal dimensions (for example, 12.5000 becomes 12.5).
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.SuppressZeroFeet">
            <summary>
            Suppresses zero feet in architectural dimensions.
            </summary>
        </member>
        <member name="P:netDxf.Units.UnitStyleFormat.SuppressZeroInches">
            <summary>
            Suppresses zero inches in architectural dimensions.
            </summary>
        </member>
        <member name="T:netDxf.Vector2">
            <summary>
            Represent a two component vector of double precision.
            </summary>
        </member>
        <member name="M:netDxf.Vector2.#ctor(System.Double)">
            <summary>
            Initializes a new instance of Vector3.
            </summary>
            <param name="value">X, Y component.</param>
        </member>
        <member name="M:netDxf.Vector2.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of Vector2.
            </summary>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
        </member>
        <member name="M:netDxf.Vector2.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of Vector2.
            </summary>
            <param name="array">Array of two elements that represents the vector.</param>
        </member>
        <member name="P:netDxf.Vector2.Zero">
            <summary>
            Zero vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector2.UnitX">
            <summary>
            Unit X vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector2.UnitY">
            <summary>
            Unit Y vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector2.NaN">
            <summary>
            Represents a vector with not a number components.
            </summary>
        </member>
        <member name="P:netDxf.Vector2.X">
            <summary>
            Gets or sets the X component.
            </summary>
        </member>
        <member name="P:netDxf.Vector2.Y">
            <summary>
            Gets or sets the Y component.
            </summary>
        </member>
        <member name="P:netDxf.Vector2.Item(System.Int32)">
            <summary>
            Gets or sets a vector element defined by its index.
            </summary>
            <param name="index">Index of the element.</param>
        </member>
        <member name="P:netDxf.Vector2.IsNormalized">
            <summary>
            Gets if the vector has been normalized.
            </summary>
        </member>
        <member name="M:netDxf.Vector2.IsNaN(netDxf.Vector2)">
            <summary>
            Returns a value indicating if any component of the specified vector evaluates to a value that is not a number <see cref="F:System.Double.NaN"/>.
            </summary>
            <param name="u">Vector2.</param>
            <returns>Returns true if any component of the specified vector evaluates to <see cref="F:System.Double.NaN"/>; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Vector2.DotProduct(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the dot product of two vectors.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:netDxf.Vector2.CrossProduct(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the cross product of two vectors.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:netDxf.Vector2.Perpendicular(netDxf.Vector2)">
            <summary>
            Obtains the counter clockwise perpendicular vector.
            </summary>
            <param name="u">Vector2.</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:netDxf.Vector2.Rotate(netDxf.Vector2,System.Double)">
            <summary>
            Rotates a vector.
            </summary>
            <param name="u">Vector2.</param>
            <param name="angle">Rotation angles in radians.</param>
            <returns></returns>
        </member>
        <member name="M:netDxf.Vector2.Polar(netDxf.Vector2,System.Double,System.Double)">
            <summary>
            Obtains the polar point of another point. 
            </summary>
            <param name="u">Reference point.</param>
            <param name="distance">Distance from point u.</param>
            <param name="angle">Angle in radians.</param>
            <returns>The polar point of the specified point.</returns>
        </member>
        <member name="M:netDxf.Vector2.SquareDistance(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the square distance between two points.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>Square distance.</returns>
        </member>
        <member name="M:netDxf.Vector2.Distance(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the distance between two points.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>Distance.</returns>
        </member>
        <member name="M:netDxf.Vector2.Angle(netDxf.Vector2)">
            <summary>
            Obtains the angle of a vector.
            </summary>
            <param name="u">A Vector2.</param>
            <returns>Angle in radians.</returns>
        </member>
        <member name="M:netDxf.Vector2.Angle(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the angle of a line defined by two points.
            </summary>
            <param name="u">A Vector2.</param>
            <param name="v">A Vector2.</param>
            <returns>Angle in radians.</returns>
        </member>
        <member name="M:netDxf.Vector2.AngleBetween(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the angle between two vectors.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>Angle in radians.</returns>
        </member>
        <member name="M:netDxf.Vector2.MidPoint(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Obtains the midpoint.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:netDxf.Vector2.ArePerpendicular(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Checks if two vectors are perpendicular.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>True if are perpendicular or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector2.ArePerpendicular(netDxf.Vector2,netDxf.Vector2,System.Double)">
            <summary>
            Checks if two vectors are perpendicular.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <param name="threshold">Tolerance used.</param>
            <returns>True if are perpendicular or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector2.AreParallel(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Checks if two vectors are parallel.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>True if are parallel or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector2.AreParallel(netDxf.Vector2,netDxf.Vector2,System.Double)">
            <summary>
            Checks if two vectors are parallel.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <param name="threshold">Tolerance used.</param>
            <returns>True if are parallel or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector2.Round(netDxf.Vector2,System.Int32)">
            <summary>
            Rounds the components of a vector.
            </summary>
            <param name="u">Vector2.</param>
            <param name="numDigits">Number of decimal places in the return value.</param>
            <returns>Vector2.</returns>
        </member>
        <member name="M:netDxf.Vector2.Normalize(netDxf.Vector2)">
            <summary>
            Normalizes the vector.
            </summary>
            <param name="u">Vector to normalize</param>
            <returns>A normalized vector.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Equality(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Check if the components of two vectors are equal.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>True if the two components are equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Inequality(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Check if the components of two vectors are different.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>True if the two components are different or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Addition(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>The addition of u plus v.</returns>
        </member>
        <member name="M:netDxf.Vector2.Add(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>The addition of u plus v.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Subtraction(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The subtraction of u minus v.</returns>
        </member>
        <member name="M:netDxf.Vector2.Subtract(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The subtraction of u minus v.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_UnaryNegation(netDxf.Vector2)">
            <summary>
            Negates a vector.
            </summary>
            <param name="u">Vector2.</param>
            <returns>The negative vector of u.</returns>
        </member>
        <member name="M:netDxf.Vector2.Negate(netDxf.Vector2)">
            <summary>
            Negates a vector.
            </summary>
            <param name="u">Vector2.</param>
            <returns>The negative vector of u.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Multiply(netDxf.Vector2,System.Double)">
            <summary>
            Multiplies a vector with an scalar.
            </summary>
            <param name="u">Vector2.</param>
            <param name="a">Scalar.</param>
            <returns>The multiplication of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector2.Multiply(netDxf.Vector2,System.Double)">
            <summary>
            Multiplies a vector with an scalar.
            </summary>
            <param name="u">Vector2.</param>
            <param name="a">Scalar.</param>
            <returns>The multiplication of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Multiply(System.Double,netDxf.Vector2)">
            <summary>
            Multiplies a scalar with a vector.
            </summary>
            <param name="a">Scalar.</param>
            <param name="u">Vector3.</param>
            <returns>The multiplication of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector2.Multiply(System.Double,netDxf.Vector2)">
            <summary>
            Multiplies a scalar with a vector.
            </summary>
            <param name="a">Scalar.</param>
            <param name="u">Vector3.</param>
            <returns>The multiplication of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Multiply(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Multiplies two vectors component by component.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>The multiplication of u times v.</returns>
        </member>
        <member name="M:netDxf.Vector2.Multiply(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Multiplies two vectors component by component.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>The multiplication of u times v.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Division(netDxf.Vector2,System.Double)">
            <summary>
            Divides a vector with an scalar.
            </summary>
            <param name="u">Vector2.</param>
            <param name="a">Scalar.</param>
            <returns>The division of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector2.Divide(netDxf.Vector2,System.Double)">
            <summary>
            Divides a vector with an scalar.
            </summary>
            <param name="u">Vector2.</param>
            <param name="a">Scalar.</param>
            <returns>The division of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector2.op_Division(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Divides two vectors component by component.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>The multiplication of u times v.</returns>
        </member>
        <member name="M:netDxf.Vector2.Divide(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Divides two vectors component by component.
            </summary>
            <param name="u">Vector2.</param>
            <param name="v">Vector2.</param>
            <returns>The multiplication of u times v.</returns>
        </member>
        <member name="M:netDxf.Vector2.Normalize">
            <summary>
            Normalizes the vector.
            </summary>
        </member>
        <member name="M:netDxf.Vector2.Modulus">
            <summary>
            Obtains the modulus of the vector.
            </summary>
            <returns>Vector modulus.</returns>
        </member>
        <member name="M:netDxf.Vector2.ToArray">
            <summary>
            Returns an array that represents the vector.
            </summary>
            <returns>Array.</returns>
        </member>
        <member name="M:netDxf.Vector2.Equals(netDxf.Vector2,netDxf.Vector2)">
            <summary>
            Check if the components of two vectors are approximate equal.
            </summary>
            <param name="a">Vector2.</param>
            <param name="b">Vector2.</param>
            <returns>True if the two components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector2.Equals(netDxf.Vector2,netDxf.Vector2,System.Double)">
            <summary>
            Check if the components of two vectors are approximate equal.
            </summary>
            <param name="a">Vector2.</param>
            <param name="b">Vector2.</param>
            <param name="threshold">Maximum tolerance.</param>
            <returns>True if the two components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector2.Equals(netDxf.Vector2)">
            <summary>
            Check if the components of two vectors are approximate equals.
            </summary>
            <param name="other">Another Vector2 to compare to.</param>
            <returns>True if the three components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector2.Equals(netDxf.Vector2,System.Double)">
            <summary>
            Check if the components of two vectors are approximate equals.
            </summary>
            <param name="other">Another Vector2 to compare to.</param>
            <param name="threshold">Maximum tolerance.</param>
            <returns>True if the three components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector2.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="other">Another object to compare to.</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Vector2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:netDxf.Vector2.ToString">
            <summary>
            Obtains a string that represents the vector.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="M:netDxf.Vector2.ToString(System.IFormatProvider)">
            <summary>
            Obtains a string that represents the vector.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>A string text.</returns>
        </member>
        <member name="T:netDxf.Vector3">
            <summary>
            Represent a three component vector of double precision.
            </summary>
        </member>
        <member name="M:netDxf.Vector3.#ctor(System.Double)">
            <summary>
            Initializes a new instance of Vector3.
            </summary>
            <param name="value">X, Y, Z component.</param>
        </member>
        <member name="M:netDxf.Vector3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of Vector3.
            </summary>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
            <param name="z">Z component.</param>
        </member>
        <member name="M:netDxf.Vector3.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of Vector3.
            </summary>
            <param name="array">Array of three elements that represents the vector.</param>
        </member>
        <member name="P:netDxf.Vector3.Zero">
            <summary>
            Zero vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.UnitX">
            <summary>
            Unit X vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.UnitY">
            <summary>
            Unit Y vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.UnitZ">
            <summary>
            Unit Z vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.NaN">
            <summary>
            Represents a vector with not a number components.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.X">
            <summary>
            Gets or sets the X component.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.Y">
            <summary>
            Gets or sets the Y component.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.Z">
            <summary>
            Gets or sets the Z component.
            </summary>
        </member>
        <member name="P:netDxf.Vector3.Item(System.Int32)">
            <summary>
            Gets or sets a vector element defined by its index.
            </summary>
            <param name="index">Index of the element.</param>
        </member>
        <member name="P:netDxf.Vector3.IsNormalized">
            <summary>
            Gets if the vector has been normalized.
            </summary>
        </member>
        <member name="M:netDxf.Vector3.IsNaN(netDxf.Vector3)">
            <summary>
             Returns a value indicating if any component of the specified vector evaluates to a value that is not a number <see cref="F:System.Double.NaN"/>.
            </summary>
            <param name="u">Vector3.</param>
            <returns>Returns true if any component of the specified vector evaluates to <see cref="F:System.Double.NaN"/>; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Vector3.DotProduct(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Obtains the dot product of two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:netDxf.Vector3.CrossProduct(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Obtains the cross product of two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:netDxf.Vector3.Distance(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Obtains the distance between two points.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>Distance.</returns>
        </member>
        <member name="M:netDxf.Vector3.SquareDistance(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Obtains the square distance between two points.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>Square distance.</returns>
        </member>
        <member name="M:netDxf.Vector3.AngleBetween(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Obtains the angle between two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>Angle in radians.</returns>
        </member>
        <member name="M:netDxf.Vector3.MidPoint(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Obtains the midpoint.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>Vector3.</returns>
        </member>
        <member name="M:netDxf.Vector3.ArePerpendicular(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Checks if two vectors are perpendicular.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>True if are perpendicular or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector3.ArePerpendicular(netDxf.Vector3,netDxf.Vector3,System.Double)">
            <summary>
            Checks if two vectors are perpendicular.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <param name="threshold">Tolerance used.</param>
            <returns>True if are perpendicular or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector3.AreParallel(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Checks if two vectors are parallel.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>True if are parallel or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector3.AreParallel(netDxf.Vector3,netDxf.Vector3,System.Double)">
            <summary>
            Checks if two vectors are parallel.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <param name="threshold">Tolerance used.</param>
            <returns>True if are parallel or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector3.Round(netDxf.Vector3,System.Int32)">
            <summary>
            Rounds the components of a vector.
            </summary>
            <param name="u">Vector to round.</param>
            <param name="numDigits">Number of decimal places in the return value.</param>
            <returns>The rounded vector.</returns>
        </member>
        <member name="M:netDxf.Vector3.Normalize(netDxf.Vector3)">
            <summary>
            Normalizes the vector.
            </summary>
            <param name="u">Vector to normalize</param>
            <returns>A normalized vector.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Equality(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Check if the components of two vectors are equal.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>True if the three components are equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Inequality(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Check if the components of two vectors are different.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>True if the three components are different or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Addition(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The addition of u plus v.</returns>
        </member>
        <member name="M:netDxf.Vector3.Add(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The addition of u plus v.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Subtraction(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The subtraction of u minus v.</returns>
        </member>
        <member name="M:netDxf.Vector3.Subtract(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The subtraction of u minus v.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_UnaryNegation(netDxf.Vector3)">
            <summary>
            Negates a vector.
            </summary>
            <param name="u">Vector3.</param>
            <returns>The negative vector of u.</returns>
        </member>
        <member name="M:netDxf.Vector3.Negate(netDxf.Vector3)">
            <summary>
            Negates a vector.
            </summary>
            <param name="u">Vector3.</param>
            <returns>The negative vector of u.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Multiply(netDxf.Vector3,System.Double)">
            <summary>
            Multiplies a vector with an scalar (same as a*u, commutative property).
            </summary>
            <param name="u">Vector3.</param>
            <param name="a">Scalar.</param>
            <returns>The multiplication of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector3.Multiply(netDxf.Vector3,System.Double)">
            <summary>
            Multiplies a vector with an scalar (same as a*u, commutative property).
            </summary>
            <param name="u">Vector3.</param>
            <param name="a">Scalar.</param>
            <returns>The multiplication of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Multiply(System.Double,netDxf.Vector3)">
            <summary>
            Multiplies a scalar with a vector (same as u*a, commutative property).
            </summary>
            <param name="a">Scalar.</param>
            <param name="u">Vector3.</param>
            <returns>The multiplication of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector3.Multiply(System.Double,netDxf.Vector3)">
            <summary>
            Multiplies a scalar with a vector (same as u*a, commutative property).
            </summary>
            <param name="a">Scalar.</param>
            <param name="u">Vector3.</param>
            <returns>The multiplication of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Multiply(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Multiplies two vectors component by component.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The multiplication of u times v.</returns>
        </member>
        <member name="M:netDxf.Vector3.Multiply(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Multiplies two vectors component by component.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The multiplication of u times v.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Division(netDxf.Vector3,System.Double)">
            <summary>
            Divides an scalar with a vector.
            </summary>
            <param name="a">Scalar.</param>
            <param name="u">Vector3.</param>
            <returns>The division of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector3.Divide(netDxf.Vector3,System.Double)">
            <summary>
            Divides a vector with an scalar.
            </summary>
            <param name="u">Vector3.</param>
            <param name="a">Scalar.</param>
            <returns>The division of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector3.op_Division(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Divides two vectors component by component.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The multiplication of u times v.</returns>
        </member>
        <member name="M:netDxf.Vector3.Divide(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Divides two vectors component by component.
            </summary>
            <param name="u">Vector3.</param>
            <param name="v">Vector3.</param>
            <returns>The multiplication of u times v.</returns>
        </member>
        <member name="M:netDxf.Vector3.Normalize">
            <summary>
            Normalizes the current vector.
            </summary>
        </member>
        <member name="M:netDxf.Vector3.Modulus">
            <summary>
            Obtains the modulus of the vector.
            </summary>
            <returns>Vector modulus.</returns>
        </member>
        <member name="M:netDxf.Vector3.ToArray">
            <summary>
            Returns an array that represents the vector.
            </summary>
            <returns>Array.</returns>
        </member>
        <member name="M:netDxf.Vector3.Equals(netDxf.Vector3,netDxf.Vector3)">
            <summary>
            Check if the components of two vectors are approximate equal.
            </summary>
            <param name="a">Vector3.</param>
            <param name="b">Vector3.</param>
            <returns>True if the three components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector3.Equals(netDxf.Vector3,netDxf.Vector3,System.Double)">
            <summary>
            Check if the components of two vectors are approximate equal.
            </summary>
            <param name="a">Vector3.</param>
            <param name="b">Vector3.</param>
            <param name="threshold">Maximum tolerance.</param>
            <returns>True if the three components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector3.Equals(netDxf.Vector3)">
            <summary>
            Check if the components of two vectors are approximate equal.
            </summary>
            <param name="other">Vector3.</param>
            <returns>True if the three components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector3.Equals(netDxf.Vector3,System.Double)">
            <summary>
            Check if the components of two vectors are approximate equal.
            </summary>
            <param name="other">Vector3.</param>
            <param name="threshold">Maximum tolerance.</param>
            <returns>True if the three components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector3.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="other">Another object to compare to.</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Vector3.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:netDxf.Vector3.ToString">
            <summary>
            Obtains a string that represents the vector.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="M:netDxf.Vector3.ToString(System.IFormatProvider)">
            <summary>
            Obtains a string that represents the vector.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>A string text.</returns>
        </member>
        <member name="T:netDxf.Vector4">
            <summary>
            Represent a four component vector of double precision.
            </summary>
        </member>
        <member name="M:netDxf.Vector4.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of Vector3.
            </summary>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
            <param name="z">Z component.</param>
            <param name="w">W component.</param>
        </member>
        <member name="M:netDxf.Vector4.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of Vector4.
            </summary>
            <param name="array">Array of four elements that represents the vector.</param>
        </member>
        <member name="P:netDxf.Vector4.Zero">
            <summary>
            Zero vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector4.UnitX">
            <summary>
            Unit X vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector4.UnitY">
            <summary>
            Unit Y vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector4.UnitZ">
            <summary>
            Unit Z vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector4.UnitW">
            <summary>
            Unit W vector.
            </summary>
        </member>
        <member name="P:netDxf.Vector4.NaN">
            <summary>
            Represents a vector with not a number components.
            </summary>
        </member>
        <member name="P:netDxf.Vector4.X">
            <summary>
            Gets or sets the X component.
            </summary>
        </member>
        <member name="P:netDxf.Vector4.Y">
            <summary>
            Gets or sets the Y component.
            </summary>
        </member>
        <member name="P:netDxf.Vector4.Z">
            <summary>
            Gets or sets the Z component.
            </summary>
        </member>
        <member name="P:netDxf.Vector4.W">
            <summary>
            Gets or sets the W component.
            </summary>
        </member>
        <member name="P:netDxf.Vector4.Item(System.Int32)">
            <summary>
            Gets or sets a vector element defined by its index.
            </summary>
            <param name="index">Index of the element.</param>
        </member>
        <member name="P:netDxf.Vector4.IsNormalized">
            <summary>
            Gets if the vector has been normalized.
            </summary>
        </member>
        <member name="M:netDxf.Vector4.IsNaN(netDxf.Vector4)">
            <summary>
             Returns a value indicating if any component of the specified vector evaluates to a value that is not a number <see cref="F:System.Double.NaN"/>.
            </summary>
            <param name="u">Vector3.</param>
            <returns>Returns true if any component of the specified vector evaluates to <see cref="F:System.Double.NaN"/>; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Vector4.DotProduct(netDxf.Vector4,netDxf.Vector4)">
            <summary>
            Obtains the dot product of two vectors.
            </summary>
            <param name="u">Vector4.</param>
            <param name="v">Vector4.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:netDxf.Vector4.Distance(netDxf.Vector4,netDxf.Vector4)">
            <summary>
            Obtains the distance between two points.
            </summary>
            <param name="u">Vector4.</param>
            <param name="v">Vector4.</param>
            <returns>Distance.</returns>
        </member>
        <member name="M:netDxf.Vector4.SquareDistance(netDxf.Vector4,netDxf.Vector4)">
            <summary>
            Obtains the square distance between two points.
            </summary>
            <param name="u">Vector4.</param>
            <param name="v">Vector4.</param>
            <returns>Square distance.</returns>
        </member>
        <member name="M:netDxf.Vector4.Round(netDxf.Vector4,System.Int32)">
            <summary>
            Rounds the components of a vector.
            </summary>
            <param name="u">Vector to round.</param>
            <param name="numDigits">Number of decimal places in the return value.</param>
            <returns>The rounded vector.</returns>
        </member>
        <member name="M:netDxf.Vector4.Normalize(netDxf.Vector4)">
            <summary>
            Normalizes the vector.
            </summary>
            <param name="u">Vector to normalize</param>
            <returns>A normalized vector.</returns>
        </member>
        <member name="M:netDxf.Vector4.op_Equality(netDxf.Vector4,netDxf.Vector4)">
            <summary>
            Check if the components of two vectors are equal.
            </summary>
            <param name="u">Vector4.</param>
            <param name="v">Vector4.</param>
            <returns>True if the three components are equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector4.op_Inequality(netDxf.Vector4,netDxf.Vector4)">
            <summary>
            Check if the components of two vectors are different.
            </summary>
            <param name="u">Vector4.</param>
            <param name="v">Vector4.</param>
            <returns>True if the three components are different or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector4.op_Addition(netDxf.Vector4,netDxf.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="u">Vector4.</param>
            <param name="v">Vector4.</param>
            <returns>The addition of u plus v.</returns>
        </member>
        <member name="M:netDxf.Vector4.Add(netDxf.Vector4,netDxf.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="u">Vector4.</param>
            <param name="v">Vector4.</param>
            <returns>The addition of u plus v.</returns>
        </member>
        <member name="M:netDxf.Vector4.op_Subtraction(netDxf.Vector4,netDxf.Vector4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="u">Vector4.</param>
            <param name="v">Vector4.</param>
            <returns>The subtraction of u minus v.</returns>
        </member>
        <member name="M:netDxf.Vector4.Subtract(netDxf.Vector4,netDxf.Vector4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="u">Vector4.</param>
            <param name="v">Vector4.</param>
            <returns>The subtraction of u minus v.</returns>
        </member>
        <member name="M:netDxf.Vector4.op_UnaryNegation(netDxf.Vector4)">
            <summary>
            Negates a vector.
            </summary>
            <param name="u">Vector4.</param>
            <returns>The negative vector of u.</returns>
        </member>
        <member name="M:netDxf.Vector4.Negate(netDxf.Vector4)">
            <summary>
            Negates a vector.
            </summary>
            <param name="u">Vector4.</param>
            <returns>The negative vector of u.</returns>
        </member>
        <member name="M:netDxf.Vector4.op_Multiply(netDxf.Vector4,System.Double)">
            <summary>
            Multiplies a vector with an scalar (same as a*u, commutative property).
            </summary>
            <param name="u">Vector4.</param>
            <param name="a">Scalar.</param>
            <returns>The multiplication of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector4.Multiply(netDxf.Vector4,System.Double)">
            <summary>
            Multiplies a vector with an scalar (same as a*u, commutative property).
            </summary>
            <param name="u">Vector4.</param>
            <param name="a">Scalar.</param>
            <returns>The multiplication of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector4.op_Multiply(System.Double,netDxf.Vector4)">
            <summary>
            Multiplies a scalar with a vector (same as u*a, commutative property).
            </summary>
            <param name="a">Scalar.</param>
            <param name="u">Vector4.</param>
            <returns>The multiplication of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector4.Multiply(System.Double,netDxf.Vector4)">
            <summary>
            Multiplies a scalar with a vector (same as u*a, commutative property).
            </summary>
            <param name="a">Scalar.</param>
            <param name="u">Vector4.</param>
            <returns>The multiplication of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector4.op_Multiply(netDxf.Vector4,netDxf.Vector4)">
            <summary>
            Multiplies two vectors component by component.
            </summary>
            <param name="u">Vector4.</param>
            <param name="v">Vector4.</param>
            <returns>The multiplication of u times v.</returns>
        </member>
        <member name="M:netDxf.Vector4.Multiply(netDxf.Vector4,netDxf.Vector4)">
            <summary>
            Multiplies two vectors component by component.
            </summary>
            <param name="u">Vector4.</param>
            <param name="v">Vector4.</param>
            <returns>The multiplication of u times v.</returns>
        </member>
        <member name="M:netDxf.Vector4.op_Division(netDxf.Vector4,System.Double)">
            <summary>
            Divides an scalar with a vector.
            </summary>
            <param name="a">Scalar.</param>
            <param name="u">Vector4.</param>
            <returns>The division of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector4.Divide(netDxf.Vector4,System.Double)">
            <summary>
            Divides a vector with an scalar.
            </summary>
            <param name="u">Vector4.</param>
            <param name="a">Scalar.</param>
            <returns>The division of u times a.</returns>
        </member>
        <member name="M:netDxf.Vector4.op_Division(netDxf.Vector4,netDxf.Vector4)">
            <summary>
            Divides two vectors component by component.
            </summary>
            <param name="u">Vector4.</param>
            <param name="v">Vector4.</param>
            <returns>The multiplication of u times v.</returns>
        </member>
        <member name="M:netDxf.Vector4.Divide(netDxf.Vector4,netDxf.Vector4)">
            <summary>
            Divides two vectors component by component.
            </summary>
            <param name="u">Vector4.</param>
            <param name="v">Vector4.</param>
            <returns>The multiplication of u times v.</returns>
        </member>
        <member name="M:netDxf.Vector4.Normalize">
            <summary>
            Normalizes the current vector.
            </summary>
        </member>
        <member name="M:netDxf.Vector4.Modulus">
            <summary>
            Obtains the modulus of the vector.
            </summary>
            <returns>Vector modulus.</returns>
        </member>
        <member name="M:netDxf.Vector4.ToArray">
            <summary>
            Returns an array that represents the vector.
            </summary>
            <returns>Array.</returns>
        </member>
        <member name="M:netDxf.Vector4.Equals(netDxf.Vector4,netDxf.Vector4)">
            <summary>
            Check if the components of two vectors are approximate equal.
            </summary>
            <param name="a">Vector4.</param>
            <param name="b">Vector4.</param>
            <returns>True if the four components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector4.Equals(netDxf.Vector4,netDxf.Vector4,System.Double)">
            <summary>
            Check if the components of two vectors are approximate equal.
            </summary>
            <param name="a">Vector4.</param>
            <param name="b">Vector4.</param>
            <param name="threshold">Maximum tolerance.</param>
            <returns>True if the four components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector4.Equals(netDxf.Vector4)">
            <summary>
            Check if the components of two vectors are approximate equal.
            </summary>
            <param name="other">Vector4.</param>
            <returns>True if the four components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector4.Equals(netDxf.Vector4,System.Double)">
            <summary>
            Check if the components of two vectors are approximate equal.
            </summary>
            <param name="other">Vector4.</param>
            <param name="threshold">Maximum tolerance.</param>
            <returns>True if the four components are almost equal or false in any other case.</returns>
        </member>
        <member name="M:netDxf.Vector4.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="other">Another object to compare to.</param>
            <returns>True if obj and this instance are the same type and represent the same value; otherwise, false.</returns>
        </member>
        <member name="M:netDxf.Vector4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:netDxf.Vector4.ToString">
            <summary>
            Obtains a string that represents the vector.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="M:netDxf.Vector4.ToString(System.IFormatProvider)">
            <summary>
            Obtains a string that represents the vector.
            </summary>
            <param name="provider">An IFormatProvider interface implementation that supplies culture-specific formatting information. </param>
            <returns>A string text.</returns>
        </member>
        <member name="T:netDxf.XData">
            <summary>
            Represents the extended data information.
            </summary>
            <remarks>
            Do not store your own data under the ACAD application registry it is used by some entities to store special data,
            it might be overwritten when the file is saved. Instead, create a new application registry and store your data there.
            </remarks>
        </member>
        <member name="M:netDxf.XData.#ctor(netDxf.Tables.ApplicationRegistry)">
            <summary>
            Initialize a new instance of the <c>XData</c> class .
            </summary>
            <param name="appReg">Name of the application associated with the list of extended data records.</param>
        </member>
        <member name="P:netDxf.XData.ApplicationRegistry">
            <summary>
            Gets or sets the name of the application associated with the list of extended data records.
            </summary>
        </member>
        <member name="P:netDxf.XData.XDataRecord">
            <summary>
            Gets or sets the list of extended data records.
            </summary>
            <remarks>
            This list cannot contain a XDataRecord with a XDataCode of AppReg, this code is reserved to register the name of the application.
            Any record with this code will be omitted.
            </remarks>
        </member>
        <member name="M:netDxf.XData.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:netDxf.XData.Clone">
            <summary>
            Creates a new XData that is a copy of the current instance.
            </summary>
            <returns>A new XData that is a copy of this instance.</returns>
        </member>
        <member name="T:netDxf.XDataCode">
            <summary>
            Defines the extended data code.
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.String">
            <summary>
            Strings in extended data can be up to 255 bytes long.
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.AppReg">
            <summary>
            Application names can be up to 31 bytes long.
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.ControlString">
            <summary>
            An extended data control string can be either ‚Äú{‚Äù or ‚Äú}‚Äù.
            These braces enable applications to organize their data by subdividing the data into lists.
            The left brace begins a list, and the right brace terminates the most recent list. Lists can be nested.
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.LayerName">
            <summary>
            Name of the layer associated with the extended data
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.BinaryData">
            <summary>
            Binary data is organized into variable-length chunks.
            The maximum length of each chunk is 127 bytes.
            The binary data is represented as a string of hexadecimal digits, two per binary byte.
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.DatabaseHandle">
            <summary>
            Handles of entities in the drawing database.
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.RealX">
            <summary>
            Three real values, in the order X, Y, Z.
            They can be used as a point or vector record. AutoCAD never alters their value.
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.RealY">
            <summary>
            Three real values, in the order X, Y, Z.
            They can be used as a point or vector record. AutoCAD never alters their value.
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.RealZ">
            <summary>
            Three real values, in the order X, Y, Z.
            They can be used as a point or vector record. AutoCAD never alters their value.
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldSpacePositionX">
            <summary>
            Unlike a simple 3D point, the world space coordinates are moved, scaled, rotated, and mirrored 
            along with the parent entity to which the extended data belongs. 
            The world space position is also stretched when the STRETCH command is applied to the parent entity and
            this point lies within the select window
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldSpacePositionY">
            <summary>
            Unlike a simple 3D point, the world space coordinates are moved, scaled, rotated, and mirrored 
            along with the parent entity to which the extended data belongs. 
            The world space position is also stretched when the STRETCH command is applied to the parent entity and
            this point lies within the select window
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldSpacePositionZ">
            <summary>
            Unlike a simple 3D point, the world space coordinates are moved, scaled, rotated, and mirrored 
            along with the parent entity to which the extended data belongs. 
            The world space position is also stretched when the STRETCH command is applied to the parent entity and
            this point lies within the select window
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldSpaceDisplacementX">
            <summary>
            Also a 3D point that is scaled, rotated, and mirrored along with the parent (but is not moved or stretched)
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldSpaceDisplacementY">
            <summary>
            Also a 3D point that is scaled, rotated, and mirrored along with the parent (but is not moved or stretched)
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldSpaceDisplacementZ">
            <summary>
            Also a 3D point that is scaled, rotated, and mirrored along with the parent (but is not moved or stretched)
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldDirectionX">
            <summary>
            Also a 3D point that is rotated and mirrored along with the parent (but is not moved, scaled, or stretched)
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldDirectionY">
            <summary>
            Also a 3D point that is rotated and mirrored along with the parent (but is not moved, scaled, or stretched)
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.WorldDirectionZ">
            <summary>
            Also a 3D point that is rotated and mirrored along with the parent (but is not moved, scaled, or stretched)
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.Real">
            <summary>
            A real value.
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.Distance">
            <summary>
            A real value that is scaled along with the parent entity
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.ScaleFactor">
            <summary>
            Also a real value that is scaled along with the parent.
            The difference between a distance and a scale factor is application-defined
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.Int16">
            <summary>
            A 16-bit integer (signed or unsigned).
            </summary>
        </member>
        <member name="F:netDxf.XDataCode.Int32">
            <summary>
            A 32-bit signed integer.
            </summary>
        </member>
        <member name="T:netDxf.XDataRecord">
            <summary>
            Represents an entry in the extended data of an entity.
            </summary>
        </member>
        <member name="P:netDxf.XDataRecord.OpenControlString">
            <summary>
            An extended data control string can be either "{"or "}".
            These braces enable applications to organize their data by subdividing the data into lists.
            The left brace begins a list, and the right brace terminates the most recent list. Lists can be nested.
            </summary>
        </member>
        <member name="P:netDxf.XDataRecord.CloseControlString">
            <summary>
            An extended data control string can be either "{" or "}".
            These braces enable applications to organize their data by subdividing the data into lists.
            The left brace begins a list, and the right brace terminates the most recent list. Lists can be nested.
            </summary>
        </member>
        <member name="M:netDxf.XDataRecord.#ctor(netDxf.XDataCode,System.Object)">
            <summary>
            Initializes a new XDataRecord.
            </summary>
            <param name="code">XData code.</param>
            <param name="value">XData value.</param>
        </member>
        <member name="P:netDxf.XDataRecord.Code">
            <summary>
            Gets or set the XData code.
            </summary>
            <remarks>The only valid values are the ones defined in the <see cref="T:netDxf.XDataCode">XDataCode</see> class.</remarks>
        </member>
        <member name="P:netDxf.XDataRecord.Value">
            <summary>
            Gets or sets the XData value.
            </summary>
        </member>
        <member name="M:netDxf.XDataRecord.ToString">
            <summary>
            Obtains a string that represents the XDataRecord.
            </summary>
            <returns>A string text.</returns>
        </member>
        <member name="T:CdlToCSharp.Input">
            <summary>
            
            </summary>
        </member>
        <member name="M:RealPolynomialRootFinder.FindRoots(System.Double[])">
            <summary>
            The Jenkins‚ÄìTraub algorithm for polynomial zeros translated into pure VB.NET. It is a translation of the C++ algorithm, which in turn is a translation of the FORTRAN code by Jenkins. See Wikipedia for referances: http://en.wikipedia.org/wiki/Jenkins%E2%80%93Traub_algorithm 
            </summary>
            <param name="Input">The coefficients for the polynomial starting with the highest degree and ends on the constant, missing degree must be implemented as a 0.</param>
            <returns>All the real and complex roots that are found is returned in a list of complex numbers.</returns>
            <remarks>The maximum alloed degree polynomial for this implementation is set to 100. It can only take real coefficients.</remarks>
        </member>
    </members>
</doc>
